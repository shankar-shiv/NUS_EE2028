
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008244  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  080083d8  080083d8  000183d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  080089f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200002a4  08008c94  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08008c94  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9f4  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  0002ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000314c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00032238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002938b  00000000  00000000  00032e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119ff  00000000  00000000  0005c1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5f75  00000000  00000000  0006dbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163b2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a40  00000000  00000000  00163b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001685c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  001685e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a4 	.word	0x200002a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083bc 	.word	0x080083bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a8 	.word	0x200002a8
 80001cc:	080083bc 	.word	0x080083bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  External Interrupt to detect 1st button press and 2nd button press
 * @note
 * @retval	None
 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag == 0)) {
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ebc:	d10e      	bne.n	8000edc <HAL_GPIO_EXTI_Callback+0x30>
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10a      	bne.n	8000edc <HAL_GPIO_EXTI_Callback+0x30>
		flag++;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ed0:	701a      	strb	r2, [r3, #0]
		T1 = uwTick;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ed8:	6013      	str	r3, [r2, #0]
	} else if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag > 0)) {
		flag++;
		T2 = uwTick;
	}
}
 8000eda:	e011      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
	} else if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag > 0)) {
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee2:	d10d      	bne.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
		flag++;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ef6:	701a      	strb	r2, [r3, #0]
		T2 = uwTick;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000348 	.word	0x20000348
 8000f10:	200005a8 	.word	0x200005a8
 8000f14:	200002c0 	.word	0x200002c0
 8000f18:	200002c4 	.word	0x200002c4

08000f1c <main>:

int main(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	/* Reset of all peripherals */
	HAL_Init();
 8000f20:	f002 f94c 	bl	80031bc <HAL_Init>
	MX_GPIO_Init(); // initialize PB14, pin connected to LED2
 8000f24:	f000 fe58 	bl	8001bd8 <MX_GPIO_Init>
	UART1_Init(); // initialize UART1 for UART communication
 8000f28:	f000 fed0 	bl	8001ccc <UART1_Init>

	/* Peripheral initializations using BSP functions for all sensors*/
	BSP_ACCELERO_Init(); // initialize accelerometer
 8000f2c:	f001 fa56 	bl	80023dc <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();	 // initialize temperature sensor
 8000f30:	f001 fba4 	bl	800267c <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();	 // initialize humidity sensor
 8000f34:	f001 fb02 	bl	800253c <BSP_HSENSOR_Init>
	BSP_GYRO_Init();	 // initialize gyroscope
 8000f38:	f001 faa6 	bl	8002488 <BSP_GYRO_Init>
	BSP_PSENSOR_Init();	 // initialize pressure sensor
 8000f3c:	f001 fb70 	bl	8002620 <BSP_PSENSOR_Init>
	BSP_MAGNETO_Init();	 // initialize magnetometer
 8000f40:	f001 fb2a 	bl	8002598 <BSP_MAGNETO_Init>
	// 		accelero_interrupt_config();
	/*enable NVIC EXTI interrupt*/
	// 		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	/* Exploration Mode: Print only once*/
	//memset(message_print, 0, strlen(message_print));
	snprintf(message_print, MESSAGE_SIZE, "Entering EXPLORATION Mode \r\n");
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <main+0x98>)
 8000f46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f4a:	481b      	ldr	r0, [pc, #108]	; (8000fb8 <main+0x9c>)
 8000f4c:	f005 f948 	bl	80061e0 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print),
 8000f50:	4819      	ldr	r0, [pc, #100]	; (8000fb8 <main+0x9c>)
 8000f52:	f7ff f93d 	bl	80001d0 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5e:	4916      	ldr	r1, [pc, #88]	; (8000fb8 <main+0x9c>)
 8000f60:	4816      	ldr	r0, [pc, #88]	; (8000fbc <main+0xa0>)
 8000f62:	f003 fc13 	bl	800478c <HAL_UART_Transmit>
			0xFFFF);

	while (1) {
		if ((flag == 1) && (uwTick - T1 > 1000)) {
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <main+0xa4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10d      	bne.n	8000f8a <main+0x6e>
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <main+0xa8>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <main+0xac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f7c:	d905      	bls.n	8000f8a <main+0x6e>
			// Detect a single press
			flag = 0;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <main+0xa4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
			press = 1;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <main+0xb0>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
		}

		if ((flag == 2) && (T2 - T1 < 1000)) {
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <main+0xa4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d10d      	bne.n	8000fae <main+0x92>
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <main+0xb4>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <main+0xac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fa0:	d205      	bcs.n	8000fae <main+0x92>
			// Detect double press
			press = 2;
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <main+0xb0>)
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
			flag = 0;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <main+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
		}
		mode_selection();
 8000fae:	f000 f811 	bl	8000fd4 <mode_selection>
		if ((flag == 1) && (uwTick - T1 > 1000)) {
 8000fb2:	e7d8      	b.n	8000f66 <main+0x4a>
 8000fb4:	080083d8 	.word	0x080083d8
 8000fb8:	20000350 	.word	0x20000350
 8000fbc:	200002c8 	.word	0x200002c8
 8000fc0:	20000348 	.word	0x20000348
 8000fc4:	200005a8 	.word	0x200005a8
 8000fc8:	200002c0 	.word	0x200002c0
 8000fcc:	20000349 	.word	0x20000349
 8000fd0:	200002c4 	.word	0x200002c4

08000fd4 <mode_selection>:
 *			different states such as Normal and Warning in the respective modes.
 * @note
 *
 * @retval	None
 */
static void mode_selection() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	/* Exploration Mode */
	if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 0 && BATTLE == 0
 8000fd8:	4b62      	ldr	r3, [pc, #392]	; (8001164 <mode_selection+0x190>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d111      	bne.n	8001004 <mode_selection+0x30>
 8000fe0:	4b61      	ldr	r3, [pc, #388]	; (8001168 <mode_selection+0x194>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10d      	bne.n	8001004 <mode_selection+0x30>
 8000fe8:	4b60      	ldr	r3, [pc, #384]	; (800116c <mode_selection+0x198>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <mode_selection+0x30>
			&& press <= 1) {
 8000ff0:	4b5f      	ldr	r3, [pc, #380]	; (8001170 <mode_selection+0x19c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d805      	bhi.n	8001004 <mode_selection+0x30>
		// Normal state
		exploration();
 8000ff8:	f000 f8c4 	bl	8001184 <exploration>
		press = 0;
 8000ffc:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <mode_selection+0x19c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e047      	b.n	8001094 <mode_selection+0xc0>
	} else if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 1) {
 8001004:	4b57      	ldr	r3, [pc, #348]	; (8001164 <mode_selection+0x190>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d11b      	bne.n	8001044 <mode_selection+0x70>
 800100c:	4b56      	ldr	r3, [pc, #344]	; (8001168 <mode_selection+0x194>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d117      	bne.n	8001044 <mode_selection+0x70>
		// Come to the Warning State through interrupts or polling
		exploration_warning();
 8001014:	f000 fae2 	bl	80015dc <exploration_warning>
		if (press == 1) {
 8001018:	4b55      	ldr	r3, [pc, #340]	; (8001170 <mode_selection+0x19c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d109      	bne.n	8001034 <mode_selection+0x60>
			// Clear the warning and go back to Exploration mode
			EXPLORATION_WARNING_STATE = 0;
 8001020:	4b51      	ldr	r3, [pc, #324]	; (8001168 <mode_selection+0x194>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
			EXPLORATION = 1;
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <mode_selection+0x190>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
			press = 0;
 800102c:	4b50      	ldr	r3, [pc, #320]	; (8001170 <mode_selection+0x19c>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001032:	e02e      	b.n	8001092 <mode_selection+0xbe>
		} else if (press == 2) {
 8001034:	4b4e      	ldr	r3, [pc, #312]	; (8001170 <mode_selection+0x19c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d12a      	bne.n	8001092 <mode_selection+0xbe>
			// Ignore it
			press = 0;
 800103c:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <mode_selection+0x19c>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001042:	e026      	b.n	8001092 <mode_selection+0xbe>
		}
	} else if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 0
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <mode_selection+0x190>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d123      	bne.n	8001094 <mode_selection+0xc0>
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <mode_selection+0x194>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d11f      	bne.n	8001094 <mode_selection+0xc0>
			&& press == 2) {
 8001054:	4b46      	ldr	r3, [pc, #280]	; (8001170 <mode_selection+0x19c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d11b      	bne.n	8001094 <mode_selection+0xc0>
		/* A message "Entering BATTLE mode" is sent once to Cyrix's Lab once
		 * immediately upon entering the BATTLE mode.
		 * The press flag is cleared later in mode_selection()
		 */
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "Entering BATTLE Mode \r\n");
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <mode_selection+0x1a0>)
 800105e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001062:	4845      	ldr	r0, [pc, #276]	; (8001178 <mode_selection+0x1a4>)
 8001064:	f005 f8bc 	bl	80061e0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001068:	4843      	ldr	r0, [pc, #268]	; (8001178 <mode_selection+0x1a4>)
 800106a:	f7ff f8b1 	bl	80001d0 <strlen>
 800106e:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001070:	b29a      	uxth	r2, r3
 8001072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001076:	4940      	ldr	r1, [pc, #256]	; (8001178 <mode_selection+0x1a4>)
 8001078:	4840      	ldr	r0, [pc, #256]	; (800117c <mode_selection+0x1a8>)
 800107a:	f003 fb87 	bl	800478c <HAL_UART_Transmit>

		EXPLORATION = 0;
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <mode_selection+0x190>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
		BATTLE = 1;
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <mode_selection+0x198>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
		press = 0;
 800108a:	4b39      	ldr	r3, [pc, #228]	; (8001170 <mode_selection+0x19c>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e000      	b.n	8001094 <mode_selection+0xc0>
		if (press == 1) {
 8001092:	bf00      	nop
	}

	/* Battle Mode */
	if (EXPLORATION == 0 && BATTLE_WARNING_STATE == 0 && BATTLE == 1
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <mode_selection+0x190>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d111      	bne.n	80010c0 <mode_selection+0xec>
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <mode_selection+0x1ac>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10d      	bne.n	80010c0 <mode_selection+0xec>
 80010a4:	4b31      	ldr	r3, [pc, #196]	; (800116c <mode_selection+0x198>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d109      	bne.n	80010c0 <mode_selection+0xec>
			&& press == 0) {
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <mode_selection+0x19c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <mode_selection+0xec>
		// Battle state
		battle();
 80010b4:	f000 fad6 	bl	8001664 <battle>
		press = 0;
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <mode_selection+0x19c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e04f      	b.n	8001160 <mode_selection+0x18c>
	} else if (EXPLORATION == 0 && BATTLE_WARNING_STATE == 0 && BATTLE == 1
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <mode_selection+0x190>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d114      	bne.n	80010f2 <mode_selection+0x11e>
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <mode_selection+0x1ac>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d110      	bne.n	80010f2 <mode_selection+0x11e>
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <mode_selection+0x198>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10c      	bne.n	80010f2 <mode_selection+0x11e>
			&& press == 1) {
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <mode_selection+0x19c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <mode_selection+0x11e>
		/*	In BATTLE_MODE, without WARNING:
		 * 	i.e., when Pixie is not sending 'SOS' message to Cyrix,
		 * 	single press triggers BATTERY_CHARGING,
		 * 	i.e., after single press, Fluxer is charged with 1/10 energy
		 * 	of its capacity.*/
		charge_fluxer_battery();
 80010e0:	f000 fcf6 	bl	8001ad0 <charge_fluxer_battery>
		BATTLE = 1;
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <mode_selection+0x198>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
		press = 0; // reset the press flag
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <mode_selection+0x19c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e036      	b.n	8001160 <mode_selection+0x18c>
	} else if (BATTLE == 1 && BATTLE_WARNING_STATE == 1) {
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <mode_selection+0x198>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11b      	bne.n	8001132 <mode_selection+0x15e>
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <mode_selection+0x1ac>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d117      	bne.n	8001132 <mode_selection+0x15e>
		battle_warning();
 8001102:	f000 fd09 	bl	8001b18 <battle_warning>
		if (press == 1) {
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <mode_selection+0x19c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d109      	bne.n	8001122 <mode_selection+0x14e>
			// Clear the warning and go back to Battle mode
			BATTLE_WARNING_STATE = 0;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <mode_selection+0x1ac>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
			BATTLE = 1;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <mode_selection+0x198>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
			press = 0;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <mode_selection+0x19c>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001120:	e01d      	b.n	800115e <mode_selection+0x18a>
		} else if (press == 2) {
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <mode_selection+0x19c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d119      	bne.n	800115e <mode_selection+0x18a>
			// Ignore it
			press = 0;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <mode_selection+0x19c>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001130:	e015      	b.n	800115e <mode_selection+0x18a>
		}
	} else if (BATTLE == 1 && BATTLE_WARNING_STATE == 0 && press == 2) {
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <mode_selection+0x198>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d112      	bne.n	8001160 <mode_selection+0x18c>
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <mode_selection+0x1ac>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10e      	bne.n	8001160 <mode_selection+0x18c>
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <mode_selection+0x19c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d10a      	bne.n	8001160 <mode_selection+0x18c>
		// Change to EXPLORATION Mode
		BATTLE = 0;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <mode_selection+0x198>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
		EXPLORATION = 1;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <mode_selection+0x190>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
		press = 0;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <mode_selection+0x19c>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
	}
}
 800115c:	e000      	b.n	8001160 <mode_selection+0x18c>
		if (press == 1) {
 800115e:	bf00      	nop
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	2000034a 	.word	0x2000034a
 800116c:	2000034b 	.word	0x2000034b
 8001170:	20000349 	.word	0x20000349
 8001174:	080083f8 	.word	0x080083f8
 8001178:	20000350 	.word	0x20000350
 800117c:	200002c8 	.word	0x200002c8
 8001180:	2000034c 	.word	0x2000034c

08001184 <exploration>:
 * 			are send to Cyrix lab periodically.
 * @note	The sensors are grouped in a struct for easier data manipulation.
 * @retval	None
 */

static void exploration(void) {
 8001184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001188:	b096      	sub	sp, #88	; 0x58
 800118a:	af0e      	add	r7, sp, #56	; 0x38
	// In EXPLORATION MODE, only those sensors mounted on Pixie are read periodically every ONE second
	if (HAL_GetTick() - time_EXPLORATION_SENSOR > 1000) {
 800118c:	f002 f87a 	bl	8003284 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	4bbb      	ldr	r3, [pc, #748]	; (8001480 <exploration+0x2fc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800119c:	f240 80d2 	bls.w	8001344 <exploration+0x1c0>

		// Reset variables
		sensor_data_t_exploration.humidity_data = 0;
 80011a0:	4bb8      	ldr	r3, [pc, #736]	; (8001484 <exploration+0x300>)
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
		sensor_data_t_exploration.pressure_data = 0;
 80011a8:	4bb6      	ldr	r3, [pc, #728]	; (8001484 <exploration+0x300>)
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
		sensor_data_t_exploration.magnetometer_raw_data[3] = 0;
 80011b0:	4bb4      	ldr	r3, [pc, #720]	; (8001484 <exploration+0x300>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	82da      	strh	r2, [r3, #22]
		sensor_data_t_exploration.magnetometer_data[3] = 0;
 80011b6:	4bb3      	ldr	r3, [pc, #716]	; (8001484 <exploration+0x300>)
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
		sensor_data_t_exploration.gyroscope_raw_data[3] = 0;
 80011be:	4bb1      	ldr	r3, [pc, #708]	; (8001484 <exploration+0x300>)
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
		sensor_data_t_exploration.gyroscope_data[3] = 0;
 80011c6:	4baf      	ldr	r3, [pc, #700]	; (8001484 <exploration+0x300>)
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	651a      	str	r2, [r3, #80]	; 0x50

		// Read Humidity readings
		sensor_data_t_exploration.humidity_data = BSP_HSENSOR_ReadHumidity();
 80011ce:	f001 f9d5 	bl	800257c <BSP_HSENSOR_ReadHumidity>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	4bab      	ldr	r3, [pc, #684]	; (8001484 <exploration+0x300>)
 80011d8:	edc3 7a01 	vstr	s15, [r3, #4]
		// Read the pressure in units (Pascal)
		// One hectopascal(hPa) is equal to exactly 100 Pascals.
		sensor_data_t_exploration.pressure_data = BSP_PSENSOR_ReadPressure()
 80011dc:	f001 fa40 	bl	8002660 <BSP_PSENSOR_ReadPressure>
 80011e0:	eef0 7a40 	vmov.f32	s15, s0
				* 100.0f;
 80011e4:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001488 <exploration+0x304>
 80011e8:	ee67 7a87 	vmul.f32	s15, s15, s14
		sensor_data_t_exploration.pressure_data = BSP_PSENSOR_ReadPressure()
 80011ec:	4ba5      	ldr	r3, [pc, #660]	; (8001484 <exploration+0x300>)
 80011ee:	edc3 7a02 	vstr	s15, [r3, #8]

		// Pass in the memory address to pDataXYZ Pointer to get XYZ magnetometer values.
		BSP_MAGNETO_GetXYZ(sensor_data_t_exploration.magnetometer_raw_data);
 80011f2:	48a6      	ldr	r0, [pc, #664]	; (800148c <exploration+0x308>)
 80011f4:	f001 f9fc 	bl	80025f0 <BSP_MAGNETO_GetXYZ>

		sensor_data_t_exploration.magnetometer_data[0] =
				(float) sensor_data_t_exploration.magnetometer_raw_data[0]
 80011f8:	4ba2      	ldr	r3, [pc, #648]	; (8001484 <exploration+0x300>)
 80011fa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						/ 1000.0f;
 8001206:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8001490 <exploration+0x30c>
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.magnetometer_data[0] =
 800120e:	4b9d      	ldr	r3, [pc, #628]	; (8001484 <exploration+0x300>)
 8001210:	edc3 7a06 	vstr	s15, [r3, #24]
		sensor_data_t_exploration.magnetometer_data[1] =
				(float) sensor_data_t_exploration.magnetometer_raw_data[1]
 8001214:	4b9b      	ldr	r3, [pc, #620]	; (8001484 <exploration+0x300>)
 8001216:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						/ 1000.0f;
 8001222:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8001490 <exploration+0x30c>
 8001226:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.magnetometer_data[1] =
 800122a:	4b96      	ldr	r3, [pc, #600]	; (8001484 <exploration+0x300>)
 800122c:	edc3 7a07 	vstr	s15, [r3, #28]
		sensor_data_t_exploration.magnetometer_data[2] =
				(float) sensor_data_t_exploration.magnetometer_raw_data[2]
 8001230:	4b94      	ldr	r3, [pc, #592]	; (8001484 <exploration+0x300>)
 8001232:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						/ 1000.0f;
 800123e:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001490 <exploration+0x30c>
 8001242:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.magnetometer_data[2] =
 8001246:	4b8f      	ldr	r3, [pc, #572]	; (8001484 <exploration+0x300>)
 8001248:	edc3 7a08 	vstr	s15, [r3, #32]

		// Pass in the memory address to pDataXYZ Pointer to get XYZ gyroscope values.
		BSP_GYRO_GetXYZ(sensor_data_t_exploration.gyroscope_raw_data);
 800124c:	4891      	ldr	r0, [pc, #580]	; (8001494 <exploration+0x310>)
 800124e:	f001 f95d 	bl	800250c <BSP_GYRO_GetXYZ>
		sensor_data_t_exploration.gyroscope_data[0] =
				sensor_data_t_exploration.gyroscope_raw_data[0] / 1000.0f;
 8001252:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <exploration+0x300>)
 8001254:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001258:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8001490 <exploration+0x30c>
 800125c:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.gyroscope_data[0] =
 8001260:	4b88      	ldr	r3, [pc, #544]	; (8001484 <exploration+0x300>)
 8001262:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		sensor_data_t_exploration.gyroscope_data[1] =
				sensor_data_t_exploration.gyroscope_raw_data[1] / 1000.0f;
 8001266:	4b87      	ldr	r3, [pc, #540]	; (8001484 <exploration+0x300>)
 8001268:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800126c:	eddf 6a88 	vldr	s13, [pc, #544]	; 8001490 <exploration+0x30c>
 8001270:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.gyroscope_data[1] =
 8001274:	4b83      	ldr	r3, [pc, #524]	; (8001484 <exploration+0x300>)
 8001276:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		sensor_data_t_exploration.gyroscope_data[2] =
				sensor_data_t_exploration.gyroscope_raw_data[2] / 1000.0f;
 800127a:	4b82      	ldr	r3, [pc, #520]	; (8001484 <exploration+0x300>)
 800127c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001280:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001490 <exploration+0x30c>
 8001284:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.gyroscope_data[2] =
 8001288:	4b7e      	ldr	r3, [pc, #504]	; (8001484 <exploration+0x300>)
 800128a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE,
				"G:%0.2f:%0.2f (dps), M:%0.3f:%0.3f:%0.3f (Gauss), P:%0.2f (Pa), H:%0.2f (%%RH) \r\n",
				sensor_data_t_exploration.gyroscope_data[0],
 800128e:	4b7d      	ldr	r3, [pc, #500]	; (8001484 <exploration+0x300>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		snprintf(message_print, MESSAGE_SIZE,
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f958 	bl	8000548 <__aeabi_f2d>
 8001298:	4680      	mov	r8, r0
 800129a:	4689      	mov	r9, r1
				sensor_data_t_exploration.gyroscope_data[1],
 800129c:	4b79      	ldr	r3, [pc, #484]	; (8001484 <exploration+0x300>)
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		snprintf(message_print, MESSAGE_SIZE,
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f951 	bl	8000548 <__aeabi_f2d>
 80012a6:	4682      	mov	sl, r0
 80012a8:	468b      	mov	fp, r1
				// sensor_data_t_exploration.gyroscope_data[2],
				sensor_data_t_exploration.magnetometer_data[0],
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <exploration+0x300>)
 80012ac:	699b      	ldr	r3, [r3, #24]
		snprintf(message_print, MESSAGE_SIZE,
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f94a 	bl	8000548 <__aeabi_f2d>
 80012b4:	e9c7 0104 	strd	r0, r1, [r7, #16]
				sensor_data_t_exploration.magnetometer_data[1],
 80012b8:	4b72      	ldr	r3, [pc, #456]	; (8001484 <exploration+0x300>)
 80012ba:	69db      	ldr	r3, [r3, #28]
		snprintf(message_print, MESSAGE_SIZE,
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f943 	bl	8000548 <__aeabi_f2d>
 80012c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
				sensor_data_t_exploration.magnetometer_data[2],
 80012c6:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <exploration+0x300>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
		snprintf(message_print, MESSAGE_SIZE,
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f93c 	bl	8000548 <__aeabi_f2d>
 80012d0:	e9c7 0100 	strd	r0, r1, [r7]
				sensor_data_t_exploration.pressure_data,
 80012d4:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <exploration+0x300>)
 80012d6:	689b      	ldr	r3, [r3, #8]
		snprintf(message_print, MESSAGE_SIZE,
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f935 	bl	8000548 <__aeabi_f2d>
 80012de:	4604      	mov	r4, r0
 80012e0:	460d      	mov	r5, r1
				sensor_data_t_exploration.humidity_data);
 80012e2:	4b68      	ldr	r3, [pc, #416]	; (8001484 <exploration+0x300>)
 80012e4:	685b      	ldr	r3, [r3, #4]
		snprintf(message_print, MESSAGE_SIZE,
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f92e 	bl	8000548 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80012f4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80012f8:	ed97 7b00 	vldr	d7, [r7]
 80012fc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001300:	ed97 7b02 	vldr	d7, [r7, #8]
 8001304:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001308:	ed97 7b04 	vldr	d7, [r7, #16]
 800130c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001310:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001314:	e9cd 8900 	strd	r8, r9, [sp]
 8001318:	4a5f      	ldr	r2, [pc, #380]	; (8001498 <exploration+0x314>)
 800131a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800131e:	485f      	ldr	r0, [pc, #380]	; (800149c <exploration+0x318>)
 8001320:	f004 ff5e 	bl	80061e0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001324:	485d      	ldr	r0, [pc, #372]	; (800149c <exploration+0x318>)
 8001326:	f7fe ff53 	bl	80001d0 <strlen>
 800132a:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800132c:	b29a      	uxth	r2, r3
 800132e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001332:	495a      	ldr	r1, [pc, #360]	; (800149c <exploration+0x318>)
 8001334:	485a      	ldr	r0, [pc, #360]	; (80014a0 <exploration+0x31c>)
 8001336:	f003 fa29 	bl	800478c <HAL_UART_Transmit>

		time_EXPLORATION_SENSOR = HAL_GetTick();
 800133a:	f001 ffa3 	bl	8003284 <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	4a4f      	ldr	r2, [pc, #316]	; (8001480 <exploration+0x2fc>)
 8001342:	6013      	str	r3, [r2, #0]
	}

	// EXPLORATION LED will always be ON
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8001344:	2201      	movs	r2, #1
 8001346:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134a:	4856      	ldr	r0, [pc, #344]	; (80014a4 <exploration+0x320>)
 800134c:	f002 fb6e 	bl	8003a2c <HAL_GPIO_WritePin>
	 * 			3. Reset flags to SAFE before leaving exploration mode
	 * 			and reaching to warning state.
	 * 			4. Reset count_warnings counter to 0.
	 * 			5. Set the EXPLORATION_WARNING_STATE flag to 1.
	 */
	if ((abs((int) sensor_data_t_exploration.magnetometer_data[0])
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <exploration+0x300>)
 8001352:	edd3 7a06 	vldr	s15, [r3, #24]
 8001356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135a:	ee17 3a90 	vmov	r3, s15
 800135e:	2b00      	cmp	r3, #0
 8001360:	bfb8      	it	lt
 8001362:	425b      	neglt	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	dc17      	bgt.n	8001398 <exploration+0x214>
			>= MAG_THRESHOLD
			|| abs((int) sensor_data_t_exploration.magnetometer_data[1])
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <exploration+0x300>)
 800136a:	edd3 7a07 	vldr	s15, [r3, #28]
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	2b00      	cmp	r3, #0
 8001378:	bfb8      	it	lt
 800137a:	425b      	neglt	r3, r3
 800137c:	2b01      	cmp	r3, #1
 800137e:	dc0b      	bgt.n	8001398 <exploration+0x214>
					>= MAG_THRESHOLD
			|| abs((int) sensor_data_t_exploration.magnetometer_data[2])
 8001380:	4b40      	ldr	r3, [pc, #256]	; (8001484 <exploration+0x300>)
 8001382:	edd3 7a08 	vldr	s15, [r3, #32]
 8001386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138a:	ee17 3a90 	vmov	r3, s15
 800138e:	2b00      	cmp	r3, #0
 8001390:	bfb8      	it	lt
 8001392:	425b      	neglt	r3, r3
 8001394:	2b01      	cmp	r3, #1
 8001396:	dd1e      	ble.n	80013d6 <exploration+0x252>
					>= MAG_THRESHOLD) && MAGNETOMETER_Flag != WARNING) {
 8001398:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <exploration+0x324>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d019      	beq.n	80013d6 <exploration+0x252>

		// Set MAGNETOMETER_Flag to WARNING
		MAGNETOMETER_Flag = WARNING;
 80013a2:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <exploration+0x324>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "Magnetometer Flag enabled \r\n");
 80013a8:	4a40      	ldr	r2, [pc, #256]	; (80014ac <exploration+0x328>)
 80013aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013ae:	483b      	ldr	r0, [pc, #236]	; (800149c <exploration+0x318>)
 80013b0:	f004 ff16 	bl	80061e0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 80013b4:	4839      	ldr	r0, [pc, #228]	; (800149c <exploration+0x318>)
 80013b6:	f7fe ff0b 	bl	80001d0 <strlen>
 80013ba:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c2:	4936      	ldr	r1, [pc, #216]	; (800149c <exploration+0x318>)
 80013c4:	4836      	ldr	r0, [pc, #216]	; (80014a0 <exploration+0x31c>)
 80013c6:	f003 f9e1 	bl	800478c <HAL_UART_Transmit>
		count_warnings += 1;
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <exploration+0x32c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <exploration+0x32c>)
 80013d4:	701a      	strb	r2, [r3, #0]
	}

	if ((abs((int) sensor_data_t_exploration.gyroscope_data[0])
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <exploration+0x300>)
 80013d8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e0:	ee17 3a90 	vmov	r3, s15
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bfb8      	it	lt
 80013e8:	425b      	neglt	r3, r3
 80013ea:	2b13      	cmp	r3, #19
 80013ec:	dc0b      	bgt.n	8001406 <exploration+0x282>
			>= GYRO_THRESHOLD
			|| abs((int) sensor_data_t_exploration.gyroscope_data[1])
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <exploration+0x300>)
 80013f0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80013f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bfb8      	it	lt
 8001400:	425b      	neglt	r3, r3
 8001402:	2b13      	cmp	r3, #19
 8001404:	dd1e      	ble.n	8001444 <exploration+0x2c0>
					>= GYRO_THRESHOLD) && GYROSCOPE_Flag != WARNING) {
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <exploration+0x330>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d019      	beq.n	8001444 <exploration+0x2c0>

		// Set GYROSCOPE_Flag to WARNING
		GYROSCOPE_Flag = WARNING;
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <exploration+0x330>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "Gyroscope Flag enabled \r\n");
 8001416:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <exploration+0x334>)
 8001418:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800141c:	481f      	ldr	r0, [pc, #124]	; (800149c <exploration+0x318>)
 800141e:	f004 fedf 	bl	80061e0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001422:	481e      	ldr	r0, [pc, #120]	; (800149c <exploration+0x318>)
 8001424:	f7fe fed4 	bl	80001d0 <strlen>
 8001428:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800142a:	b29a      	uxth	r2, r3
 800142c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001430:	491a      	ldr	r1, [pc, #104]	; (800149c <exploration+0x318>)
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <exploration+0x31c>)
 8001434:	f003 f9aa 	bl	800478c <HAL_UART_Transmit>
		count_warnings += 1;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <exploration+0x32c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <exploration+0x32c>)
 8001442:	701a      	strb	r2, [r3, #0]
	}

	if ((sensor_data_t_exploration.pressure_data <= PRES_THRESHOLD_MIN)
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <exploration+0x300>)
 8001446:	edd3 7a02 	vldr	s15, [r3, #8]
 800144a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80014bc <exploration+0x338>
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	d909      	bls.n	800146c <exploration+0x2e8>
			|| (sensor_data_t_exploration.pressure_data >= PRES_THRESHOLD_MAX)) {
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <exploration+0x300>)
 800145a:	edd3 7a02 	vldr	s15, [r3, #8]
 800145e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80014c0 <exploration+0x33c>
 8001462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	db40      	blt.n	80014ee <exploration+0x36a>

		// Set PRESSURE_Flag to WARNING
		PRESSURE_Flag = WARNING;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <exploration+0x340>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "Pressure Flag enabled \r\n");
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <exploration+0x344>)
 8001474:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <exploration+0x318>)
 800147a:	f004 feb1 	bl	80061e0 <sniprintf>
 800147e:	e025      	b.n	80014cc <exploration+0x348>
 8001480:	2000047c 	.word	0x2000047c
 8001484:	200004a0 	.word	0x200004a0
 8001488:	42c80000 	.word	0x42c80000
 800148c:	200004b0 	.word	0x200004b0
 8001490:	447a0000 	.word	0x447a0000
 8001494:	200004d8 	.word	0x200004d8
 8001498:	08008410 	.word	0x08008410
 800149c:	20000350 	.word	0x20000350
 80014a0:	200002c8 	.word	0x200002c8
 80014a4:	48000400 	.word	0x48000400
 80014a8:	2000049d 	.word	0x2000049d
 80014ac:	08008464 	.word	0x08008464
 80014b0:	2000034d 	.word	0x2000034d
 80014b4:	2000049c 	.word	0x2000049c
 80014b8:	08008484 	.word	0x08008484
 80014bc:	47afc800 	.word	0x47afc800
 80014c0:	47cd1400 	.word	0x47cd1400
 80014c4:	2000049e 	.word	0x2000049e
 80014c8:	080084a0 	.word	0x080084a0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 80014cc:	483a      	ldr	r0, [pc, #232]	; (80015b8 <exploration+0x434>)
 80014ce:	f7fe fe7f 	bl	80001d0 <strlen>
 80014d2:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014da:	4937      	ldr	r1, [pc, #220]	; (80015b8 <exploration+0x434>)
 80014dc:	4837      	ldr	r0, [pc, #220]	; (80015bc <exploration+0x438>)
 80014de:	f003 f955 	bl	800478c <HAL_UART_Transmit>
		count_warnings += 1;
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <exploration+0x43c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <exploration+0x43c>)
 80014ec:	701a      	strb	r2, [r3, #0]
	}

	if (sensor_data_t_exploration.humidity_data <= HUM_THRESHOLD) {
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <exploration+0x440>)
 80014f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014f4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80015c8 <exploration+0x444>
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	d819      	bhi.n	8001536 <exploration+0x3b2>

		// Set HUMIDITY_Flag to WARNING
		HUMIDITY_Flag = WARNING;
 8001502:	4b32      	ldr	r3, [pc, #200]	; (80015cc <exploration+0x448>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "Humidity Flag enabled \r\n");
 8001508:	4a31      	ldr	r2, [pc, #196]	; (80015d0 <exploration+0x44c>)
 800150a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800150e:	482a      	ldr	r0, [pc, #168]	; (80015b8 <exploration+0x434>)
 8001510:	f004 fe66 	bl	80061e0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001514:	4828      	ldr	r0, [pc, #160]	; (80015b8 <exploration+0x434>)
 8001516:	f7fe fe5b 	bl	80001d0 <strlen>
 800151a:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800151c:	b29a      	uxth	r2, r3
 800151e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001522:	4925      	ldr	r1, [pc, #148]	; (80015b8 <exploration+0x434>)
 8001524:	4825      	ldr	r0, [pc, #148]	; (80015bc <exploration+0x438>)
 8001526:	f003 f931 	bl	800478c <HAL_UART_Transmit>
		count_warnings += 1;
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <exploration+0x43c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <exploration+0x43c>)
 8001534:	701a      	strb	r2, [r3, #0]
	}

	if (count_warnings == 2) {
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <exploration+0x43c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d118      	bne.n	8001570 <exploration+0x3ec>
		reset_sensor_warning_flags();
 800153e:	f000 fb2f 	bl	8001ba0 <reset_sensor_warning_flags>
		count_warnings = 0;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <exploration+0x43c>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE,
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <exploration+0x450>)
 800154a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <exploration+0x434>)
 8001550:	f004 fe46 	bl	80061e0 <sniprintf>
				"EXPLORATION_WARNING_STATE enabled \r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <exploration+0x434>)
 8001556:	f7fe fe3b 	bl	80001d0 <strlen>
 800155a:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800155c:	b29a      	uxth	r2, r3
 800155e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001562:	4915      	ldr	r1, [pc, #84]	; (80015b8 <exploration+0x434>)
 8001564:	4815      	ldr	r0, [pc, #84]	; (80015bc <exploration+0x438>)
 8001566:	f003 f911 	bl	800478c <HAL_UART_Transmit>
		// Set the EXPLORATION_WARNING_STATE flag to 1
		EXPLORATION_WARNING_STATE = 1;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <exploration+0x454>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
	}

	// Used for testing EXPLORATION_WARNING_STATE
	int stateOfPushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8001570:	2110      	movs	r1, #16
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f002 fa41 	bl	80039fc <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
 800157c:	61fb      	str	r3, [r7, #28]
	if (stateOfPushButton == 1) {
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d113      	bne.n	80015ac <exploration+0x428>
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE,
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <exploration+0x450>)
 8001586:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <exploration+0x434>)
 800158c:	f004 fe28 	bl	80061e0 <sniprintf>
				"EXPLORATION_WARNING_STATE enabled \r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <exploration+0x434>)
 8001592:	f7fe fe1d 	bl	80001d0 <strlen>
 8001596:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001598:	b29a      	uxth	r2, r3
 800159a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159e:	4906      	ldr	r1, [pc, #24]	; (80015b8 <exploration+0x434>)
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <exploration+0x438>)
 80015a2:	f003 f8f3 	bl	800478c <HAL_UART_Transmit>
		// Set the EXPLORATION_WARNING_STATE flag to 1
		EXPLORATION_WARNING_STATE = 1;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <exploration+0x454>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
	}
}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b6:	bf00      	nop
 80015b8:	20000350 	.word	0x20000350
 80015bc:	200002c8 	.word	0x200002c8
 80015c0:	2000034d 	.word	0x2000034d
 80015c4:	200004a0 	.word	0x200004a0
 80015c8:	42400000 	.word	0x42400000
 80015cc:	2000049f 	.word	0x2000049f
 80015d0:	080084bc 	.word	0x080084bc
 80015d4:	080084d8 	.word	0x080084d8
 80015d8:	2000034a 	.word	0x2000034a

080015dc <exploration_warning>:

static void exploration_warning(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	// Toggle WARNING LED every 3 seconds.
	if ((HAL_GetTick() - time_EXPLORATION_WARNING_LED) > 3000) {
 80015e0:	f001 fe50 	bl	8003284 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <exploration_warning+0x70>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d909      	bls.n	8001608 <exploration_warning+0x2c>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80015f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f8:	4815      	ldr	r0, [pc, #84]	; (8001650 <exploration_warning+0x74>)
 80015fa:	f002 fa2f 	bl	8003a5c <HAL_GPIO_TogglePin>
		time_EXPLORATION_WARNING_LED = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 80015fe:	f001 fe41 	bl	8003284 <HAL_GetTick>
 8001602:	4603      	mov	r3, r0
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <exploration_warning+0x70>)
 8001606:	6013      	str	r3, [r2, #0]
	}

	// Send WARNING mode: SOS once every 1 second.
	if ((HAL_GetTick() - time_EXPLORATION_WARNING_MESSAGE) > 1000) {
 8001608:	f001 fe3c 	bl	8003284 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <exploration_warning+0x78>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001618:	d915      	bls.n	8001646 <exploration_warning+0x6a>
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "WARNING mode: SOS \r\n");
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <exploration_warning+0x7c>)
 800161c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <exploration_warning+0x80>)
 8001622:	f004 fddd 	bl	80061e0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <exploration_warning+0x80>)
 8001628:	f7fe fdd2 	bl	80001d0 <strlen>
 800162c:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800162e:	b29a      	uxth	r2, r3
 8001630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001634:	4909      	ldr	r1, [pc, #36]	; (800165c <exploration_warning+0x80>)
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <exploration_warning+0x84>)
 8001638:	f003 f8a8 	bl	800478c <HAL_UART_Transmit>
		time_EXPLORATION_WARNING_MESSAGE = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 800163c:	f001 fe22 	bl	8003284 <HAL_GetTick>
 8001640:	4603      	mov	r3, r0
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <exploration_warning+0x78>)
 8001644:	6013      	str	r3, [r2, #0]
	}
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000480 	.word	0x20000480
 8001650:	48000400 	.word	0x48000400
 8001654:	20000484 	.word	0x20000484
 8001658:	08008500 	.word	0x08008500
 800165c:	20000350 	.word	0x20000350
 8001660:	200002c8 	.word	0x200002c8

08001664 <battle>:

static void battle(void) {
 8001664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001668:	b09e      	sub	sp, #120	; 0x78
 800166a:	af12      	add	r7, sp, #72	; 0x48

	// In BATTLE MODE, only those sensors mounted on Pixie are read periodically every ONE second.
	if (HAL_GetTick() - time_BATTLE_SENSOR > 1000) {
 800166c:	f001 fe0a 	bl	8003284 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	4bbc      	ldr	r3, [pc, #752]	; (8001964 <battle+0x300>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167c:	f240 8127 	bls.w	80018ce <battle+0x26a>

		// Reset variables
		sensor_data_t_battle.temperature_data = 0;
 8001680:	4bb9      	ldr	r3, [pc, #740]	; (8001968 <battle+0x304>)
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
		sensor_data_t_battle.humidity_data = 0;
 8001688:	4bb7      	ldr	r3, [pc, #732]	; (8001968 <battle+0x304>)
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
		sensor_data_t_battle.pressure_data = 0;
 8001690:	4bb5      	ldr	r3, [pc, #724]	; (8001968 <battle+0x304>)
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
		sensor_data_t_battle.magnetometer_raw_data[3] = 0;
 8001698:	4bb3      	ldr	r3, [pc, #716]	; (8001968 <battle+0x304>)
 800169a:	2200      	movs	r2, #0
 800169c:	82da      	strh	r2, [r3, #22]
		sensor_data_t_battle.magnetometer_data[3] = 0;
 800169e:	4bb2      	ldr	r3, [pc, #712]	; (8001968 <battle+0x304>)
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
		sensor_data_t_battle.gyroscope_raw_data[3] = 0;
 80016a6:	4bb0      	ldr	r3, [pc, #704]	; (8001968 <battle+0x304>)
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
		sensor_data_t_battle.gyroscope_data[3] = 0;
 80016ae:	4bae      	ldr	r3, [pc, #696]	; (8001968 <battle+0x304>)
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	651a      	str	r2, [r3, #80]	; 0x50
		sensor_data_t_battle.accelerometer_raw_data[3] = 0;
 80016b6:	4bac      	ldr	r3, [pc, #688]	; (8001968 <battle+0x304>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	855a      	strh	r2, [r3, #42]	; 0x2a
		sensor_data_t_battle.accelerometer_data[3] = 0;
 80016bc:	4baa      	ldr	r3, [pc, #680]	; (8001968 <battle+0x304>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	639a      	str	r2, [r3, #56]	; 0x38

		// Read Humidity readings
		sensor_data_t_battle.humidity_data = BSP_HSENSOR_ReadHumidity();
 80016c4:	f000 ff5a 	bl	800257c <BSP_HSENSOR_ReadHumidity>
 80016c8:	eef0 7a40 	vmov.f32	s15, s0
 80016cc:	4ba6      	ldr	r3, [pc, #664]	; (8001968 <battle+0x304>)
 80016ce:	edc3 7a01 	vstr	s15, [r3, #4]

		/*	Read the pressure in units (Pascal)
		 * 	One hectopascal(hPa) is equal to exactly 100 Pascals. */
		sensor_data_t_battle.pressure_data = BSP_PSENSOR_ReadPressure()
 80016d2:	f000 ffc5 	bl	8002660 <BSP_PSENSOR_ReadPressure>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
				* 100.0f;
 80016da:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800196c <battle+0x308>
 80016de:	ee67 7a87 	vmul.f32	s15, s15, s14
		sensor_data_t_battle.pressure_data = BSP_PSENSOR_ReadPressure()
 80016e2:	4ba1      	ldr	r3, [pc, #644]	; (8001968 <battle+0x304>)
 80016e4:	edc3 7a02 	vstr	s15, [r3, #8]

		// Read Temperature Readings
		sensor_data_t_battle.temperature_data = BSP_TSENSOR_ReadTemp();
 80016e8:	f000 ffe4 	bl	80026b4 <BSP_TSENSOR_ReadTemp>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	4b9d      	ldr	r3, [pc, #628]	; (8001968 <battle+0x304>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]

		// Pass in the memory address to pDataXYZ Pointer to get XYZ magnetometer values.
		BSP_MAGNETO_GetXYZ(sensor_data_t_battle.magnetometer_raw_data);
 80016f6:	489e      	ldr	r0, [pc, #632]	; (8001970 <battle+0x30c>)
 80016f8:	f000 ff7a 	bl	80025f0 <BSP_MAGNETO_GetXYZ>
		sensor_data_t_battle.magnetometer_data[0] =
				(float) sensor_data_t_battle.magnetometer_raw_data[0] / 1000.0f;
 80016fc:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <battle+0x304>)
 80016fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8001974 <battle+0x310>
 800170e:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.magnetometer_data[0] =
 8001712:	4b95      	ldr	r3, [pc, #596]	; (8001968 <battle+0x304>)
 8001714:	edc3 7a06 	vstr	s15, [r3, #24]
		sensor_data_t_battle.magnetometer_data[1] =
				(float) sensor_data_t_battle.magnetometer_raw_data[1] / 1000.0f;
 8001718:	4b93      	ldr	r3, [pc, #588]	; (8001968 <battle+0x304>)
 800171a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001726:	eddf 6a93 	vldr	s13, [pc, #588]	; 8001974 <battle+0x310>
 800172a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.magnetometer_data[1] =
 800172e:	4b8e      	ldr	r3, [pc, #568]	; (8001968 <battle+0x304>)
 8001730:	edc3 7a07 	vstr	s15, [r3, #28]
		sensor_data_t_battle.magnetometer_data[2] =
				(float) sensor_data_t_battle.magnetometer_raw_data[2] / 1000.0f;
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <battle+0x304>)
 8001736:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001742:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8001974 <battle+0x310>
 8001746:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.magnetometer_data[2] =
 800174a:	4b87      	ldr	r3, [pc, #540]	; (8001968 <battle+0x304>)
 800174c:	edc3 7a08 	vstr	s15, [r3, #32]

		// Pass in the memory address to pDataXYZ Pointer to get XYZ gyroscope values.
		BSP_GYRO_GetXYZ(sensor_data_t_battle.gyroscope_raw_data);
 8001750:	4889      	ldr	r0, [pc, #548]	; (8001978 <battle+0x314>)
 8001752:	f000 fedb 	bl	800250c <BSP_GYRO_GetXYZ>
		sensor_data_t_battle.gyroscope_data[0] =
				sensor_data_t_battle.gyroscope_raw_data[0] / 1000.0f;
 8001756:	4b84      	ldr	r3, [pc, #528]	; (8001968 <battle+0x304>)
 8001758:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800175c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8001974 <battle+0x310>
 8001760:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.gyroscope_data[0] =
 8001764:	4b80      	ldr	r3, [pc, #512]	; (8001968 <battle+0x304>)
 8001766:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		sensor_data_t_battle.gyroscope_data[1] =
				sensor_data_t_battle.gyroscope_raw_data[1] / 1000.0f;
 800176a:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <battle+0x304>)
 800176c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001770:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001974 <battle+0x310>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.gyroscope_data[1] =
 8001778:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <battle+0x304>)
 800177a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		sensor_data_t_battle.gyroscope_data[2] =
				sensor_data_t_battle.gyroscope_raw_data[2] / 1000.0f;
 800177e:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <battle+0x304>)
 8001780:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001784:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001974 <battle+0x310>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.gyroscope_data[2] =
 800178c:	4b76      	ldr	r3, [pc, #472]	; (8001968 <battle+0x304>)
 800178e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		/* Pass in the memory address to pDataXYZ Pointer to get XYZ accelerometer values.
		 * The function below returns 16 bit integers which are 100 * acceleration(m/s^2).
		 * Convert to float to print the actual acceleration*/
		BSP_ACCELERO_AccGetXYZ(sensor_data_t_battle.accelerometer_raw_data);
 8001792:	487a      	ldr	r0, [pc, #488]	; (800197c <battle+0x318>)
 8001794:	f000 fe60 	bl	8002458 <BSP_ACCELERO_AccGetXYZ>
		sensor_data_t_battle.accelerometer_data[0] =
				sensor_data_t_battle.accelerometer_raw_data[0] / 100.0f;
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <battle+0x304>)
 800179a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a6:	eddf 6a71 	vldr	s13, [pc, #452]	; 800196c <battle+0x308>
 80017aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.accelerometer_data[0] =
 80017ae:	4b6e      	ldr	r3, [pc, #440]	; (8001968 <battle+0x304>)
 80017b0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		sensor_data_t_battle.accelerometer_data[1] =
				sensor_data_t_battle.accelerometer_raw_data[1] / 100.0f;
 80017b4:	4b6c      	ldr	r3, [pc, #432]	; (8001968 <battle+0x304>)
 80017b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800196c <battle+0x308>
 80017c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.accelerometer_data[1] =
 80017ca:	4b67      	ldr	r3, [pc, #412]	; (8001968 <battle+0x304>)
 80017cc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		sensor_data_t_battle.accelerometer_data[2] =
				sensor_data_t_battle.accelerometer_raw_data[2] / 100.0f;
 80017d0:	4b65      	ldr	r3, [pc, #404]	; (8001968 <battle+0x304>)
 80017d2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017de:	eddf 6a63 	vldr	s13, [pc, #396]	; 800196c <battle+0x308>
 80017e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.accelerometer_data[2] =
 80017e6:	4b60      	ldr	r3, [pc, #384]	; (8001968 <battle+0x304>)
 80017e8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE,
				"T:%0.2f (deg C), P:%0.2f (Pa), H:%0.2f (%%RH), A:%0.2f (g), G:%0.2f:%0.2f (dps), M:%0.3f:%0.3f:%0.3f (Gauss) \r\n",
				sensor_data_t_battle.temperature_data,
 80017ec:	4b5e      	ldr	r3, [pc, #376]	; (8001968 <battle+0x304>)
 80017ee:	681b      	ldr	r3, [r3, #0]
		snprintf(message_print, MESSAGE_SIZE,
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fea9 	bl	8000548 <__aeabi_f2d>
 80017f6:	e9c7 0108 	strd	r0, r1, [r7, #32]
				sensor_data_t_battle.pressure_data,
 80017fa:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <battle+0x304>)
 80017fc:	689b      	ldr	r3, [r3, #8]
		snprintf(message_print, MESSAGE_SIZE,
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fea2 	bl	8000548 <__aeabi_f2d>
 8001804:	e9c7 0106 	strd	r0, r1, [r7, #24]
				sensor_data_t_battle.humidity_data,
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <battle+0x304>)
 800180a:	685b      	ldr	r3, [r3, #4]
		snprintf(message_print, MESSAGE_SIZE,
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe9b 	bl	8000548 <__aeabi_f2d>
 8001812:	e9c7 0104 	strd	r0, r1, [r7, #16]
				// sensor_data_t_battle.accelerometer_data[0],
				// sensor_data_t_battle.accelerometer_data[1],
				sensor_data_t_battle.accelerometer_data[2],
 8001816:	4b54      	ldr	r3, [pc, #336]	; (8001968 <battle+0x304>)
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		snprintf(message_print, MESSAGE_SIZE,
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe94 	bl	8000548 <__aeabi_f2d>
 8001820:	e9c7 0102 	strd	r0, r1, [r7, #8]
				sensor_data_t_battle.gyroscope_data[0],
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <battle+0x304>)
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		snprintf(message_print, MESSAGE_SIZE,
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe8d 	bl	8000548 <__aeabi_f2d>
 800182e:	e9c7 0100 	strd	r0, r1, [r7]
				sensor_data_t_battle.gyroscope_data[1],
 8001832:	4b4d      	ldr	r3, [pc, #308]	; (8001968 <battle+0x304>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		snprintf(message_print, MESSAGE_SIZE,
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe86 	bl	8000548 <__aeabi_f2d>
 800183c:	4682      	mov	sl, r0
 800183e:	468b      	mov	fp, r1
				// sensor_data_t_battle.gyroscope_data[2],
				sensor_data_t_battle.magnetometer_data[0],
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <battle+0x304>)
 8001842:	699b      	ldr	r3, [r3, #24]
		snprintf(message_print, MESSAGE_SIZE,
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe7f 	bl	8000548 <__aeabi_f2d>
 800184a:	4680      	mov	r8, r0
 800184c:	4689      	mov	r9, r1
				sensor_data_t_battle.magnetometer_data[1],
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <battle+0x304>)
 8001850:	69db      	ldr	r3, [r3, #28]
		snprintf(message_print, MESSAGE_SIZE,
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe78 	bl	8000548 <__aeabi_f2d>
 8001858:	4604      	mov	r4, r0
 800185a:	460d      	mov	r5, r1
				sensor_data_t_battle.magnetometer_data[2]);
 800185c:	4b42      	ldr	r3, [pc, #264]	; (8001968 <battle+0x304>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
		snprintf(message_print, MESSAGE_SIZE,
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe71 	bl	8000548 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800186e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001872:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001876:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800187a:	ed97 7b00 	vldr	d7, [r7]
 800187e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001882:	ed97 7b02 	vldr	d7, [r7, #8]
 8001886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800188a:	ed97 7b04 	vldr	d7, [r7, #16]
 800188e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001892:	ed97 7b06 	vldr	d7, [r7, #24]
 8001896:	ed8d 7b02 	vstr	d7, [sp, #8]
 800189a:	ed97 7b08 	vldr	d7, [r7, #32]
 800189e:	ed8d 7b00 	vstr	d7, [sp]
 80018a2:	4a37      	ldr	r2, [pc, #220]	; (8001980 <battle+0x31c>)
 80018a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018a8:	4836      	ldr	r0, [pc, #216]	; (8001984 <battle+0x320>)
 80018aa:	f004 fc99 	bl	80061e0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 80018ae:	4835      	ldr	r0, [pc, #212]	; (8001984 <battle+0x320>)
 80018b0:	f7fe fc8e 	bl	80001d0 <strlen>
 80018b4:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018bc:	4931      	ldr	r1, [pc, #196]	; (8001984 <battle+0x320>)
 80018be:	4832      	ldr	r0, [pc, #200]	; (8001988 <battle+0x324>)
 80018c0:	f002 ff64 	bl	800478c <HAL_UART_Transmit>

		time_BATTLE_SENSOR = HAL_GetTick();
 80018c4:	f001 fcde 	bl	8003284 <HAL_GetTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a26      	ldr	r2, [pc, #152]	; (8001964 <battle+0x300>)
 80018cc:	6013      	str	r3, [r2, #0]
	}

	// Toggle WARNING LED every 1 second.
	if ((HAL_GetTick() - time_BATTLE_LED) > 1000) {
 80018ce:	f001 fcd9 	bl	8003284 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <battle+0x328>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018de:	d909      	bls.n	80018f4 <battle+0x290>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e4:	482a      	ldr	r0, [pc, #168]	; (8001990 <battle+0x32c>)
 80018e6:	f002 f8b9 	bl	8003a5c <HAL_GPIO_TogglePin>
		time_BATTLE_LED = HAL_GetTick(); // reset time_BATTLE_LED
 80018ea:	f001 fccb 	bl	8003284 <HAL_GetTick>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a26      	ldr	r2, [pc, #152]	; (800198c <battle+0x328>)
 80018f2:	6013      	str	r3, [r2, #0]
	}

	// Self firing Fluxer every 5s.
	if (HAL_GetTick() - time_fluxer > 5000 && fluxer_battery >= 2) {
 80018f4:	f001 fcc6 	bl	8003284 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <battle+0x330>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	; 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d921      	bls.n	800194c <battle+0x2e8>
 8001908:	4b23      	ldr	r3, [pc, #140]	; (8001998 <battle+0x334>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d91d      	bls.n	800194c <battle+0x2e8>

		fluxer_battery -= 2;
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <battle+0x334>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3b02      	subs	r3, #2
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <battle+0x334>)
 800191a:	701a      	strb	r2, [r3, #0]

		time_fluxer = HAL_GetTick(); // reset time_fluxer
 800191c:	f001 fcb2 	bl	8003284 <HAL_GetTick>
 8001920:	4603      	mov	r3, r0
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <battle+0x330>)
 8001924:	6013      	str	r3, [r2, #0]

		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "Battery: %d/10 \r\n",
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <battle+0x334>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <battle+0x338>)
 800192c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001930:	4814      	ldr	r0, [pc, #80]	; (8001984 <battle+0x320>)
 8001932:	f004 fc55 	bl	80061e0 <sniprintf>
				fluxer_battery);
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001936:	4813      	ldr	r0, [pc, #76]	; (8001984 <battle+0x320>)
 8001938:	f7fe fc4a 	bl	80001d0 <strlen>
 800193c:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800193e:	b29a      	uxth	r2, r3
 8001940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001944:	490f      	ldr	r1, [pc, #60]	; (8001984 <battle+0x320>)
 8001946:	4810      	ldr	r0, [pc, #64]	; (8001988 <battle+0x324>)
 8001948:	f002 ff20 	bl	800478c <HAL_UART_Transmit>
	 * 			3. Reset flags to SAFE before leaving exploration mode
	 * 			and reaching to warning state.
	 * 			4. Reset count_warnings counter to 0.
	 * 			5. Set the EXPLORATION_WARNING_STATE flag to 1.
	 */
	if ((sensor_data_t_battle.temperature_data >= 70
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <battle+0x304>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80019a0 <battle+0x33c>
 8001956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	f280 8080 	bge.w	8001a62 <battle+0x3fe>
 8001962:	e01f      	b.n	80019a4 <battle+0x340>
 8001964:	20000488 	.word	0x20000488
 8001968:	200004f0 	.word	0x200004f0
 800196c:	42c80000 	.word	0x42c80000
 8001970:	20000500 	.word	0x20000500
 8001974:	447a0000 	.word	0x447a0000
 8001978:	20000528 	.word	0x20000528
 800197c:	20000514 	.word	0x20000514
 8001980:	08008518 	.word	0x08008518
 8001984:	20000350 	.word	0x20000350
 8001988:	200002c8 	.word	0x200002c8
 800198c:	20000494 	.word	0x20000494
 8001990:	48000400 	.word	0x48000400
 8001994:	20000498 	.word	0x20000498
 8001998:	20000001 	.word	0x20000001
 800199c:	08008588 	.word	0x08008588
 80019a0:	428c0000 	.word	0x428c0000
			|| sensor_data_t_battle.temperature_data < -20)
 80019a4:	4b41      	ldr	r3, [pc, #260]	; (8001aac <battle+0x448>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d454      	bmi.n	8001a62 <battle+0x3fe>
			|| sensor_data_t_battle.humidity_data <= HUM_THRESHOLD
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <battle+0x448>)
 80019ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80019be:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001ab0 <battle+0x44c>
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d94a      	bls.n	8001a62 <battle+0x3fe>
			|| (sensor_data_t_battle.pressure_data >= PRES_THRESHOLD_MAX
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <battle+0x448>)
 80019ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80019d2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001ab4 <battle+0x450>
 80019d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	da40      	bge.n	8001a62 <battle+0x3fe>
					|| sensor_data_t_battle.pressure_data <= PRES_THRESHOLD_MIN)
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <battle+0x448>)
 80019e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80019e6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ab8 <battle+0x454>
 80019ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d936      	bls.n	8001a62 <battle+0x3fe>
			|| sensor_data_t_battle.accelerometer_data[0] >= 10
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <battle+0x448>)
 80019f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80019fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	da2c      	bge.n	8001a62 <battle+0x3fe>
			// || sensor_data_t_battle.accelerometer_data[1] >= 1000
			// || sensor_data_t_battle.accelerometer_data[2] >= 1000
			|| abs(
					(int) sensor_data_t_battle.gyroscope_data[0]
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <battle+0x448>)
 8001a0a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a12:	ee17 3a90 	vmov	r3, s15
			|| abs(
 8001a16:	2b13      	cmp	r3, #19
 8001a18:	dc23      	bgt.n	8001a62 <battle+0x3fe>
							>= GYRO_THRESHOLD)
			|| abs(
					(int) sensor_data_t_battle.gyroscope_data[1]
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <battle+0x448>)
 8001a1c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
			|| abs(
 8001a28:	2b13      	cmp	r3, #19
 8001a2a:	dc1a      	bgt.n	8001a62 <battle+0x3fe>
							>= GYRO_THRESHOLD)
			// || sensor_data_t_battle.gyroscope_data[2] >= 2000000
			|| abs(
					(int) sensor_data_t_battle.magnetometer_data[0]
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <battle+0x448>)
 8001a2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a36:	ee17 3a90 	vmov	r3, s15
			|| abs(
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	dc11      	bgt.n	8001a62 <battle+0x3fe>
							>= MAG_THRESHOLD)
			|| abs(
					(int) sensor_data_t_battle.magnetometer_data[1]
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <battle+0x448>)
 8001a40:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a48:	ee17 3a90 	vmov	r3, s15
			|| abs(
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	dc08      	bgt.n	8001a62 <battle+0x3fe>
							>= MAG_THRESHOLD)
			|| abs(
					(int) sensor_data_t_battle.magnetometer_data[2]
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <battle+0x448>)
 8001a52:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5a:	ee17 3a90 	vmov	r3, s15
			|| abs(
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	dd02      	ble.n	8001a68 <battle+0x404>
							>= MAG_THRESHOLD)) {
		BATTLE_WARNING_STATE = 1;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <battle+0x458>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
	}

	// Used for testing BATTLE_WARNING_STATE
	int stateOfPushButton = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8001a68:	2104      	movs	r1, #4
 8001a6a:	4815      	ldr	r0, [pc, #84]	; (8001ac0 <battle+0x45c>)
 8001a6c:	f001 ffc6 	bl	80039fc <HAL_GPIO_ReadPin>
 8001a70:	4603      	mov	r3, r0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (stateOfPushButton == 1) {
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d113      	bne.n	8001aa2 <battle+0x43e>
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE,
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <battle+0x460>)
 8001a7c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a80:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <battle+0x464>)
 8001a82:	f004 fbad 	bl	80061e0 <sniprintf>
				"BATTLE_WARNING_STATE enabled \r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001a86:	4810      	ldr	r0, [pc, #64]	; (8001ac8 <battle+0x464>)
 8001a88:	f7fe fba2 	bl	80001d0 <strlen>
 8001a8c:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <battle+0x464>)
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <battle+0x468>)
 8001a98:	f002 fe78 	bl	800478c <HAL_UART_Transmit>
		BATTLE_WARNING_STATE = 1;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <battle+0x458>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	; 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aac:	200004f0 	.word	0x200004f0
 8001ab0:	42400000 	.word	0x42400000
 8001ab4:	47cd1400 	.word	0x47cd1400
 8001ab8:	47afc800 	.word	0x47afc800
 8001abc:	2000034c 	.word	0x2000034c
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	0800859c 	.word	0x0800859c
 8001ac8:	20000350 	.word	0x20000350
 8001acc:	200002c8 	.word	0x200002c8

08001ad0 <charge_fluxer_battery>:

static void charge_fluxer_battery(void) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	// Fluxer recharging using PB.
	if (fluxer_battery <= 10 && BATTLE_WARNING_STATE == 0) {
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <charge_fluxer_battery+0x3c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d80d      	bhi.n	8001af8 <charge_fluxer_battery+0x28>
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <charge_fluxer_battery+0x40>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <charge_fluxer_battery+0x28>
		fluxer_battery += 1;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <charge_fluxer_battery+0x3c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <charge_fluxer_battery+0x3c>)
 8001aee:	701a      	strb	r2, [r3, #0]
		press = 0;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <charge_fluxer_battery+0x44>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e003      	b.n	8001b00 <charge_fluxer_battery+0x30>
	} else {
		press = 0;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <charge_fluxer_battery+0x44>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	}
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000001 	.word	0x20000001
 8001b10:	2000034c 	.word	0x2000034c
 8001b14:	20000349 	.word	0x20000349

08001b18 <battle_warning>:

static void battle_warning(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	// Toggle WARNING LED every 3 seconds.
	if ((HAL_GetTick() - time_BATTLE_WARNING_LED) > 3000) {
 8001b1c:	f001 fbb2 	bl	8003284 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <battle_warning+0x70>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d909      	bls.n	8001b44 <battle_warning+0x2c>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b34:	4815      	ldr	r0, [pc, #84]	; (8001b8c <battle_warning+0x74>)
 8001b36:	f001 ff91 	bl	8003a5c <HAL_GPIO_TogglePin>
		time_BATTLE_WARNING_LED = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 8001b3a:	f001 fba3 	bl	8003284 <HAL_GetTick>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <battle_warning+0x70>)
 8001b42:	6013      	str	r3, [r2, #0]
	}

	// Warning Message sent every once a second
	if ((HAL_GetTick() - time_BATTLE_WARNING_MESSAGE) > 1000) {
 8001b44:	f001 fb9e 	bl	8003284 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <battle_warning+0x78>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b54:	d915      	bls.n	8001b82 <battle_warning+0x6a>
		// send BATTLE mode: SOS
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "BATTLE mode: SOS \r\n");
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <battle_warning+0x7c>)
 8001b58:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b5c:	480e      	ldr	r0, [pc, #56]	; (8001b98 <battle_warning+0x80>)
 8001b5e:	f004 fb3f 	bl	80061e0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <battle_warning+0x80>)
 8001b64:	f7fe fb34 	bl	80001d0 <strlen>
 8001b68:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b70:	4909      	ldr	r1, [pc, #36]	; (8001b98 <battle_warning+0x80>)
 8001b72:	480a      	ldr	r0, [pc, #40]	; (8001b9c <battle_warning+0x84>)
 8001b74:	f002 fe0a 	bl	800478c <HAL_UART_Transmit>
		time_BATTLE_WARNING_MESSAGE = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 8001b78:	f001 fb84 	bl	8003284 <HAL_GetTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <battle_warning+0x78>)
 8001b80:	6013      	str	r3, [r2, #0]
	}
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000048c 	.word	0x2000048c
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	20000490 	.word	0x20000490
 8001b94:	080085bc 	.word	0x080085bc
 8001b98:	20000350 	.word	0x20000350
 8001b9c:	200002c8 	.word	0x200002c8

08001ba0 <reset_sensor_warning_flags>:
/**
 * @brief  	Set the flags of various sensors to the default state
 * @note	For example, accflag = SAFE; gyroflag = SAFE; and so on ...
 * @retval	None
 */
static void reset_sensor_warning_flags(void) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
	GYROSCOPE_Flag = SAFE;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <reset_sensor_warning_flags+0x28>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
	MAGNETOMETER_Flag = SAFE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <reset_sensor_warning_flags+0x2c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
	PRESSURE_Flag = SAFE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <reset_sensor_warning_flags+0x30>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
	HUMIDITY_Flag = SAFE;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <reset_sensor_warning_flags+0x34>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2000049c 	.word	0x2000049c
 8001bcc:	2000049d 	.word	0x2000049d
 8001bd0:	2000049e 	.word	0x2000049e
 8001bd4:	2000049f 	.word	0x2000049f

08001bd8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) //For LED and PB
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]

	//GPIO Ports Clock Enable
	__HAL_RCC_GPIOA_CLK_ENABLE();// D8 Arduino Pinout
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a32      	ldr	r2, [pc, #200]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE(); // For LED
 8001c06:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE(); // For Push Button
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a26      	ldr	r2, [pc, #152]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <MX_GPIO_Init+0xe4>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

	//Configure GPIO pin Output Level // Pin Initialization
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3c:	4820      	ldr	r0, [pc, #128]	; (8001cc0 <MX_GPIO_Init+0xe8>)
 8001c3e:	f001 fef5 	bl	8003a2c <HAL_GPIO_WritePin>

	//Configure GPIO pin LED2_Pin  // Pin Configuration
	GPIO_InitStruct.Pin = LED2_Pin;
 8001c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4819      	ldr	r0, [pc, #100]	; (8001cc0 <MX_GPIO_Init+0xe8>)
 8001c5c:	f001 fc30 	bl	80034c0 <HAL_GPIO_Init>

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c64:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <MX_GPIO_Init+0xf0>)
 8001c76:	f001 fc23 	bl	80034c0 <HAL_GPIO_Init>

	// Testing single press and double press
	// Configuration of D7 as input
	GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // Pull-down activation
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // PA4
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f001 fc16 	bl	80034c0 <HAL_GPIO_Init>

	// Configuration of D8 as input
	GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001c94:	2304      	movs	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // Pull-down activation
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); // PB2
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_GPIO_Init+0xe8>)
 8001ca8:	f001 fc0a 	bl	80034c0 <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cac:	2028      	movs	r0, #40	; 0x28
 8001cae:	f001 fbec 	bl	800348a <HAL_NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	10210000 	.word	0x10210000
 8001cc8:	48000800 	.word	0x48000800

08001ccc <UART1_Init>:
 *
 * @note
 *
 * @retval	None
 */
static void UART1_Init(void) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <UART1_Init+0xa0>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <UART1_Init+0xa0>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <UART1_Init+0xa0>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8001cfc:	23c0      	movs	r3, #192	; 0xc0
 8001cfe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4817      	ldr	r0, [pc, #92]	; (8001d70 <UART1_Init+0xa4>)
 8001d12:	f001 fbd5 	bl	80034c0 <HAL_GPIO_Init>

	/* Configuring UART1 */
	huart1.Instance = USART1;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <UART1_Init+0xa8>)
 8001d18:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <UART1_Init+0xac>)
 8001d1a:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <UART1_Init+0xa8>)
 8001d1e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d22:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <UART1_Init+0xa8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <UART1_Init+0xa8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <UART1_Init+0xa8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <UART1_Init+0xa8>)
 8001d38:	220c      	movs	r2, #12
 8001d3a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <UART1_Init+0xa8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <UART1_Init+0xa8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <UART1_Init+0xa8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <UART1_Init+0xa8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001d54:	4807      	ldr	r0, [pc, #28]	; (8001d74 <UART1_Init+0xa8>)
 8001d56:	f002 fccb 	bl	80046f0 <HAL_UART_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d000      	beq.n	8001d62 <UART1_Init+0x96>
		while (1)
 8001d60:	e7fe      	b.n	8001d60 <UART1_Init+0x94>
			;
	}
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	200002c8 	.word	0x200002c8
 8001d78:	40013800 	.word	0x40013800

08001d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_MspInit+0x44>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_MspInit+0x44>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <HAL_I2C_MspInit+0x7c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d128      	bne.n	8001e38 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_I2C_MspInit+0x80>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_I2C_MspInit+0x80>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_I2C_MspInit+0x80>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001dfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e04:	2312      	movs	r3, #18
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e10:	2304      	movs	r3, #4
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480b      	ldr	r0, [pc, #44]	; (8001e48 <HAL_I2C_MspInit+0x84>)
 8001e1c:	f001 fb50 	bl	80034c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_I2C_MspInit+0x80>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_I2C_MspInit+0x80>)
 8001e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_I2C_MspInit+0x80>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40005800 	.word	0x40005800
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400

08001e4c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_I2C_MspDeInit+0x30>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10a      	bne.n	8001e74 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_I2C_MspDeInit+0x34>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_I2C_MspDeInit+0x34>)
 8001e64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e68:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001e6a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_I2C_MspDeInit+0x38>)
 8001e70:	f001 fcd0 	bl	8003814 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40005800 	.word	0x40005800
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48000400 	.word	0x48000400

08001e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	; 0x30
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <HAL_UART_MspInit+0xd8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d128      	bne.n	8001efc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	4a2d      	ldr	r2, [pc, #180]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eea:	2307      	movs	r3, #7
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	481c      	ldr	r0, [pc, #112]	; (8001f68 <HAL_UART_MspInit+0xe0>)
 8001ef6:	f001 fae3 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001efa:	e02d      	b.n	8001f58 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <HAL_UART_MspInit+0xe4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d128      	bne.n	8001f58 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6593      	str	r3, [r2, #88]	; 0x58
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_UART_MspInit+0xdc>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001f36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f48:	2307      	movs	r3, #7
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <HAL_UART_MspInit+0xe8>)
 8001f54:	f001 fab4 	bl	80034c0 <HAL_GPIO_Init>
}
 8001f58:	bf00      	nop
 8001f5a:	3730      	adds	r7, #48	; 0x30
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40021000 	.word	0x40021000
 8001f68:	48000400 	.word	0x48000400
 8001f6c:	40004800 	.word	0x40004800
 8001f70:	48000c00 	.word	0x48000c00

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <MemManage_Handler+0x4>

08001f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc8:	f001 f94a 	bl	8003260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001fd4:	2020      	movs	r0, #32
 8001fd6:	f001 fd5b 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fda:	2040      	movs	r0, #64	; 0x40
 8001fdc:	f001 fd58 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001fe0:	2080      	movs	r0, #128	; 0x80
 8001fe2:	f001 fd55 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001fe6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fea:	f001 fd51 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ff6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ffa:	f001 fd49 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ffe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002002:	f001 fd45 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002006:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800200a:	f001 fd41 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800200e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002012:	f001 fd3d 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002016:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800201a:	f001 fd39 	bl	8003a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_sbrk+0x50>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x16>
		heap_end = &end;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <_sbrk+0x50>)
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <_sbrk+0x54>)
 8002038:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <_sbrk+0x50>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <_sbrk+0x50>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	466a      	mov	r2, sp
 800204a:	4293      	cmp	r3, r2
 800204c:	d907      	bls.n	800205e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800204e:	f003 fa7f 	bl	8005550 <__errno>
 8002052:	4603      	mov	r3, r0
 8002054:	220c      	movs	r2, #12
 8002056:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
 800205c:	e006      	b.n	800206c <_sbrk+0x48>
	}

	heap_end += incr;
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <_sbrk+0x50>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a03      	ldr	r2, [pc, #12]	; (8002074 <_sbrk+0x50>)
 8002068:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000540 	.word	0x20000540
 8002078:	20000660 	.word	0x20000660

0800207c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <SystemInit+0x64>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <SystemInit+0x64>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <SystemInit+0x68>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <SystemInit+0x68>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <SystemInit+0x68>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <SystemInit+0x68>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <SystemInit+0x68>)
 80020a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <SystemInit+0x68>)
 80020b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <SystemInit+0x68>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <SystemInit+0x68>)
 80020c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <SystemInit+0x68>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SystemInit+0x64>)
 80020ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020d2:	609a      	str	r2, [r3, #8]
#endif
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00
 80020e4:	40021000 	.word	0x40021000

080020e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002120 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020ee:	e003      	b.n	80020f8 <LoopCopyDataInit>

080020f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020f6:	3104      	adds	r1, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <LoopForever+0xe>)
	adds	r2, r0, r1
 80020fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002100:	d3f6      	bcc.n	80020f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002104:	e002      	b.n	800210c <LoopFillZerobss>

08002106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002106:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002108:	f842 3b04 	str.w	r3, [r2], #4

0800210c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <LoopForever+0x16>)
	cmp	r2, r3
 800210e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002110:	d3f9      	bcc.n	8002106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002112:	f7ff ffb3 	bl	800207c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002116:	f003 fb17 	bl	8005748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800211a:	f7fe feff 	bl	8000f1c <main>

0800211e <LoopForever>:

LoopForever:
    b LoopForever
 800211e:	e7fe      	b.n	800211e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002120:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002124:	080089f0 	.word	0x080089f0
	ldr	r0, =_sdata
 8002128:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800212c:	200002a4 	.word	0x200002a4
	ldr	r2, =_sbss
 8002130:	200002a4 	.word	0x200002a4
	ldr	r3, = _ebss
 8002134:	2000065c 	.word	0x2000065c

08002138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_2_IRQHandler>
	...

0800213c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <I2Cx_MspInit+0xa8>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <I2Cx_MspInit+0xa8>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <I2Cx_MspInit+0xa8>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800215c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002160:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002162:	2312      	movs	r3, #18
 8002164:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002166:	2301      	movs	r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800216e:	2304      	movs	r3, #4
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	481b      	ldr	r0, [pc, #108]	; (80021e8 <I2Cx_MspInit+0xac>)
 800217a:	f001 f9a1 	bl	80034c0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <I2Cx_MspInit+0xac>)
 8002186:	f001 f99b 	bl	80034c0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <I2Cx_MspInit+0xa8>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <I2Cx_MspInit+0xa8>)
 8002190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002194:	6593      	str	r3, [r2, #88]	; 0x58
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <I2Cx_MspInit+0xa8>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <I2Cx_MspInit+0xa8>)
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <I2Cx_MspInit+0xa8>)
 80021a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <I2Cx_MspInit+0xa8>)
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <I2Cx_MspInit+0xa8>)
 80021b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	210f      	movs	r1, #15
 80021be:	2021      	movs	r0, #33	; 0x21
 80021c0:	f001 f947 	bl	8003452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80021c4:	2021      	movs	r0, #33	; 0x21
 80021c6:	f001 f960 	bl	800348a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	210f      	movs	r1, #15
 80021ce:	2022      	movs	r0, #34	; 0x22
 80021d0:	f001 f93f 	bl	8003452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80021d4:	2022      	movs	r0, #34	; 0x22
 80021d6:	f001 f958 	bl	800348a <HAL_NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3728      	adds	r7, #40	; 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	48000400 	.word	0x48000400

080021ec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <I2Cx_Init+0x54>)
 80021f8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <I2Cx_Init+0x58>)
 80021fe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff89 	bl	800213c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f001 fc48 	bl	8003ac0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f002 f94c 	bl	80044d0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40005800 	.word	0x40005800
 8002244:	00702681 	.word	0x00702681

08002248 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af04      	add	r7, sp, #16
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	4608      	mov	r0, r1
 8002252:	4611      	mov	r1, r2
 8002254:	461a      	mov	r2, r3
 8002256:	4603      	mov	r3, r0
 8002258:	72fb      	strb	r3, [r7, #11]
 800225a:	460b      	mov	r3, r1
 800225c:	813b      	strh	r3, [r7, #8]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	b299      	uxth	r1, r3
 800226a:	88f8      	ldrh	r0, [r7, #6]
 800226c:	893a      	ldrh	r2, [r7, #8]
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	4603      	mov	r3, r0
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f001 fdf0 	bl	8003e64 <HAL_I2C_Mem_Read>
 8002284:	4603      	mov	r3, r0
 8002286:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	4619      	mov	r1, r3
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f832 	bl	80022fc <I2Cx_Error>
  }
  return status;
 8002298:	7dfb      	ldrb	r3, [r7, #23]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08a      	sub	sp, #40	; 0x28
 80022a6:	af04      	add	r7, sp, #16
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	4608      	mov	r0, r1
 80022ac:	4611      	mov	r1, r2
 80022ae:	461a      	mov	r2, r3
 80022b0:	4603      	mov	r3, r0
 80022b2:	72fb      	strb	r3, [r7, #11]
 80022b4:	460b      	mov	r3, r1
 80022b6:	813b      	strh	r3, [r7, #8]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	b299      	uxth	r1, r3
 80022c4:	88f8      	ldrh	r0, [r7, #6]
 80022c6:	893a      	ldrh	r2, [r7, #8]
 80022c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4603      	mov	r3, r0
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f001 fcaf 	bl	8003c3c <HAL_I2C_Mem_Write>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	4619      	mov	r1, r3
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f805 	bl	80022fc <I2Cx_Error>
  }
  return status;
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f001 fc68 	bl	8003bde <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff6c 	bl	80021ec <I2Cx_Init>
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <SENSOR_IO_Init+0x10>)
 8002322:	f7ff ff63 	bl	80021ec <I2Cx_Init>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000544 	.word	0x20000544

08002330 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af02      	add	r7, sp, #8
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	460b      	mov	r3, r1
 800233c:	71bb      	strb	r3, [r7, #6]
 800233e:	4613      	mov	r3, r2
 8002340:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002342:	79bb      	ldrb	r3, [r7, #6]
 8002344:	b29a      	uxth	r2, r3
 8002346:	79f9      	ldrb	r1, [r7, #7]
 8002348:	2301      	movs	r3, #1
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	1d7b      	adds	r3, r7, #5
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <SENSOR_IO_Write+0x30>)
 8002354:	f7ff ffa5 	bl	80022a2 <I2Cx_WriteMultiple>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000544 	.word	0x20000544

08002364 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	4603      	mov	r3, r0
 800236c:	460a      	mov	r2, r1
 800236e:	71fb      	strb	r3, [r7, #7]
 8002370:	4613      	mov	r3, r2
 8002372:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002378:	79bb      	ldrb	r3, [r7, #6]
 800237a:	b29a      	uxth	r2, r3
 800237c:	79f9      	ldrb	r1, [r7, #7]
 800237e:	2301      	movs	r3, #1
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	f107 030f 	add.w	r3, r7, #15
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <SENSOR_IO_Read+0x38>)
 800238c:	f7ff ff5c 	bl	8002248 <I2Cx_ReadMultiple>

  return read_value;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000544 	.word	0x20000544

080023a0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	603a      	str	r2, [r7, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
 80023ae:	460b      	mov	r3, r1
 80023b0:	71bb      	strb	r3, [r7, #6]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	79f9      	ldrb	r1, [r7, #7]
 80023bc:	88bb      	ldrh	r3, [r7, #4]
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2301      	movs	r3, #1
 80023c6:	4804      	ldr	r0, [pc, #16]	; (80023d8 <SENSOR_IO_ReadMultiple+0x38>)
 80023c8:	f7ff ff3e 	bl	8002248 <I2Cx_ReadMultiple>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b29b      	uxth	r3, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000544 	.word	0x20000544

080023dc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80023e6:	2300      	movs	r3, #0
 80023e8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <BSP_ACCELERO_Init+0x74>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4798      	blx	r3
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b6a      	cmp	r3, #106	; 0x6a
 80023f4:	d002      	beq.n	80023fc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e024      	b.n	8002446 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <BSP_ACCELERO_Init+0x78>)
 80023fe:	4a14      	ldr	r2, [pc, #80]	; (8002450 <BSP_ACCELERO_Init+0x74>)
 8002400:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002402:	2330      	movs	r3, #48	; 0x30
 8002404:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800240a:	2300      	movs	r3, #0
 800240c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800240e:	2340      	movs	r3, #64	; 0x40
 8002410:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800241a:	797a      	ldrb	r2, [r7, #5]
 800241c:	7abb      	ldrb	r3, [r7, #10]
 800241e:	4313      	orrs	r3, r2
 8002420:	b2db      	uxtb	r3, r3
 8002422:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002424:	7a3b      	ldrb	r3, [r7, #8]
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	b2db      	uxtb	r3, r3
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b21a      	sxth	r2, r3
 8002430:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	b21b      	sxth	r3, r3
 8002438:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <BSP_ACCELERO_Init+0x78>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	89ba      	ldrh	r2, [r7, #12]
 8002442:	4610      	mov	r0, r2
 8002444:	4798      	blx	r3
  }  

  return ret;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000064 	.word	0x20000064
 8002454:	20000590 	.word	0x20000590

08002458 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	2b00      	cmp	r3, #0
 8002470:	d004      	beq.n	800247c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
    }
  }
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000590 	.word	0x20000590

08002488 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002492:	2300      	movs	r3, #0
 8002494:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <BSP_GYRO_Init+0x7c>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4798      	blx	r3
 800249c:	4603      	mov	r3, r0
 800249e:	2b6a      	cmp	r3, #106	; 0x6a
 80024a0:	d002      	beq.n	80024a8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e028      	b.n	80024fa <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <BSP_GYRO_Init+0x80>)
 80024aa:	4a16      	ldr	r2, [pc, #88]	; (8002504 <BSP_GYRO_Init+0x7c>)
 80024ac:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80024b2:	2330      	movs	r3, #48	; 0x30
 80024b4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80024be:	2340      	movs	r3, #64	; 0x40
 80024c0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80024c6:	230c      	movs	r3, #12
 80024c8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80024ca:	7aba      	ldrb	r2, [r7, #10]
 80024cc:	797b      	ldrb	r3, [r7, #5]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80024d4:	7a3b      	ldrb	r3, [r7, #8]
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	b21a      	sxth	r2, r3
 80024e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <BSP_GYRO_Init+0x80>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	89ba      	ldrh	r2, [r7, #12]
 80024f2:	4610      	mov	r0, r2
 80024f4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000098 	.word	0x20000098
 8002508:	20000594 	.word	0x20000594

0800250c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <BSP_GYRO_GetXYZ+0x2c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <BSP_GYRO_GetXYZ+0x2c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <BSP_GYRO_GetXYZ+0x2c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
    }
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000594 	.word	0x20000594

0800253c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <BSP_HSENSOR_Init+0x38>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	20be      	movs	r0, #190	; 0xbe
 8002548:	4798      	blx	r3
 800254a:	4603      	mov	r3, r0
 800254c:	2bbc      	cmp	r3, #188	; 0xbc
 800254e:	d002      	beq.n	8002556 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	e009      	b.n	800256a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <BSP_HSENSOR_Init+0x3c>)
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <BSP_HSENSOR_Init+0x38>)
 800255a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <BSP_HSENSOR_Init+0x3c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	20be      	movs	r0, #190	; 0xbe
 8002564:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800256a:	687b      	ldr	r3, [r7, #4]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000008 	.word	0x20000008
 8002578:	20000598 	.word	0x20000598

0800257c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	20be      	movs	r0, #190	; 0xbe
 8002588:	4798      	blx	r3
 800258a:	eef0 7a40 	vmov.f32	s15, s0
}
 800258e:	eeb0 0a67 	vmov.f32	s0, s15
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000598 	.word	0x20000598

08002598 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <BSP_MAGNETO_Init+0x50>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4798      	blx	r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b3d      	cmp	r3, #61	; 0x3d
 80025ac:	d002      	beq.n	80025b4 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	71fb      	strb	r3, [r7, #7]
 80025b2:	e013      	b.n	80025dc <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <BSP_MAGNETO_Init+0x54>)
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <BSP_MAGNETO_Init+0x50>)
 80025b8:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80025ba:	2358      	movs	r3, #88	; 0x58
 80025bc:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80025be:	2300      	movs	r3, #0
 80025c0:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80025c6:	2308      	movs	r3, #8
 80025c8:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80025ca:	2340      	movs	r3, #64	; 0x40
 80025cc:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <BSP_MAGNETO_Init+0x54>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	463a      	mov	r2, r7
 80025d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025da:	4798      	blx	r3
  } 

  return ret;  
 80025dc:	79fb      	ldrb	r3, [r7, #7]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000024 	.word	0x20000024
 80025ec:	2000059c 	.word	0x2000059c

080025f0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <BSP_MAGNETO_GetXYZ+0x2c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <BSP_MAGNETO_GetXYZ+0x2c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <BSP_MAGNETO_GetXYZ+0x2c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
    }
  }
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	2000059c 	.word	0x2000059c

08002620 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <BSP_PSENSOR_Init+0x38>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	20ba      	movs	r0, #186	; 0xba
 800262c:	4798      	blx	r3
 800262e:	4603      	mov	r3, r0
 8002630:	2bb1      	cmp	r3, #177	; 0xb1
 8002632:	d002      	beq.n	800263a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	e009      	b.n	800264e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <BSP_PSENSOR_Init+0x3c>)
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <BSP_PSENSOR_Init+0x38>)
 800263e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <BSP_PSENSOR_Init+0x3c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	20ba      	movs	r0, #186	; 0xba
 8002648:	4798      	blx	r3
    ret = PSENSOR_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800264e:	687b      	ldr	r3, [r7, #4]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000058 	.word	0x20000058
 800265c:	200005a0 	.word	0x200005a0

08002660 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <BSP_PSENSOR_ReadPressure+0x18>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	20ba      	movs	r0, #186	; 0xba
 800266c:	4798      	blx	r3
 800266e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002672:	eeb0 0a67 	vmov.f32	s0, s15
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200005a0 	.word	0x200005a0

0800267c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <BSP_TSENSOR_Init+0x30>)
 8002688:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <BSP_TSENSOR_Init+0x34>)
 800268a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800268c:	f7ff fe46 	bl	800231c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <BSP_TSENSOR_Init+0x30>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2100      	movs	r1, #0
 8002698:	20be      	movs	r0, #190	; 0xbe
 800269a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80026a0:	79fb      	ldrb	r3, [r7, #7]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200005a4 	.word	0x200005a4
 80026b0:	20000014 	.word	0x20000014

080026b4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <BSP_TSENSOR_ReadTemp+0x18>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	20be      	movs	r0, #190	; 0xbe
 80026c0:	4798      	blx	r3
 80026c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80026c6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200005a4 	.word	0x200005a4

080026d0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2120      	movs	r1, #32
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fe3f 	bl	8002364 <SENSOR_IO_Read>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	f023 0303 	bic.w	r3, r3, #3
 8002700:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002710:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	2120      	movs	r1, #32
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fe08 	bl	8002330 <SENSOR_IO_Write>
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002736:	f7ff fdf1 	bl	800231c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	210f      	movs	r1, #15
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fe0f 	bl	8002364 <SENSOR_IO_Read>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	b2d8      	uxtb	r0, r3
 8002762:	f107 020c 	add.w	r2, r7, #12
 8002766:	2302      	movs	r3, #2
 8002768:	21b0      	movs	r1, #176	; 0xb0
 800276a:	f7ff fe19 	bl	80023a0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800276e:	7b3b      	ldrb	r3, [r7, #12]
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002776:	7b7b      	ldrb	r3, [r7, #13]
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	b2d8      	uxtb	r0, r3
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	2302      	movs	r3, #2
 8002788:	21b6      	movs	r1, #182	; 0xb6
 800278a:	f7ff fe09 	bl	80023a0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800278e:	7b7b      	ldrb	r3, [r7, #13]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	b21a      	sxth	r2, r3
 8002794:	7b3b      	ldrb	r3, [r7, #12]
 8002796:	b21b      	sxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	b2d8      	uxtb	r0, r3
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	2302      	movs	r3, #2
 80027a6:	21ba      	movs	r1, #186	; 0xba
 80027a8:	f7ff fdfa 	bl	80023a0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80027ac:	7b7b      	ldrb	r3, [r7, #13]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	7b3b      	ldrb	r3, [r7, #12]
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	4313      	orrs	r3, r2
 80027b8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	b2d8      	uxtb	r0, r3
 80027be:	f107 020c 	add.w	r2, r7, #12
 80027c2:	2302      	movs	r3, #2
 80027c4:	21a8      	movs	r1, #168	; 0xa8
 80027c6:	f7ff fdeb 	bl	80023a0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	7b3b      	ldrb	r3, [r7, #12]
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80027d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ea:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80027ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002800:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002804:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002816:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800282a:	edd7 7a04 	vldr	s15, [r7, #16]
 800282e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002836:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800283a:	edd7 7a04 	vldr	s15, [r7, #16]
 800283e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002884 <HTS221_H_ReadHumidity+0x130>
 8002842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	dd01      	ble.n	8002850 <HTS221_H_ReadHumidity+0xfc>
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HTS221_H_ReadHumidity+0x134>)
 800284e:	e00a      	b.n	8002866 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002850:	edd7 7a04 	vldr	s15, [r7, #16]
 8002854:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285c:	d502      	bpl.n	8002864 <HTS221_H_ReadHumidity+0x110>
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e000      	b.n	8002866 <HTS221_H_ReadHumidity+0x112>
 8002864:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002866:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002868:	edd7 7a04 	vldr	s15, [r7, #16]
 800286c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002870:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002874:	eef0 7a66 	vmov.f32	s15, s13
}
 8002878:	eeb0 0a67 	vmov.f32	s0, s15
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	447a0000 	.word	0x447a0000
 8002888:	447a0000 	.word	0x447a0000

0800288c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2120      	movs	r1, #32
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fd60 	bl	8002364 <SENSOR_IO_Read>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	f023 0304 	bic.w	r3, r3, #4
 80028ae:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028ce:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	2120      	movs	r1, #32
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fd29 	bl	8002330 <SENSOR_IO_Write>
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b088      	sub	sp, #32
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	b2d8      	uxtb	r0, r3
 80028f4:	f107 0208 	add.w	r2, r7, #8
 80028f8:	2302      	movs	r3, #2
 80028fa:	21b2      	movs	r1, #178	; 0xb2
 80028fc:	f7ff fd50 	bl	80023a0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2135      	movs	r1, #53	; 0x35
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fd2c 	bl	8002364 <SENSOR_IO_Read>
 800290c:	4603      	mov	r3, r0
 800290e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002910:	7ffb      	ldrb	r3, [r7, #31]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	b21b      	sxth	r3, r3
 8002916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291a:	b21a      	sxth	r2, r3
 800291c:	7a3b      	ldrb	r3, [r7, #8]
 800291e:	b21b      	sxth	r3, r3
 8002920:	4313      	orrs	r3, r2
 8002922:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002924:	7ffb      	ldrb	r3, [r7, #31]
 8002926:	019b      	lsls	r3, r3, #6
 8002928:	b21b      	sxth	r3, r3
 800292a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292e:	b21a      	sxth	r2, r3
 8002930:	7a7b      	ldrb	r3, [r7, #9]
 8002932:	b21b      	sxth	r3, r3
 8002934:	4313      	orrs	r3, r2
 8002936:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002938:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800293c:	10db      	asrs	r3, r3, #3
 800293e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002940:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002944:	10db      	asrs	r3, r3, #3
 8002946:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	b2d8      	uxtb	r0, r3
 800294c:	f107 0208 	add.w	r2, r7, #8
 8002950:	2304      	movs	r3, #4
 8002952:	21bc      	movs	r1, #188	; 0xbc
 8002954:	f7ff fd24 	bl	80023a0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002958:	7a7b      	ldrb	r3, [r7, #9]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	b21a      	sxth	r2, r3
 800295e:	7a3b      	ldrb	r3, [r7, #8]
 8002960:	b21b      	sxth	r3, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	b21a      	sxth	r2, r3
 800296c:	7abb      	ldrb	r3, [r7, #10]
 800296e:	b21b      	sxth	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	b2d8      	uxtb	r0, r3
 8002978:	f107 0208 	add.w	r2, r7, #8
 800297c:	2302      	movs	r3, #2
 800297e:	21aa      	movs	r1, #170	; 0xaa
 8002980:	f7ff fd0e 	bl	80023a0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002984:	7a7b      	ldrb	r3, [r7, #9]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b21a      	sxth	r2, r3
 800298a:	7a3b      	ldrb	r3, [r7, #8]
 800298c:	b21b      	sxth	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002992:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002996:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80029a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	ee07 3a90 	vmov	s15, r3
}
 80029ea:	eeb0 0a67 	vmov.f32	s0, s15
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	463b      	mov	r3, r7
 80029fc:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002a00:	783b      	ldrb	r3, [r7, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	2120      	movs	r1, #32
 8002a06:	203c      	movs	r0, #60	; 0x3c
 8002a08:	f7ff fc92 	bl	8002330 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2121      	movs	r1, #33	; 0x21
 8002a12:	203c      	movs	r0, #60	; 0x3c
 8002a14:	f7ff fc8c 	bl	8002330 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002a18:	78bb      	ldrb	r3, [r7, #2]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2122      	movs	r1, #34	; 0x22
 8002a1e:	203c      	movs	r0, #60	; 0x3c
 8002a20:	f7ff fc86 	bl	8002330 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	461a      	mov	r2, r3
 8002a28:	2123      	movs	r1, #35	; 0x23
 8002a2a:	203c      	movs	r0, #60	; 0x3c
 8002a2c:	f7ff fc80 	bl	8002330 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002a30:	793b      	ldrb	r3, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	2124      	movs	r1, #36	; 0x24
 8002a36:	203c      	movs	r0, #60	; 0x3c
 8002a38:	f7ff fc7a 	bl	8002330 <SENSOR_IO_Write>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002a4e:	2122      	movs	r1, #34	; 0x22
 8002a50:	203c      	movs	r0, #60	; 0x3c
 8002a52:	f7ff fc87 	bl	8002364 <SENSOR_IO_Read>
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	f023 0303 	bic.w	r3, r3, #3
 8002a60:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	f043 0303 	orr.w	r3, r3, #3
 8002a68:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2122      	movs	r1, #34	; 0x22
 8002a70:	203c      	movs	r0, #60	; 0x3c
 8002a72:	f7ff fc5d 	bl	8002330 <SENSOR_IO_Write>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002a82:	f7ff fc4b 	bl	800231c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002a86:	210f      	movs	r1, #15
 8002a88:	203c      	movs	r0, #60	; 0x3c
 8002a8a:	f7ff fc6b 	bl	8002364 <SENSOR_IO_Read>
 8002a8e:	4603      	mov	r3, r0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002aa2:	2122      	movs	r1, #34	; 0x22
 8002aa4:	203c      	movs	r0, #60	; 0x3c
 8002aa6:	f7ff fc5d 	bl	8002364 <SENSOR_IO_Read>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	f023 0320 	bic.w	r3, r3, #32
 8002ab4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	f043 0320 	orr.w	r3, r3, #32
 8002ac2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2122      	movs	r1, #34	; 0x22
 8002aca:	203c      	movs	r0, #60	; 0x3c
 8002acc:	f7ff fc30 	bl	8002330 <SENSOR_IO_Write>
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002aee:	2121      	movs	r1, #33	; 0x21
 8002af0:	203c      	movs	r0, #60	; 0x3c
 8002af2:	f7ff fc37 	bl	8002364 <SENSOR_IO_Read>
 8002af6:	4603      	mov	r3, r0
 8002af8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002afa:	f107 0208 	add.w	r2, r7, #8
 8002afe:	2306      	movs	r3, #6
 8002b00:	21a8      	movs	r1, #168	; 0xa8
 8002b02:	203c      	movs	r0, #60	; 0x3c
 8002b04:	f7ff fc4c 	bl	80023a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	e01c      	b.n	8002b48 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	3301      	adds	r3, #1
 8002b14:	3320      	adds	r3, #32
 8002b16:	443b      	add	r3, r7
 8002b18:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	3320      	adds	r3, #32
 8002b28:	443b      	add	r3, r7
 8002b2a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	7ffb      	ldrb	r3, [r7, #31]
 8002b36:	b212      	sxth	r2, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	3320      	adds	r3, #32
 8002b3c:	443b      	add	r3, r7
 8002b3e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002b42:	7ffb      	ldrb	r3, [r7, #31]
 8002b44:	3301      	adds	r3, #1
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d9df      	bls.n	8002b0e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002b54:	2b60      	cmp	r3, #96	; 0x60
 8002b56:	d013      	beq.n	8002b80 <LIS3MDL_MagReadXYZ+0xa8>
 8002b58:	2b60      	cmp	r3, #96	; 0x60
 8002b5a:	dc14      	bgt.n	8002b86 <LIS3MDL_MagReadXYZ+0xae>
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	d00c      	beq.n	8002b7a <LIS3MDL_MagReadXYZ+0xa2>
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	dc10      	bgt.n	8002b86 <LIS3MDL_MagReadXYZ+0xae>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <LIS3MDL_MagReadXYZ+0x96>
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d003      	beq.n	8002b74 <LIS3MDL_MagReadXYZ+0x9c>
 8002b6c:	e00b      	b.n	8002b86 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <LIS3MDL_MagReadXYZ+0xfc>)
 8002b70:	61bb      	str	r3, [r7, #24]
    break;
 8002b72:	e008      	b.n	8002b86 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <LIS3MDL_MagReadXYZ+0x100>)
 8002b76:	61bb      	str	r3, [r7, #24]
    break;
 8002b78:	e005      	b.n	8002b86 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <LIS3MDL_MagReadXYZ+0x104>)
 8002b7c:	61bb      	str	r3, [r7, #24]
    break;
 8002b7e:	e002      	b.n	8002b86 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <LIS3MDL_MagReadXYZ+0x108>)
 8002b82:	61bb      	str	r3, [r7, #24]
    break;    
 8002b84:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	77fb      	strb	r3, [r7, #31]
 8002b8a:	e01a      	b.n	8002bc2 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002b8c:	7ffb      	ldrb	r3, [r7, #31]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	3320      	adds	r3, #32
 8002b92:	443b      	add	r3, r7
 8002b94:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba8:	7ffb      	ldrb	r3, [r7, #31]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb4:	ee17 2a90 	vmov	r2, s15
 8002bb8:	b212      	sxth	r2, r2
 8002bba:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002bbc:	7ffb      	ldrb	r3, [r7, #31]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d9e1      	bls.n	8002b8c <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	3e0f5c29 	.word	0x3e0f5c29
 8002bd8:	3e947ae1 	.word	0x3e947ae1
 8002bdc:	3edc28f6 	.word	0x3edc28f6
 8002be0:	3f147ae1 	.word	0x3f147ae1

08002be4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f879 	bl	8002ce8 <LPS22HB_Init>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002c0c:	f7ff fb86 	bl	800231c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	210f      	movs	r1, #15
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fba4 	bl	8002364 <SENSOR_IO_Read>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	74fb      	strb	r3, [r7, #19]
 8002c3e:	e013      	b.n	8002c68 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	3328      	adds	r3, #40	; 0x28
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	7cfc      	ldrb	r4, [r7, #19]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f7ff fb88 	bl	8002364 <SENSOR_IO_Read>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	f104 0318 	add.w	r3, r4, #24
 8002c5c:	443b      	add	r3, r7
 8002c5e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002c62:	7cfb      	ldrb	r3, [r7, #19]
 8002c64:	3301      	adds	r3, #1
 8002c66:	74fb      	strb	r3, [r7, #19]
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d9e8      	bls.n	8002c40 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	74fb      	strb	r3, [r7, #19]
 8002c72:	e00f      	b.n	8002c94 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	3318      	adds	r3, #24
 8002c78:	443b      	add	r3, r7
 8002c7a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	3301      	adds	r3, #1
 8002c92:	74fb      	strb	r3, [r7, #19]
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d9ec      	bls.n	8002c74 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002caa:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2264      	movs	r2, #100	; 0x64
 8002cb4:	fb02 f303 	mul.w	r3, r2, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da01      	bge.n	8002cc0 <LPS22HB_P_ReadPressure+0x94>
 8002cbc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002cc0:	131b      	asrs	r3, r3, #12
 8002cc2:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002ce4 <LPS22HB_P_ReadPressure+0xb8>
 8002cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cda:	eeb0 0a67 	vmov.f32	s0, s15
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	42c80000 	.word	0x42c80000

08002ce8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	211a      	movs	r1, #26
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fb33 	bl	8002364 <SENSOR_IO_Read>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	211a      	movs	r1, #26
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fb08 	bl	8002330 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2110      	movs	r1, #16
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fb1c 	bl	8002364 <SENSOR_IO_Read>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002d3e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	f023 0302 	bic.w	r3, r3, #2
 8002d46:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	f043 0302 	orr.w	r3, r3, #2
 8002d4e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	2110      	movs	r1, #16
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fae9 	bl	8002330 <SENSOR_IO_Write>
}  
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002d74:	2110      	movs	r1, #16
 8002d76:	20d4      	movs	r0, #212	; 0xd4
 8002d78:	f7ff faf4 	bl	8002364 <SENSOR_IO_Read>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002d84:	7bbb      	ldrb	r3, [r7, #14]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002d8c:	7bba      	ldrb	r2, [r7, #14]
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	461a      	mov	r2, r3
 8002d98:	2110      	movs	r1, #16
 8002d9a:	20d4      	movs	r0, #212	; 0xd4
 8002d9c:	f7ff fac8 	bl	8002330 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002da0:	2112      	movs	r1, #18
 8002da2:	20d4      	movs	r0, #212	; 0xd4
 8002da4:	f7ff fade 	bl	8002364 <SENSOR_IO_Read>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002db4:	7bbb      	ldrb	r3, [r7, #14]
 8002db6:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002dba:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002dbc:	7bba      	ldrb	r2, [r7, #14]
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2112      	movs	r1, #18
 8002dca:	20d4      	movs	r0, #212	; 0xd4
 8002dcc:	f7ff fab0 	bl	8002330 <SENSOR_IO_Write>
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002dde:	2300      	movs	r3, #0
 8002de0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002de2:	2110      	movs	r1, #16
 8002de4:	20d4      	movs	r0, #212	; 0xd4
 8002de6:	f7ff fabd 	bl	8002364 <SENSOR_IO_Read>
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	20d4      	movs	r0, #212	; 0xd4
 8002dfe:	f7ff fa97 	bl	8002330 <SENSOR_IO_Write>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002e0e:	f7ff fa85 	bl	800231c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002e12:	210f      	movs	r1, #15
 8002e14:	20d4      	movs	r0, #212	; 0xd4
 8002e16:	f7ff faa5 	bl	8002364 <SENSOR_IO_Read>
 8002e1a:	4603      	mov	r3, r0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002e2e:	2115      	movs	r1, #21
 8002e30:	20d4      	movs	r0, #212	; 0xd4
 8002e32:	f7ff fa97 	bl	8002364 <SENSOR_IO_Read>
 8002e36:	4603      	mov	r3, r0
 8002e38:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	f023 0310 	bic.w	r3, r3, #16
 8002e40:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	f043 0310 	orr.w	r3, r3, #16
 8002e4e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	461a      	mov	r2, r3
 8002e54:	2115      	movs	r1, #21
 8002e56:	20d4      	movs	r0, #212	; 0xd4
 8002e58:	f7ff fa6a 	bl	8002330 <SENSOR_IO_Write>
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	20d4      	movs	r0, #212	; 0xd4
 8002e7e:	f7ff fa71 	bl	8002364 <SENSOR_IO_Read>
 8002e82:	4603      	mov	r3, r0
 8002e84:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002e86:	f107 0208 	add.w	r2, r7, #8
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	2128      	movs	r1, #40	; 0x28
 8002e8e:	20d4      	movs	r0, #212	; 0xd4
 8002e90:	f7ff fa86 	bl	80023a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e01c      	b.n	8002ed4 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	3320      	adds	r3, #32
 8002ea2:	443b      	add	r3, r7
 8002ea4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	7ffb      	ldrb	r3, [r7, #31]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	3320      	adds	r3, #32
 8002eb4:	443b      	add	r3, r7
 8002eb6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	b212      	sxth	r2, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	3320      	adds	r3, #32
 8002ec8:	443b      	add	r3, r7
 8002eca:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	7ffb      	ldrb	r3, [r7, #31]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d9df      	bls.n	8002e9a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d829      	bhi.n	8002f38 <LSM6DSL_AccReadXYZ+0xd4>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <LSM6DSL_AccReadXYZ+0x88>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08002f39 	.word	0x08002f39
 8002ef4:	08002f39 	.word	0x08002f39
 8002ef8:	08002f39 	.word	0x08002f39
 8002efc:	08002f33 	.word	0x08002f33
 8002f00:	08002f39 	.word	0x08002f39
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f27 	.word	0x08002f27
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	08002f39 	.word	0x08002f39
 8002f1c:	08002f2d 	.word	0x08002f2d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <LSM6DSL_AccReadXYZ+0x120>)
 8002f22:	61bb      	str	r3, [r7, #24]
    break;
 8002f24:	e008      	b.n	8002f38 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <LSM6DSL_AccReadXYZ+0x124>)
 8002f28:	61bb      	str	r3, [r7, #24]
    break;
 8002f2a:	e005      	b.n	8002f38 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <LSM6DSL_AccReadXYZ+0x128>)
 8002f2e:	61bb      	str	r3, [r7, #24]
    break;
 8002f30:	e002      	b.n	8002f38 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <LSM6DSL_AccReadXYZ+0x12c>)
 8002f34:	61bb      	str	r3, [r7, #24]
    break;    
 8002f36:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e01a      	b.n	8002f74 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002f3e:	7ffb      	ldrb	r3, [r7, #31]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	3320      	adds	r3, #32
 8002f44:	443b      	add	r3, r7
 8002f46:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f52:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f66:	ee17 2a90 	vmov	r2, s15
 8002f6a:	b212      	sxth	r2, r2
 8002f6c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	3301      	adds	r3, #1
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	7ffb      	ldrb	r3, [r7, #31]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d9e1      	bls.n	8002f3e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	3720      	adds	r7, #32
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	3d79db23 	.word	0x3d79db23
 8002f88:	3df9db23 	.word	0x3df9db23
 8002f8c:	3e79db23 	.word	0x3e79db23
 8002f90:	3ef9db23 	.word	0x3ef9db23

08002f94 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002fa2:	2111      	movs	r1, #17
 8002fa4:	20d4      	movs	r0, #212	; 0xd4
 8002fa6:	f7ff f9dd 	bl	8002364 <SENSOR_IO_Read>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002fb2:	7bbb      	ldrb	r3, [r7, #14]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002fba:	7bba      	ldrb	r2, [r7, #14]
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002fc2:	7bbb      	ldrb	r3, [r7, #14]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2111      	movs	r1, #17
 8002fc8:	20d4      	movs	r0, #212	; 0xd4
 8002fca:	f7ff f9b1 	bl	8002330 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002fce:	2112      	movs	r1, #18
 8002fd0:	20d4      	movs	r0, #212	; 0xd4
 8002fd2:	f7ff f9c7 	bl	8002364 <SENSOR_IO_Read>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002fe2:	7bbb      	ldrb	r3, [r7, #14]
 8002fe4:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002fe8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002fea:	7bba      	ldrb	r2, [r7, #14]
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002ff2:	7bbb      	ldrb	r3, [r7, #14]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2112      	movs	r1, #18
 8002ff8:	20d4      	movs	r0, #212	; 0xd4
 8002ffa:	f7ff f999 	bl	8002330 <SENSOR_IO_Write>
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800300c:	2300      	movs	r3, #0
 800300e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003010:	2111      	movs	r1, #17
 8003012:	20d4      	movs	r0, #212	; 0xd4
 8003014:	f7ff f9a6 	bl	8002364 <SENSOR_IO_Read>
 8003018:	4603      	mov	r3, r0
 800301a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	461a      	mov	r2, r3
 8003028:	2111      	movs	r1, #17
 800302a:	20d4      	movs	r0, #212	; 0xd4
 800302c:	f7ff f980 	bl	8002330 <SENSOR_IO_Write>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800303c:	f7ff f96e 	bl	800231c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003040:	210f      	movs	r1, #15
 8003042:	20d4      	movs	r0, #212	; 0xd4
 8003044:	f7ff f98e 	bl	8002364 <SENSOR_IO_Read>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	bd80      	pop	{r7, pc}

0800304e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800305c:	2116      	movs	r1, #22
 800305e:	20d4      	movs	r0, #212	; 0xd4
 8003060:	f7ff f980 	bl	8002364 <SENSOR_IO_Read>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800306e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800307c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	461a      	mov	r2, r3
 8003082:	2116      	movs	r1, #22
 8003084:	20d4      	movs	r0, #212	; 0xd4
 8003086:	f7ff f953 	bl	8002330 <SENSOR_IO_Write>
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80030aa:	2111      	movs	r1, #17
 80030ac:	20d4      	movs	r0, #212	; 0xd4
 80030ae:	f7ff f959 	bl	8002364 <SENSOR_IO_Read>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80030b6:	f107 0208 	add.w	r2, r7, #8
 80030ba:	2306      	movs	r3, #6
 80030bc:	2122      	movs	r1, #34	; 0x22
 80030be:	20d4      	movs	r0, #212	; 0xd4
 80030c0:	f7ff f96e 	bl	80023a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e01c      	b.n	8003104 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	3301      	adds	r3, #1
 80030d0:	3320      	adds	r3, #32
 80030d2:	443b      	add	r3, r7
 80030d4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	b29a      	uxth	r2, r3
 80030de:	7ffb      	ldrb	r3, [r7, #31]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	3320      	adds	r3, #32
 80030e4:	443b      	add	r3, r7
 80030e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	7ffb      	ldrb	r3, [r7, #31]
 80030f2:	b212      	sxth	r2, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	3320      	adds	r3, #32
 80030f8:	443b      	add	r3, r7
 80030fa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
 8003100:	3301      	adds	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	7ffb      	ldrb	r3, [r7, #31]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d9df      	bls.n	80030ca <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b0c      	cmp	r3, #12
 8003112:	d829      	bhi.n	8003168 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003151 	.word	0x08003151
 8003120:	08003169 	.word	0x08003169
 8003124:	08003169 	.word	0x08003169
 8003128:	08003169 	.word	0x08003169
 800312c:	08003157 	.word	0x08003157
 8003130:	08003169 	.word	0x08003169
 8003134:	08003169 	.word	0x08003169
 8003138:	08003169 	.word	0x08003169
 800313c:	0800315d 	.word	0x0800315d
 8003140:	08003169 	.word	0x08003169
 8003144:	08003169 	.word	0x08003169
 8003148:	08003169 	.word	0x08003169
 800314c:	08003163 	.word	0x08003163
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003152:	61bb      	str	r3, [r7, #24]
    break;
 8003154:	e008      	b.n	8003168 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003158:	61bb      	str	r3, [r7, #24]
    break;
 800315a:	e005      	b.n	8003168 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800315c:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800315e:	61bb      	str	r3, [r7, #24]
    break;
 8003160:	e002      	b.n	8003168 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8003164:	61bb      	str	r3, [r7, #24]
    break;    
 8003166:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e016      	b.n	800319c <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800316e:	7ffb      	ldrb	r3, [r7, #31]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	3320      	adds	r3, #32
 8003174:	443b      	add	r3, r7
 8003176:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003182:	7ffb      	ldrb	r3, [r7, #31]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	edd7 7a06 	vldr	s15, [r7, #24]
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003196:	7ffb      	ldrb	r3, [r7, #31]
 8003198:	3301      	adds	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	7ffb      	ldrb	r3, [r7, #31]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d9e5      	bls.n	800316e <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	410c0000 	.word	0x410c0000
 80031b0:	418c0000 	.word	0x418c0000
 80031b4:	420c0000 	.word	0x420c0000
 80031b8:	428c0000 	.word	0x428c0000

080031bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c6:	2003      	movs	r0, #3
 80031c8:	f000 f938 	bl	800343c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031cc:	2000      	movs	r0, #0
 80031ce:	f000 f80d 	bl	80031ec <HAL_InitTick>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	71fb      	strb	r3, [r7, #7]
 80031dc:	e001      	b.n	80031e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031de:	f7fe fdcd 	bl	8001d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031e2:	79fb      	ldrb	r3, [r7, #7]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_InitTick+0x68>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d022      	beq.n	8003246 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003200:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_InitTick+0x6c>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_InitTick+0x68>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800320c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	4618      	mov	r0, r3
 8003216:	f000 f946 	bl	80034a6 <HAL_SYSTICK_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10f      	bne.n	8003240 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	d809      	bhi.n	800323a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003226:	2200      	movs	r2, #0
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	f04f 30ff 	mov.w	r0, #4294967295
 800322e:	f000 f910 	bl	8003452 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_InitTick+0x70>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e007      	b.n	800324a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	e004      	b.n	800324a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	e001      	b.n	800324a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200000d0 	.word	0x200000d0
 8003258:	20000004 	.word	0x20000004
 800325c:	200000cc 	.word	0x200000cc

08003260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_IncTick+0x1c>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_IncTick+0x20>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4413      	add	r3, r2
 800326e:	4a03      	ldr	r2, [pc, #12]	; (800327c <HAL_IncTick+0x1c>)
 8003270:	6013      	str	r3, [r2, #0]
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	200005a8 	.word	0x200005a8
 8003280:	200000d0 	.word	0x200000d0

08003284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return uwTick;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_GetTick+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	200005a8 	.word	0x200005a8

0800329c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b8:	4013      	ands	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ce:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	60d3      	str	r3, [r2, #12]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <__NVIC_GetPriorityGrouping+0x18>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 0307 	and.w	r3, r3, #7
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db0b      	blt.n	800332a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <__NVIC_EnableIRQ+0x38>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2001      	movs	r0, #1
 8003322:	fa00 f202 	lsl.w	r2, r0, r2
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000e100 	.word	0xe000e100

0800333c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	db0a      	blt.n	8003366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	490c      	ldr	r1, [pc, #48]	; (8003388 <__NVIC_SetPriority+0x4c>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	440b      	add	r3, r1
 8003360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003364:	e00a      	b.n	800337c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4908      	ldr	r1, [pc, #32]	; (800338c <__NVIC_SetPriority+0x50>)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	3b04      	subs	r3, #4
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	440b      	add	r3, r1
 800337a:	761a      	strb	r2, [r3, #24]
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000e100 	.word	0xe000e100
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f1c3 0307 	rsb	r3, r3, #7
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	bf28      	it	cs
 80033ae:	2304      	movcs	r3, #4
 80033b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d902      	bls.n	80033c0 <NVIC_EncodePriority+0x30>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3b03      	subs	r3, #3
 80033be:	e000      	b.n	80033c2 <NVIC_EncodePriority+0x32>
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	401a      	ands	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	43d9      	mvns	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	4313      	orrs	r3, r2
         );
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003408:	d301      	bcc.n	800340e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800340a:	2301      	movs	r3, #1
 800340c:	e00f      	b.n	800342e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <SysTick_Config+0x40>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003416:	210f      	movs	r1, #15
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	f7ff ff8e 	bl	800333c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <SysTick_Config+0x40>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <SysTick_Config+0x40>)
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	e000e010 	.word	0xe000e010

0800343c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ff29 	bl	800329c <__NVIC_SetPriorityGrouping>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	4603      	mov	r3, r0
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003464:	f7ff ff3e 	bl	80032e4 <__NVIC_GetPriorityGrouping>
 8003468:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	f7ff ff8e 	bl	8003390 <NVIC_EncodePriority>
 8003474:	4602      	mov	r2, r0
 8003476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff5d 	bl	800333c <__NVIC_SetPriority>
}
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff31 	bl	8003300 <__NVIC_EnableIRQ>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffa2 	bl	80033f8 <SysTick_Config>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ce:	e17f      	b.n	80037d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8171 	beq.w	80037ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d00b      	beq.n	8003508 <HAL_GPIO_Init+0x48>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d007      	beq.n	8003508 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034fc:	2b11      	cmp	r3, #17
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b12      	cmp	r3, #18
 8003506:	d130      	bne.n	800356a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800353e:	2201      	movs	r2, #1
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 0201 	and.w	r2, r3, #1
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b03      	cmp	r3, #3
 8003574:	d118      	bne.n	80035a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800357c:	2201      	movs	r2, #1
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	08db      	lsrs	r3, r3, #3
 8003592:	f003 0201 	and.w	r2, r3, #1
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x128>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b12      	cmp	r3, #18
 80035e6:	d123      	bne.n	8003630 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	6939      	ldr	r1, [r7, #16]
 800362c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80ac 	beq.w	80037ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6613      	str	r3, [r2, #96]	; 0x60
 800367e:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800368a:	4a5a      	ldr	r2, [pc, #360]	; (80037f4 <HAL_GPIO_Init+0x334>)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036b4:	d025      	beq.n	8003702 <HAL_GPIO_Init+0x242>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4f      	ldr	r2, [pc, #316]	; (80037f8 <HAL_GPIO_Init+0x338>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <HAL_GPIO_Init+0x23e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <HAL_GPIO_Init+0x33c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_GPIO_Init+0x23a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4d      	ldr	r2, [pc, #308]	; (8003800 <HAL_GPIO_Init+0x340>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0x236>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4c      	ldr	r2, [pc, #304]	; (8003804 <HAL_GPIO_Init+0x344>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_GPIO_Init+0x232>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_GPIO_Init+0x348>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x22e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_GPIO_Init+0x34c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_GPIO_Init+0x22a>
 80036e6:	2306      	movs	r3, #6
 80036e8:	e00c      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036ea:	2307      	movs	r3, #7
 80036ec:	e00a      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036ee:	2305      	movs	r3, #5
 80036f0:	e008      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036f2:	2304      	movs	r3, #4
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e004      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x244>
 8003702:	2300      	movs	r3, #0
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	f002 0203 	and.w	r2, r2, #3
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	4093      	lsls	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003714:	4937      	ldr	r1, [pc, #220]	; (80037f4 <HAL_GPIO_Init+0x334>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003746:	4a32      	ldr	r2, [pc, #200]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800374c:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HAL_GPIO_Init+0x350>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003776:	4b26      	ldr	r3, [pc, #152]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800379a:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_GPIO_Init+0x350>)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_GPIO_Init+0x350>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037c4:	4a12      	ldr	r2, [pc, #72]	; (8003810 <HAL_GPIO_Init+0x350>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f47f ae78 	bne.w	80034d0 <HAL_GPIO_Init+0x10>
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40010000 	.word	0x40010000
 80037f8:	48000400 	.word	0x48000400
 80037fc:	48000800 	.word	0x48000800
 8003800:	48000c00 	.word	0x48000c00
 8003804:	48001000 	.word	0x48001000
 8003808:	48001400 	.word	0x48001400
 800380c:	48001800 	.word	0x48001800
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003822:	e0cd      	b.n	80039c0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003824:	2201      	movs	r2, #1
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80c0 	beq.w	80039ba <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800383a:	4a68      	ldr	r2, [pc, #416]	; (80039dc <HAL_GPIO_DeInit+0x1c8>)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	3302      	adds	r3, #2
 8003842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003846:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	220f      	movs	r2, #15
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003862:	d025      	beq.n	80038b0 <HAL_GPIO_DeInit+0x9c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a5e      	ldr	r2, [pc, #376]	; (80039e0 <HAL_GPIO_DeInit+0x1cc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d01f      	beq.n	80038ac <HAL_GPIO_DeInit+0x98>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a5d      	ldr	r2, [pc, #372]	; (80039e4 <HAL_GPIO_DeInit+0x1d0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d019      	beq.n	80038a8 <HAL_GPIO_DeInit+0x94>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a5c      	ldr	r2, [pc, #368]	; (80039e8 <HAL_GPIO_DeInit+0x1d4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_GPIO_DeInit+0x90>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a5b      	ldr	r2, [pc, #364]	; (80039ec <HAL_GPIO_DeInit+0x1d8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00d      	beq.n	80038a0 <HAL_GPIO_DeInit+0x8c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a5a      	ldr	r2, [pc, #360]	; (80039f0 <HAL_GPIO_DeInit+0x1dc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <HAL_GPIO_DeInit+0x88>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a59      	ldr	r2, [pc, #356]	; (80039f4 <HAL_GPIO_DeInit+0x1e0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_GPIO_DeInit+0x84>
 8003894:	2306      	movs	r3, #6
 8003896:	e00c      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 8003898:	2307      	movs	r3, #7
 800389a:	e00a      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 800389c:	2305      	movs	r3, #5
 800389e:	e008      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e006      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038a4:	2303      	movs	r3, #3
 80038a6:	e004      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e002      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038b0:	2300      	movs	r3, #0
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	f002 0203 	and.w	r2, r2, #3
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	4093      	lsls	r3, r2
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d132      	bne.n	8003928 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	494b      	ldr	r1, [pc, #300]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80038d0:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	4947      	ldr	r1, [pc, #284]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038da:	4013      	ands	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	4944      	ldr	r1, [pc, #272]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80038ec:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	4940      	ldr	r1, [pc, #256]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800390a:	4a34      	ldr	r2, [pc, #208]	; (80039dc <HAL_GPIO_DeInit+0x1c8>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	3302      	adds	r3, #2
 8003912:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	43da      	mvns	r2, r3
 800391a:	4830      	ldr	r0, [pc, #192]	; (80039dc <HAL_GPIO_DeInit+0x1c8>)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	400a      	ands	r2, r1
 8003922:	3302      	adds	r3, #2
 8003924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2103      	movs	r1, #3
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	08d2      	lsrs	r2, r2, #3
 800395c:	4019      	ands	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3208      	adds	r2, #8
 8003962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2103      	movs	r1, #3
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	2101      	movs	r1, #1
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2103      	movs	r1, #3
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	401a      	ands	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	2101      	movs	r1, #1
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	401a      	ands	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f47f af2b 	bne.w	8003824 <HAL_GPIO_DeInit+0x10>
  }
}
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	48000c00 	.word	0x48000c00
 80039ec:	48001000 	.word	0x48001000
 80039f0:	48001400 	.word	0x48001400
 80039f4:	48001800 	.word	0x48001800
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e001      	b.n	8003a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a3c:	787b      	ldrb	r3, [r7, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a74:	887a      	ldrh	r2, [r7, #2]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003a7a:	e002      	b.n	8003a82 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a7c:	887a      	ldrh	r2, [r7, #2]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	619a      	str	r2, [r3, #24]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d006      	beq.n	8003ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aa6:	4a05      	ldr	r2, [pc, #20]	; (8003abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd f9fc 	bl	8000eac <HAL_GPIO_EXTI_Callback>
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40010400 	.word	0x40010400

08003ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e081      	b.n	8003bd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe f96c 	bl	8001dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	; 0x24
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	e006      	b.n	8003b48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d104      	bne.n	8003b5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	ea42 0103 	orr.w	r1, r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	021a      	lsls	r2, r3, #8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69d9      	ldr	r1, [r3, #28]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e021      	b.n	8003c34 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	; 0x24
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7fe f91f 	bl	8001e4c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	817b      	strh	r3, [r7, #10]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	813b      	strh	r3, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	f040 80f9 	bne.w	8003e56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x34>
 8003c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0ed      	b.n	8003e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_I2C_Mem_Write+0x4e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0e6      	b.n	8003e58 <HAL_I2C_Mem_Write+0x21c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c92:	f7ff faf7 	bl	8003284 <HAL_GetTick>
 8003c96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	2319      	movs	r3, #25
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fac3 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0d1      	b.n	8003e58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2221      	movs	r2, #33	; 0x21
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cdc:	88f8      	ldrh	r0, [r7, #6]
 8003cde:	893a      	ldrh	r2, [r7, #8]
 8003ce0:	8979      	ldrh	r1, [r7, #10]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	4603      	mov	r3, r0
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f9d3 	bl	8004098 <I2C_RequestMemoryWrite>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0a9      	b.n	8003e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2bff      	cmp	r3, #255	; 0xff
 8003d0c:	d90e      	bls.n	8003d2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	8979      	ldrh	r1, [r7, #10]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fba5 	bl	8004474 <I2C_TransferConfig>
 8003d2a:	e00f      	b.n	8003d4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	8979      	ldrh	r1, [r7, #10]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fb94 	bl	8004474 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 faad 	bl	80042b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e07b      	b.n	8003e58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d034      	beq.n	8003e04 <HAL_I2C_Mem_Write+0x1c8>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d130      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	2200      	movs	r2, #0
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fa3f 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e04d      	b.n	8003e58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2bff      	cmp	r3, #255	; 0xff
 8003dc4:	d90e      	bls.n	8003de4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22ff      	movs	r2, #255	; 0xff
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	8979      	ldrh	r1, [r7, #10]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fb49 	bl	8004474 <I2C_TransferConfig>
 8003de2:	e00f      	b.n	8003e04 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	8979      	ldrh	r1, [r7, #10]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fb38 	bl	8004474 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d19e      	bne.n	8003d4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa8c 	bl	8004330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e01a      	b.n	8003e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2220      	movs	r2, #32
 8003e28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_I2C_Mem_Write+0x224>)
 8003e36:	400b      	ands	r3, r1
 8003e38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	fe00e800 	.word	0xfe00e800

08003e64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	817b      	strh	r3, [r7, #10]
 8003e76:	460b      	mov	r3, r1
 8003e78:	813b      	strh	r3, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	f040 80fd 	bne.w	8004086 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_I2C_Mem_Read+0x34>
 8003e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0f1      	b.n	8004088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_I2C_Mem_Read+0x4e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e0ea      	b.n	8004088 <HAL_I2C_Mem_Read+0x224>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eba:	f7ff f9e3 	bl	8003284 <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2319      	movs	r3, #25
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f9af 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0d5      	b.n	8004088 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2222      	movs	r2, #34	; 0x22
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2240      	movs	r2, #64	; 0x40
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f04:	88f8      	ldrh	r0, [r7, #6]
 8003f06:	893a      	ldrh	r2, [r7, #8]
 8003f08:	8979      	ldrh	r1, [r7, #10]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	4603      	mov	r3, r0
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f913 	bl	8004140 <I2C_RequestMemoryRead>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0ad      	b.n	8004088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2bff      	cmp	r3, #255	; 0xff
 8003f34:	d90e      	bls.n	8003f54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	22ff      	movs	r2, #255	; 0xff
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	8979      	ldrh	r1, [r7, #10]
 8003f44:	4b52      	ldr	r3, [pc, #328]	; (8004090 <HAL_I2C_Mem_Read+0x22c>)
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fa91 	bl	8004474 <I2C_TransferConfig>
 8003f52:	e00f      	b.n	8003f74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	8979      	ldrh	r1, [r7, #10]
 8003f66:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <HAL_I2C_Mem_Read+0x22c>)
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fa80 	bl	8004474 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f956 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e07c      	b.n	8004088 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d034      	beq.n	8004034 <HAL_I2C_Mem_Read+0x1d0>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d130      	bne.n	8004034 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f927 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e04d      	b.n	8004088 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2bff      	cmp	r3, #255	; 0xff
 8003ff4:	d90e      	bls.n	8004014 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	22ff      	movs	r2, #255	; 0xff
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	b2da      	uxtb	r2, r3
 8004002:	8979      	ldrh	r1, [r7, #10]
 8004004:	2300      	movs	r3, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fa31 	bl	8004474 <I2C_TransferConfig>
 8004012:	e00f      	b.n	8004034 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	b2da      	uxtb	r2, r3
 8004024:	8979      	ldrh	r1, [r7, #10]
 8004026:	2300      	movs	r3, #0
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa20 	bl	8004474 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d19a      	bne.n	8003f74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f974 	bl	8004330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e01a      	b.n	8004088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2220      	movs	r2, #32
 8004058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_I2C_Mem_Read+0x230>)
 8004066:	400b      	ands	r3, r1
 8004068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	80002400 	.word	0x80002400
 8004094:	fe00e800 	.word	0xfe00e800

08004098 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	461a      	mov	r2, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	460b      	mov	r3, r1
 80040ac:	813b      	strh	r3, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	8979      	ldrh	r1, [r7, #10]
 80040b8:	4b20      	ldr	r3, [pc, #128]	; (800413c <I2C_RequestMemoryWrite+0xa4>)
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f9d7 	bl	8004474 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	69b9      	ldr	r1, [r7, #24]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f8f0 	bl	80042b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e02c      	b.n	8004134 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
 80040ea:	e015      	b.n	8004118 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040ec:	893b      	ldrh	r3, [r7, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f8d6 	bl	80042b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e012      	b.n	8004134 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800410e:	893b      	ldrh	r3, [r7, #8]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2200      	movs	r2, #0
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f884 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	80002000 	.word	0x80002000

08004140 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	8979      	ldrh	r1, [r7, #10]
 8004160:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <I2C_RequestMemoryRead+0xa4>)
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2300      	movs	r3, #0
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f984 	bl	8004474 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	69b9      	ldr	r1, [r7, #24]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f89d 	bl	80042b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e02c      	b.n	80041da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	629a      	str	r2, [r3, #40]	; 0x28
 8004190:	e015      	b.n	80041be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004192:	893b      	ldrh	r3, [r7, #8]
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	b29b      	uxth	r3, r3
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	69b9      	ldr	r1, [r7, #24]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f883 	bl	80042b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e012      	b.n	80041da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041b4:	893b      	ldrh	r3, [r7, #8]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2200      	movs	r2, #0
 80041c6:	2140      	movs	r1, #64	; 0x40
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f831 	bl	8004230 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	80002000 	.word	0x80002000

080041e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d103      	bne.n	8004206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d007      	beq.n	8004224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	619a      	str	r2, [r3, #24]
  }
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004240:	e022      	b.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d01e      	beq.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7ff f81b 	bl	8003284 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d113      	bne.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e00f      	b.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d0cd      	beq.n	8004242 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042bc:	e02c      	b.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f870 	bl	80043a8 <I2C_IsAcknowledgeFailed>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e02a      	b.n	8004328 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d01e      	beq.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042da:	f7fe ffd3 	bl	8003284 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d113      	bne.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e007      	b.n	8004328 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b02      	cmp	r3, #2
 8004324:	d1cb      	bne.n	80042be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800433c:	e028      	b.n	8004390 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f830 	bl	80043a8 <I2C_IsAcknowledgeFailed>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e026      	b.n	80043a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe ff97 	bl	8003284 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d113      	bne.n	8004390 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	f043 0220 	orr.w	r2, r3, #32
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e007      	b.n	80043a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b20      	cmp	r3, #32
 800439c:	d1cf      	bne.n	800433e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d151      	bne.n	8004466 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c2:	e022      	b.n	800440a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d01e      	beq.n	800440a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043cc:	f7fe ff5a 	bl	8003284 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <I2C_IsAcknowledgeFailed+0x3a>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d113      	bne.n	800440a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e02e      	b.n	8004468 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b20      	cmp	r3, #32
 8004416:	d1d5      	bne.n	80043c4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2210      	movs	r2, #16
 800441e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2220      	movs	r2, #32
 8004426:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fedd 	bl	80041e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <I2C_IsAcknowledgeFailed+0xc8>)
 800443a:	400b      	ands	r3, r1
 800443c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0204 	orr.w	r2, r3, #4
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	fe00e800 	.word	0xfe00e800

08004474 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	607b      	str	r3, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	817b      	strh	r3, [r7, #10]
 8004482:	4613      	mov	r3, r2
 8004484:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	0d5b      	lsrs	r3, r3, #21
 8004490:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004494:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <I2C_TransferConfig+0x58>)
 8004496:	430b      	orrs	r3, r1
 8004498:	43db      	mvns	r3, r3
 800449a:	ea02 0103 	and.w	r1, r2, r3
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044a4:	7a7b      	ldrb	r3, [r7, #9]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	03ff63ff 	.word	0x03ff63ff

080044d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d138      	bne.n	8004558 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e032      	b.n	800455a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004522:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004576:	4b3e      	ldr	r3, [pc, #248]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004580:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x34>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d121      	bne.n	80045da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d11e      	bne.n	80045da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800459c:	4b34      	ldr	r3, [pc, #208]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045a8:	4b31      	ldr	r3, [pc, #196]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 80045aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	e005      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045c4:	4a2b      	ldr	r2, [pc, #172]	; (8004674 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d102      	bne.n	80045e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045e0:	4b25      	ldr	r3, [pc, #148]	; (8004678 <HAL_RCC_GetSysClockFreq+0x110>)
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	e004      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045ec:	4b23      	ldr	r3, [pc, #140]	; (800467c <HAL_RCC_GetSysClockFreq+0x114>)
 80045ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d134      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d003      	beq.n	800460e <HAL_RCC_GetSysClockFreq+0xa6>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d003      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0xac>
 800460c:	e005      	b.n	800461a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800460e:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <HAL_RCC_GetSysClockFreq+0x110>)
 8004610:	617b      	str	r3, [r7, #20]
      break;
 8004612:	e005      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCC_GetSysClockFreq+0x114>)
 8004616:	617b      	str	r3, [r7, #20]
      break;
 8004618:	e002      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	617b      	str	r3, [r7, #20]
      break;
 800461e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004620:	4b13      	ldr	r3, [pc, #76]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	3301      	adds	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	fb03 f202 	mul.w	r2, r3, r2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	0e5b      	lsrs	r3, r3, #25
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	3301      	adds	r3, #1
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004660:	69bb      	ldr	r3, [r7, #24]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3724      	adds	r7, #36	; 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	080085d8 	.word	0x080085d8
 8004678:	00f42400 	.word	0x00f42400
 800467c:	007a1200 	.word	0x007a1200

08004680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000004 	.word	0x20000004

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800469c:	f7ff fff0 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4904      	ldr	r1, [pc, #16]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	080085d0 	.word	0x080085d0

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046c8:	f7ff ffda 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0adb      	lsrs	r3, r3, #11
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4904      	ldr	r1, [pc, #16]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000
 80046ec:	080085d0 	.word	0x080085d0

080046f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e040      	b.n	8004784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd fbb8 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8c0 	bl	80048b4 <UART_SetConfig>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e022      	b.n	8004784 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fc54 	bl	8004ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fcdb 	bl	8005138 <UART_CheckIdleState>
 8004782:	4603      	mov	r3, r0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	f040 8081 	bne.w	80048a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_UART_Transmit+0x26>
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e079      	b.n	80048aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_UART_Transmit+0x38>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e072      	b.n	80048aa <HAL_UART_Transmit+0x11e>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2221      	movs	r2, #33	; 0x21
 80047d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80047d8:	f7fe fd54 	bl	8003284 <HAL_GetTick>
 80047dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	88fa      	ldrh	r2, [r7, #6]
 80047e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d108      	bne.n	800480a <HAL_UART_Transmit+0x7e>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	e003      	b.n	8004812 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800481a:	e02d      	b.n	8004878 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fccb 	bl	80051c2 <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e039      	b.n	80048aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004848:	b292      	uxth	r2, r2
 800484a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	3302      	adds	r3, #2
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e008      	b.n	8004866 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	b292      	uxth	r2, r2
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	3301      	adds	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1cb      	bne.n	800481c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2200      	movs	r2, #0
 800488c:	2140      	movs	r1, #64	; 0x40
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fc97 	bl	80051c2 <UART_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e005      	b.n	80048aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b8:	b0a0      	sub	sp, #128	; 0x80
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80048be:	2300      	movs	r3, #0
 80048c0:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	431a      	orrs	r2, r3
 80048dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	49a4      	ldr	r1, [pc, #656]	; (8004b7c <UART_SetConfig+0x2c8>)
 80048ec:	4019      	ands	r1, r3
 80048ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004904:	68d9      	ldr	r1, [r3, #12]
 8004906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	ea40 0301 	orr.w	r3, r0, r1
 800490e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b99      	ldr	r3, [pc, #612]	; (8004b80 <UART_SetConfig+0x2cc>)
 800491c:	429a      	cmp	r2, r3
 800491e:	d004      	beq.n	800492a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004926:	4313      	orrs	r3, r2
 8004928:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800492a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800493a:	430b      	orrs	r3, r1
 800493c:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800493e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b90      	ldr	r3, [pc, #576]	; (8004b84 <UART_SetConfig+0x2d0>)
 8004944:	429a      	cmp	r2, r3
 8004946:	d125      	bne.n	8004994 <UART_SetConfig+0xe0>
 8004948:	4b8f      	ldr	r3, [pc, #572]	; (8004b88 <UART_SetConfig+0x2d4>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b03      	cmp	r3, #3
 8004954:	d81a      	bhi.n	800498c <UART_SetConfig+0xd8>
 8004956:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0xa8>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	0800496d 	.word	0x0800496d
 8004960:	0800497d 	.word	0x0800497d
 8004964:	08004975 	.word	0x08004975
 8004968:	08004985 	.word	0x08004985
 800496c:	2301      	movs	r3, #1
 800496e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004972:	e116      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004974:	2302      	movs	r3, #2
 8004976:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800497a:	e112      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 800497c:	2304      	movs	r3, #4
 800497e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004982:	e10e      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004984:	2308      	movs	r3, #8
 8004986:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800498a:	e10a      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 800498c:	2310      	movs	r3, #16
 800498e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004992:	e106      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b7c      	ldr	r3, [pc, #496]	; (8004b8c <UART_SetConfig+0x2d8>)
 800499a:	429a      	cmp	r2, r3
 800499c:	d138      	bne.n	8004a10 <UART_SetConfig+0x15c>
 800499e:	4b7a      	ldr	r3, [pc, #488]	; (8004b88 <UART_SetConfig+0x2d4>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d82d      	bhi.n	8004a08 <UART_SetConfig+0x154>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <UART_SetConfig+0x100>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a09 	.word	0x08004a09
 80049bc:	08004a09 	.word	0x08004a09
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	080049f9 	.word	0x080049f9
 80049c8:	08004a09 	.word	0x08004a09
 80049cc:	08004a09 	.word	0x08004a09
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	080049f1 	.word	0x080049f1
 80049d8:	08004a09 	.word	0x08004a09
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a01 	.word	0x08004a01
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049ee:	e0d8      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049f6:	e0d4      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049fe:	e0d0      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a06:	e0cc      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a0e:	e0c8      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b5e      	ldr	r3, [pc, #376]	; (8004b90 <UART_SetConfig+0x2dc>)
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d125      	bne.n	8004a66 <UART_SetConfig+0x1b2>
 8004a1a:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d016      	beq.n	8004a56 <UART_SetConfig+0x1a2>
 8004a28:	2b30      	cmp	r3, #48	; 0x30
 8004a2a:	d818      	bhi.n	8004a5e <UART_SetConfig+0x1aa>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d00a      	beq.n	8004a46 <UART_SetConfig+0x192>
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d814      	bhi.n	8004a5e <UART_SetConfig+0x1aa>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <UART_SetConfig+0x18a>
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d008      	beq.n	8004a4e <UART_SetConfig+0x19a>
 8004a3c:	e00f      	b.n	8004a5e <UART_SetConfig+0x1aa>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a44:	e0ad      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a46:	2302      	movs	r3, #2
 8004a48:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a4c:	e0a9      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a4e:	2304      	movs	r3, #4
 8004a50:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a54:	e0a5      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a56:	2308      	movs	r3, #8
 8004a58:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a5c:	e0a1      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a5e:	2310      	movs	r3, #16
 8004a60:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a64:	e09d      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b4a      	ldr	r3, [pc, #296]	; (8004b94 <UART_SetConfig+0x2e0>)
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d125      	bne.n	8004abc <UART_SetConfig+0x208>
 8004a70:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7c:	d016      	beq.n	8004aac <UART_SetConfig+0x1f8>
 8004a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a80:	d818      	bhi.n	8004ab4 <UART_SetConfig+0x200>
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	d00a      	beq.n	8004a9c <UART_SetConfig+0x1e8>
 8004a86:	2b80      	cmp	r3, #128	; 0x80
 8004a88:	d814      	bhi.n	8004ab4 <UART_SetConfig+0x200>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <UART_SetConfig+0x1e0>
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d008      	beq.n	8004aa4 <UART_SetConfig+0x1f0>
 8004a92:	e00f      	b.n	8004ab4 <UART_SetConfig+0x200>
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a9a:	e082      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004aa2:	e07e      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004aaa:	e07a      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004aac:	2308      	movs	r3, #8
 8004aae:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ab2:	e076      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004aba:	e072      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b35      	ldr	r3, [pc, #212]	; (8004b98 <UART_SetConfig+0x2e4>)
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d12a      	bne.n	8004b1c <UART_SetConfig+0x268>
 8004ac6:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad4:	d01a      	beq.n	8004b0c <UART_SetConfig+0x258>
 8004ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ada:	d81b      	bhi.n	8004b14 <UART_SetConfig+0x260>
 8004adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae0:	d00c      	beq.n	8004afc <UART_SetConfig+0x248>
 8004ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae6:	d815      	bhi.n	8004b14 <UART_SetConfig+0x260>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <UART_SetConfig+0x240>
 8004aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af0:	d008      	beq.n	8004b04 <UART_SetConfig+0x250>
 8004af2:	e00f      	b.n	8004b14 <UART_SetConfig+0x260>
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004afa:	e052      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004afc:	2302      	movs	r3, #2
 8004afe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b02:	e04e      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b0a:	e04a      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b12:	e046      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b1a:	e042      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <UART_SetConfig+0x2cc>)
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d13a      	bne.n	8004b9c <UART_SetConfig+0x2e8>
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b34:	d01a      	beq.n	8004b6c <UART_SetConfig+0x2b8>
 8004b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b3a:	d81b      	bhi.n	8004b74 <UART_SetConfig+0x2c0>
 8004b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b40:	d00c      	beq.n	8004b5c <UART_SetConfig+0x2a8>
 8004b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b46:	d815      	bhi.n	8004b74 <UART_SetConfig+0x2c0>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <UART_SetConfig+0x2a0>
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d008      	beq.n	8004b64 <UART_SetConfig+0x2b0>
 8004b52:	e00f      	b.n	8004b74 <UART_SetConfig+0x2c0>
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b5a:	e022      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b62:	e01e      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b6a:	e01a      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b72:	e016      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b7a:	e012      	b.n	8004ba2 <UART_SetConfig+0x2ee>
 8004b7c:	efff69f3 	.word	0xefff69f3
 8004b80:	40008000 	.word	0x40008000
 8004b84:	40013800 	.word	0x40013800
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40004400 	.word	0x40004400
 8004b90:	40004800 	.word	0x40004800
 8004b94:	40004c00 	.word	0x40004c00
 8004b98:	40005000 	.word	0x40005000
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4bb6      	ldr	r3, [pc, #728]	; (8004e80 <UART_SetConfig+0x5cc>)
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	f040 810c 	bne.w	8004dc6 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bae:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d823      	bhi.n	8004bfe <UART_SetConfig+0x34a>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x308>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bef 	.word	0x08004bef
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004bff 	.word	0x08004bff
 8004bdc:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7ff fd5a 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8004be4:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004be6:	e00e      	b.n	8004c06 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004be8:	4ba6      	ldr	r3, [pc, #664]	; (8004e84 <UART_SetConfig+0x5d0>)
 8004bea:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bec:	e00b      	b.n	8004c06 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004bee:	f7ff fcbb 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004bf2:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bf4:	e007      	b.n	8004c06 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bfc:	e003      	b.n	8004c06 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004c04:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 81e5 	beq.w	8004fd8 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	441a      	add	r2, r3
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d305      	bcc.n	8004c2a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d903      	bls.n	8004c32 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004c30:	e1d2      	b.n	8004fd8 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8004c32:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	f200 80b0 	bhi.w	8004d9c <UART_SetConfig+0x4e8>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <UART_SetConfig+0x390>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004d9d 	.word	0x08004d9d
 8004c4c:	08004cc9 	.word	0x08004cc9
 8004c50:	08004d9d 	.word	0x08004d9d
 8004c54:	08004d09 	.word	0x08004d09
 8004c58:	08004d9d 	.word	0x08004d9d
 8004c5c:	08004d9d 	.word	0x08004d9d
 8004c60:	08004d9d 	.word	0x08004d9d
 8004c64:	08004d65 	.word	0x08004d65
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004c68:	f7ff fd16 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8004c6c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c70:	2200      	movs	r2, #0
 8004c72:	4698      	mov	r8, r3
 8004c74:	4691      	mov	r9, r2
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8004c82:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8004c86:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8004c8a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004c8c:	6849      	ldr	r1, [r1, #4]
 8004c8e:	0849      	lsrs	r1, r1, #1
 8004c90:	2000      	movs	r0, #0
 8004c92:	6539      	str	r1, [r7, #80]	; 0x50
 8004c94:	6578      	str	r0, [r7, #84]	; 0x54
 8004c96:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	1851      	adds	r1, r2, r1
 8004c9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	eb43 0101 	adc.w	r1, r3, r1
 8004ca6:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb0:	647a      	str	r2, [r7, #68]	; 0x44
 8004cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004cba:	f7fb ff75 	bl	8000ba8 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004cc6:	e06d      	b.n	8004da4 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	2200      	movs	r2, #0
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cd4:	4b6c      	ldr	r3, [pc, #432]	; (8004e88 <UART_SetConfig+0x5d4>)
 8004cd6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004cda:	4602      	mov	r2, r0
 8004cdc:	18d3      	adds	r3, r2, r3
 8004cde:	633b      	str	r3, [r7, #48]	; 0x30
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	f143 0300 	adc.w	r3, r3, #0
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004cfa:	f7fb ff55 	bl	8000ba8 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4613      	mov	r3, r2
 8004d04:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d06:	e04d      	b.n	8004da4 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004d08:	f7ff fc2e 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004d0c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d10:	2200      	movs	r2, #0
 8004d12:	461c      	mov	r4, r3
 8004d14:	4615      	mov	r5, r2
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	022b      	lsls	r3, r5, #8
 8004d20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d24:	0222      	lsls	r2, r4, #8
 8004d26:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004d28:	6849      	ldr	r1, [r1, #4]
 8004d2a:	0849      	lsrs	r1, r1, #1
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	6239      	str	r1, [r7, #32]
 8004d30:	6278      	str	r0, [r7, #36]	; 0x24
 8004d32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d36:	4621      	mov	r1, r4
 8004d38:	1851      	adds	r1, r2, r1
 8004d3a:	61b9      	str	r1, [r7, #24]
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	eb43 0101 	adc.w	r1, r3, r1
 8004d42:	61f9      	str	r1, [r7, #28]
 8004d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	617a      	str	r2, [r7, #20]
 8004d4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d56:	f7fb ff27 	bl	8000ba8 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4613      	mov	r3, r2
 8004d60:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d62:	e01f      	b.n	8004da4 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	469a      	mov	sl, r3
 8004d6e:	4693      	mov	fp, r2
 8004d70:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	f14b 0300 	adc.w	r3, fp, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d8e:	f7fb ff0b 	bl	8000ba8 <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4613      	mov	r3, r2
 8004d98:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d9a:	e003      	b.n	8004da4 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8004da2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004daa:	d308      	bcc.n	8004dbe <UART_SetConfig+0x50a>
 8004dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db2:	d204      	bcs.n	8004dbe <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8004db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	e10c      	b.n	8004fd8 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004dc4:	e108      	b.n	8004fd8 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dce:	f040 808f 	bne.w	8004ef0 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8004dd2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d864      	bhi.n	8004ea4 <UART_SetConfig+0x5f0>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0x52c>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e25 	.word	0x08004e25
 8004de8:	08004e45 	.word	0x08004e45
 8004dec:	08004ea5 	.word	0x08004ea5
 8004df0:	08004e61 	.word	0x08004e61
 8004df4:	08004ea5 	.word	0x08004ea5
 8004df8:	08004ea5 	.word	0x08004ea5
 8004dfc:	08004ea5 	.word	0x08004ea5
 8004e00:	08004e8d 	.word	0x08004e8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7ff fc48 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8004e08:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e0c:	005a      	lsls	r2, r3, #1
 8004e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	441a      	add	r2, r3
 8004e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e22:	e043      	b.n	8004eac <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e24:	f7ff fc4e 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8004e28:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e2c:	005a      	lsls	r2, r3, #1
 8004e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	441a      	add	r2, r3
 8004e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e42:	e033      	b.n	8004eac <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004e4e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004e52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e54:	6852      	ldr	r2, [r2, #4]
 8004e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e5e:	e025      	b.n	8004eac <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e60:	f7ff fb82 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004e64:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e68:	005a      	lsls	r2, r3, #1
 8004e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	441a      	add	r2, r3
 8004e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e7e:	e015      	b.n	8004eac <UART_SetConfig+0x5f8>
 8004e80:	40008000 	.word	0x40008000
 8004e84:	00f42400 	.word	0x00f42400
 8004e88:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ea2:	e003      	b.n	8004eac <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004eaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eae:	2b0f      	cmp	r3, #15
 8004eb0:	d91a      	bls.n	8004ee8 <UART_SetConfig+0x634>
 8004eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb8:	d216      	bcs.n	8004ee8 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f023 030f 	bic.w	r3, r3, #15
 8004ec2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8004edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	e077      	b.n	8004fd8 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004eee:	e073      	b.n	8004fd8 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8004ef0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d85c      	bhi.n	8004fb2 <UART_SetConfig+0x6fe>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x64c>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f43 	.word	0x08004f43
 8004f08:	08004f61 	.word	0x08004f61
 8004f0c:	08004fb3 	.word	0x08004fb3
 8004f10:	08004f7d 	.word	0x08004f7d
 8004f14:	08004fb3 	.word	0x08004fb3
 8004f18:	08004fb3 	.word	0x08004fb3
 8004f1c:	08004fb3 	.word	0x08004fb3
 8004f20:	08004f9b 	.word	0x08004f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7ff fbb8 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8004f28:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	085a      	lsrs	r2, r3, #1
 8004f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f32:	441a      	add	r2, r3
 8004f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f40:	e03b      	b.n	8004fba <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f42:	f7ff fbbf 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8004f46:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	085a      	lsrs	r2, r3, #1
 8004f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f50:	441a      	add	r2, r3
 8004f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f5e:	e02c      	b.n	8004fba <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004f6a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004f6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f70:	6852      	ldr	r2, [r2, #4]
 8004f72:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f7a:	e01e      	b.n	8004fba <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7c:	f7ff faf4 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004f80:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	085a      	lsrs	r2, r3, #1
 8004f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f8a:	441a      	add	r2, r3
 8004f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f98:	e00f      	b.n	8004fba <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fb0:	e003      	b.n	8004fba <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fbc:	2b0f      	cmp	r3, #15
 8004fbe:	d908      	bls.n	8004fd2 <UART_SetConfig+0x71e>
 8004fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc6:	d204      	bcs.n	8004fd2 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8004fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004fce:	60da      	str	r2, [r3, #12]
 8004fd0:	e002      	b.n	8004fd8 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004fe4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3780      	adds	r7, #128	; 0x80
 8004fec:	46bd      	mov	sp, r7
 8004fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff2:	bf00      	nop

08004ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f2:	d10a      	bne.n	800510a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005146:	f7fe f89d 	bl	8003284 <HAL_GetTick>
 800514a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b08      	cmp	r3, #8
 8005158:	d10e      	bne.n	8005178 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800515a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f82a 	bl	80051c2 <UART_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e020      	b.n	80051ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b04      	cmp	r3, #4
 8005184:	d10e      	bne.n	80051a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005186:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f814 	bl	80051c2 <UART_WaitOnFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e00a      	b.n	80051ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	4613      	mov	r3, r2
 80051d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d2:	e05d      	b.n	8005290 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d059      	beq.n	8005290 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051dc:	f7fe f852 	bl	8003284 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11b      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005200:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e042      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02b      	beq.n	8005290 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005246:	d123      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005250:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005260:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e00f      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d092      	beq.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <findslot>:
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <findslot+0x2c>)
 80052ba:	b510      	push	{r4, lr}
 80052bc:	4604      	mov	r4, r0
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	b118      	cbz	r0, 80052ca <findslot+0x12>
 80052c2:	6983      	ldr	r3, [r0, #24]
 80052c4:	b90b      	cbnz	r3, 80052ca <findslot+0x12>
 80052c6:	f000 f9a1 	bl	800560c <__sinit>
 80052ca:	2c13      	cmp	r4, #19
 80052cc:	d807      	bhi.n	80052de <findslot+0x26>
 80052ce:	4806      	ldr	r0, [pc, #24]	; (80052e8 <findslot+0x30>)
 80052d0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80052d4:	3201      	adds	r2, #1
 80052d6:	d002      	beq.n	80052de <findslot+0x26>
 80052d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80052dc:	bd10      	pop	{r4, pc}
 80052de:	2000      	movs	r0, #0
 80052e0:	e7fc      	b.n	80052dc <findslot+0x24>
 80052e2:	bf00      	nop
 80052e4:	200000d4 	.word	0x200000d4
 80052e8:	200005ac 	.word	0x200005ac

080052ec <error>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	4604      	mov	r4, r0
 80052f0:	f000 f92e 	bl	8005550 <__errno>
 80052f4:	2613      	movs	r6, #19
 80052f6:	4605      	mov	r5, r0
 80052f8:	2700      	movs	r7, #0
 80052fa:	4630      	mov	r0, r6
 80052fc:	4639      	mov	r1, r7
 80052fe:	beab      	bkpt	0x00ab
 8005300:	4606      	mov	r6, r0
 8005302:	602e      	str	r6, [r5, #0]
 8005304:	4620      	mov	r0, r4
 8005306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005308 <checkerror>:
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d101      	bne.n	8005310 <checkerror+0x8>
 800530c:	f7ff bfee 	b.w	80052ec <error>
 8005310:	4770      	bx	lr

08005312 <_swiread>:
 8005312:	b530      	push	{r4, r5, lr}
 8005314:	b085      	sub	sp, #20
 8005316:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800531a:	9203      	str	r2, [sp, #12]
 800531c:	2406      	movs	r4, #6
 800531e:	ad01      	add	r5, sp, #4
 8005320:	4620      	mov	r0, r4
 8005322:	4629      	mov	r1, r5
 8005324:	beab      	bkpt	0x00ab
 8005326:	4604      	mov	r4, r0
 8005328:	4620      	mov	r0, r4
 800532a:	f7ff ffed 	bl	8005308 <checkerror>
 800532e:	b005      	add	sp, #20
 8005330:	bd30      	pop	{r4, r5, pc}

08005332 <_read>:
 8005332:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005334:	4615      	mov	r5, r2
 8005336:	9101      	str	r1, [sp, #4]
 8005338:	f7ff ffbe 	bl	80052b8 <findslot>
 800533c:	9901      	ldr	r1, [sp, #4]
 800533e:	4604      	mov	r4, r0
 8005340:	b938      	cbnz	r0, 8005352 <_read+0x20>
 8005342:	f000 f905 	bl	8005550 <__errno>
 8005346:	2309      	movs	r3, #9
 8005348:	6003      	str	r3, [r0, #0]
 800534a:	f04f 30ff 	mov.w	r0, #4294967295
 800534e:	b003      	add	sp, #12
 8005350:	bd30      	pop	{r4, r5, pc}
 8005352:	6800      	ldr	r0, [r0, #0]
 8005354:	462a      	mov	r2, r5
 8005356:	f7ff ffdc 	bl	8005312 <_swiread>
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	d0f7      	beq.n	800534e <_read+0x1c>
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	1a2a      	subs	r2, r5, r0
 8005362:	4413      	add	r3, r2
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	4610      	mov	r0, r2
 8005368:	e7f1      	b.n	800534e <_read+0x1c>

0800536a <_swilseek>:
 800536a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800536c:	460c      	mov	r4, r1
 800536e:	4616      	mov	r6, r2
 8005370:	f7ff ffa2 	bl	80052b8 <findslot>
 8005374:	4605      	mov	r5, r0
 8005376:	b940      	cbnz	r0, 800538a <_swilseek+0x20>
 8005378:	f000 f8ea 	bl	8005550 <__errno>
 800537c:	2309      	movs	r3, #9
 800537e:	6003      	str	r3, [r0, #0]
 8005380:	f04f 34ff 	mov.w	r4, #4294967295
 8005384:	4620      	mov	r0, r4
 8005386:	b003      	add	sp, #12
 8005388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538a:	2e02      	cmp	r6, #2
 800538c:	d903      	bls.n	8005396 <_swilseek+0x2c>
 800538e:	f000 f8df 	bl	8005550 <__errno>
 8005392:	2316      	movs	r3, #22
 8005394:	e7f3      	b.n	800537e <_swilseek+0x14>
 8005396:	2e01      	cmp	r6, #1
 8005398:	d112      	bne.n	80053c0 <_swilseek+0x56>
 800539a:	6843      	ldr	r3, [r0, #4]
 800539c:	18e4      	adds	r4, r4, r3
 800539e:	d4f6      	bmi.n	800538e <_swilseek+0x24>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	260a      	movs	r6, #10
 80053a4:	e9cd 3400 	strd	r3, r4, [sp]
 80053a8:	466f      	mov	r7, sp
 80053aa:	4630      	mov	r0, r6
 80053ac:	4639      	mov	r1, r7
 80053ae:	beab      	bkpt	0x00ab
 80053b0:	4606      	mov	r6, r0
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7ff ffa8 	bl	8005308 <checkerror>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	dbe1      	blt.n	8005380 <_swilseek+0x16>
 80053bc:	606c      	str	r4, [r5, #4]
 80053be:	e7e1      	b.n	8005384 <_swilseek+0x1a>
 80053c0:	2e02      	cmp	r6, #2
 80053c2:	d1ed      	bne.n	80053a0 <_swilseek+0x36>
 80053c4:	6803      	ldr	r3, [r0, #0]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	260c      	movs	r6, #12
 80053ca:	466f      	mov	r7, sp
 80053cc:	4630      	mov	r0, r6
 80053ce:	4639      	mov	r1, r7
 80053d0:	beab      	bkpt	0x00ab
 80053d2:	4606      	mov	r6, r0
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff ff97 	bl	8005308 <checkerror>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d0d0      	beq.n	8005380 <_swilseek+0x16>
 80053de:	4404      	add	r4, r0
 80053e0:	e7de      	b.n	80053a0 <_swilseek+0x36>

080053e2 <_lseek>:
 80053e2:	f7ff bfc2 	b.w	800536a <_swilseek>

080053e6 <_swiwrite>:
 80053e6:	b530      	push	{r4, r5, lr}
 80053e8:	b085      	sub	sp, #20
 80053ea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80053ee:	9203      	str	r2, [sp, #12]
 80053f0:	2405      	movs	r4, #5
 80053f2:	ad01      	add	r5, sp, #4
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	beab      	bkpt	0x00ab
 80053fa:	4604      	mov	r4, r0
 80053fc:	4620      	mov	r0, r4
 80053fe:	f7ff ff83 	bl	8005308 <checkerror>
 8005402:	b005      	add	sp, #20
 8005404:	bd30      	pop	{r4, r5, pc}

08005406 <_write>:
 8005406:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005408:	4615      	mov	r5, r2
 800540a:	9101      	str	r1, [sp, #4]
 800540c:	f7ff ff54 	bl	80052b8 <findslot>
 8005410:	9901      	ldr	r1, [sp, #4]
 8005412:	4604      	mov	r4, r0
 8005414:	b930      	cbnz	r0, 8005424 <_write+0x1e>
 8005416:	f000 f89b 	bl	8005550 <__errno>
 800541a:	2309      	movs	r3, #9
 800541c:	6003      	str	r3, [r0, #0]
 800541e:	f04f 30ff 	mov.w	r0, #4294967295
 8005422:	e012      	b.n	800544a <_write+0x44>
 8005424:	6800      	ldr	r0, [r0, #0]
 8005426:	462a      	mov	r2, r5
 8005428:	f7ff ffdd 	bl	80053e6 <_swiwrite>
 800542c:	2800      	cmp	r0, #0
 800542e:	dbf6      	blt.n	800541e <_write+0x18>
 8005430:	6862      	ldr	r2, [r4, #4]
 8005432:	1a2b      	subs	r3, r5, r0
 8005434:	441a      	add	r2, r3
 8005436:	42a8      	cmp	r0, r5
 8005438:	6062      	str	r2, [r4, #4]
 800543a:	d105      	bne.n	8005448 <_write+0x42>
 800543c:	2000      	movs	r0, #0
 800543e:	b003      	add	sp, #12
 8005440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005444:	f7ff bf52 	b.w	80052ec <error>
 8005448:	4618      	mov	r0, r3
 800544a:	b003      	add	sp, #12
 800544c:	bd30      	pop	{r4, r5, pc}

0800544e <_swiclose>:
 800544e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005450:	2402      	movs	r4, #2
 8005452:	9001      	str	r0, [sp, #4]
 8005454:	ad01      	add	r5, sp, #4
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	beab      	bkpt	0x00ab
 800545c:	4604      	mov	r4, r0
 800545e:	4620      	mov	r0, r4
 8005460:	f7ff ff52 	bl	8005308 <checkerror>
 8005464:	b003      	add	sp, #12
 8005466:	bd30      	pop	{r4, r5, pc}

08005468 <_close>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4605      	mov	r5, r0
 800546c:	f7ff ff24 	bl	80052b8 <findslot>
 8005470:	4604      	mov	r4, r0
 8005472:	b930      	cbnz	r0, 8005482 <_close+0x1a>
 8005474:	f000 f86c 	bl	8005550 <__errno>
 8005478:	2309      	movs	r3, #9
 800547a:	6003      	str	r3, [r0, #0]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	3d01      	subs	r5, #1
 8005484:	2d01      	cmp	r5, #1
 8005486:	d809      	bhi.n	800549c <_close+0x34>
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <_close+0x48>)
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	429a      	cmp	r2, r3
 8005490:	d104      	bne.n	800549c <_close+0x34>
 8005492:	f04f 33ff 	mov.w	r3, #4294967295
 8005496:	6003      	str	r3, [r0, #0]
 8005498:	2000      	movs	r0, #0
 800549a:	e7f1      	b.n	8005480 <_close+0x18>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	f7ff ffd6 	bl	800544e <_swiclose>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d1ec      	bne.n	8005480 <_close+0x18>
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	e7e8      	b.n	8005480 <_close+0x18>
 80054ae:	bf00      	nop
 80054b0:	200005ac 	.word	0x200005ac

080054b4 <_getpid>:
 80054b4:	2001      	movs	r0, #1
 80054b6:	4770      	bx	lr

080054b8 <_swistat>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	460c      	mov	r4, r1
 80054bc:	f7ff fefc 	bl	80052b8 <findslot>
 80054c0:	4605      	mov	r5, r0
 80054c2:	b930      	cbnz	r0, 80054d2 <_swistat+0x1a>
 80054c4:	f000 f844 	bl	8005550 <__errno>
 80054c8:	2309      	movs	r3, #9
 80054ca:	6003      	str	r3, [r0, #0]
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	bd70      	pop	{r4, r5, r6, pc}
 80054d2:	6863      	ldr	r3, [r4, #4]
 80054d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054d8:	6063      	str	r3, [r4, #4]
 80054da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054de:	64a3      	str	r3, [r4, #72]	; 0x48
 80054e0:	260c      	movs	r6, #12
 80054e2:	4630      	mov	r0, r6
 80054e4:	4629      	mov	r1, r5
 80054e6:	beab      	bkpt	0x00ab
 80054e8:	4605      	mov	r5, r0
 80054ea:	4628      	mov	r0, r5
 80054ec:	f7ff ff0c 	bl	8005308 <checkerror>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	bf1c      	itt	ne
 80054f4:	6120      	strne	r0, [r4, #16]
 80054f6:	2000      	movne	r0, #0
 80054f8:	e7ea      	b.n	80054d0 <_swistat+0x18>

080054fa <_fstat>:
 80054fa:	460b      	mov	r3, r1
 80054fc:	b510      	push	{r4, lr}
 80054fe:	2100      	movs	r1, #0
 8005500:	4604      	mov	r4, r0
 8005502:	2258      	movs	r2, #88	; 0x58
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f954 	bl	80057b2 <memset>
 800550a:	4601      	mov	r1, r0
 800550c:	4620      	mov	r0, r4
 800550e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005512:	f7ff bfd1 	b.w	80054b8 <_swistat>

08005516 <_isatty>:
 8005516:	b570      	push	{r4, r5, r6, lr}
 8005518:	f7ff fece 	bl	80052b8 <findslot>
 800551c:	2509      	movs	r5, #9
 800551e:	4604      	mov	r4, r0
 8005520:	b920      	cbnz	r0, 800552c <_isatty+0x16>
 8005522:	f000 f815 	bl	8005550 <__errno>
 8005526:	6005      	str	r5, [r0, #0]
 8005528:	4620      	mov	r0, r4
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	4628      	mov	r0, r5
 800552e:	4621      	mov	r1, r4
 8005530:	beab      	bkpt	0x00ab
 8005532:	4604      	mov	r4, r0
 8005534:	2c01      	cmp	r4, #1
 8005536:	d0f7      	beq.n	8005528 <_isatty+0x12>
 8005538:	f000 f80a 	bl	8005550 <__errno>
 800553c:	2400      	movs	r4, #0
 800553e:	4605      	mov	r5, r0
 8005540:	2613      	movs	r6, #19
 8005542:	4630      	mov	r0, r6
 8005544:	4621      	mov	r1, r4
 8005546:	beab      	bkpt	0x00ab
 8005548:	4606      	mov	r6, r0
 800554a:	602e      	str	r6, [r5, #0]
 800554c:	e7ec      	b.n	8005528 <_isatty+0x12>
	...

08005550 <__errno>:
 8005550:	4b01      	ldr	r3, [pc, #4]	; (8005558 <__errno+0x8>)
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	200000d4 	.word	0x200000d4

0800555c <std>:
 800555c:	2300      	movs	r3, #0
 800555e:	b510      	push	{r4, lr}
 8005560:	4604      	mov	r4, r0
 8005562:	e9c0 3300 	strd	r3, r3, [r0]
 8005566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800556a:	6083      	str	r3, [r0, #8]
 800556c:	8181      	strh	r1, [r0, #12]
 800556e:	6643      	str	r3, [r0, #100]	; 0x64
 8005570:	81c2      	strh	r2, [r0, #14]
 8005572:	6183      	str	r3, [r0, #24]
 8005574:	4619      	mov	r1, r3
 8005576:	2208      	movs	r2, #8
 8005578:	305c      	adds	r0, #92	; 0x5c
 800557a:	f000 f91a 	bl	80057b2 <memset>
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <std+0x38>)
 8005580:	6263      	str	r3, [r4, #36]	; 0x24
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <std+0x3c>)
 8005584:	62a3      	str	r3, [r4, #40]	; 0x28
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <std+0x40>)
 8005588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <std+0x44>)
 800558c:	6224      	str	r4, [r4, #32]
 800558e:	6323      	str	r3, [r4, #48]	; 0x30
 8005590:	bd10      	pop	{r4, pc}
 8005592:	bf00      	nop
 8005594:	08006249 	.word	0x08006249
 8005598:	0800626b 	.word	0x0800626b
 800559c:	080062a3 	.word	0x080062a3
 80055a0:	080062c7 	.word	0x080062c7

080055a4 <_cleanup_r>:
 80055a4:	4901      	ldr	r1, [pc, #4]	; (80055ac <_cleanup_r+0x8>)
 80055a6:	f000 b8af 	b.w	8005708 <_fwalk_reent>
 80055aa:	bf00      	nop
 80055ac:	080072d1 	.word	0x080072d1

080055b0 <__sfmoreglue>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	2268      	movs	r2, #104	; 0x68
 80055b4:	1e4d      	subs	r5, r1, #1
 80055b6:	4355      	muls	r5, r2
 80055b8:	460e      	mov	r6, r1
 80055ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055be:	f000 f921 	bl	8005804 <_malloc_r>
 80055c2:	4604      	mov	r4, r0
 80055c4:	b140      	cbz	r0, 80055d8 <__sfmoreglue+0x28>
 80055c6:	2100      	movs	r1, #0
 80055c8:	e9c0 1600 	strd	r1, r6, [r0]
 80055cc:	300c      	adds	r0, #12
 80055ce:	60a0      	str	r0, [r4, #8]
 80055d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055d4:	f000 f8ed 	bl	80057b2 <memset>
 80055d8:	4620      	mov	r0, r4
 80055da:	bd70      	pop	{r4, r5, r6, pc}

080055dc <__sfp_lock_acquire>:
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <__sfp_lock_acquire+0x8>)
 80055de:	f000 b8d8 	b.w	8005792 <__retarget_lock_acquire_recursive>
 80055e2:	bf00      	nop
 80055e4:	2000064d 	.word	0x2000064d

080055e8 <__sfp_lock_release>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__sfp_lock_release+0x8>)
 80055ea:	f000 b8d3 	b.w	8005794 <__retarget_lock_release_recursive>
 80055ee:	bf00      	nop
 80055f0:	2000064d 	.word	0x2000064d

080055f4 <__sinit_lock_acquire>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__sinit_lock_acquire+0x8>)
 80055f6:	f000 b8cc 	b.w	8005792 <__retarget_lock_acquire_recursive>
 80055fa:	bf00      	nop
 80055fc:	2000064e 	.word	0x2000064e

08005600 <__sinit_lock_release>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__sinit_lock_release+0x8>)
 8005602:	f000 b8c7 	b.w	8005794 <__retarget_lock_release_recursive>
 8005606:	bf00      	nop
 8005608:	2000064e 	.word	0x2000064e

0800560c <__sinit>:
 800560c:	b510      	push	{r4, lr}
 800560e:	4604      	mov	r4, r0
 8005610:	f7ff fff0 	bl	80055f4 <__sinit_lock_acquire>
 8005614:	69a3      	ldr	r3, [r4, #24]
 8005616:	b11b      	cbz	r3, 8005620 <__sinit+0x14>
 8005618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800561c:	f7ff bff0 	b.w	8005600 <__sinit_lock_release>
 8005620:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005624:	6523      	str	r3, [r4, #80]	; 0x50
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <__sinit+0x68>)
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <__sinit+0x6c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	62a2      	str	r2, [r4, #40]	; 0x28
 800562e:	42a3      	cmp	r3, r4
 8005630:	bf04      	itt	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	61a3      	streq	r3, [r4, #24]
 8005636:	4620      	mov	r0, r4
 8005638:	f000 f820 	bl	800567c <__sfp>
 800563c:	6060      	str	r0, [r4, #4]
 800563e:	4620      	mov	r0, r4
 8005640:	f000 f81c 	bl	800567c <__sfp>
 8005644:	60a0      	str	r0, [r4, #8]
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f818 	bl	800567c <__sfp>
 800564c:	2200      	movs	r2, #0
 800564e:	60e0      	str	r0, [r4, #12]
 8005650:	2104      	movs	r1, #4
 8005652:	6860      	ldr	r0, [r4, #4]
 8005654:	f7ff ff82 	bl	800555c <std>
 8005658:	68a0      	ldr	r0, [r4, #8]
 800565a:	2201      	movs	r2, #1
 800565c:	2109      	movs	r1, #9
 800565e:	f7ff ff7d 	bl	800555c <std>
 8005662:	68e0      	ldr	r0, [r4, #12]
 8005664:	2202      	movs	r2, #2
 8005666:	2112      	movs	r1, #18
 8005668:	f7ff ff78 	bl	800555c <std>
 800566c:	2301      	movs	r3, #1
 800566e:	61a3      	str	r3, [r4, #24]
 8005670:	e7d2      	b.n	8005618 <__sinit+0xc>
 8005672:	bf00      	nop
 8005674:	08008668 	.word	0x08008668
 8005678:	080055a5 	.word	0x080055a5

0800567c <__sfp>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	4607      	mov	r7, r0
 8005680:	f7ff ffac 	bl	80055dc <__sfp_lock_acquire>
 8005684:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <__sfp+0x84>)
 8005686:	681e      	ldr	r6, [r3, #0]
 8005688:	69b3      	ldr	r3, [r6, #24]
 800568a:	b913      	cbnz	r3, 8005692 <__sfp+0x16>
 800568c:	4630      	mov	r0, r6
 800568e:	f7ff ffbd 	bl	800560c <__sinit>
 8005692:	3648      	adds	r6, #72	; 0x48
 8005694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005698:	3b01      	subs	r3, #1
 800569a:	d503      	bpl.n	80056a4 <__sfp+0x28>
 800569c:	6833      	ldr	r3, [r6, #0]
 800569e:	b30b      	cbz	r3, 80056e4 <__sfp+0x68>
 80056a0:	6836      	ldr	r6, [r6, #0]
 80056a2:	e7f7      	b.n	8005694 <__sfp+0x18>
 80056a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056a8:	b9d5      	cbnz	r5, 80056e0 <__sfp+0x64>
 80056aa:	4b16      	ldr	r3, [pc, #88]	; (8005704 <__sfp+0x88>)
 80056ac:	60e3      	str	r3, [r4, #12]
 80056ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056b2:	6665      	str	r5, [r4, #100]	; 0x64
 80056b4:	f000 f86c 	bl	8005790 <__retarget_lock_init_recursive>
 80056b8:	f7ff ff96 	bl	80055e8 <__sfp_lock_release>
 80056bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056c4:	6025      	str	r5, [r4, #0]
 80056c6:	61a5      	str	r5, [r4, #24]
 80056c8:	2208      	movs	r2, #8
 80056ca:	4629      	mov	r1, r5
 80056cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056d0:	f000 f86f 	bl	80057b2 <memset>
 80056d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056dc:	4620      	mov	r0, r4
 80056de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e0:	3468      	adds	r4, #104	; 0x68
 80056e2:	e7d9      	b.n	8005698 <__sfp+0x1c>
 80056e4:	2104      	movs	r1, #4
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7ff ff62 	bl	80055b0 <__sfmoreglue>
 80056ec:	4604      	mov	r4, r0
 80056ee:	6030      	str	r0, [r6, #0]
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d1d5      	bne.n	80056a0 <__sfp+0x24>
 80056f4:	f7ff ff78 	bl	80055e8 <__sfp_lock_release>
 80056f8:	230c      	movs	r3, #12
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	e7ee      	b.n	80056dc <__sfp+0x60>
 80056fe:	bf00      	nop
 8005700:	08008668 	.word	0x08008668
 8005704:	ffff0001 	.word	0xffff0001

08005708 <_fwalk_reent>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	4606      	mov	r6, r0
 800570e:	4688      	mov	r8, r1
 8005710:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005714:	2700      	movs	r7, #0
 8005716:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800571a:	f1b9 0901 	subs.w	r9, r9, #1
 800571e:	d505      	bpl.n	800572c <_fwalk_reent+0x24>
 8005720:	6824      	ldr	r4, [r4, #0]
 8005722:	2c00      	cmp	r4, #0
 8005724:	d1f7      	bne.n	8005716 <_fwalk_reent+0xe>
 8005726:	4638      	mov	r0, r7
 8005728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800572c:	89ab      	ldrh	r3, [r5, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d907      	bls.n	8005742 <_fwalk_reent+0x3a>
 8005732:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005736:	3301      	adds	r3, #1
 8005738:	d003      	beq.n	8005742 <_fwalk_reent+0x3a>
 800573a:	4629      	mov	r1, r5
 800573c:	4630      	mov	r0, r6
 800573e:	47c0      	blx	r8
 8005740:	4307      	orrs	r7, r0
 8005742:	3568      	adds	r5, #104	; 0x68
 8005744:	e7e9      	b.n	800571a <_fwalk_reent+0x12>
	...

08005748 <__libc_init_array>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	4d0d      	ldr	r5, [pc, #52]	; (8005780 <__libc_init_array+0x38>)
 800574c:	4c0d      	ldr	r4, [pc, #52]	; (8005784 <__libc_init_array+0x3c>)
 800574e:	1b64      	subs	r4, r4, r5
 8005750:	10a4      	asrs	r4, r4, #2
 8005752:	2600      	movs	r6, #0
 8005754:	42a6      	cmp	r6, r4
 8005756:	d109      	bne.n	800576c <__libc_init_array+0x24>
 8005758:	4d0b      	ldr	r5, [pc, #44]	; (8005788 <__libc_init_array+0x40>)
 800575a:	4c0c      	ldr	r4, [pc, #48]	; (800578c <__libc_init_array+0x44>)
 800575c:	f002 fe2e 	bl	80083bc <_init>
 8005760:	1b64      	subs	r4, r4, r5
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	2600      	movs	r6, #0
 8005766:	42a6      	cmp	r6, r4
 8005768:	d105      	bne.n	8005776 <__libc_init_array+0x2e>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005770:	4798      	blx	r3
 8005772:	3601      	adds	r6, #1
 8005774:	e7ee      	b.n	8005754 <__libc_init_array+0xc>
 8005776:	f855 3b04 	ldr.w	r3, [r5], #4
 800577a:	4798      	blx	r3
 800577c:	3601      	adds	r6, #1
 800577e:	e7f2      	b.n	8005766 <__libc_init_array+0x1e>
 8005780:	080089e8 	.word	0x080089e8
 8005784:	080089e8 	.word	0x080089e8
 8005788:	080089e8 	.word	0x080089e8
 800578c:	080089ec 	.word	0x080089ec

08005790 <__retarget_lock_init_recursive>:
 8005790:	4770      	bx	lr

08005792 <__retarget_lock_acquire_recursive>:
 8005792:	4770      	bx	lr

08005794 <__retarget_lock_release_recursive>:
 8005794:	4770      	bx	lr

08005796 <memcpy>:
 8005796:	440a      	add	r2, r1
 8005798:	4291      	cmp	r1, r2
 800579a:	f100 33ff 	add.w	r3, r0, #4294967295
 800579e:	d100      	bne.n	80057a2 <memcpy+0xc>
 80057a0:	4770      	bx	lr
 80057a2:	b510      	push	{r4, lr}
 80057a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ac:	4291      	cmp	r1, r2
 80057ae:	d1f9      	bne.n	80057a4 <memcpy+0xe>
 80057b0:	bd10      	pop	{r4, pc}

080057b2 <memset>:
 80057b2:	4402      	add	r2, r0
 80057b4:	4603      	mov	r3, r0
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d100      	bne.n	80057bc <memset+0xa>
 80057ba:	4770      	bx	lr
 80057bc:	f803 1b01 	strb.w	r1, [r3], #1
 80057c0:	e7f9      	b.n	80057b6 <memset+0x4>
	...

080057c4 <sbrk_aligned>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4e0e      	ldr	r6, [pc, #56]	; (8005800 <sbrk_aligned+0x3c>)
 80057c8:	460c      	mov	r4, r1
 80057ca:	6831      	ldr	r1, [r6, #0]
 80057cc:	4605      	mov	r5, r0
 80057ce:	b911      	cbnz	r1, 80057d6 <sbrk_aligned+0x12>
 80057d0:	f000 fcf6 	bl	80061c0 <_sbrk_r>
 80057d4:	6030      	str	r0, [r6, #0]
 80057d6:	4621      	mov	r1, r4
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 fcf1 	bl	80061c0 <_sbrk_r>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	d00a      	beq.n	80057f8 <sbrk_aligned+0x34>
 80057e2:	1cc4      	adds	r4, r0, #3
 80057e4:	f024 0403 	bic.w	r4, r4, #3
 80057e8:	42a0      	cmp	r0, r4
 80057ea:	d007      	beq.n	80057fc <sbrk_aligned+0x38>
 80057ec:	1a21      	subs	r1, r4, r0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fce6 	bl	80061c0 <_sbrk_r>
 80057f4:	3001      	adds	r0, #1
 80057f6:	d101      	bne.n	80057fc <sbrk_aligned+0x38>
 80057f8:	f04f 34ff 	mov.w	r4, #4294967295
 80057fc:	4620      	mov	r0, r4
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	20000654 	.word	0x20000654

08005804 <_malloc_r>:
 8005804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005808:	1ccd      	adds	r5, r1, #3
 800580a:	f025 0503 	bic.w	r5, r5, #3
 800580e:	3508      	adds	r5, #8
 8005810:	2d0c      	cmp	r5, #12
 8005812:	bf38      	it	cc
 8005814:	250c      	movcc	r5, #12
 8005816:	2d00      	cmp	r5, #0
 8005818:	4607      	mov	r7, r0
 800581a:	db01      	blt.n	8005820 <_malloc_r+0x1c>
 800581c:	42a9      	cmp	r1, r5
 800581e:	d905      	bls.n	800582c <_malloc_r+0x28>
 8005820:	230c      	movs	r3, #12
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	2600      	movs	r6, #0
 8005826:	4630      	mov	r0, r6
 8005828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582c:	4e2e      	ldr	r6, [pc, #184]	; (80058e8 <_malloc_r+0xe4>)
 800582e:	f001 fe21 	bl	8007474 <__malloc_lock>
 8005832:	6833      	ldr	r3, [r6, #0]
 8005834:	461c      	mov	r4, r3
 8005836:	bb34      	cbnz	r4, 8005886 <_malloc_r+0x82>
 8005838:	4629      	mov	r1, r5
 800583a:	4638      	mov	r0, r7
 800583c:	f7ff ffc2 	bl	80057c4 <sbrk_aligned>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	4604      	mov	r4, r0
 8005844:	d14d      	bne.n	80058e2 <_malloc_r+0xde>
 8005846:	6834      	ldr	r4, [r6, #0]
 8005848:	4626      	mov	r6, r4
 800584a:	2e00      	cmp	r6, #0
 800584c:	d140      	bne.n	80058d0 <_malloc_r+0xcc>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	4631      	mov	r1, r6
 8005852:	4638      	mov	r0, r7
 8005854:	eb04 0803 	add.w	r8, r4, r3
 8005858:	f000 fcb2 	bl	80061c0 <_sbrk_r>
 800585c:	4580      	cmp	r8, r0
 800585e:	d13a      	bne.n	80058d6 <_malloc_r+0xd2>
 8005860:	6821      	ldr	r1, [r4, #0]
 8005862:	3503      	adds	r5, #3
 8005864:	1a6d      	subs	r5, r5, r1
 8005866:	f025 0503 	bic.w	r5, r5, #3
 800586a:	3508      	adds	r5, #8
 800586c:	2d0c      	cmp	r5, #12
 800586e:	bf38      	it	cc
 8005870:	250c      	movcc	r5, #12
 8005872:	4629      	mov	r1, r5
 8005874:	4638      	mov	r0, r7
 8005876:	f7ff ffa5 	bl	80057c4 <sbrk_aligned>
 800587a:	3001      	adds	r0, #1
 800587c:	d02b      	beq.n	80058d6 <_malloc_r+0xd2>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	442b      	add	r3, r5
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	e00e      	b.n	80058a4 <_malloc_r+0xa0>
 8005886:	6822      	ldr	r2, [r4, #0]
 8005888:	1b52      	subs	r2, r2, r5
 800588a:	d41e      	bmi.n	80058ca <_malloc_r+0xc6>
 800588c:	2a0b      	cmp	r2, #11
 800588e:	d916      	bls.n	80058be <_malloc_r+0xba>
 8005890:	1961      	adds	r1, r4, r5
 8005892:	42a3      	cmp	r3, r4
 8005894:	6025      	str	r5, [r4, #0]
 8005896:	bf18      	it	ne
 8005898:	6059      	strne	r1, [r3, #4]
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	bf08      	it	eq
 800589e:	6031      	streq	r1, [r6, #0]
 80058a0:	5162      	str	r2, [r4, r5]
 80058a2:	604b      	str	r3, [r1, #4]
 80058a4:	4638      	mov	r0, r7
 80058a6:	f104 060b 	add.w	r6, r4, #11
 80058aa:	f001 fde9 	bl	8007480 <__malloc_unlock>
 80058ae:	f026 0607 	bic.w	r6, r6, #7
 80058b2:	1d23      	adds	r3, r4, #4
 80058b4:	1af2      	subs	r2, r6, r3
 80058b6:	d0b6      	beq.n	8005826 <_malloc_r+0x22>
 80058b8:	1b9b      	subs	r3, r3, r6
 80058ba:	50a3      	str	r3, [r4, r2]
 80058bc:	e7b3      	b.n	8005826 <_malloc_r+0x22>
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	bf0c      	ite	eq
 80058c4:	6032      	streq	r2, [r6, #0]
 80058c6:	605a      	strne	r2, [r3, #4]
 80058c8:	e7ec      	b.n	80058a4 <_malloc_r+0xa0>
 80058ca:	4623      	mov	r3, r4
 80058cc:	6864      	ldr	r4, [r4, #4]
 80058ce:	e7b2      	b.n	8005836 <_malloc_r+0x32>
 80058d0:	4634      	mov	r4, r6
 80058d2:	6876      	ldr	r6, [r6, #4]
 80058d4:	e7b9      	b.n	800584a <_malloc_r+0x46>
 80058d6:	230c      	movs	r3, #12
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4638      	mov	r0, r7
 80058dc:	f001 fdd0 	bl	8007480 <__malloc_unlock>
 80058e0:	e7a1      	b.n	8005826 <_malloc_r+0x22>
 80058e2:	6025      	str	r5, [r4, #0]
 80058e4:	e7de      	b.n	80058a4 <_malloc_r+0xa0>
 80058e6:	bf00      	nop
 80058e8:	20000650 	.word	0x20000650

080058ec <__cvt>:
 80058ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	ec55 4b10 	vmov	r4, r5, d0
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	460e      	mov	r6, r1
 80058f8:	4619      	mov	r1, r3
 80058fa:	462b      	mov	r3, r5
 80058fc:	bfbb      	ittet	lt
 80058fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005902:	461d      	movlt	r5, r3
 8005904:	2300      	movge	r3, #0
 8005906:	232d      	movlt	r3, #45	; 0x2d
 8005908:	700b      	strb	r3, [r1, #0]
 800590a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005910:	4691      	mov	r9, r2
 8005912:	f023 0820 	bic.w	r8, r3, #32
 8005916:	bfbc      	itt	lt
 8005918:	4622      	movlt	r2, r4
 800591a:	4614      	movlt	r4, r2
 800591c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005920:	d005      	beq.n	800592e <__cvt+0x42>
 8005922:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005926:	d100      	bne.n	800592a <__cvt+0x3e>
 8005928:	3601      	adds	r6, #1
 800592a:	2102      	movs	r1, #2
 800592c:	e000      	b.n	8005930 <__cvt+0x44>
 800592e:	2103      	movs	r1, #3
 8005930:	ab03      	add	r3, sp, #12
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	ab02      	add	r3, sp, #8
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	ec45 4b10 	vmov	d0, r4, r5
 800593c:	4653      	mov	r3, sl
 800593e:	4632      	mov	r2, r6
 8005940:	f000 fe52 	bl	80065e8 <_dtoa_r>
 8005944:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005948:	4607      	mov	r7, r0
 800594a:	d102      	bne.n	8005952 <__cvt+0x66>
 800594c:	f019 0f01 	tst.w	r9, #1
 8005950:	d022      	beq.n	8005998 <__cvt+0xac>
 8005952:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005956:	eb07 0906 	add.w	r9, r7, r6
 800595a:	d110      	bne.n	800597e <__cvt+0x92>
 800595c:	783b      	ldrb	r3, [r7, #0]
 800595e:	2b30      	cmp	r3, #48	; 0x30
 8005960:	d10a      	bne.n	8005978 <__cvt+0x8c>
 8005962:	2200      	movs	r2, #0
 8005964:	2300      	movs	r3, #0
 8005966:	4620      	mov	r0, r4
 8005968:	4629      	mov	r1, r5
 800596a:	f7fb f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800596e:	b918      	cbnz	r0, 8005978 <__cvt+0x8c>
 8005970:	f1c6 0601 	rsb	r6, r6, #1
 8005974:	f8ca 6000 	str.w	r6, [sl]
 8005978:	f8da 3000 	ldr.w	r3, [sl]
 800597c:	4499      	add	r9, r3
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	4620      	mov	r0, r4
 8005984:	4629      	mov	r1, r5
 8005986:	f7fb f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800598a:	b108      	cbz	r0, 8005990 <__cvt+0xa4>
 800598c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005990:	2230      	movs	r2, #48	; 0x30
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	454b      	cmp	r3, r9
 8005996:	d307      	bcc.n	80059a8 <__cvt+0xbc>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800599c:	1bdb      	subs	r3, r3, r7
 800599e:	4638      	mov	r0, r7
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	b004      	add	sp, #16
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	1c59      	adds	r1, r3, #1
 80059aa:	9103      	str	r1, [sp, #12]
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e7f0      	b.n	8005992 <__cvt+0xa6>

080059b0 <__exponent>:
 80059b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b2:	4603      	mov	r3, r0
 80059b4:	2900      	cmp	r1, #0
 80059b6:	bfb8      	it	lt
 80059b8:	4249      	neglt	r1, r1
 80059ba:	f803 2b02 	strb.w	r2, [r3], #2
 80059be:	bfb4      	ite	lt
 80059c0:	222d      	movlt	r2, #45	; 0x2d
 80059c2:	222b      	movge	r2, #43	; 0x2b
 80059c4:	2909      	cmp	r1, #9
 80059c6:	7042      	strb	r2, [r0, #1]
 80059c8:	dd2a      	ble.n	8005a20 <__exponent+0x70>
 80059ca:	f10d 0407 	add.w	r4, sp, #7
 80059ce:	46a4      	mov	ip, r4
 80059d0:	270a      	movs	r7, #10
 80059d2:	46a6      	mov	lr, r4
 80059d4:	460a      	mov	r2, r1
 80059d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80059da:	fb07 1516 	mls	r5, r7, r6, r1
 80059de:	3530      	adds	r5, #48	; 0x30
 80059e0:	2a63      	cmp	r2, #99	; 0x63
 80059e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80059e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059ea:	4631      	mov	r1, r6
 80059ec:	dcf1      	bgt.n	80059d2 <__exponent+0x22>
 80059ee:	3130      	adds	r1, #48	; 0x30
 80059f0:	f1ae 0502 	sub.w	r5, lr, #2
 80059f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059f8:	1c44      	adds	r4, r0, #1
 80059fa:	4629      	mov	r1, r5
 80059fc:	4561      	cmp	r1, ip
 80059fe:	d30a      	bcc.n	8005a16 <__exponent+0x66>
 8005a00:	f10d 0209 	add.w	r2, sp, #9
 8005a04:	eba2 020e 	sub.w	r2, r2, lr
 8005a08:	4565      	cmp	r5, ip
 8005a0a:	bf88      	it	hi
 8005a0c:	2200      	movhi	r2, #0
 8005a0e:	4413      	add	r3, r2
 8005a10:	1a18      	subs	r0, r3, r0
 8005a12:	b003      	add	sp, #12
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a1e:	e7ed      	b.n	80059fc <__exponent+0x4c>
 8005a20:	2330      	movs	r3, #48	; 0x30
 8005a22:	3130      	adds	r1, #48	; 0x30
 8005a24:	7083      	strb	r3, [r0, #2]
 8005a26:	70c1      	strb	r1, [r0, #3]
 8005a28:	1d03      	adds	r3, r0, #4
 8005a2a:	e7f1      	b.n	8005a10 <__exponent+0x60>

08005a2c <_printf_float>:
 8005a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	ed2d 8b02 	vpush	{d8}
 8005a34:	b08d      	sub	sp, #52	; 0x34
 8005a36:	460c      	mov	r4, r1
 8005a38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	461f      	mov	r7, r3
 8005a40:	4605      	mov	r5, r0
 8005a42:	f001 fc93 	bl	800736c <_localeconv_r>
 8005a46:	f8d0 a000 	ldr.w	sl, [r0]
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f7fa fbc0 	bl	80001d0 <strlen>
 8005a50:	2300      	movs	r3, #0
 8005a52:	930a      	str	r3, [sp, #40]	; 0x28
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	9305      	str	r3, [sp, #20]
 8005a58:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a60:	3307      	adds	r3, #7
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	f103 0208 	add.w	r2, r3, #8
 8005a6a:	f8c8 2000 	str.w	r2, [r8]
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a7e:	9307      	str	r3, [sp, #28]
 8005a80:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a84:	ee08 0a10 	vmov	s16, r0
 8005a88:	4b9f      	ldr	r3, [pc, #636]	; (8005d08 <_printf_float+0x2dc>)
 8005a8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a92:	f7fb f84b 	bl	8000b2c <__aeabi_dcmpun>
 8005a96:	bb88      	cbnz	r0, 8005afc <_printf_float+0xd0>
 8005a98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a9c:	4b9a      	ldr	r3, [pc, #616]	; (8005d08 <_printf_float+0x2dc>)
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa2:	f7fb f825 	bl	8000af0 <__aeabi_dcmple>
 8005aa6:	bb48      	cbnz	r0, 8005afc <_printf_float+0xd0>
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4640      	mov	r0, r8
 8005aae:	4649      	mov	r1, r9
 8005ab0:	f7fb f814 	bl	8000adc <__aeabi_dcmplt>
 8005ab4:	b110      	cbz	r0, 8005abc <_printf_float+0x90>
 8005ab6:	232d      	movs	r3, #45	; 0x2d
 8005ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abc:	4b93      	ldr	r3, [pc, #588]	; (8005d0c <_printf_float+0x2e0>)
 8005abe:	4894      	ldr	r0, [pc, #592]	; (8005d10 <_printf_float+0x2e4>)
 8005ac0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ac4:	bf94      	ite	ls
 8005ac6:	4698      	movls	r8, r3
 8005ac8:	4680      	movhi	r8, r0
 8005aca:	2303      	movs	r3, #3
 8005acc:	6123      	str	r3, [r4, #16]
 8005ace:	9b05      	ldr	r3, [sp, #20]
 8005ad0:	f023 0204 	bic.w	r2, r3, #4
 8005ad4:	6022      	str	r2, [r4, #0]
 8005ad6:	f04f 0900 	mov.w	r9, #0
 8005ada:	9700      	str	r7, [sp, #0]
 8005adc:	4633      	mov	r3, r6
 8005ade:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f9d8 	bl	8005e98 <_printf_common>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f040 8090 	bne.w	8005c0e <_printf_float+0x1e2>
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	b00d      	add	sp, #52	; 0x34
 8005af4:	ecbd 8b02 	vpop	{d8}
 8005af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afc:	4642      	mov	r2, r8
 8005afe:	464b      	mov	r3, r9
 8005b00:	4640      	mov	r0, r8
 8005b02:	4649      	mov	r1, r9
 8005b04:	f7fb f812 	bl	8000b2c <__aeabi_dcmpun>
 8005b08:	b140      	cbz	r0, 8005b1c <_printf_float+0xf0>
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	bfbc      	itt	lt
 8005b10:	232d      	movlt	r3, #45	; 0x2d
 8005b12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b16:	487f      	ldr	r0, [pc, #508]	; (8005d14 <_printf_float+0x2e8>)
 8005b18:	4b7f      	ldr	r3, [pc, #508]	; (8005d18 <_printf_float+0x2ec>)
 8005b1a:	e7d1      	b.n	8005ac0 <_printf_float+0x94>
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b22:	9206      	str	r2, [sp, #24]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	d13f      	bne.n	8005ba8 <_printf_float+0x17c>
 8005b28:	2306      	movs	r3, #6
 8005b2a:	6063      	str	r3, [r4, #4]
 8005b2c:	9b05      	ldr	r3, [sp, #20]
 8005b2e:	6861      	ldr	r1, [r4, #4]
 8005b30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b34:	2300      	movs	r3, #0
 8005b36:	9303      	str	r3, [sp, #12]
 8005b38:	ab0a      	add	r3, sp, #40	; 0x28
 8005b3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b3e:	ab09      	add	r3, sp, #36	; 0x24
 8005b40:	ec49 8b10 	vmov	d0, r8, r9
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	6022      	str	r2, [r4, #0]
 8005b48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f7ff fecd 	bl	80058ec <__cvt>
 8005b52:	9b06      	ldr	r3, [sp, #24]
 8005b54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b56:	2b47      	cmp	r3, #71	; 0x47
 8005b58:	4680      	mov	r8, r0
 8005b5a:	d108      	bne.n	8005b6e <_printf_float+0x142>
 8005b5c:	1cc8      	adds	r0, r1, #3
 8005b5e:	db02      	blt.n	8005b66 <_printf_float+0x13a>
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	4299      	cmp	r1, r3
 8005b64:	dd41      	ble.n	8005bea <_printf_float+0x1be>
 8005b66:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b6a:	fa5f fb8b 	uxtb.w	fp, fp
 8005b6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b72:	d820      	bhi.n	8005bb6 <_printf_float+0x18a>
 8005b74:	3901      	subs	r1, #1
 8005b76:	465a      	mov	r2, fp
 8005b78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b7c:	9109      	str	r1, [sp, #36]	; 0x24
 8005b7e:	f7ff ff17 	bl	80059b0 <__exponent>
 8005b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b84:	1813      	adds	r3, r2, r0
 8005b86:	2a01      	cmp	r2, #1
 8005b88:	4681      	mov	r9, r0
 8005b8a:	6123      	str	r3, [r4, #16]
 8005b8c:	dc02      	bgt.n	8005b94 <_printf_float+0x168>
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	07d2      	lsls	r2, r2, #31
 8005b92:	d501      	bpl.n	8005b98 <_printf_float+0x16c>
 8005b94:	3301      	adds	r3, #1
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d09c      	beq.n	8005ada <_printf_float+0xae>
 8005ba0:	232d      	movs	r3, #45	; 0x2d
 8005ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba6:	e798      	b.n	8005ada <_printf_float+0xae>
 8005ba8:	9a06      	ldr	r2, [sp, #24]
 8005baa:	2a47      	cmp	r2, #71	; 0x47
 8005bac:	d1be      	bne.n	8005b2c <_printf_float+0x100>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1bc      	bne.n	8005b2c <_printf_float+0x100>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e7b9      	b.n	8005b2a <_printf_float+0xfe>
 8005bb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005bba:	d118      	bne.n	8005bee <_printf_float+0x1c2>
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	dd0b      	ble.n	8005bda <_printf_float+0x1ae>
 8005bc2:	6121      	str	r1, [r4, #16]
 8005bc4:	b913      	cbnz	r3, 8005bcc <_printf_float+0x1a0>
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	07d0      	lsls	r0, r2, #31
 8005bca:	d502      	bpl.n	8005bd2 <_printf_float+0x1a6>
 8005bcc:	3301      	adds	r3, #1
 8005bce:	440b      	add	r3, r1
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bd4:	f04f 0900 	mov.w	r9, #0
 8005bd8:	e7de      	b.n	8005b98 <_printf_float+0x16c>
 8005bda:	b913      	cbnz	r3, 8005be2 <_printf_float+0x1b6>
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	07d2      	lsls	r2, r2, #31
 8005be0:	d501      	bpl.n	8005be6 <_printf_float+0x1ba>
 8005be2:	3302      	adds	r3, #2
 8005be4:	e7f4      	b.n	8005bd0 <_printf_float+0x1a4>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e7f2      	b.n	8005bd0 <_printf_float+0x1a4>
 8005bea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf0:	4299      	cmp	r1, r3
 8005bf2:	db05      	blt.n	8005c00 <_printf_float+0x1d4>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	6121      	str	r1, [r4, #16]
 8005bf8:	07d8      	lsls	r0, r3, #31
 8005bfa:	d5ea      	bpl.n	8005bd2 <_printf_float+0x1a6>
 8005bfc:	1c4b      	adds	r3, r1, #1
 8005bfe:	e7e7      	b.n	8005bd0 <_printf_float+0x1a4>
 8005c00:	2900      	cmp	r1, #0
 8005c02:	bfd4      	ite	le
 8005c04:	f1c1 0202 	rsble	r2, r1, #2
 8005c08:	2201      	movgt	r2, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	e7e0      	b.n	8005bd0 <_printf_float+0x1a4>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	055a      	lsls	r2, r3, #21
 8005c12:	d407      	bmi.n	8005c24 <_printf_float+0x1f8>
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	4642      	mov	r2, r8
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d12c      	bne.n	8005c7c <_printf_float+0x250>
 8005c22:	e764      	b.n	8005aee <_printf_float+0xc2>
 8005c24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c28:	f240 80e0 	bls.w	8005dec <_printf_float+0x3c0>
 8005c2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c30:	2200      	movs	r2, #0
 8005c32:	2300      	movs	r3, #0
 8005c34:	f7fa ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d034      	beq.n	8005ca6 <_printf_float+0x27a>
 8005c3c:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <_printf_float+0x2f0>)
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f af51 	beq.w	8005aee <_printf_float+0xc2>
 8005c4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c50:	429a      	cmp	r2, r3
 8005c52:	db02      	blt.n	8005c5a <_printf_float+0x22e>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	07d8      	lsls	r0, r3, #31
 8005c58:	d510      	bpl.n	8005c7c <_printf_float+0x250>
 8005c5a:	ee18 3a10 	vmov	r3, s16
 8005c5e:	4652      	mov	r2, sl
 8005c60:	4631      	mov	r1, r6
 8005c62:	4628      	mov	r0, r5
 8005c64:	47b8      	blx	r7
 8005c66:	3001      	adds	r0, #1
 8005c68:	f43f af41 	beq.w	8005aee <_printf_float+0xc2>
 8005c6c:	f04f 0800 	mov.w	r8, #0
 8005c70:	f104 091a 	add.w	r9, r4, #26
 8005c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c76:	3b01      	subs	r3, #1
 8005c78:	4543      	cmp	r3, r8
 8005c7a:	dc09      	bgt.n	8005c90 <_printf_float+0x264>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	079b      	lsls	r3, r3, #30
 8005c80:	f100 8105 	bmi.w	8005e8e <_printf_float+0x462>
 8005c84:	68e0      	ldr	r0, [r4, #12]
 8005c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c88:	4298      	cmp	r0, r3
 8005c8a:	bfb8      	it	lt
 8005c8c:	4618      	movlt	r0, r3
 8005c8e:	e730      	b.n	8005af2 <_printf_float+0xc6>
 8005c90:	2301      	movs	r3, #1
 8005c92:	464a      	mov	r2, r9
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f43f af27 	beq.w	8005aee <_printf_float+0xc2>
 8005ca0:	f108 0801 	add.w	r8, r8, #1
 8005ca4:	e7e6      	b.n	8005c74 <_printf_float+0x248>
 8005ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc39      	bgt.n	8005d20 <_printf_float+0x2f4>
 8005cac:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <_printf_float+0x2f0>)
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f43f af19 	beq.w	8005aee <_printf_float+0xc2>
 8005cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	d102      	bne.n	8005cca <_printf_float+0x29e>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	07d9      	lsls	r1, r3, #31
 8005cc8:	d5d8      	bpl.n	8005c7c <_printf_float+0x250>
 8005cca:	ee18 3a10 	vmov	r3, s16
 8005cce:	4652      	mov	r2, sl
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f af09 	beq.w	8005aee <_printf_float+0xc2>
 8005cdc:	f04f 0900 	mov.w	r9, #0
 8005ce0:	f104 0a1a 	add.w	sl, r4, #26
 8005ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce6:	425b      	negs	r3, r3
 8005ce8:	454b      	cmp	r3, r9
 8005cea:	dc01      	bgt.n	8005cf0 <_printf_float+0x2c4>
 8005cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cee:	e792      	b.n	8005c16 <_printf_float+0x1ea>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4652      	mov	r2, sl
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	47b8      	blx	r7
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	f43f aef7 	beq.w	8005aee <_printf_float+0xc2>
 8005d00:	f109 0901 	add.w	r9, r9, #1
 8005d04:	e7ee      	b.n	8005ce4 <_printf_float+0x2b8>
 8005d06:	bf00      	nop
 8005d08:	7fefffff 	.word	0x7fefffff
 8005d0c:	0800866c 	.word	0x0800866c
 8005d10:	08008670 	.word	0x08008670
 8005d14:	08008678 	.word	0x08008678
 8005d18:	08008674 	.word	0x08008674
 8005d1c:	0800867c 	.word	0x0800867c
 8005d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d24:	429a      	cmp	r2, r3
 8005d26:	bfa8      	it	ge
 8005d28:	461a      	movge	r2, r3
 8005d2a:	2a00      	cmp	r2, #0
 8005d2c:	4691      	mov	r9, r2
 8005d2e:	dc37      	bgt.n	8005da0 <_printf_float+0x374>
 8005d30:	f04f 0b00 	mov.w	fp, #0
 8005d34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d38:	f104 021a 	add.w	r2, r4, #26
 8005d3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d3e:	9305      	str	r3, [sp, #20]
 8005d40:	eba3 0309 	sub.w	r3, r3, r9
 8005d44:	455b      	cmp	r3, fp
 8005d46:	dc33      	bgt.n	8005db0 <_printf_float+0x384>
 8005d48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	db3b      	blt.n	8005dc8 <_printf_float+0x39c>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	07da      	lsls	r2, r3, #31
 8005d54:	d438      	bmi.n	8005dc8 <_printf_float+0x39c>
 8005d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d58:	9a05      	ldr	r2, [sp, #20]
 8005d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d5c:	1a9a      	subs	r2, r3, r2
 8005d5e:	eba3 0901 	sub.w	r9, r3, r1
 8005d62:	4591      	cmp	r9, r2
 8005d64:	bfa8      	it	ge
 8005d66:	4691      	movge	r9, r2
 8005d68:	f1b9 0f00 	cmp.w	r9, #0
 8005d6c:	dc35      	bgt.n	8005dda <_printf_float+0x3ae>
 8005d6e:	f04f 0800 	mov.w	r8, #0
 8005d72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d76:	f104 0a1a 	add.w	sl, r4, #26
 8005d7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	eba3 0309 	sub.w	r3, r3, r9
 8005d84:	4543      	cmp	r3, r8
 8005d86:	f77f af79 	ble.w	8005c7c <_printf_float+0x250>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	4652      	mov	r2, sl
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4628      	mov	r0, r5
 8005d92:	47b8      	blx	r7
 8005d94:	3001      	adds	r0, #1
 8005d96:	f43f aeaa 	beq.w	8005aee <_printf_float+0xc2>
 8005d9a:	f108 0801 	add.w	r8, r8, #1
 8005d9e:	e7ec      	b.n	8005d7a <_printf_float+0x34e>
 8005da0:	4613      	mov	r3, r2
 8005da2:	4631      	mov	r1, r6
 8005da4:	4642      	mov	r2, r8
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	d1c0      	bne.n	8005d30 <_printf_float+0x304>
 8005dae:	e69e      	b.n	8005aee <_printf_float+0xc2>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	9205      	str	r2, [sp, #20]
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f ae97 	beq.w	8005aee <_printf_float+0xc2>
 8005dc0:	9a05      	ldr	r2, [sp, #20]
 8005dc2:	f10b 0b01 	add.w	fp, fp, #1
 8005dc6:	e7b9      	b.n	8005d3c <_printf_float+0x310>
 8005dc8:	ee18 3a10 	vmov	r3, s16
 8005dcc:	4652      	mov	r2, sl
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d1be      	bne.n	8005d56 <_printf_float+0x32a>
 8005dd8:	e689      	b.n	8005aee <_printf_float+0xc2>
 8005dda:	9a05      	ldr	r2, [sp, #20]
 8005ddc:	464b      	mov	r3, r9
 8005dde:	4442      	add	r2, r8
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	d1c1      	bne.n	8005d6e <_printf_float+0x342>
 8005dea:	e680      	b.n	8005aee <_printf_float+0xc2>
 8005dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dee:	2a01      	cmp	r2, #1
 8005df0:	dc01      	bgt.n	8005df6 <_printf_float+0x3ca>
 8005df2:	07db      	lsls	r3, r3, #31
 8005df4:	d538      	bpl.n	8005e68 <_printf_float+0x43c>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4642      	mov	r2, r8
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f ae74 	beq.w	8005aee <_printf_float+0xc2>
 8005e06:	ee18 3a10 	vmov	r3, s16
 8005e0a:	4652      	mov	r2, sl
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	f43f ae6b 	beq.w	8005aee <_printf_float+0xc2>
 8005e18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f7fa fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e24:	b9d8      	cbnz	r0, 8005e5e <_printf_float+0x432>
 8005e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e28:	f108 0201 	add.w	r2, r8, #1
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	d10e      	bne.n	8005e56 <_printf_float+0x42a>
 8005e38:	e659      	b.n	8005aee <_printf_float+0xc2>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	f43f ae52 	beq.w	8005aee <_printf_float+0xc2>
 8005e4a:	f108 0801 	add.w	r8, r8, #1
 8005e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e50:	3b01      	subs	r3, #1
 8005e52:	4543      	cmp	r3, r8
 8005e54:	dcf1      	bgt.n	8005e3a <_printf_float+0x40e>
 8005e56:	464b      	mov	r3, r9
 8005e58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e5c:	e6dc      	b.n	8005c18 <_printf_float+0x1ec>
 8005e5e:	f04f 0800 	mov.w	r8, #0
 8005e62:	f104 0a1a 	add.w	sl, r4, #26
 8005e66:	e7f2      	b.n	8005e4e <_printf_float+0x422>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	e7df      	b.n	8005e2e <_printf_float+0x402>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	464a      	mov	r2, r9
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f ae38 	beq.w	8005aee <_printf_float+0xc2>
 8005e7e:	f108 0801 	add.w	r8, r8, #1
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e86:	1a5b      	subs	r3, r3, r1
 8005e88:	4543      	cmp	r3, r8
 8005e8a:	dcf0      	bgt.n	8005e6e <_printf_float+0x442>
 8005e8c:	e6fa      	b.n	8005c84 <_printf_float+0x258>
 8005e8e:	f04f 0800 	mov.w	r8, #0
 8005e92:	f104 0919 	add.w	r9, r4, #25
 8005e96:	e7f4      	b.n	8005e82 <_printf_float+0x456>

08005e98 <_printf_common>:
 8005e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	4616      	mov	r6, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	688a      	ldr	r2, [r1, #8]
 8005ea2:	690b      	ldr	r3, [r1, #16]
 8005ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	bfb8      	it	lt
 8005eac:	4613      	movlt	r3, r2
 8005eae:	6033      	str	r3, [r6, #0]
 8005eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	b10a      	cbz	r2, 8005ebe <_printf_common+0x26>
 8005eba:	3301      	adds	r3, #1
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	0699      	lsls	r1, r3, #26
 8005ec2:	bf42      	ittt	mi
 8005ec4:	6833      	ldrmi	r3, [r6, #0]
 8005ec6:	3302      	addmi	r3, #2
 8005ec8:	6033      	strmi	r3, [r6, #0]
 8005eca:	6825      	ldr	r5, [r4, #0]
 8005ecc:	f015 0506 	ands.w	r5, r5, #6
 8005ed0:	d106      	bne.n	8005ee0 <_printf_common+0x48>
 8005ed2:	f104 0a19 	add.w	sl, r4, #25
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	6832      	ldr	r2, [r6, #0]
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dc26      	bgt.n	8005f2e <_printf_common+0x96>
 8005ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee4:	1e13      	subs	r3, r2, #0
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	bf18      	it	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	0692      	lsls	r2, r2, #26
 8005eee:	d42b      	bmi.n	8005f48 <_printf_common+0xb0>
 8005ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	47c0      	blx	r8
 8005efa:	3001      	adds	r0, #1
 8005efc:	d01e      	beq.n	8005f3c <_printf_common+0xa4>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	68e5      	ldr	r5, [r4, #12]
 8005f02:	6832      	ldr	r2, [r6, #0]
 8005f04:	f003 0306 	and.w	r3, r3, #6
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	bf08      	it	eq
 8005f0c:	1aad      	subeq	r5, r5, r2
 8005f0e:	68a3      	ldr	r3, [r4, #8]
 8005f10:	6922      	ldr	r2, [r4, #16]
 8005f12:	bf0c      	ite	eq
 8005f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f18:	2500      	movne	r5, #0
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	bfc4      	itt	gt
 8005f1e:	1a9b      	subgt	r3, r3, r2
 8005f20:	18ed      	addgt	r5, r5, r3
 8005f22:	2600      	movs	r6, #0
 8005f24:	341a      	adds	r4, #26
 8005f26:	42b5      	cmp	r5, r6
 8005f28:	d11a      	bne.n	8005f60 <_printf_common+0xc8>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e008      	b.n	8005f40 <_printf_common+0xa8>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4652      	mov	r2, sl
 8005f32:	4649      	mov	r1, r9
 8005f34:	4638      	mov	r0, r7
 8005f36:	47c0      	blx	r8
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d103      	bne.n	8005f44 <_printf_common+0xac>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	3501      	adds	r5, #1
 8005f46:	e7c6      	b.n	8005ed6 <_printf_common+0x3e>
 8005f48:	18e1      	adds	r1, r4, r3
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	2030      	movs	r0, #48	; 0x30
 8005f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f52:	4422      	add	r2, r4
 8005f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	e7c7      	b.n	8005ef0 <_printf_common+0x58>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4622      	mov	r2, r4
 8005f64:	4649      	mov	r1, r9
 8005f66:	4638      	mov	r0, r7
 8005f68:	47c0      	blx	r8
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d0e6      	beq.n	8005f3c <_printf_common+0xa4>
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7d9      	b.n	8005f26 <_printf_common+0x8e>
	...

08005f74 <_printf_i>:
 8005f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	7e0f      	ldrb	r7, [r1, #24]
 8005f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f7c:	2f78      	cmp	r7, #120	; 0x78
 8005f7e:	4691      	mov	r9, r2
 8005f80:	4680      	mov	r8, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	469a      	mov	sl, r3
 8005f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f8a:	d807      	bhi.n	8005f9c <_printf_i+0x28>
 8005f8c:	2f62      	cmp	r7, #98	; 0x62
 8005f8e:	d80a      	bhi.n	8005fa6 <_printf_i+0x32>
 8005f90:	2f00      	cmp	r7, #0
 8005f92:	f000 80d8 	beq.w	8006146 <_printf_i+0x1d2>
 8005f96:	2f58      	cmp	r7, #88	; 0x58
 8005f98:	f000 80a3 	beq.w	80060e2 <_printf_i+0x16e>
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa4:	e03a      	b.n	800601c <_printf_i+0xa8>
 8005fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005faa:	2b15      	cmp	r3, #21
 8005fac:	d8f6      	bhi.n	8005f9c <_printf_i+0x28>
 8005fae:	a101      	add	r1, pc, #4	; (adr r1, 8005fb4 <_printf_i+0x40>)
 8005fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb4:	0800600d 	.word	0x0800600d
 8005fb8:	08006021 	.word	0x08006021
 8005fbc:	08005f9d 	.word	0x08005f9d
 8005fc0:	08005f9d 	.word	0x08005f9d
 8005fc4:	08005f9d 	.word	0x08005f9d
 8005fc8:	08005f9d 	.word	0x08005f9d
 8005fcc:	08006021 	.word	0x08006021
 8005fd0:	08005f9d 	.word	0x08005f9d
 8005fd4:	08005f9d 	.word	0x08005f9d
 8005fd8:	08005f9d 	.word	0x08005f9d
 8005fdc:	08005f9d 	.word	0x08005f9d
 8005fe0:	0800612d 	.word	0x0800612d
 8005fe4:	08006051 	.word	0x08006051
 8005fe8:	0800610f 	.word	0x0800610f
 8005fec:	08005f9d 	.word	0x08005f9d
 8005ff0:	08005f9d 	.word	0x08005f9d
 8005ff4:	0800614f 	.word	0x0800614f
 8005ff8:	08005f9d 	.word	0x08005f9d
 8005ffc:	08006051 	.word	0x08006051
 8006000:	08005f9d 	.word	0x08005f9d
 8006004:	08005f9d 	.word	0x08005f9d
 8006008:	08006117 	.word	0x08006117
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	1d1a      	adds	r2, r3, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	602a      	str	r2, [r5, #0]
 8006014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800601c:	2301      	movs	r3, #1
 800601e:	e0a3      	b.n	8006168 <_printf_i+0x1f4>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	6829      	ldr	r1, [r5, #0]
 8006024:	0606      	lsls	r6, r0, #24
 8006026:	f101 0304 	add.w	r3, r1, #4
 800602a:	d50a      	bpl.n	8006042 <_printf_i+0xce>
 800602c:	680e      	ldr	r6, [r1, #0]
 800602e:	602b      	str	r3, [r5, #0]
 8006030:	2e00      	cmp	r6, #0
 8006032:	da03      	bge.n	800603c <_printf_i+0xc8>
 8006034:	232d      	movs	r3, #45	; 0x2d
 8006036:	4276      	negs	r6, r6
 8006038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800603c:	485e      	ldr	r0, [pc, #376]	; (80061b8 <_printf_i+0x244>)
 800603e:	230a      	movs	r3, #10
 8006040:	e019      	b.n	8006076 <_printf_i+0x102>
 8006042:	680e      	ldr	r6, [r1, #0]
 8006044:	602b      	str	r3, [r5, #0]
 8006046:	f010 0f40 	tst.w	r0, #64	; 0x40
 800604a:	bf18      	it	ne
 800604c:	b236      	sxthne	r6, r6
 800604e:	e7ef      	b.n	8006030 <_printf_i+0xbc>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	1d19      	adds	r1, r3, #4
 8006056:	6029      	str	r1, [r5, #0]
 8006058:	0601      	lsls	r1, r0, #24
 800605a:	d501      	bpl.n	8006060 <_printf_i+0xec>
 800605c:	681e      	ldr	r6, [r3, #0]
 800605e:	e002      	b.n	8006066 <_printf_i+0xf2>
 8006060:	0646      	lsls	r6, r0, #25
 8006062:	d5fb      	bpl.n	800605c <_printf_i+0xe8>
 8006064:	881e      	ldrh	r6, [r3, #0]
 8006066:	4854      	ldr	r0, [pc, #336]	; (80061b8 <_printf_i+0x244>)
 8006068:	2f6f      	cmp	r7, #111	; 0x6f
 800606a:	bf0c      	ite	eq
 800606c:	2308      	moveq	r3, #8
 800606e:	230a      	movne	r3, #10
 8006070:	2100      	movs	r1, #0
 8006072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006076:	6865      	ldr	r5, [r4, #4]
 8006078:	60a5      	str	r5, [r4, #8]
 800607a:	2d00      	cmp	r5, #0
 800607c:	bfa2      	ittt	ge
 800607e:	6821      	ldrge	r1, [r4, #0]
 8006080:	f021 0104 	bicge.w	r1, r1, #4
 8006084:	6021      	strge	r1, [r4, #0]
 8006086:	b90e      	cbnz	r6, 800608c <_printf_i+0x118>
 8006088:	2d00      	cmp	r5, #0
 800608a:	d04d      	beq.n	8006128 <_printf_i+0x1b4>
 800608c:	4615      	mov	r5, r2
 800608e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006092:	fb03 6711 	mls	r7, r3, r1, r6
 8006096:	5dc7      	ldrb	r7, [r0, r7]
 8006098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800609c:	4637      	mov	r7, r6
 800609e:	42bb      	cmp	r3, r7
 80060a0:	460e      	mov	r6, r1
 80060a2:	d9f4      	bls.n	800608e <_printf_i+0x11a>
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d10b      	bne.n	80060c0 <_printf_i+0x14c>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	07de      	lsls	r6, r3, #31
 80060ac:	d508      	bpl.n	80060c0 <_printf_i+0x14c>
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	6861      	ldr	r1, [r4, #4]
 80060b2:	4299      	cmp	r1, r3
 80060b4:	bfde      	ittt	le
 80060b6:	2330      	movle	r3, #48	; 0x30
 80060b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060c0:	1b52      	subs	r2, r2, r5
 80060c2:	6122      	str	r2, [r4, #16]
 80060c4:	f8cd a000 	str.w	sl, [sp]
 80060c8:	464b      	mov	r3, r9
 80060ca:	aa03      	add	r2, sp, #12
 80060cc:	4621      	mov	r1, r4
 80060ce:	4640      	mov	r0, r8
 80060d0:	f7ff fee2 	bl	8005e98 <_printf_common>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d14c      	bne.n	8006172 <_printf_i+0x1fe>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	b004      	add	sp, #16
 80060de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e2:	4835      	ldr	r0, [pc, #212]	; (80061b8 <_printf_i+0x244>)
 80060e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060e8:	6829      	ldr	r1, [r5, #0]
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80060f0:	6029      	str	r1, [r5, #0]
 80060f2:	061d      	lsls	r5, r3, #24
 80060f4:	d514      	bpl.n	8006120 <_printf_i+0x1ac>
 80060f6:	07df      	lsls	r7, r3, #31
 80060f8:	bf44      	itt	mi
 80060fa:	f043 0320 	orrmi.w	r3, r3, #32
 80060fe:	6023      	strmi	r3, [r4, #0]
 8006100:	b91e      	cbnz	r6, 800610a <_printf_i+0x196>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	f023 0320 	bic.w	r3, r3, #32
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	2310      	movs	r3, #16
 800610c:	e7b0      	b.n	8006070 <_printf_i+0xfc>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	f043 0320 	orr.w	r3, r3, #32
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	2378      	movs	r3, #120	; 0x78
 8006118:	4828      	ldr	r0, [pc, #160]	; (80061bc <_printf_i+0x248>)
 800611a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800611e:	e7e3      	b.n	80060e8 <_printf_i+0x174>
 8006120:	0659      	lsls	r1, r3, #25
 8006122:	bf48      	it	mi
 8006124:	b2b6      	uxthmi	r6, r6
 8006126:	e7e6      	b.n	80060f6 <_printf_i+0x182>
 8006128:	4615      	mov	r5, r2
 800612a:	e7bb      	b.n	80060a4 <_printf_i+0x130>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	6826      	ldr	r6, [r4, #0]
 8006130:	6961      	ldr	r1, [r4, #20]
 8006132:	1d18      	adds	r0, r3, #4
 8006134:	6028      	str	r0, [r5, #0]
 8006136:	0635      	lsls	r5, r6, #24
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	d501      	bpl.n	8006140 <_printf_i+0x1cc>
 800613c:	6019      	str	r1, [r3, #0]
 800613e:	e002      	b.n	8006146 <_printf_i+0x1d2>
 8006140:	0670      	lsls	r0, r6, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0x1c8>
 8006144:	8019      	strh	r1, [r3, #0]
 8006146:	2300      	movs	r3, #0
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	4615      	mov	r5, r2
 800614c:	e7ba      	b.n	80060c4 <_printf_i+0x150>
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	602a      	str	r2, [r5, #0]
 8006154:	681d      	ldr	r5, [r3, #0]
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	2100      	movs	r1, #0
 800615a:	4628      	mov	r0, r5
 800615c:	f7fa f840 	bl	80001e0 <memchr>
 8006160:	b108      	cbz	r0, 8006166 <_printf_i+0x1f2>
 8006162:	1b40      	subs	r0, r0, r5
 8006164:	6060      	str	r0, [r4, #4]
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	6123      	str	r3, [r4, #16]
 800616a:	2300      	movs	r3, #0
 800616c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006170:	e7a8      	b.n	80060c4 <_printf_i+0x150>
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	462a      	mov	r2, r5
 8006176:	4649      	mov	r1, r9
 8006178:	4640      	mov	r0, r8
 800617a:	47d0      	blx	sl
 800617c:	3001      	adds	r0, #1
 800617e:	d0ab      	beq.n	80060d8 <_printf_i+0x164>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	079b      	lsls	r3, r3, #30
 8006184:	d413      	bmi.n	80061ae <_printf_i+0x23a>
 8006186:	68e0      	ldr	r0, [r4, #12]
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	4298      	cmp	r0, r3
 800618c:	bfb8      	it	lt
 800618e:	4618      	movlt	r0, r3
 8006190:	e7a4      	b.n	80060dc <_printf_i+0x168>
 8006192:	2301      	movs	r3, #1
 8006194:	4632      	mov	r2, r6
 8006196:	4649      	mov	r1, r9
 8006198:	4640      	mov	r0, r8
 800619a:	47d0      	blx	sl
 800619c:	3001      	adds	r0, #1
 800619e:	d09b      	beq.n	80060d8 <_printf_i+0x164>
 80061a0:	3501      	adds	r5, #1
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	9903      	ldr	r1, [sp, #12]
 80061a6:	1a5b      	subs	r3, r3, r1
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dcf2      	bgt.n	8006192 <_printf_i+0x21e>
 80061ac:	e7eb      	b.n	8006186 <_printf_i+0x212>
 80061ae:	2500      	movs	r5, #0
 80061b0:	f104 0619 	add.w	r6, r4, #25
 80061b4:	e7f5      	b.n	80061a2 <_printf_i+0x22e>
 80061b6:	bf00      	nop
 80061b8:	0800867e 	.word	0x0800867e
 80061bc:	0800868f 	.word	0x0800868f

080061c0 <_sbrk_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4d06      	ldr	r5, [pc, #24]	; (80061dc <_sbrk_r+0x1c>)
 80061c4:	2300      	movs	r3, #0
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	602b      	str	r3, [r5, #0]
 80061cc:	f7fb ff2a 	bl	8002024 <_sbrk>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_sbrk_r+0x1a>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_sbrk_r+0x1a>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20000658 	.word	0x20000658

080061e0 <sniprintf>:
 80061e0:	b40c      	push	{r2, r3}
 80061e2:	b530      	push	{r4, r5, lr}
 80061e4:	4b17      	ldr	r3, [pc, #92]	; (8006244 <sniprintf+0x64>)
 80061e6:	1e0c      	subs	r4, r1, #0
 80061e8:	681d      	ldr	r5, [r3, #0]
 80061ea:	b09d      	sub	sp, #116	; 0x74
 80061ec:	da08      	bge.n	8006200 <sniprintf+0x20>
 80061ee:	238b      	movs	r3, #139	; 0x8b
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	b01d      	add	sp, #116	; 0x74
 80061f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061fc:	b002      	add	sp, #8
 80061fe:	4770      	bx	lr
 8006200:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006204:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006208:	bf14      	ite	ne
 800620a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800620e:	4623      	moveq	r3, r4
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	9307      	str	r3, [sp, #28]
 8006214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006218:	9002      	str	r0, [sp, #8]
 800621a:	9006      	str	r0, [sp, #24]
 800621c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006220:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006222:	ab21      	add	r3, sp, #132	; 0x84
 8006224:	a902      	add	r1, sp, #8
 8006226:	4628      	mov	r0, r5
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	f001 fd71 	bl	8007d10 <_svfiprintf_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	bfbc      	itt	lt
 8006232:	238b      	movlt	r3, #139	; 0x8b
 8006234:	602b      	strlt	r3, [r5, #0]
 8006236:	2c00      	cmp	r4, #0
 8006238:	d0dd      	beq.n	80061f6 <sniprintf+0x16>
 800623a:	9b02      	ldr	r3, [sp, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e7d9      	b.n	80061f6 <sniprintf+0x16>
 8006242:	bf00      	nop
 8006244:	200000d4 	.word	0x200000d4

08006248 <__sread>:
 8006248:	b510      	push	{r4, lr}
 800624a:	460c      	mov	r4, r1
 800624c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006250:	f001 ffb8 	bl	80081c4 <_read_r>
 8006254:	2800      	cmp	r0, #0
 8006256:	bfab      	itete	ge
 8006258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800625a:	89a3      	ldrhlt	r3, [r4, #12]
 800625c:	181b      	addge	r3, r3, r0
 800625e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006262:	bfac      	ite	ge
 8006264:	6563      	strge	r3, [r4, #84]	; 0x54
 8006266:	81a3      	strhlt	r3, [r4, #12]
 8006268:	bd10      	pop	{r4, pc}

0800626a <__swrite>:
 800626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626e:	461f      	mov	r7, r3
 8006270:	898b      	ldrh	r3, [r1, #12]
 8006272:	05db      	lsls	r3, r3, #23
 8006274:	4605      	mov	r5, r0
 8006276:	460c      	mov	r4, r1
 8006278:	4616      	mov	r6, r2
 800627a:	d505      	bpl.n	8006288 <__swrite+0x1e>
 800627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006280:	2302      	movs	r3, #2
 8006282:	2200      	movs	r2, #0
 8006284:	f001 f876 	bl	8007374 <_lseek_r>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800628e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	4632      	mov	r2, r6
 8006296:	463b      	mov	r3, r7
 8006298:	4628      	mov	r0, r5
 800629a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800629e:	f000 b869 	b.w	8006374 <_write_r>

080062a2 <__sseek>:
 80062a2:	b510      	push	{r4, lr}
 80062a4:	460c      	mov	r4, r1
 80062a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062aa:	f001 f863 	bl	8007374 <_lseek_r>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	bf15      	itete	ne
 80062b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80062b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062be:	81a3      	strheq	r3, [r4, #12]
 80062c0:	bf18      	it	ne
 80062c2:	81a3      	strhne	r3, [r4, #12]
 80062c4:	bd10      	pop	{r4, pc}

080062c6 <__sclose>:
 80062c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ca:	f000 b8f1 	b.w	80064b0 <_close_r>
	...

080062d0 <__swbuf_r>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	460e      	mov	r6, r1
 80062d4:	4614      	mov	r4, r2
 80062d6:	4605      	mov	r5, r0
 80062d8:	b118      	cbz	r0, 80062e2 <__swbuf_r+0x12>
 80062da:	6983      	ldr	r3, [r0, #24]
 80062dc:	b90b      	cbnz	r3, 80062e2 <__swbuf_r+0x12>
 80062de:	f7ff f995 	bl	800560c <__sinit>
 80062e2:	4b21      	ldr	r3, [pc, #132]	; (8006368 <__swbuf_r+0x98>)
 80062e4:	429c      	cmp	r4, r3
 80062e6:	d12b      	bne.n	8006340 <__swbuf_r+0x70>
 80062e8:	686c      	ldr	r4, [r5, #4]
 80062ea:	69a3      	ldr	r3, [r4, #24]
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	071a      	lsls	r2, r3, #28
 80062f2:	d52f      	bpl.n	8006354 <__swbuf_r+0x84>
 80062f4:	6923      	ldr	r3, [r4, #16]
 80062f6:	b36b      	cbz	r3, 8006354 <__swbuf_r+0x84>
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	1ac0      	subs	r0, r0, r3
 80062fe:	6963      	ldr	r3, [r4, #20]
 8006300:	b2f6      	uxtb	r6, r6
 8006302:	4283      	cmp	r3, r0
 8006304:	4637      	mov	r7, r6
 8006306:	dc04      	bgt.n	8006312 <__swbuf_r+0x42>
 8006308:	4621      	mov	r1, r4
 800630a:	4628      	mov	r0, r5
 800630c:	f000 ffe0 	bl	80072d0 <_fflush_r>
 8006310:	bb30      	cbnz	r0, 8006360 <__swbuf_r+0x90>
 8006312:	68a3      	ldr	r3, [r4, #8]
 8006314:	3b01      	subs	r3, #1
 8006316:	60a3      	str	r3, [r4, #8]
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	6022      	str	r2, [r4, #0]
 800631e:	701e      	strb	r6, [r3, #0]
 8006320:	6963      	ldr	r3, [r4, #20]
 8006322:	3001      	adds	r0, #1
 8006324:	4283      	cmp	r3, r0
 8006326:	d004      	beq.n	8006332 <__swbuf_r+0x62>
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	07db      	lsls	r3, r3, #31
 800632c:	d506      	bpl.n	800633c <__swbuf_r+0x6c>
 800632e:	2e0a      	cmp	r6, #10
 8006330:	d104      	bne.n	800633c <__swbuf_r+0x6c>
 8006332:	4621      	mov	r1, r4
 8006334:	4628      	mov	r0, r5
 8006336:	f000 ffcb 	bl	80072d0 <_fflush_r>
 800633a:	b988      	cbnz	r0, 8006360 <__swbuf_r+0x90>
 800633c:	4638      	mov	r0, r7
 800633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <__swbuf_r+0x9c>)
 8006342:	429c      	cmp	r4, r3
 8006344:	d101      	bne.n	800634a <__swbuf_r+0x7a>
 8006346:	68ac      	ldr	r4, [r5, #8]
 8006348:	e7cf      	b.n	80062ea <__swbuf_r+0x1a>
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <__swbuf_r+0xa0>)
 800634c:	429c      	cmp	r4, r3
 800634e:	bf08      	it	eq
 8006350:	68ec      	ldreq	r4, [r5, #12]
 8006352:	e7ca      	b.n	80062ea <__swbuf_r+0x1a>
 8006354:	4621      	mov	r1, r4
 8006356:	4628      	mov	r0, r5
 8006358:	f000 f81e 	bl	8006398 <__swsetup_r>
 800635c:	2800      	cmp	r0, #0
 800635e:	d0cb      	beq.n	80062f8 <__swbuf_r+0x28>
 8006360:	f04f 37ff 	mov.w	r7, #4294967295
 8006364:	e7ea      	b.n	800633c <__swbuf_r+0x6c>
 8006366:	bf00      	nop
 8006368:	08008628 	.word	0x08008628
 800636c:	08008648 	.word	0x08008648
 8006370:	08008608 	.word	0x08008608

08006374 <_write_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d07      	ldr	r5, [pc, #28]	; (8006394 <_write_r+0x20>)
 8006378:	4604      	mov	r4, r0
 800637a:	4608      	mov	r0, r1
 800637c:	4611      	mov	r1, r2
 800637e:	2200      	movs	r2, #0
 8006380:	602a      	str	r2, [r5, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	f7ff f83f 	bl	8005406 <_write>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_write_r+0x1e>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_write_r+0x1e>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20000658 	.word	0x20000658

08006398 <__swsetup_r>:
 8006398:	4b32      	ldr	r3, [pc, #200]	; (8006464 <__swsetup_r+0xcc>)
 800639a:	b570      	push	{r4, r5, r6, lr}
 800639c:	681d      	ldr	r5, [r3, #0]
 800639e:	4606      	mov	r6, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	b125      	cbz	r5, 80063ae <__swsetup_r+0x16>
 80063a4:	69ab      	ldr	r3, [r5, #24]
 80063a6:	b913      	cbnz	r3, 80063ae <__swsetup_r+0x16>
 80063a8:	4628      	mov	r0, r5
 80063aa:	f7ff f92f 	bl	800560c <__sinit>
 80063ae:	4b2e      	ldr	r3, [pc, #184]	; (8006468 <__swsetup_r+0xd0>)
 80063b0:	429c      	cmp	r4, r3
 80063b2:	d10f      	bne.n	80063d4 <__swsetup_r+0x3c>
 80063b4:	686c      	ldr	r4, [r5, #4]
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063bc:	0719      	lsls	r1, r3, #28
 80063be:	d42c      	bmi.n	800641a <__swsetup_r+0x82>
 80063c0:	06dd      	lsls	r5, r3, #27
 80063c2:	d411      	bmi.n	80063e8 <__swsetup_r+0x50>
 80063c4:	2309      	movs	r3, #9
 80063c6:	6033      	str	r3, [r6, #0]
 80063c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	f04f 30ff 	mov.w	r0, #4294967295
 80063d2:	e03e      	b.n	8006452 <__swsetup_r+0xba>
 80063d4:	4b25      	ldr	r3, [pc, #148]	; (800646c <__swsetup_r+0xd4>)
 80063d6:	429c      	cmp	r4, r3
 80063d8:	d101      	bne.n	80063de <__swsetup_r+0x46>
 80063da:	68ac      	ldr	r4, [r5, #8]
 80063dc:	e7eb      	b.n	80063b6 <__swsetup_r+0x1e>
 80063de:	4b24      	ldr	r3, [pc, #144]	; (8006470 <__swsetup_r+0xd8>)
 80063e0:	429c      	cmp	r4, r3
 80063e2:	bf08      	it	eq
 80063e4:	68ec      	ldreq	r4, [r5, #12]
 80063e6:	e7e6      	b.n	80063b6 <__swsetup_r+0x1e>
 80063e8:	0758      	lsls	r0, r3, #29
 80063ea:	d512      	bpl.n	8006412 <__swsetup_r+0x7a>
 80063ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ee:	b141      	cbz	r1, 8006402 <__swsetup_r+0x6a>
 80063f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063f4:	4299      	cmp	r1, r3
 80063f6:	d002      	beq.n	80063fe <__swsetup_r+0x66>
 80063f8:	4630      	mov	r0, r6
 80063fa:	f001 fbe1 	bl	8007bc0 <_free_r>
 80063fe:	2300      	movs	r3, #0
 8006400:	6363      	str	r3, [r4, #52]	; 0x34
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006408:	81a3      	strh	r3, [r4, #12]
 800640a:	2300      	movs	r3, #0
 800640c:	6063      	str	r3, [r4, #4]
 800640e:	6923      	ldr	r3, [r4, #16]
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	f043 0308 	orr.w	r3, r3, #8
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	b94b      	cbnz	r3, 8006432 <__swsetup_r+0x9a>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006428:	d003      	beq.n	8006432 <__swsetup_r+0x9a>
 800642a:	4621      	mov	r1, r4
 800642c:	4630      	mov	r0, r6
 800642e:	f000 ffd9 	bl	80073e4 <__smakebuf_r>
 8006432:	89a0      	ldrh	r0, [r4, #12]
 8006434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006438:	f010 0301 	ands.w	r3, r0, #1
 800643c:	d00a      	beq.n	8006454 <__swsetup_r+0xbc>
 800643e:	2300      	movs	r3, #0
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	6963      	ldr	r3, [r4, #20]
 8006444:	425b      	negs	r3, r3
 8006446:	61a3      	str	r3, [r4, #24]
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	b943      	cbnz	r3, 800645e <__swsetup_r+0xc6>
 800644c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006450:	d1ba      	bne.n	80063c8 <__swsetup_r+0x30>
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	0781      	lsls	r1, r0, #30
 8006456:	bf58      	it	pl
 8006458:	6963      	ldrpl	r3, [r4, #20]
 800645a:	60a3      	str	r3, [r4, #8]
 800645c:	e7f4      	b.n	8006448 <__swsetup_r+0xb0>
 800645e:	2000      	movs	r0, #0
 8006460:	e7f7      	b.n	8006452 <__swsetup_r+0xba>
 8006462:	bf00      	nop
 8006464:	200000d4 	.word	0x200000d4
 8006468:	08008628 	.word	0x08008628
 800646c:	08008648 	.word	0x08008648
 8006470:	08008608 	.word	0x08008608

08006474 <__assert_func>:
 8006474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006476:	4614      	mov	r4, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <__assert_func+0x2c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4605      	mov	r5, r0
 8006480:	68d8      	ldr	r0, [r3, #12]
 8006482:	b14c      	cbz	r4, 8006498 <__assert_func+0x24>
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <__assert_func+0x30>)
 8006486:	9100      	str	r1, [sp, #0]
 8006488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800648c:	4906      	ldr	r1, [pc, #24]	; (80064a8 <__assert_func+0x34>)
 800648e:	462b      	mov	r3, r5
 8006490:	f000 ff5a 	bl	8007348 <fiprintf>
 8006494:	f001 fea8 	bl	80081e8 <abort>
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <__assert_func+0x38>)
 800649a:	461c      	mov	r4, r3
 800649c:	e7f3      	b.n	8006486 <__assert_func+0x12>
 800649e:	bf00      	nop
 80064a0:	200000d4 	.word	0x200000d4
 80064a4:	080086a0 	.word	0x080086a0
 80064a8:	080086ad 	.word	0x080086ad
 80064ac:	080086db 	.word	0x080086db

080064b0 <_close_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d06      	ldr	r5, [pc, #24]	; (80064cc <_close_r+0x1c>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	f7fe ffd4 	bl	8005468 <_close>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_close_r+0x1a>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_close_r+0x1a>
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	20000658 	.word	0x20000658

080064d0 <quorem>:
 80064d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	6903      	ldr	r3, [r0, #16]
 80064d6:	690c      	ldr	r4, [r1, #16]
 80064d8:	42a3      	cmp	r3, r4
 80064da:	4607      	mov	r7, r0
 80064dc:	f2c0 8081 	blt.w	80065e2 <quorem+0x112>
 80064e0:	3c01      	subs	r4, #1
 80064e2:	f101 0814 	add.w	r8, r1, #20
 80064e6:	f100 0514 	add.w	r5, r0, #20
 80064ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064f8:	3301      	adds	r3, #1
 80064fa:	429a      	cmp	r2, r3
 80064fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006500:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006504:	fbb2 f6f3 	udiv	r6, r2, r3
 8006508:	d331      	bcc.n	800656e <quorem+0x9e>
 800650a:	f04f 0e00 	mov.w	lr, #0
 800650e:	4640      	mov	r0, r8
 8006510:	46ac      	mov	ip, r5
 8006512:	46f2      	mov	sl, lr
 8006514:	f850 2b04 	ldr.w	r2, [r0], #4
 8006518:	b293      	uxth	r3, r2
 800651a:	fb06 e303 	mla	r3, r6, r3, lr
 800651e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006522:	b29b      	uxth	r3, r3
 8006524:	ebaa 0303 	sub.w	r3, sl, r3
 8006528:	f8dc a000 	ldr.w	sl, [ip]
 800652c:	0c12      	lsrs	r2, r2, #16
 800652e:	fa13 f38a 	uxtah	r3, r3, sl
 8006532:	fb06 e202 	mla	r2, r6, r2, lr
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	9b00      	ldr	r3, [sp, #0]
 800653a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800653e:	b292      	uxth	r2, r2
 8006540:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006548:	f8bd 3000 	ldrh.w	r3, [sp]
 800654c:	4581      	cmp	r9, r0
 800654e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006552:	f84c 3b04 	str.w	r3, [ip], #4
 8006556:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800655a:	d2db      	bcs.n	8006514 <quorem+0x44>
 800655c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006560:	b92b      	cbnz	r3, 800656e <quorem+0x9e>
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	3b04      	subs	r3, #4
 8006566:	429d      	cmp	r5, r3
 8006568:	461a      	mov	r2, r3
 800656a:	d32e      	bcc.n	80065ca <quorem+0xfa>
 800656c:	613c      	str	r4, [r7, #16]
 800656e:	4638      	mov	r0, r7
 8006570:	f001 fa0e 	bl	8007990 <__mcmp>
 8006574:	2800      	cmp	r0, #0
 8006576:	db24      	blt.n	80065c2 <quorem+0xf2>
 8006578:	3601      	adds	r6, #1
 800657a:	4628      	mov	r0, r5
 800657c:	f04f 0c00 	mov.w	ip, #0
 8006580:	f858 2b04 	ldr.w	r2, [r8], #4
 8006584:	f8d0 e000 	ldr.w	lr, [r0]
 8006588:	b293      	uxth	r3, r2
 800658a:	ebac 0303 	sub.w	r3, ip, r3
 800658e:	0c12      	lsrs	r2, r2, #16
 8006590:	fa13 f38e 	uxtah	r3, r3, lr
 8006594:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006598:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800659c:	b29b      	uxth	r3, r3
 800659e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065a2:	45c1      	cmp	r9, r8
 80065a4:	f840 3b04 	str.w	r3, [r0], #4
 80065a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065ac:	d2e8      	bcs.n	8006580 <quorem+0xb0>
 80065ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065b6:	b922      	cbnz	r2, 80065c2 <quorem+0xf2>
 80065b8:	3b04      	subs	r3, #4
 80065ba:	429d      	cmp	r5, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	d30a      	bcc.n	80065d6 <quorem+0x106>
 80065c0:	613c      	str	r4, [r7, #16]
 80065c2:	4630      	mov	r0, r6
 80065c4:	b003      	add	sp, #12
 80065c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	3b04      	subs	r3, #4
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	d1cc      	bne.n	800656c <quorem+0x9c>
 80065d2:	3c01      	subs	r4, #1
 80065d4:	e7c7      	b.n	8006566 <quorem+0x96>
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	3b04      	subs	r3, #4
 80065da:	2a00      	cmp	r2, #0
 80065dc:	d1f0      	bne.n	80065c0 <quorem+0xf0>
 80065de:	3c01      	subs	r4, #1
 80065e0:	e7eb      	b.n	80065ba <quorem+0xea>
 80065e2:	2000      	movs	r0, #0
 80065e4:	e7ee      	b.n	80065c4 <quorem+0xf4>
	...

080065e8 <_dtoa_r>:
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	ed2d 8b04 	vpush	{d8-d9}
 80065f0:	ec57 6b10 	vmov	r6, r7, d0
 80065f4:	b093      	sub	sp, #76	; 0x4c
 80065f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065fc:	9106      	str	r1, [sp, #24]
 80065fe:	ee10 aa10 	vmov	sl, s0
 8006602:	4604      	mov	r4, r0
 8006604:	9209      	str	r2, [sp, #36]	; 0x24
 8006606:	930c      	str	r3, [sp, #48]	; 0x30
 8006608:	46bb      	mov	fp, r7
 800660a:	b975      	cbnz	r5, 800662a <_dtoa_r+0x42>
 800660c:	2010      	movs	r0, #16
 800660e:	f000 ff29 	bl	8007464 <malloc>
 8006612:	4602      	mov	r2, r0
 8006614:	6260      	str	r0, [r4, #36]	; 0x24
 8006616:	b920      	cbnz	r0, 8006622 <_dtoa_r+0x3a>
 8006618:	4ba7      	ldr	r3, [pc, #668]	; (80068b8 <_dtoa_r+0x2d0>)
 800661a:	21ea      	movs	r1, #234	; 0xea
 800661c:	48a7      	ldr	r0, [pc, #668]	; (80068bc <_dtoa_r+0x2d4>)
 800661e:	f7ff ff29 	bl	8006474 <__assert_func>
 8006622:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006626:	6005      	str	r5, [r0, #0]
 8006628:	60c5      	str	r5, [r0, #12]
 800662a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800662c:	6819      	ldr	r1, [r3, #0]
 800662e:	b151      	cbz	r1, 8006646 <_dtoa_r+0x5e>
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	604a      	str	r2, [r1, #4]
 8006634:	2301      	movs	r3, #1
 8006636:	4093      	lsls	r3, r2
 8006638:	608b      	str	r3, [r1, #8]
 800663a:	4620      	mov	r0, r4
 800663c:	f000 ff66 	bl	800750c <_Bfree>
 8006640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	1e3b      	subs	r3, r7, #0
 8006648:	bfaa      	itet	ge
 800664a:	2300      	movge	r3, #0
 800664c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006650:	f8c8 3000 	strge.w	r3, [r8]
 8006654:	4b9a      	ldr	r3, [pc, #616]	; (80068c0 <_dtoa_r+0x2d8>)
 8006656:	bfbc      	itt	lt
 8006658:	2201      	movlt	r2, #1
 800665a:	f8c8 2000 	strlt.w	r2, [r8]
 800665e:	ea33 030b 	bics.w	r3, r3, fp
 8006662:	d11b      	bne.n	800669c <_dtoa_r+0xb4>
 8006664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006666:	f242 730f 	movw	r3, #9999	; 0x270f
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006670:	4333      	orrs	r3, r6
 8006672:	f000 8592 	beq.w	800719a <_dtoa_r+0xbb2>
 8006676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006678:	b963      	cbnz	r3, 8006694 <_dtoa_r+0xac>
 800667a:	4b92      	ldr	r3, [pc, #584]	; (80068c4 <_dtoa_r+0x2dc>)
 800667c:	e022      	b.n	80066c4 <_dtoa_r+0xdc>
 800667e:	4b92      	ldr	r3, [pc, #584]	; (80068c8 <_dtoa_r+0x2e0>)
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	3308      	adds	r3, #8
 8006684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	9801      	ldr	r0, [sp, #4]
 800668a:	b013      	add	sp, #76	; 0x4c
 800668c:	ecbd 8b04 	vpop	{d8-d9}
 8006690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006694:	4b8b      	ldr	r3, [pc, #556]	; (80068c4 <_dtoa_r+0x2dc>)
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	3303      	adds	r3, #3
 800669a:	e7f3      	b.n	8006684 <_dtoa_r+0x9c>
 800669c:	2200      	movs	r2, #0
 800669e:	2300      	movs	r3, #0
 80066a0:	4650      	mov	r0, sl
 80066a2:	4659      	mov	r1, fp
 80066a4:	f7fa fa10 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a8:	ec4b ab19 	vmov	d9, sl, fp
 80066ac:	4680      	mov	r8, r0
 80066ae:	b158      	cbz	r0, 80066c8 <_dtoa_r+0xe0>
 80066b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066b2:	2301      	movs	r3, #1
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 856b 	beq.w	8007194 <_dtoa_r+0xbac>
 80066be:	4883      	ldr	r0, [pc, #524]	; (80068cc <_dtoa_r+0x2e4>)
 80066c0:	6018      	str	r0, [r3, #0]
 80066c2:	1e43      	subs	r3, r0, #1
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	e7df      	b.n	8006688 <_dtoa_r+0xa0>
 80066c8:	ec4b ab10 	vmov	d0, sl, fp
 80066cc:	aa10      	add	r2, sp, #64	; 0x40
 80066ce:	a911      	add	r1, sp, #68	; 0x44
 80066d0:	4620      	mov	r0, r4
 80066d2:	f001 fa03 	bl	8007adc <__d2b>
 80066d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80066da:	ee08 0a10 	vmov	s16, r0
 80066de:	2d00      	cmp	r5, #0
 80066e0:	f000 8084 	beq.w	80067ec <_dtoa_r+0x204>
 80066e4:	ee19 3a90 	vmov	r3, s19
 80066e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066f0:	4656      	mov	r6, sl
 80066f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80066fe:	4b74      	ldr	r3, [pc, #464]	; (80068d0 <_dtoa_r+0x2e8>)
 8006700:	2200      	movs	r2, #0
 8006702:	4630      	mov	r0, r6
 8006704:	4639      	mov	r1, r7
 8006706:	f7f9 fdbf 	bl	8000288 <__aeabi_dsub>
 800670a:	a365      	add	r3, pc, #404	; (adr r3, 80068a0 <_dtoa_r+0x2b8>)
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f7f9 ff72 	bl	80005f8 <__aeabi_dmul>
 8006714:	a364      	add	r3, pc, #400	; (adr r3, 80068a8 <_dtoa_r+0x2c0>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fdb7 	bl	800028c <__adddf3>
 800671e:	4606      	mov	r6, r0
 8006720:	4628      	mov	r0, r5
 8006722:	460f      	mov	r7, r1
 8006724:	f7f9 fefe 	bl	8000524 <__aeabi_i2d>
 8006728:	a361      	add	r3, pc, #388	; (adr r3, 80068b0 <_dtoa_r+0x2c8>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7f9 ff63 	bl	80005f8 <__aeabi_dmul>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4630      	mov	r0, r6
 8006738:	4639      	mov	r1, r7
 800673a:	f7f9 fda7 	bl	800028c <__adddf3>
 800673e:	4606      	mov	r6, r0
 8006740:	460f      	mov	r7, r1
 8006742:	f7fa fa09 	bl	8000b58 <__aeabi_d2iz>
 8006746:	2200      	movs	r2, #0
 8006748:	9000      	str	r0, [sp, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	4630      	mov	r0, r6
 800674e:	4639      	mov	r1, r7
 8006750:	f7fa f9c4 	bl	8000adc <__aeabi_dcmplt>
 8006754:	b150      	cbz	r0, 800676c <_dtoa_r+0x184>
 8006756:	9800      	ldr	r0, [sp, #0]
 8006758:	f7f9 fee4 	bl	8000524 <__aeabi_i2d>
 800675c:	4632      	mov	r2, r6
 800675e:	463b      	mov	r3, r7
 8006760:	f7fa f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006764:	b910      	cbnz	r0, 800676c <_dtoa_r+0x184>
 8006766:	9b00      	ldr	r3, [sp, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	9b00      	ldr	r3, [sp, #0]
 800676e:	2b16      	cmp	r3, #22
 8006770:	d85a      	bhi.n	8006828 <_dtoa_r+0x240>
 8006772:	9a00      	ldr	r2, [sp, #0]
 8006774:	4b57      	ldr	r3, [pc, #348]	; (80068d4 <_dtoa_r+0x2ec>)
 8006776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	ec51 0b19 	vmov	r0, r1, d9
 8006782:	f7fa f9ab 	bl	8000adc <__aeabi_dcmplt>
 8006786:	2800      	cmp	r0, #0
 8006788:	d050      	beq.n	800682c <_dtoa_r+0x244>
 800678a:	9b00      	ldr	r3, [sp, #0]
 800678c:	3b01      	subs	r3, #1
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	2300      	movs	r3, #0
 8006792:	930b      	str	r3, [sp, #44]	; 0x2c
 8006794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006796:	1b5d      	subs	r5, r3, r5
 8006798:	1e6b      	subs	r3, r5, #1
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	bf45      	ittet	mi
 800679e:	f1c5 0301 	rsbmi	r3, r5, #1
 80067a2:	9304      	strmi	r3, [sp, #16]
 80067a4:	2300      	movpl	r3, #0
 80067a6:	2300      	movmi	r3, #0
 80067a8:	bf4c      	ite	mi
 80067aa:	9305      	strmi	r3, [sp, #20]
 80067ac:	9304      	strpl	r3, [sp, #16]
 80067ae:	9b00      	ldr	r3, [sp, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	db3d      	blt.n	8006830 <_dtoa_r+0x248>
 80067b4:	9b05      	ldr	r3, [sp, #20]
 80067b6:	9a00      	ldr	r2, [sp, #0]
 80067b8:	920a      	str	r2, [sp, #40]	; 0x28
 80067ba:	4413      	add	r3, r2
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	2300      	movs	r3, #0
 80067c0:	9307      	str	r3, [sp, #28]
 80067c2:	9b06      	ldr	r3, [sp, #24]
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	f200 8089 	bhi.w	80068dc <_dtoa_r+0x2f4>
 80067ca:	2b05      	cmp	r3, #5
 80067cc:	bfc4      	itt	gt
 80067ce:	3b04      	subgt	r3, #4
 80067d0:	9306      	strgt	r3, [sp, #24]
 80067d2:	9b06      	ldr	r3, [sp, #24]
 80067d4:	f1a3 0302 	sub.w	r3, r3, #2
 80067d8:	bfcc      	ite	gt
 80067da:	2500      	movgt	r5, #0
 80067dc:	2501      	movle	r5, #1
 80067de:	2b03      	cmp	r3, #3
 80067e0:	f200 8087 	bhi.w	80068f2 <_dtoa_r+0x30a>
 80067e4:	e8df f003 	tbb	[pc, r3]
 80067e8:	59383a2d 	.word	0x59383a2d
 80067ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80067f0:	441d      	add	r5, r3
 80067f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	bfc1      	itttt	gt
 80067fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006802:	fa0b f303 	lslgt.w	r3, fp, r3
 8006806:	fa26 f000 	lsrgt.w	r0, r6, r0
 800680a:	bfda      	itte	le
 800680c:	f1c3 0320 	rsble	r3, r3, #32
 8006810:	fa06 f003 	lslle.w	r0, r6, r3
 8006814:	4318      	orrgt	r0, r3
 8006816:	f7f9 fe75 	bl	8000504 <__aeabi_ui2d>
 800681a:	2301      	movs	r3, #1
 800681c:	4606      	mov	r6, r0
 800681e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006822:	3d01      	subs	r5, #1
 8006824:	930e      	str	r3, [sp, #56]	; 0x38
 8006826:	e76a      	b.n	80066fe <_dtoa_r+0x116>
 8006828:	2301      	movs	r3, #1
 800682a:	e7b2      	b.n	8006792 <_dtoa_r+0x1aa>
 800682c:	900b      	str	r0, [sp, #44]	; 0x2c
 800682e:	e7b1      	b.n	8006794 <_dtoa_r+0x1ac>
 8006830:	9b04      	ldr	r3, [sp, #16]
 8006832:	9a00      	ldr	r2, [sp, #0]
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	9304      	str	r3, [sp, #16]
 8006838:	4253      	negs	r3, r2
 800683a:	9307      	str	r3, [sp, #28]
 800683c:	2300      	movs	r3, #0
 800683e:	930a      	str	r3, [sp, #40]	; 0x28
 8006840:	e7bf      	b.n	80067c2 <_dtoa_r+0x1da>
 8006842:	2300      	movs	r3, #0
 8006844:	9308      	str	r3, [sp, #32]
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	dc55      	bgt.n	80068f8 <_dtoa_r+0x310>
 800684c:	2301      	movs	r3, #1
 800684e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006852:	461a      	mov	r2, r3
 8006854:	9209      	str	r2, [sp, #36]	; 0x24
 8006856:	e00c      	b.n	8006872 <_dtoa_r+0x28a>
 8006858:	2301      	movs	r3, #1
 800685a:	e7f3      	b.n	8006844 <_dtoa_r+0x25c>
 800685c:	2300      	movs	r3, #0
 800685e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006860:	9308      	str	r3, [sp, #32]
 8006862:	9b00      	ldr	r3, [sp, #0]
 8006864:	4413      	add	r3, r2
 8006866:	9302      	str	r3, [sp, #8]
 8006868:	3301      	adds	r3, #1
 800686a:	2b01      	cmp	r3, #1
 800686c:	9303      	str	r3, [sp, #12]
 800686e:	bfb8      	it	lt
 8006870:	2301      	movlt	r3, #1
 8006872:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006874:	2200      	movs	r2, #0
 8006876:	6042      	str	r2, [r0, #4]
 8006878:	2204      	movs	r2, #4
 800687a:	f102 0614 	add.w	r6, r2, #20
 800687e:	429e      	cmp	r6, r3
 8006880:	6841      	ldr	r1, [r0, #4]
 8006882:	d93d      	bls.n	8006900 <_dtoa_r+0x318>
 8006884:	4620      	mov	r0, r4
 8006886:	f000 fe01 	bl	800748c <_Balloc>
 800688a:	9001      	str	r0, [sp, #4]
 800688c:	2800      	cmp	r0, #0
 800688e:	d13b      	bne.n	8006908 <_dtoa_r+0x320>
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <_dtoa_r+0x2f0>)
 8006892:	4602      	mov	r2, r0
 8006894:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006898:	e6c0      	b.n	800661c <_dtoa_r+0x34>
 800689a:	2301      	movs	r3, #1
 800689c:	e7df      	b.n	800685e <_dtoa_r+0x276>
 800689e:	bf00      	nop
 80068a0:	636f4361 	.word	0x636f4361
 80068a4:	3fd287a7 	.word	0x3fd287a7
 80068a8:	8b60c8b3 	.word	0x8b60c8b3
 80068ac:	3fc68a28 	.word	0x3fc68a28
 80068b0:	509f79fb 	.word	0x509f79fb
 80068b4:	3fd34413 	.word	0x3fd34413
 80068b8:	080086e9 	.word	0x080086e9
 80068bc:	08008700 	.word	0x08008700
 80068c0:	7ff00000 	.word	0x7ff00000
 80068c4:	080086e5 	.word	0x080086e5
 80068c8:	080086dc 	.word	0x080086dc
 80068cc:	0800867d 	.word	0x0800867d
 80068d0:	3ff80000 	.word	0x3ff80000
 80068d4:	080087f0 	.word	0x080087f0
 80068d8:	0800875b 	.word	0x0800875b
 80068dc:	2501      	movs	r5, #1
 80068de:	2300      	movs	r3, #0
 80068e0:	9306      	str	r3, [sp, #24]
 80068e2:	9508      	str	r5, [sp, #32]
 80068e4:	f04f 33ff 	mov.w	r3, #4294967295
 80068e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068ec:	2200      	movs	r2, #0
 80068ee:	2312      	movs	r3, #18
 80068f0:	e7b0      	b.n	8006854 <_dtoa_r+0x26c>
 80068f2:	2301      	movs	r3, #1
 80068f4:	9308      	str	r3, [sp, #32]
 80068f6:	e7f5      	b.n	80068e4 <_dtoa_r+0x2fc>
 80068f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068fe:	e7b8      	b.n	8006872 <_dtoa_r+0x28a>
 8006900:	3101      	adds	r1, #1
 8006902:	6041      	str	r1, [r0, #4]
 8006904:	0052      	lsls	r2, r2, #1
 8006906:	e7b8      	b.n	800687a <_dtoa_r+0x292>
 8006908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690a:	9a01      	ldr	r2, [sp, #4]
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	2b0e      	cmp	r3, #14
 8006912:	f200 809d 	bhi.w	8006a50 <_dtoa_r+0x468>
 8006916:	2d00      	cmp	r5, #0
 8006918:	f000 809a 	beq.w	8006a50 <_dtoa_r+0x468>
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	dd32      	ble.n	8006988 <_dtoa_r+0x3a0>
 8006922:	4ab7      	ldr	r2, [pc, #732]	; (8006c00 <_dtoa_r+0x618>)
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800692c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006930:	9b00      	ldr	r3, [sp, #0]
 8006932:	05d8      	lsls	r0, r3, #23
 8006934:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006938:	d516      	bpl.n	8006968 <_dtoa_r+0x380>
 800693a:	4bb2      	ldr	r3, [pc, #712]	; (8006c04 <_dtoa_r+0x61c>)
 800693c:	ec51 0b19 	vmov	r0, r1, d9
 8006940:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006944:	f7f9 ff82 	bl	800084c <__aeabi_ddiv>
 8006948:	f007 070f 	and.w	r7, r7, #15
 800694c:	4682      	mov	sl, r0
 800694e:	468b      	mov	fp, r1
 8006950:	2503      	movs	r5, #3
 8006952:	4eac      	ldr	r6, [pc, #688]	; (8006c04 <_dtoa_r+0x61c>)
 8006954:	b957      	cbnz	r7, 800696c <_dtoa_r+0x384>
 8006956:	4642      	mov	r2, r8
 8006958:	464b      	mov	r3, r9
 800695a:	4650      	mov	r0, sl
 800695c:	4659      	mov	r1, fp
 800695e:	f7f9 ff75 	bl	800084c <__aeabi_ddiv>
 8006962:	4682      	mov	sl, r0
 8006964:	468b      	mov	fp, r1
 8006966:	e028      	b.n	80069ba <_dtoa_r+0x3d2>
 8006968:	2502      	movs	r5, #2
 800696a:	e7f2      	b.n	8006952 <_dtoa_r+0x36a>
 800696c:	07f9      	lsls	r1, r7, #31
 800696e:	d508      	bpl.n	8006982 <_dtoa_r+0x39a>
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006978:	f7f9 fe3e 	bl	80005f8 <__aeabi_dmul>
 800697c:	3501      	adds	r5, #1
 800697e:	4680      	mov	r8, r0
 8006980:	4689      	mov	r9, r1
 8006982:	107f      	asrs	r7, r7, #1
 8006984:	3608      	adds	r6, #8
 8006986:	e7e5      	b.n	8006954 <_dtoa_r+0x36c>
 8006988:	f000 809b 	beq.w	8006ac2 <_dtoa_r+0x4da>
 800698c:	9b00      	ldr	r3, [sp, #0]
 800698e:	4f9d      	ldr	r7, [pc, #628]	; (8006c04 <_dtoa_r+0x61c>)
 8006990:	425e      	negs	r6, r3
 8006992:	4b9b      	ldr	r3, [pc, #620]	; (8006c00 <_dtoa_r+0x618>)
 8006994:	f006 020f 	and.w	r2, r6, #15
 8006998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	ec51 0b19 	vmov	r0, r1, d9
 80069a4:	f7f9 fe28 	bl	80005f8 <__aeabi_dmul>
 80069a8:	1136      	asrs	r6, r6, #4
 80069aa:	4682      	mov	sl, r0
 80069ac:	468b      	mov	fp, r1
 80069ae:	2300      	movs	r3, #0
 80069b0:	2502      	movs	r5, #2
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	d17a      	bne.n	8006aac <_dtoa_r+0x4c4>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1d3      	bne.n	8006962 <_dtoa_r+0x37a>
 80069ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8082 	beq.w	8006ac6 <_dtoa_r+0x4de>
 80069c2:	4b91      	ldr	r3, [pc, #580]	; (8006c08 <_dtoa_r+0x620>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	4650      	mov	r0, sl
 80069c8:	4659      	mov	r1, fp
 80069ca:	f7fa f887 	bl	8000adc <__aeabi_dcmplt>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d079      	beq.n	8006ac6 <_dtoa_r+0x4de>
 80069d2:	9b03      	ldr	r3, [sp, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d076      	beq.n	8006ac6 <_dtoa_r+0x4de>
 80069d8:	9b02      	ldr	r3, [sp, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	dd36      	ble.n	8006a4c <_dtoa_r+0x464>
 80069de:	9b00      	ldr	r3, [sp, #0]
 80069e0:	4650      	mov	r0, sl
 80069e2:	4659      	mov	r1, fp
 80069e4:	1e5f      	subs	r7, r3, #1
 80069e6:	2200      	movs	r2, #0
 80069e8:	4b88      	ldr	r3, [pc, #544]	; (8006c0c <_dtoa_r+0x624>)
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	9e02      	ldr	r6, [sp, #8]
 80069f0:	4682      	mov	sl, r0
 80069f2:	468b      	mov	fp, r1
 80069f4:	3501      	adds	r5, #1
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7f9 fd94 	bl	8000524 <__aeabi_i2d>
 80069fc:	4652      	mov	r2, sl
 80069fe:	465b      	mov	r3, fp
 8006a00:	f7f9 fdfa 	bl	80005f8 <__aeabi_dmul>
 8006a04:	4b82      	ldr	r3, [pc, #520]	; (8006c10 <_dtoa_r+0x628>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	f7f9 fc40 	bl	800028c <__adddf3>
 8006a0c:	46d0      	mov	r8, sl
 8006a0e:	46d9      	mov	r9, fp
 8006a10:	4682      	mov	sl, r0
 8006a12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	d158      	bne.n	8006acc <_dtoa_r+0x4e4>
 8006a1a:	4b7e      	ldr	r3, [pc, #504]	; (8006c14 <_dtoa_r+0x62c>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7f9 fc31 	bl	8000288 <__aeabi_dsub>
 8006a26:	4652      	mov	r2, sl
 8006a28:	465b      	mov	r3, fp
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	4689      	mov	r9, r1
 8006a2e:	f7fa f873 	bl	8000b18 <__aeabi_dcmpgt>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f040 8295 	bne.w	8006f62 <_dtoa_r+0x97a>
 8006a38:	4652      	mov	r2, sl
 8006a3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	f7fa f84b 	bl	8000adc <__aeabi_dcmplt>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f040 8289 	bne.w	8006f5e <_dtoa_r+0x976>
 8006a4c:	ec5b ab19 	vmov	sl, fp, d9
 8006a50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f2c0 8148 	blt.w	8006ce8 <_dtoa_r+0x700>
 8006a58:	9a00      	ldr	r2, [sp, #0]
 8006a5a:	2a0e      	cmp	r2, #14
 8006a5c:	f300 8144 	bgt.w	8006ce8 <_dtoa_r+0x700>
 8006a60:	4b67      	ldr	r3, [pc, #412]	; (8006c00 <_dtoa_r+0x618>)
 8006a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f280 80d5 	bge.w	8006c1c <_dtoa_r+0x634>
 8006a72:	9b03      	ldr	r3, [sp, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f300 80d1 	bgt.w	8006c1c <_dtoa_r+0x634>
 8006a7a:	f040 826f 	bne.w	8006f5c <_dtoa_r+0x974>
 8006a7e:	4b65      	ldr	r3, [pc, #404]	; (8006c14 <_dtoa_r+0x62c>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	4640      	mov	r0, r8
 8006a84:	4649      	mov	r1, r9
 8006a86:	f7f9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8006a8a:	4652      	mov	r2, sl
 8006a8c:	465b      	mov	r3, fp
 8006a8e:	f7fa f839 	bl	8000b04 <__aeabi_dcmpge>
 8006a92:	9e03      	ldr	r6, [sp, #12]
 8006a94:	4637      	mov	r7, r6
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f040 8245 	bne.w	8006f26 <_dtoa_r+0x93e>
 8006a9c:	9d01      	ldr	r5, [sp, #4]
 8006a9e:	2331      	movs	r3, #49	; 0x31
 8006aa0:	f805 3b01 	strb.w	r3, [r5], #1
 8006aa4:	9b00      	ldr	r3, [sp, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	e240      	b.n	8006f2e <_dtoa_r+0x946>
 8006aac:	07f2      	lsls	r2, r6, #31
 8006aae:	d505      	bpl.n	8006abc <_dtoa_r+0x4d4>
 8006ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab4:	f7f9 fda0 	bl	80005f8 <__aeabi_dmul>
 8006ab8:	3501      	adds	r5, #1
 8006aba:	2301      	movs	r3, #1
 8006abc:	1076      	asrs	r6, r6, #1
 8006abe:	3708      	adds	r7, #8
 8006ac0:	e777      	b.n	80069b2 <_dtoa_r+0x3ca>
 8006ac2:	2502      	movs	r5, #2
 8006ac4:	e779      	b.n	80069ba <_dtoa_r+0x3d2>
 8006ac6:	9f00      	ldr	r7, [sp, #0]
 8006ac8:	9e03      	ldr	r6, [sp, #12]
 8006aca:	e794      	b.n	80069f6 <_dtoa_r+0x40e>
 8006acc:	9901      	ldr	r1, [sp, #4]
 8006ace:	4b4c      	ldr	r3, [pc, #304]	; (8006c00 <_dtoa_r+0x618>)
 8006ad0:	4431      	add	r1, r6
 8006ad2:	910d      	str	r1, [sp, #52]	; 0x34
 8006ad4:	9908      	ldr	r1, [sp, #32]
 8006ad6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ada:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ade:	2900      	cmp	r1, #0
 8006ae0:	d043      	beq.n	8006b6a <_dtoa_r+0x582>
 8006ae2:	494d      	ldr	r1, [pc, #308]	; (8006c18 <_dtoa_r+0x630>)
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	f7f9 feb1 	bl	800084c <__aeabi_ddiv>
 8006aea:	4652      	mov	r2, sl
 8006aec:	465b      	mov	r3, fp
 8006aee:	f7f9 fbcb 	bl	8000288 <__aeabi_dsub>
 8006af2:	9d01      	ldr	r5, [sp, #4]
 8006af4:	4682      	mov	sl, r0
 8006af6:	468b      	mov	fp, r1
 8006af8:	4649      	mov	r1, r9
 8006afa:	4640      	mov	r0, r8
 8006afc:	f7fa f82c 	bl	8000b58 <__aeabi_d2iz>
 8006b00:	4606      	mov	r6, r0
 8006b02:	f7f9 fd0f 	bl	8000524 <__aeabi_i2d>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	f7f9 fbbb 	bl	8000288 <__aeabi_dsub>
 8006b12:	3630      	adds	r6, #48	; 0x30
 8006b14:	f805 6b01 	strb.w	r6, [r5], #1
 8006b18:	4652      	mov	r2, sl
 8006b1a:	465b      	mov	r3, fp
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	4689      	mov	r9, r1
 8006b20:	f7f9 ffdc 	bl	8000adc <__aeabi_dcmplt>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d163      	bne.n	8006bf0 <_dtoa_r+0x608>
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	4936      	ldr	r1, [pc, #216]	; (8006c08 <_dtoa_r+0x620>)
 8006b2e:	2000      	movs	r0, #0
 8006b30:	f7f9 fbaa 	bl	8000288 <__aeabi_dsub>
 8006b34:	4652      	mov	r2, sl
 8006b36:	465b      	mov	r3, fp
 8006b38:	f7f9 ffd0 	bl	8000adc <__aeabi_dcmplt>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	f040 80b5 	bne.w	8006cac <_dtoa_r+0x6c4>
 8006b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b44:	429d      	cmp	r5, r3
 8006b46:	d081      	beq.n	8006a4c <_dtoa_r+0x464>
 8006b48:	4b30      	ldr	r3, [pc, #192]	; (8006c0c <_dtoa_r+0x624>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	4659      	mov	r1, fp
 8006b50:	f7f9 fd52 	bl	80005f8 <__aeabi_dmul>
 8006b54:	4b2d      	ldr	r3, [pc, #180]	; (8006c0c <_dtoa_r+0x624>)
 8006b56:	4682      	mov	sl, r0
 8006b58:	468b      	mov	fp, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f7f9 fd4a 	bl	80005f8 <__aeabi_dmul>
 8006b64:	4680      	mov	r8, r0
 8006b66:	4689      	mov	r9, r1
 8006b68:	e7c6      	b.n	8006af8 <_dtoa_r+0x510>
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	4659      	mov	r1, fp
 8006b6e:	f7f9 fd43 	bl	80005f8 <__aeabi_dmul>
 8006b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b74:	9d01      	ldr	r5, [sp, #4]
 8006b76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b78:	4682      	mov	sl, r0
 8006b7a:	468b      	mov	fp, r1
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f7f9 ffea 	bl	8000b58 <__aeabi_d2iz>
 8006b84:	4606      	mov	r6, r0
 8006b86:	f7f9 fccd 	bl	8000524 <__aeabi_i2d>
 8006b8a:	3630      	adds	r6, #48	; 0x30
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4640      	mov	r0, r8
 8006b92:	4649      	mov	r1, r9
 8006b94:	f7f9 fb78 	bl	8000288 <__aeabi_dsub>
 8006b98:	f805 6b01 	strb.w	r6, [r5], #1
 8006b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	d124      	bne.n	8006bf4 <_dtoa_r+0x60c>
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <_dtoa_r+0x630>)
 8006bac:	4650      	mov	r0, sl
 8006bae:	4659      	mov	r1, fp
 8006bb0:	f7f9 fb6c 	bl	800028c <__adddf3>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4640      	mov	r0, r8
 8006bba:	4649      	mov	r1, r9
 8006bbc:	f7f9 ffac 	bl	8000b18 <__aeabi_dcmpgt>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d173      	bne.n	8006cac <_dtoa_r+0x6c4>
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	465b      	mov	r3, fp
 8006bc8:	4913      	ldr	r1, [pc, #76]	; (8006c18 <_dtoa_r+0x630>)
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f7f9 fb5c 	bl	8000288 <__aeabi_dsub>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	f7f9 ff80 	bl	8000adc <__aeabi_dcmplt>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f43f af35 	beq.w	8006a4c <_dtoa_r+0x464>
 8006be2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006be4:	1e6b      	subs	r3, r5, #1
 8006be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006be8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bec:	2b30      	cmp	r3, #48	; 0x30
 8006bee:	d0f8      	beq.n	8006be2 <_dtoa_r+0x5fa>
 8006bf0:	9700      	str	r7, [sp, #0]
 8006bf2:	e049      	b.n	8006c88 <_dtoa_r+0x6a0>
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <_dtoa_r+0x624>)
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	4689      	mov	r9, r1
 8006bfe:	e7bd      	b.n	8006b7c <_dtoa_r+0x594>
 8006c00:	080087f0 	.word	0x080087f0
 8006c04:	080087c8 	.word	0x080087c8
 8006c08:	3ff00000 	.word	0x3ff00000
 8006c0c:	40240000 	.word	0x40240000
 8006c10:	401c0000 	.word	0x401c0000
 8006c14:	40140000 	.word	0x40140000
 8006c18:	3fe00000 	.word	0x3fe00000
 8006c1c:	9d01      	ldr	r5, [sp, #4]
 8006c1e:	4656      	mov	r6, sl
 8006c20:	465f      	mov	r7, fp
 8006c22:	4642      	mov	r2, r8
 8006c24:	464b      	mov	r3, r9
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	f7f9 fe0f 	bl	800084c <__aeabi_ddiv>
 8006c2e:	f7f9 ff93 	bl	8000b58 <__aeabi_d2iz>
 8006c32:	4682      	mov	sl, r0
 8006c34:	f7f9 fc76 	bl	8000524 <__aeabi_i2d>
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	f7f9 fcdc 	bl	80005f8 <__aeabi_dmul>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4630      	mov	r0, r6
 8006c46:	4639      	mov	r1, r7
 8006c48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006c4c:	f7f9 fb1c 	bl	8000288 <__aeabi_dsub>
 8006c50:	f805 6b01 	strb.w	r6, [r5], #1
 8006c54:	9e01      	ldr	r6, [sp, #4]
 8006c56:	9f03      	ldr	r7, [sp, #12]
 8006c58:	1bae      	subs	r6, r5, r6
 8006c5a:	42b7      	cmp	r7, r6
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	d135      	bne.n	8006cce <_dtoa_r+0x6e6>
 8006c62:	f7f9 fb13 	bl	800028c <__adddf3>
 8006c66:	4642      	mov	r2, r8
 8006c68:	464b      	mov	r3, r9
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	f7f9 ff53 	bl	8000b18 <__aeabi_dcmpgt>
 8006c72:	b9d0      	cbnz	r0, 8006caa <_dtoa_r+0x6c2>
 8006c74:	4642      	mov	r2, r8
 8006c76:	464b      	mov	r3, r9
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f7f9 ff24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c80:	b110      	cbz	r0, 8006c88 <_dtoa_r+0x6a0>
 8006c82:	f01a 0f01 	tst.w	sl, #1
 8006c86:	d110      	bne.n	8006caa <_dtoa_r+0x6c2>
 8006c88:	4620      	mov	r0, r4
 8006c8a:	ee18 1a10 	vmov	r1, s16
 8006c8e:	f000 fc3d 	bl	800750c <_Bfree>
 8006c92:	2300      	movs	r3, #0
 8006c94:	9800      	ldr	r0, [sp, #0]
 8006c96:	702b      	strb	r3, [r5, #0]
 8006c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	6018      	str	r0, [r3, #0]
 8006c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f43f acf1 	beq.w	8006688 <_dtoa_r+0xa0>
 8006ca6:	601d      	str	r5, [r3, #0]
 8006ca8:	e4ee      	b.n	8006688 <_dtoa_r+0xa0>
 8006caa:	9f00      	ldr	r7, [sp, #0]
 8006cac:	462b      	mov	r3, r5
 8006cae:	461d      	mov	r5, r3
 8006cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cb4:	2a39      	cmp	r2, #57	; 0x39
 8006cb6:	d106      	bne.n	8006cc6 <_dtoa_r+0x6de>
 8006cb8:	9a01      	ldr	r2, [sp, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d1f7      	bne.n	8006cae <_dtoa_r+0x6c6>
 8006cbe:	9901      	ldr	r1, [sp, #4]
 8006cc0:	2230      	movs	r2, #48	; 0x30
 8006cc2:	3701      	adds	r7, #1
 8006cc4:	700a      	strb	r2, [r1, #0]
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	3201      	adds	r2, #1
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	e790      	b.n	8006bf0 <_dtoa_r+0x608>
 8006cce:	4ba6      	ldr	r3, [pc, #664]	; (8006f68 <_dtoa_r+0x980>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f7f9 fc91 	bl	80005f8 <__aeabi_dmul>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	f7f9 fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d09d      	beq.n	8006c22 <_dtoa_r+0x63a>
 8006ce6:	e7cf      	b.n	8006c88 <_dtoa_r+0x6a0>
 8006ce8:	9a08      	ldr	r2, [sp, #32]
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	f000 80d7 	beq.w	8006e9e <_dtoa_r+0x8b6>
 8006cf0:	9a06      	ldr	r2, [sp, #24]
 8006cf2:	2a01      	cmp	r2, #1
 8006cf4:	f300 80ba 	bgt.w	8006e6c <_dtoa_r+0x884>
 8006cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cfa:	2a00      	cmp	r2, #0
 8006cfc:	f000 80b2 	beq.w	8006e64 <_dtoa_r+0x87c>
 8006d00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d04:	9e07      	ldr	r6, [sp, #28]
 8006d06:	9d04      	ldr	r5, [sp, #16]
 8006d08:	9a04      	ldr	r2, [sp, #16]
 8006d0a:	441a      	add	r2, r3
 8006d0c:	9204      	str	r2, [sp, #16]
 8006d0e:	9a05      	ldr	r2, [sp, #20]
 8006d10:	2101      	movs	r1, #1
 8006d12:	441a      	add	r2, r3
 8006d14:	4620      	mov	r0, r4
 8006d16:	9205      	str	r2, [sp, #20]
 8006d18:	f000 fcb0 	bl	800767c <__i2b>
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	2d00      	cmp	r5, #0
 8006d20:	dd0c      	ble.n	8006d3c <_dtoa_r+0x754>
 8006d22:	9b05      	ldr	r3, [sp, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dd09      	ble.n	8006d3c <_dtoa_r+0x754>
 8006d28:	42ab      	cmp	r3, r5
 8006d2a:	9a04      	ldr	r2, [sp, #16]
 8006d2c:	bfa8      	it	ge
 8006d2e:	462b      	movge	r3, r5
 8006d30:	1ad2      	subs	r2, r2, r3
 8006d32:	9204      	str	r2, [sp, #16]
 8006d34:	9a05      	ldr	r2, [sp, #20]
 8006d36:	1aed      	subs	r5, r5, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	9b07      	ldr	r3, [sp, #28]
 8006d3e:	b31b      	cbz	r3, 8006d88 <_dtoa_r+0x7a0>
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80af 	beq.w	8006ea6 <_dtoa_r+0x8be>
 8006d48:	2e00      	cmp	r6, #0
 8006d4a:	dd13      	ble.n	8006d74 <_dtoa_r+0x78c>
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	4632      	mov	r2, r6
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 fd53 	bl	80077fc <__pow5mult>
 8006d56:	ee18 2a10 	vmov	r2, s16
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 fca2 	bl	80076a8 <__multiply>
 8006d64:	ee18 1a10 	vmov	r1, s16
 8006d68:	4680      	mov	r8, r0
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fbce 	bl	800750c <_Bfree>
 8006d70:	ee08 8a10 	vmov	s16, r8
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	1b9a      	subs	r2, r3, r6
 8006d78:	d006      	beq.n	8006d88 <_dtoa_r+0x7a0>
 8006d7a:	ee18 1a10 	vmov	r1, s16
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 fd3c 	bl	80077fc <__pow5mult>
 8006d84:	ee08 0a10 	vmov	s16, r0
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 fc76 	bl	800767c <__i2b>
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	4606      	mov	r6, r0
 8006d96:	f340 8088 	ble.w	8006eaa <_dtoa_r+0x8c2>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4601      	mov	r1, r0
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fd2c 	bl	80077fc <__pow5mult>
 8006da4:	9b06      	ldr	r3, [sp, #24]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	4606      	mov	r6, r0
 8006daa:	f340 8081 	ble.w	8006eb0 <_dtoa_r+0x8c8>
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	6933      	ldr	r3, [r6, #16]
 8006db4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006db8:	6918      	ldr	r0, [r3, #16]
 8006dba:	f000 fc0f 	bl	80075dc <__hi0bits>
 8006dbe:	f1c0 0020 	rsb	r0, r0, #32
 8006dc2:	9b05      	ldr	r3, [sp, #20]
 8006dc4:	4418      	add	r0, r3
 8006dc6:	f010 001f 	ands.w	r0, r0, #31
 8006dca:	f000 8092 	beq.w	8006ef2 <_dtoa_r+0x90a>
 8006dce:	f1c0 0320 	rsb	r3, r0, #32
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	f340 808a 	ble.w	8006eec <_dtoa_r+0x904>
 8006dd8:	f1c0 001c 	rsb	r0, r0, #28
 8006ddc:	9b04      	ldr	r3, [sp, #16]
 8006dde:	4403      	add	r3, r0
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	9b05      	ldr	r3, [sp, #20]
 8006de4:	4403      	add	r3, r0
 8006de6:	4405      	add	r5, r0
 8006de8:	9305      	str	r3, [sp, #20]
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dd07      	ble.n	8006e00 <_dtoa_r+0x818>
 8006df0:	ee18 1a10 	vmov	r1, s16
 8006df4:	461a      	mov	r2, r3
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fd5a 	bl	80078b0 <__lshift>
 8006dfc:	ee08 0a10 	vmov	s16, r0
 8006e00:	9b05      	ldr	r3, [sp, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	dd05      	ble.n	8006e12 <_dtoa_r+0x82a>
 8006e06:	4631      	mov	r1, r6
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 fd50 	bl	80078b0 <__lshift>
 8006e10:	4606      	mov	r6, r0
 8006e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d06e      	beq.n	8006ef6 <_dtoa_r+0x90e>
 8006e18:	ee18 0a10 	vmov	r0, s16
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	f000 fdb7 	bl	8007990 <__mcmp>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	da67      	bge.n	8006ef6 <_dtoa_r+0x90e>
 8006e26:	9b00      	ldr	r3, [sp, #0]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	ee18 1a10 	vmov	r1, s16
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	220a      	movs	r2, #10
 8006e32:	2300      	movs	r3, #0
 8006e34:	4620      	mov	r0, r4
 8006e36:	f000 fb8b 	bl	8007550 <__multadd>
 8006e3a:	9b08      	ldr	r3, [sp, #32]
 8006e3c:	ee08 0a10 	vmov	s16, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 81b1 	beq.w	80071a8 <_dtoa_r+0xbc0>
 8006e46:	2300      	movs	r3, #0
 8006e48:	4639      	mov	r1, r7
 8006e4a:	220a      	movs	r2, #10
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 fb7f 	bl	8007550 <__multadd>
 8006e52:	9b02      	ldr	r3, [sp, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	4607      	mov	r7, r0
 8006e58:	f300 808e 	bgt.w	8006f78 <_dtoa_r+0x990>
 8006e5c:	9b06      	ldr	r3, [sp, #24]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	dc51      	bgt.n	8006f06 <_dtoa_r+0x91e>
 8006e62:	e089      	b.n	8006f78 <_dtoa_r+0x990>
 8006e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e6a:	e74b      	b.n	8006d04 <_dtoa_r+0x71c>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	1e5e      	subs	r6, r3, #1
 8006e70:	9b07      	ldr	r3, [sp, #28]
 8006e72:	42b3      	cmp	r3, r6
 8006e74:	bfbf      	itttt	lt
 8006e76:	9b07      	ldrlt	r3, [sp, #28]
 8006e78:	9607      	strlt	r6, [sp, #28]
 8006e7a:	1af2      	sublt	r2, r6, r3
 8006e7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e7e:	bfb6      	itet	lt
 8006e80:	189b      	addlt	r3, r3, r2
 8006e82:	1b9e      	subge	r6, r3, r6
 8006e84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	bfb8      	it	lt
 8006e8a:	2600      	movlt	r6, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bfb7      	itett	lt
 8006e90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e98:	1a9d      	sublt	r5, r3, r2
 8006e9a:	2300      	movlt	r3, #0
 8006e9c:	e734      	b.n	8006d08 <_dtoa_r+0x720>
 8006e9e:	9e07      	ldr	r6, [sp, #28]
 8006ea0:	9d04      	ldr	r5, [sp, #16]
 8006ea2:	9f08      	ldr	r7, [sp, #32]
 8006ea4:	e73b      	b.n	8006d1e <_dtoa_r+0x736>
 8006ea6:	9a07      	ldr	r2, [sp, #28]
 8006ea8:	e767      	b.n	8006d7a <_dtoa_r+0x792>
 8006eaa:	9b06      	ldr	r3, [sp, #24]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	dc18      	bgt.n	8006ee2 <_dtoa_r+0x8fa>
 8006eb0:	f1ba 0f00 	cmp.w	sl, #0
 8006eb4:	d115      	bne.n	8006ee2 <_dtoa_r+0x8fa>
 8006eb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eba:	b993      	cbnz	r3, 8006ee2 <_dtoa_r+0x8fa>
 8006ebc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ec0:	0d1b      	lsrs	r3, r3, #20
 8006ec2:	051b      	lsls	r3, r3, #20
 8006ec4:	b183      	cbz	r3, 8006ee8 <_dtoa_r+0x900>
 8006ec6:	9b04      	ldr	r3, [sp, #16]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	9304      	str	r3, [sp, #16]
 8006ecc:	9b05      	ldr	r3, [sp, #20]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	9305      	str	r3, [sp, #20]
 8006ed2:	f04f 0801 	mov.w	r8, #1
 8006ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f47f af6a 	bne.w	8006db2 <_dtoa_r+0x7ca>
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e76f      	b.n	8006dc2 <_dtoa_r+0x7da>
 8006ee2:	f04f 0800 	mov.w	r8, #0
 8006ee6:	e7f6      	b.n	8006ed6 <_dtoa_r+0x8ee>
 8006ee8:	4698      	mov	r8, r3
 8006eea:	e7f4      	b.n	8006ed6 <_dtoa_r+0x8ee>
 8006eec:	f43f af7d 	beq.w	8006dea <_dtoa_r+0x802>
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	301c      	adds	r0, #28
 8006ef4:	e772      	b.n	8006ddc <_dtoa_r+0x7f4>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dc37      	bgt.n	8006f6c <_dtoa_r+0x984>
 8006efc:	9b06      	ldr	r3, [sp, #24]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	dd34      	ble.n	8006f6c <_dtoa_r+0x984>
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	9302      	str	r3, [sp, #8]
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	b96b      	cbnz	r3, 8006f26 <_dtoa_r+0x93e>
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fb1e 	bl	8007550 <__multadd>
 8006f14:	4601      	mov	r1, r0
 8006f16:	4606      	mov	r6, r0
 8006f18:	ee18 0a10 	vmov	r0, s16
 8006f1c:	f000 fd38 	bl	8007990 <__mcmp>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	f73f adbb 	bgt.w	8006a9c <_dtoa_r+0x4b4>
 8006f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f28:	9d01      	ldr	r5, [sp, #4]
 8006f2a:	43db      	mvns	r3, r3
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	f04f 0800 	mov.w	r8, #0
 8006f32:	4631      	mov	r1, r6
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fae9 	bl	800750c <_Bfree>
 8006f3a:	2f00      	cmp	r7, #0
 8006f3c:	f43f aea4 	beq.w	8006c88 <_dtoa_r+0x6a0>
 8006f40:	f1b8 0f00 	cmp.w	r8, #0
 8006f44:	d005      	beq.n	8006f52 <_dtoa_r+0x96a>
 8006f46:	45b8      	cmp	r8, r7
 8006f48:	d003      	beq.n	8006f52 <_dtoa_r+0x96a>
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 fadd 	bl	800750c <_Bfree>
 8006f52:	4639      	mov	r1, r7
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 fad9 	bl	800750c <_Bfree>
 8006f5a:	e695      	b.n	8006c88 <_dtoa_r+0x6a0>
 8006f5c:	2600      	movs	r6, #0
 8006f5e:	4637      	mov	r7, r6
 8006f60:	e7e1      	b.n	8006f26 <_dtoa_r+0x93e>
 8006f62:	9700      	str	r7, [sp, #0]
 8006f64:	4637      	mov	r7, r6
 8006f66:	e599      	b.n	8006a9c <_dtoa_r+0x4b4>
 8006f68:	40240000 	.word	0x40240000
 8006f6c:	9b08      	ldr	r3, [sp, #32]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80ca 	beq.w	8007108 <_dtoa_r+0xb20>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	9302      	str	r3, [sp, #8]
 8006f78:	2d00      	cmp	r5, #0
 8006f7a:	dd05      	ble.n	8006f88 <_dtoa_r+0x9a0>
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	462a      	mov	r2, r5
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 fc95 	bl	80078b0 <__lshift>
 8006f86:	4607      	mov	r7, r0
 8006f88:	f1b8 0f00 	cmp.w	r8, #0
 8006f8c:	d05b      	beq.n	8007046 <_dtoa_r+0xa5e>
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fa7b 	bl	800748c <_Balloc>
 8006f96:	4605      	mov	r5, r0
 8006f98:	b928      	cbnz	r0, 8006fa6 <_dtoa_r+0x9be>
 8006f9a:	4b87      	ldr	r3, [pc, #540]	; (80071b8 <_dtoa_r+0xbd0>)
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006fa2:	f7ff bb3b 	b.w	800661c <_dtoa_r+0x34>
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	3202      	adds	r2, #2
 8006faa:	0092      	lsls	r2, r2, #2
 8006fac:	f107 010c 	add.w	r1, r7, #12
 8006fb0:	300c      	adds	r0, #12
 8006fb2:	f7fe fbf0 	bl	8005796 <memcpy>
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 fc78 	bl	80078b0 <__lshift>
 8006fc0:	9b01      	ldr	r3, [sp, #4]
 8006fc2:	f103 0901 	add.w	r9, r3, #1
 8006fc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	9305      	str	r3, [sp, #20]
 8006fce:	f00a 0301 	and.w	r3, sl, #1
 8006fd2:	46b8      	mov	r8, r7
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	4631      	mov	r1, r6
 8006fda:	ee18 0a10 	vmov	r0, s16
 8006fde:	f7ff fa77 	bl	80064d0 <quorem>
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	9002      	str	r0, [sp, #8]
 8006fe6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fea:	ee18 0a10 	vmov	r0, s16
 8006fee:	f000 fccf 	bl	8007990 <__mcmp>
 8006ff2:	463a      	mov	r2, r7
 8006ff4:	9003      	str	r0, [sp, #12]
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 fce5 	bl	80079c8 <__mdiff>
 8006ffe:	68c2      	ldr	r2, [r0, #12]
 8007000:	f109 3bff 	add.w	fp, r9, #4294967295
 8007004:	4605      	mov	r5, r0
 8007006:	bb02      	cbnz	r2, 800704a <_dtoa_r+0xa62>
 8007008:	4601      	mov	r1, r0
 800700a:	ee18 0a10 	vmov	r0, s16
 800700e:	f000 fcbf 	bl	8007990 <__mcmp>
 8007012:	4602      	mov	r2, r0
 8007014:	4629      	mov	r1, r5
 8007016:	4620      	mov	r0, r4
 8007018:	9207      	str	r2, [sp, #28]
 800701a:	f000 fa77 	bl	800750c <_Bfree>
 800701e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007022:	ea43 0102 	orr.w	r1, r3, r2
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	430b      	orrs	r3, r1
 800702a:	464d      	mov	r5, r9
 800702c:	d10f      	bne.n	800704e <_dtoa_r+0xa66>
 800702e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007032:	d02a      	beq.n	800708a <_dtoa_r+0xaa2>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	dd02      	ble.n	8007040 <_dtoa_r+0xa58>
 800703a:	9b02      	ldr	r3, [sp, #8]
 800703c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007040:	f88b a000 	strb.w	sl, [fp]
 8007044:	e775      	b.n	8006f32 <_dtoa_r+0x94a>
 8007046:	4638      	mov	r0, r7
 8007048:	e7ba      	b.n	8006fc0 <_dtoa_r+0x9d8>
 800704a:	2201      	movs	r2, #1
 800704c:	e7e2      	b.n	8007014 <_dtoa_r+0xa2c>
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	db04      	blt.n	800705e <_dtoa_r+0xa76>
 8007054:	9906      	ldr	r1, [sp, #24]
 8007056:	430b      	orrs	r3, r1
 8007058:	9904      	ldr	r1, [sp, #16]
 800705a:	430b      	orrs	r3, r1
 800705c:	d122      	bne.n	80070a4 <_dtoa_r+0xabc>
 800705e:	2a00      	cmp	r2, #0
 8007060:	ddee      	ble.n	8007040 <_dtoa_r+0xa58>
 8007062:	ee18 1a10 	vmov	r1, s16
 8007066:	2201      	movs	r2, #1
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fc21 	bl	80078b0 <__lshift>
 800706e:	4631      	mov	r1, r6
 8007070:	ee08 0a10 	vmov	s16, r0
 8007074:	f000 fc8c 	bl	8007990 <__mcmp>
 8007078:	2800      	cmp	r0, #0
 800707a:	dc03      	bgt.n	8007084 <_dtoa_r+0xa9c>
 800707c:	d1e0      	bne.n	8007040 <_dtoa_r+0xa58>
 800707e:	f01a 0f01 	tst.w	sl, #1
 8007082:	d0dd      	beq.n	8007040 <_dtoa_r+0xa58>
 8007084:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007088:	d1d7      	bne.n	800703a <_dtoa_r+0xa52>
 800708a:	2339      	movs	r3, #57	; 0x39
 800708c:	f88b 3000 	strb.w	r3, [fp]
 8007090:	462b      	mov	r3, r5
 8007092:	461d      	mov	r5, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800709a:	2a39      	cmp	r2, #57	; 0x39
 800709c:	d071      	beq.n	8007182 <_dtoa_r+0xb9a>
 800709e:	3201      	adds	r2, #1
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	e746      	b.n	8006f32 <_dtoa_r+0x94a>
 80070a4:	2a00      	cmp	r2, #0
 80070a6:	dd07      	ble.n	80070b8 <_dtoa_r+0xad0>
 80070a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070ac:	d0ed      	beq.n	800708a <_dtoa_r+0xaa2>
 80070ae:	f10a 0301 	add.w	r3, sl, #1
 80070b2:	f88b 3000 	strb.w	r3, [fp]
 80070b6:	e73c      	b.n	8006f32 <_dtoa_r+0x94a>
 80070b8:	9b05      	ldr	r3, [sp, #20]
 80070ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80070be:	4599      	cmp	r9, r3
 80070c0:	d047      	beq.n	8007152 <_dtoa_r+0xb6a>
 80070c2:	ee18 1a10 	vmov	r1, s16
 80070c6:	2300      	movs	r3, #0
 80070c8:	220a      	movs	r2, #10
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fa40 	bl	8007550 <__multadd>
 80070d0:	45b8      	cmp	r8, r7
 80070d2:	ee08 0a10 	vmov	s16, r0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	f04f 020a 	mov.w	r2, #10
 80070de:	4641      	mov	r1, r8
 80070e0:	4620      	mov	r0, r4
 80070e2:	d106      	bne.n	80070f2 <_dtoa_r+0xb0a>
 80070e4:	f000 fa34 	bl	8007550 <__multadd>
 80070e8:	4680      	mov	r8, r0
 80070ea:	4607      	mov	r7, r0
 80070ec:	f109 0901 	add.w	r9, r9, #1
 80070f0:	e772      	b.n	8006fd8 <_dtoa_r+0x9f0>
 80070f2:	f000 fa2d 	bl	8007550 <__multadd>
 80070f6:	4639      	mov	r1, r7
 80070f8:	4680      	mov	r8, r0
 80070fa:	2300      	movs	r3, #0
 80070fc:	220a      	movs	r2, #10
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 fa26 	bl	8007550 <__multadd>
 8007104:	4607      	mov	r7, r0
 8007106:	e7f1      	b.n	80070ec <_dtoa_r+0xb04>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	9302      	str	r3, [sp, #8]
 800710c:	9d01      	ldr	r5, [sp, #4]
 800710e:	ee18 0a10 	vmov	r0, s16
 8007112:	4631      	mov	r1, r6
 8007114:	f7ff f9dc 	bl	80064d0 <quorem>
 8007118:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	f805 ab01 	strb.w	sl, [r5], #1
 8007122:	1aea      	subs	r2, r5, r3
 8007124:	9b02      	ldr	r3, [sp, #8]
 8007126:	4293      	cmp	r3, r2
 8007128:	dd09      	ble.n	800713e <_dtoa_r+0xb56>
 800712a:	ee18 1a10 	vmov	r1, s16
 800712e:	2300      	movs	r3, #0
 8007130:	220a      	movs	r2, #10
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fa0c 	bl	8007550 <__multadd>
 8007138:	ee08 0a10 	vmov	s16, r0
 800713c:	e7e7      	b.n	800710e <_dtoa_r+0xb26>
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	bfc8      	it	gt
 8007144:	461d      	movgt	r5, r3
 8007146:	9b01      	ldr	r3, [sp, #4]
 8007148:	bfd8      	it	le
 800714a:	2501      	movle	r5, #1
 800714c:	441d      	add	r5, r3
 800714e:	f04f 0800 	mov.w	r8, #0
 8007152:	ee18 1a10 	vmov	r1, s16
 8007156:	2201      	movs	r2, #1
 8007158:	4620      	mov	r0, r4
 800715a:	f000 fba9 	bl	80078b0 <__lshift>
 800715e:	4631      	mov	r1, r6
 8007160:	ee08 0a10 	vmov	s16, r0
 8007164:	f000 fc14 	bl	8007990 <__mcmp>
 8007168:	2800      	cmp	r0, #0
 800716a:	dc91      	bgt.n	8007090 <_dtoa_r+0xaa8>
 800716c:	d102      	bne.n	8007174 <_dtoa_r+0xb8c>
 800716e:	f01a 0f01 	tst.w	sl, #1
 8007172:	d18d      	bne.n	8007090 <_dtoa_r+0xaa8>
 8007174:	462b      	mov	r3, r5
 8007176:	461d      	mov	r5, r3
 8007178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800717c:	2a30      	cmp	r2, #48	; 0x30
 800717e:	d0fa      	beq.n	8007176 <_dtoa_r+0xb8e>
 8007180:	e6d7      	b.n	8006f32 <_dtoa_r+0x94a>
 8007182:	9a01      	ldr	r2, [sp, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d184      	bne.n	8007092 <_dtoa_r+0xaaa>
 8007188:	9b00      	ldr	r3, [sp, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	2331      	movs	r3, #49	; 0x31
 8007190:	7013      	strb	r3, [r2, #0]
 8007192:	e6ce      	b.n	8006f32 <_dtoa_r+0x94a>
 8007194:	4b09      	ldr	r3, [pc, #36]	; (80071bc <_dtoa_r+0xbd4>)
 8007196:	f7ff ba95 	b.w	80066c4 <_dtoa_r+0xdc>
 800719a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800719c:	2b00      	cmp	r3, #0
 800719e:	f47f aa6e 	bne.w	800667e <_dtoa_r+0x96>
 80071a2:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <_dtoa_r+0xbd8>)
 80071a4:	f7ff ba8e 	b.w	80066c4 <_dtoa_r+0xdc>
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dcae      	bgt.n	800710c <_dtoa_r+0xb24>
 80071ae:	9b06      	ldr	r3, [sp, #24]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	f73f aea8 	bgt.w	8006f06 <_dtoa_r+0x91e>
 80071b6:	e7a9      	b.n	800710c <_dtoa_r+0xb24>
 80071b8:	0800875b 	.word	0x0800875b
 80071bc:	0800867c 	.word	0x0800867c
 80071c0:	080086dc 	.word	0x080086dc

080071c4 <__sflush_r>:
 80071c4:	898a      	ldrh	r2, [r1, #12]
 80071c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ca:	4605      	mov	r5, r0
 80071cc:	0710      	lsls	r0, r2, #28
 80071ce:	460c      	mov	r4, r1
 80071d0:	d458      	bmi.n	8007284 <__sflush_r+0xc0>
 80071d2:	684b      	ldr	r3, [r1, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dc05      	bgt.n	80071e4 <__sflush_r+0x20>
 80071d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	dc02      	bgt.n	80071e4 <__sflush_r+0x20>
 80071de:	2000      	movs	r0, #0
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071e6:	2e00      	cmp	r6, #0
 80071e8:	d0f9      	beq.n	80071de <__sflush_r+0x1a>
 80071ea:	2300      	movs	r3, #0
 80071ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071f0:	682f      	ldr	r7, [r5, #0]
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	d032      	beq.n	800725c <__sflush_r+0x98>
 80071f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	075a      	lsls	r2, r3, #29
 80071fc:	d505      	bpl.n	800720a <__sflush_r+0x46>
 80071fe:	6863      	ldr	r3, [r4, #4]
 8007200:	1ac0      	subs	r0, r0, r3
 8007202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007204:	b10b      	cbz	r3, 800720a <__sflush_r+0x46>
 8007206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007208:	1ac0      	subs	r0, r0, r3
 800720a:	2300      	movs	r3, #0
 800720c:	4602      	mov	r2, r0
 800720e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007210:	6a21      	ldr	r1, [r4, #32]
 8007212:	4628      	mov	r0, r5
 8007214:	47b0      	blx	r6
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	d106      	bne.n	800722a <__sflush_r+0x66>
 800721c:	6829      	ldr	r1, [r5, #0]
 800721e:	291d      	cmp	r1, #29
 8007220:	d82c      	bhi.n	800727c <__sflush_r+0xb8>
 8007222:	4a2a      	ldr	r2, [pc, #168]	; (80072cc <__sflush_r+0x108>)
 8007224:	40ca      	lsrs	r2, r1
 8007226:	07d6      	lsls	r6, r2, #31
 8007228:	d528      	bpl.n	800727c <__sflush_r+0xb8>
 800722a:	2200      	movs	r2, #0
 800722c:	6062      	str	r2, [r4, #4]
 800722e:	04d9      	lsls	r1, r3, #19
 8007230:	6922      	ldr	r2, [r4, #16]
 8007232:	6022      	str	r2, [r4, #0]
 8007234:	d504      	bpl.n	8007240 <__sflush_r+0x7c>
 8007236:	1c42      	adds	r2, r0, #1
 8007238:	d101      	bne.n	800723e <__sflush_r+0x7a>
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	b903      	cbnz	r3, 8007240 <__sflush_r+0x7c>
 800723e:	6560      	str	r0, [r4, #84]	; 0x54
 8007240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007242:	602f      	str	r7, [r5, #0]
 8007244:	2900      	cmp	r1, #0
 8007246:	d0ca      	beq.n	80071de <__sflush_r+0x1a>
 8007248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800724c:	4299      	cmp	r1, r3
 800724e:	d002      	beq.n	8007256 <__sflush_r+0x92>
 8007250:	4628      	mov	r0, r5
 8007252:	f000 fcb5 	bl	8007bc0 <_free_r>
 8007256:	2000      	movs	r0, #0
 8007258:	6360      	str	r0, [r4, #52]	; 0x34
 800725a:	e7c1      	b.n	80071e0 <__sflush_r+0x1c>
 800725c:	6a21      	ldr	r1, [r4, #32]
 800725e:	2301      	movs	r3, #1
 8007260:	4628      	mov	r0, r5
 8007262:	47b0      	blx	r6
 8007264:	1c41      	adds	r1, r0, #1
 8007266:	d1c7      	bne.n	80071f8 <__sflush_r+0x34>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0c4      	beq.n	80071f8 <__sflush_r+0x34>
 800726e:	2b1d      	cmp	r3, #29
 8007270:	d001      	beq.n	8007276 <__sflush_r+0xb2>
 8007272:	2b16      	cmp	r3, #22
 8007274:	d101      	bne.n	800727a <__sflush_r+0xb6>
 8007276:	602f      	str	r7, [r5, #0]
 8007278:	e7b1      	b.n	80071de <__sflush_r+0x1a>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007280:	81a3      	strh	r3, [r4, #12]
 8007282:	e7ad      	b.n	80071e0 <__sflush_r+0x1c>
 8007284:	690f      	ldr	r7, [r1, #16]
 8007286:	2f00      	cmp	r7, #0
 8007288:	d0a9      	beq.n	80071de <__sflush_r+0x1a>
 800728a:	0793      	lsls	r3, r2, #30
 800728c:	680e      	ldr	r6, [r1, #0]
 800728e:	bf08      	it	eq
 8007290:	694b      	ldreq	r3, [r1, #20]
 8007292:	600f      	str	r7, [r1, #0]
 8007294:	bf18      	it	ne
 8007296:	2300      	movne	r3, #0
 8007298:	eba6 0807 	sub.w	r8, r6, r7
 800729c:	608b      	str	r3, [r1, #8]
 800729e:	f1b8 0f00 	cmp.w	r8, #0
 80072a2:	dd9c      	ble.n	80071de <__sflush_r+0x1a>
 80072a4:	6a21      	ldr	r1, [r4, #32]
 80072a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072a8:	4643      	mov	r3, r8
 80072aa:	463a      	mov	r2, r7
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b0      	blx	r6
 80072b0:	2800      	cmp	r0, #0
 80072b2:	dc06      	bgt.n	80072c2 <__sflush_r+0xfe>
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	e78e      	b.n	80071e0 <__sflush_r+0x1c>
 80072c2:	4407      	add	r7, r0
 80072c4:	eba8 0800 	sub.w	r8, r8, r0
 80072c8:	e7e9      	b.n	800729e <__sflush_r+0xda>
 80072ca:	bf00      	nop
 80072cc:	20400001 	.word	0x20400001

080072d0 <_fflush_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	690b      	ldr	r3, [r1, #16]
 80072d4:	4605      	mov	r5, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	b913      	cbnz	r3, 80072e0 <_fflush_r+0x10>
 80072da:	2500      	movs	r5, #0
 80072dc:	4628      	mov	r0, r5
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	b118      	cbz	r0, 80072ea <_fflush_r+0x1a>
 80072e2:	6983      	ldr	r3, [r0, #24]
 80072e4:	b90b      	cbnz	r3, 80072ea <_fflush_r+0x1a>
 80072e6:	f7fe f991 	bl	800560c <__sinit>
 80072ea:	4b14      	ldr	r3, [pc, #80]	; (800733c <_fflush_r+0x6c>)
 80072ec:	429c      	cmp	r4, r3
 80072ee:	d11b      	bne.n	8007328 <_fflush_r+0x58>
 80072f0:	686c      	ldr	r4, [r5, #4]
 80072f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0ef      	beq.n	80072da <_fflush_r+0xa>
 80072fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072fc:	07d0      	lsls	r0, r2, #31
 80072fe:	d404      	bmi.n	800730a <_fflush_r+0x3a>
 8007300:	0599      	lsls	r1, r3, #22
 8007302:	d402      	bmi.n	800730a <_fflush_r+0x3a>
 8007304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007306:	f7fe fa44 	bl	8005792 <__retarget_lock_acquire_recursive>
 800730a:	4628      	mov	r0, r5
 800730c:	4621      	mov	r1, r4
 800730e:	f7ff ff59 	bl	80071c4 <__sflush_r>
 8007312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007314:	07da      	lsls	r2, r3, #31
 8007316:	4605      	mov	r5, r0
 8007318:	d4e0      	bmi.n	80072dc <_fflush_r+0xc>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	059b      	lsls	r3, r3, #22
 800731e:	d4dd      	bmi.n	80072dc <_fflush_r+0xc>
 8007320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007322:	f7fe fa37 	bl	8005794 <__retarget_lock_release_recursive>
 8007326:	e7d9      	b.n	80072dc <_fflush_r+0xc>
 8007328:	4b05      	ldr	r3, [pc, #20]	; (8007340 <_fflush_r+0x70>)
 800732a:	429c      	cmp	r4, r3
 800732c:	d101      	bne.n	8007332 <_fflush_r+0x62>
 800732e:	68ac      	ldr	r4, [r5, #8]
 8007330:	e7df      	b.n	80072f2 <_fflush_r+0x22>
 8007332:	4b04      	ldr	r3, [pc, #16]	; (8007344 <_fflush_r+0x74>)
 8007334:	429c      	cmp	r4, r3
 8007336:	bf08      	it	eq
 8007338:	68ec      	ldreq	r4, [r5, #12]
 800733a:	e7da      	b.n	80072f2 <_fflush_r+0x22>
 800733c:	08008628 	.word	0x08008628
 8007340:	08008648 	.word	0x08008648
 8007344:	08008608 	.word	0x08008608

08007348 <fiprintf>:
 8007348:	b40e      	push	{r1, r2, r3}
 800734a:	b503      	push	{r0, r1, lr}
 800734c:	4601      	mov	r1, r0
 800734e:	ab03      	add	r3, sp, #12
 8007350:	4805      	ldr	r0, [pc, #20]	; (8007368 <fiprintf+0x20>)
 8007352:	f853 2b04 	ldr.w	r2, [r3], #4
 8007356:	6800      	ldr	r0, [r0, #0]
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	f000 fe03 	bl	8007f64 <_vfiprintf_r>
 800735e:	b002      	add	sp, #8
 8007360:	f85d eb04 	ldr.w	lr, [sp], #4
 8007364:	b003      	add	sp, #12
 8007366:	4770      	bx	lr
 8007368:	200000d4 	.word	0x200000d4

0800736c <_localeconv_r>:
 800736c:	4800      	ldr	r0, [pc, #0]	; (8007370 <_localeconv_r+0x4>)
 800736e:	4770      	bx	lr
 8007370:	20000228 	.word	0x20000228

08007374 <_lseek_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d07      	ldr	r5, [pc, #28]	; (8007394 <_lseek_r+0x20>)
 8007378:	4604      	mov	r4, r0
 800737a:	4608      	mov	r0, r1
 800737c:	4611      	mov	r1, r2
 800737e:	2200      	movs	r2, #0
 8007380:	602a      	str	r2, [r5, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	f7fe f82d 	bl	80053e2 <_lseek>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_lseek_r+0x1e>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_lseek_r+0x1e>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	20000658 	.word	0x20000658

08007398 <__swhatbuf_r>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	460e      	mov	r6, r1
 800739c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a0:	2900      	cmp	r1, #0
 80073a2:	b096      	sub	sp, #88	; 0x58
 80073a4:	4614      	mov	r4, r2
 80073a6:	461d      	mov	r5, r3
 80073a8:	da08      	bge.n	80073bc <__swhatbuf_r+0x24>
 80073aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	602a      	str	r2, [r5, #0]
 80073b2:	061a      	lsls	r2, r3, #24
 80073b4:	d410      	bmi.n	80073d8 <__swhatbuf_r+0x40>
 80073b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ba:	e00e      	b.n	80073da <__swhatbuf_r+0x42>
 80073bc:	466a      	mov	r2, sp
 80073be:	f000 ff1b 	bl	80081f8 <_fstat_r>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	dbf1      	blt.n	80073aa <__swhatbuf_r+0x12>
 80073c6:	9a01      	ldr	r2, [sp, #4]
 80073c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073d0:	425a      	negs	r2, r3
 80073d2:	415a      	adcs	r2, r3
 80073d4:	602a      	str	r2, [r5, #0]
 80073d6:	e7ee      	b.n	80073b6 <__swhatbuf_r+0x1e>
 80073d8:	2340      	movs	r3, #64	; 0x40
 80073da:	2000      	movs	r0, #0
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	b016      	add	sp, #88	; 0x58
 80073e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080073e4 <__smakebuf_r>:
 80073e4:	898b      	ldrh	r3, [r1, #12]
 80073e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073e8:	079d      	lsls	r5, r3, #30
 80073ea:	4606      	mov	r6, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	d507      	bpl.n	8007400 <__smakebuf_r+0x1c>
 80073f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	2301      	movs	r3, #1
 80073fa:	6163      	str	r3, [r4, #20]
 80073fc:	b002      	add	sp, #8
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	ab01      	add	r3, sp, #4
 8007402:	466a      	mov	r2, sp
 8007404:	f7ff ffc8 	bl	8007398 <__swhatbuf_r>
 8007408:	9900      	ldr	r1, [sp, #0]
 800740a:	4605      	mov	r5, r0
 800740c:	4630      	mov	r0, r6
 800740e:	f7fe f9f9 	bl	8005804 <_malloc_r>
 8007412:	b948      	cbnz	r0, 8007428 <__smakebuf_r+0x44>
 8007414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007418:	059a      	lsls	r2, r3, #22
 800741a:	d4ef      	bmi.n	80073fc <__smakebuf_r+0x18>
 800741c:	f023 0303 	bic.w	r3, r3, #3
 8007420:	f043 0302 	orr.w	r3, r3, #2
 8007424:	81a3      	strh	r3, [r4, #12]
 8007426:	e7e3      	b.n	80073f0 <__smakebuf_r+0xc>
 8007428:	4b0d      	ldr	r3, [pc, #52]	; (8007460 <__smakebuf_r+0x7c>)
 800742a:	62b3      	str	r3, [r6, #40]	; 0x28
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	6020      	str	r0, [r4, #0]
 8007430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	9b00      	ldr	r3, [sp, #0]
 8007438:	6163      	str	r3, [r4, #20]
 800743a:	9b01      	ldr	r3, [sp, #4]
 800743c:	6120      	str	r0, [r4, #16]
 800743e:	b15b      	cbz	r3, 8007458 <__smakebuf_r+0x74>
 8007440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007444:	4630      	mov	r0, r6
 8007446:	f000 fee9 	bl	800821c <_isatty_r>
 800744a:	b128      	cbz	r0, 8007458 <__smakebuf_r+0x74>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	89a0      	ldrh	r0, [r4, #12]
 800745a:	4305      	orrs	r5, r0
 800745c:	81a5      	strh	r5, [r4, #12]
 800745e:	e7cd      	b.n	80073fc <__smakebuf_r+0x18>
 8007460:	080055a5 	.word	0x080055a5

08007464 <malloc>:
 8007464:	4b02      	ldr	r3, [pc, #8]	; (8007470 <malloc+0xc>)
 8007466:	4601      	mov	r1, r0
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	f7fe b9cb 	b.w	8005804 <_malloc_r>
 800746e:	bf00      	nop
 8007470:	200000d4 	.word	0x200000d4

08007474 <__malloc_lock>:
 8007474:	4801      	ldr	r0, [pc, #4]	; (800747c <__malloc_lock+0x8>)
 8007476:	f7fe b98c 	b.w	8005792 <__retarget_lock_acquire_recursive>
 800747a:	bf00      	nop
 800747c:	2000064c 	.word	0x2000064c

08007480 <__malloc_unlock>:
 8007480:	4801      	ldr	r0, [pc, #4]	; (8007488 <__malloc_unlock+0x8>)
 8007482:	f7fe b987 	b.w	8005794 <__retarget_lock_release_recursive>
 8007486:	bf00      	nop
 8007488:	2000064c 	.word	0x2000064c

0800748c <_Balloc>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	b976      	cbnz	r6, 80074b4 <_Balloc+0x28>
 8007496:	2010      	movs	r0, #16
 8007498:	f7ff ffe4 	bl	8007464 <malloc>
 800749c:	4602      	mov	r2, r0
 800749e:	6260      	str	r0, [r4, #36]	; 0x24
 80074a0:	b920      	cbnz	r0, 80074ac <_Balloc+0x20>
 80074a2:	4b18      	ldr	r3, [pc, #96]	; (8007504 <_Balloc+0x78>)
 80074a4:	4818      	ldr	r0, [pc, #96]	; (8007508 <_Balloc+0x7c>)
 80074a6:	2166      	movs	r1, #102	; 0x66
 80074a8:	f7fe ffe4 	bl	8006474 <__assert_func>
 80074ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074b0:	6006      	str	r6, [r0, #0]
 80074b2:	60c6      	str	r6, [r0, #12]
 80074b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074b6:	68f3      	ldr	r3, [r6, #12]
 80074b8:	b183      	cbz	r3, 80074dc <_Balloc+0x50>
 80074ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074c2:	b9b8      	cbnz	r0, 80074f4 <_Balloc+0x68>
 80074c4:	2101      	movs	r1, #1
 80074c6:	fa01 f605 	lsl.w	r6, r1, r5
 80074ca:	1d72      	adds	r2, r6, #5
 80074cc:	0092      	lsls	r2, r2, #2
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fb60 	bl	8007b94 <_calloc_r>
 80074d4:	b160      	cbz	r0, 80074f0 <_Balloc+0x64>
 80074d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074da:	e00e      	b.n	80074fa <_Balloc+0x6e>
 80074dc:	2221      	movs	r2, #33	; 0x21
 80074de:	2104      	movs	r1, #4
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fb57 	bl	8007b94 <_calloc_r>
 80074e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074e8:	60f0      	str	r0, [r6, #12]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e4      	bne.n	80074ba <_Balloc+0x2e>
 80074f0:	2000      	movs	r0, #0
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	6802      	ldr	r2, [r0, #0]
 80074f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074fa:	2300      	movs	r3, #0
 80074fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007500:	e7f7      	b.n	80074f2 <_Balloc+0x66>
 8007502:	bf00      	nop
 8007504:	080086e9 	.word	0x080086e9
 8007508:	0800876c 	.word	0x0800876c

0800750c <_Bfree>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007510:	4605      	mov	r5, r0
 8007512:	460c      	mov	r4, r1
 8007514:	b976      	cbnz	r6, 8007534 <_Bfree+0x28>
 8007516:	2010      	movs	r0, #16
 8007518:	f7ff ffa4 	bl	8007464 <malloc>
 800751c:	4602      	mov	r2, r0
 800751e:	6268      	str	r0, [r5, #36]	; 0x24
 8007520:	b920      	cbnz	r0, 800752c <_Bfree+0x20>
 8007522:	4b09      	ldr	r3, [pc, #36]	; (8007548 <_Bfree+0x3c>)
 8007524:	4809      	ldr	r0, [pc, #36]	; (800754c <_Bfree+0x40>)
 8007526:	218a      	movs	r1, #138	; 0x8a
 8007528:	f7fe ffa4 	bl	8006474 <__assert_func>
 800752c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007530:	6006      	str	r6, [r0, #0]
 8007532:	60c6      	str	r6, [r0, #12]
 8007534:	b13c      	cbz	r4, 8007546 <_Bfree+0x3a>
 8007536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007538:	6862      	ldr	r2, [r4, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007540:	6021      	str	r1, [r4, #0]
 8007542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	080086e9 	.word	0x080086e9
 800754c:	0800876c 	.word	0x0800876c

08007550 <__multadd>:
 8007550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007554:	690d      	ldr	r5, [r1, #16]
 8007556:	4607      	mov	r7, r0
 8007558:	460c      	mov	r4, r1
 800755a:	461e      	mov	r6, r3
 800755c:	f101 0c14 	add.w	ip, r1, #20
 8007560:	2000      	movs	r0, #0
 8007562:	f8dc 3000 	ldr.w	r3, [ip]
 8007566:	b299      	uxth	r1, r3
 8007568:	fb02 6101 	mla	r1, r2, r1, r6
 800756c:	0c1e      	lsrs	r6, r3, #16
 800756e:	0c0b      	lsrs	r3, r1, #16
 8007570:	fb02 3306 	mla	r3, r2, r6, r3
 8007574:	b289      	uxth	r1, r1
 8007576:	3001      	adds	r0, #1
 8007578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800757c:	4285      	cmp	r5, r0
 800757e:	f84c 1b04 	str.w	r1, [ip], #4
 8007582:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007586:	dcec      	bgt.n	8007562 <__multadd+0x12>
 8007588:	b30e      	cbz	r6, 80075ce <__multadd+0x7e>
 800758a:	68a3      	ldr	r3, [r4, #8]
 800758c:	42ab      	cmp	r3, r5
 800758e:	dc19      	bgt.n	80075c4 <__multadd+0x74>
 8007590:	6861      	ldr	r1, [r4, #4]
 8007592:	4638      	mov	r0, r7
 8007594:	3101      	adds	r1, #1
 8007596:	f7ff ff79 	bl	800748c <_Balloc>
 800759a:	4680      	mov	r8, r0
 800759c:	b928      	cbnz	r0, 80075aa <__multadd+0x5a>
 800759e:	4602      	mov	r2, r0
 80075a0:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <__multadd+0x84>)
 80075a2:	480d      	ldr	r0, [pc, #52]	; (80075d8 <__multadd+0x88>)
 80075a4:	21b5      	movs	r1, #181	; 0xb5
 80075a6:	f7fe ff65 	bl	8006474 <__assert_func>
 80075aa:	6922      	ldr	r2, [r4, #16]
 80075ac:	3202      	adds	r2, #2
 80075ae:	f104 010c 	add.w	r1, r4, #12
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	300c      	adds	r0, #12
 80075b6:	f7fe f8ee 	bl	8005796 <memcpy>
 80075ba:	4621      	mov	r1, r4
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff ffa5 	bl	800750c <_Bfree>
 80075c2:	4644      	mov	r4, r8
 80075c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075c8:	3501      	adds	r5, #1
 80075ca:	615e      	str	r6, [r3, #20]
 80075cc:	6125      	str	r5, [r4, #16]
 80075ce:	4620      	mov	r0, r4
 80075d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d4:	0800875b 	.word	0x0800875b
 80075d8:	0800876c 	.word	0x0800876c

080075dc <__hi0bits>:
 80075dc:	0c03      	lsrs	r3, r0, #16
 80075de:	041b      	lsls	r3, r3, #16
 80075e0:	b9d3      	cbnz	r3, 8007618 <__hi0bits+0x3c>
 80075e2:	0400      	lsls	r0, r0, #16
 80075e4:	2310      	movs	r3, #16
 80075e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075ea:	bf04      	itt	eq
 80075ec:	0200      	lsleq	r0, r0, #8
 80075ee:	3308      	addeq	r3, #8
 80075f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075f4:	bf04      	itt	eq
 80075f6:	0100      	lsleq	r0, r0, #4
 80075f8:	3304      	addeq	r3, #4
 80075fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075fe:	bf04      	itt	eq
 8007600:	0080      	lsleq	r0, r0, #2
 8007602:	3302      	addeq	r3, #2
 8007604:	2800      	cmp	r0, #0
 8007606:	db05      	blt.n	8007614 <__hi0bits+0x38>
 8007608:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800760c:	f103 0301 	add.w	r3, r3, #1
 8007610:	bf08      	it	eq
 8007612:	2320      	moveq	r3, #32
 8007614:	4618      	mov	r0, r3
 8007616:	4770      	bx	lr
 8007618:	2300      	movs	r3, #0
 800761a:	e7e4      	b.n	80075e6 <__hi0bits+0xa>

0800761c <__lo0bits>:
 800761c:	6803      	ldr	r3, [r0, #0]
 800761e:	f013 0207 	ands.w	r2, r3, #7
 8007622:	4601      	mov	r1, r0
 8007624:	d00b      	beq.n	800763e <__lo0bits+0x22>
 8007626:	07da      	lsls	r2, r3, #31
 8007628:	d423      	bmi.n	8007672 <__lo0bits+0x56>
 800762a:	0798      	lsls	r0, r3, #30
 800762c:	bf49      	itett	mi
 800762e:	085b      	lsrmi	r3, r3, #1
 8007630:	089b      	lsrpl	r3, r3, #2
 8007632:	2001      	movmi	r0, #1
 8007634:	600b      	strmi	r3, [r1, #0]
 8007636:	bf5c      	itt	pl
 8007638:	600b      	strpl	r3, [r1, #0]
 800763a:	2002      	movpl	r0, #2
 800763c:	4770      	bx	lr
 800763e:	b298      	uxth	r0, r3
 8007640:	b9a8      	cbnz	r0, 800766e <__lo0bits+0x52>
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	2010      	movs	r0, #16
 8007646:	b2da      	uxtb	r2, r3
 8007648:	b90a      	cbnz	r2, 800764e <__lo0bits+0x32>
 800764a:	3008      	adds	r0, #8
 800764c:	0a1b      	lsrs	r3, r3, #8
 800764e:	071a      	lsls	r2, r3, #28
 8007650:	bf04      	itt	eq
 8007652:	091b      	lsreq	r3, r3, #4
 8007654:	3004      	addeq	r0, #4
 8007656:	079a      	lsls	r2, r3, #30
 8007658:	bf04      	itt	eq
 800765a:	089b      	lsreq	r3, r3, #2
 800765c:	3002      	addeq	r0, #2
 800765e:	07da      	lsls	r2, r3, #31
 8007660:	d403      	bmi.n	800766a <__lo0bits+0x4e>
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	f100 0001 	add.w	r0, r0, #1
 8007668:	d005      	beq.n	8007676 <__lo0bits+0x5a>
 800766a:	600b      	str	r3, [r1, #0]
 800766c:	4770      	bx	lr
 800766e:	4610      	mov	r0, r2
 8007670:	e7e9      	b.n	8007646 <__lo0bits+0x2a>
 8007672:	2000      	movs	r0, #0
 8007674:	4770      	bx	lr
 8007676:	2020      	movs	r0, #32
 8007678:	4770      	bx	lr
	...

0800767c <__i2b>:
 800767c:	b510      	push	{r4, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	2101      	movs	r1, #1
 8007682:	f7ff ff03 	bl	800748c <_Balloc>
 8007686:	4602      	mov	r2, r0
 8007688:	b928      	cbnz	r0, 8007696 <__i2b+0x1a>
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <__i2b+0x24>)
 800768c:	4805      	ldr	r0, [pc, #20]	; (80076a4 <__i2b+0x28>)
 800768e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007692:	f7fe feef 	bl	8006474 <__assert_func>
 8007696:	2301      	movs	r3, #1
 8007698:	6144      	str	r4, [r0, #20]
 800769a:	6103      	str	r3, [r0, #16]
 800769c:	bd10      	pop	{r4, pc}
 800769e:	bf00      	nop
 80076a0:	0800875b 	.word	0x0800875b
 80076a4:	0800876c 	.word	0x0800876c

080076a8 <__multiply>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	4691      	mov	r9, r2
 80076ae:	690a      	ldr	r2, [r1, #16]
 80076b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	bfb8      	it	lt
 80076b8:	460b      	movlt	r3, r1
 80076ba:	460c      	mov	r4, r1
 80076bc:	bfbc      	itt	lt
 80076be:	464c      	movlt	r4, r9
 80076c0:	4699      	movlt	r9, r3
 80076c2:	6927      	ldr	r7, [r4, #16]
 80076c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076c8:	68a3      	ldr	r3, [r4, #8]
 80076ca:	6861      	ldr	r1, [r4, #4]
 80076cc:	eb07 060a 	add.w	r6, r7, sl
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	b085      	sub	sp, #20
 80076d4:	bfb8      	it	lt
 80076d6:	3101      	addlt	r1, #1
 80076d8:	f7ff fed8 	bl	800748c <_Balloc>
 80076dc:	b930      	cbnz	r0, 80076ec <__multiply+0x44>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b44      	ldr	r3, [pc, #272]	; (80077f4 <__multiply+0x14c>)
 80076e2:	4845      	ldr	r0, [pc, #276]	; (80077f8 <__multiply+0x150>)
 80076e4:	f240 115d 	movw	r1, #349	; 0x15d
 80076e8:	f7fe fec4 	bl	8006474 <__assert_func>
 80076ec:	f100 0514 	add.w	r5, r0, #20
 80076f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076f4:	462b      	mov	r3, r5
 80076f6:	2200      	movs	r2, #0
 80076f8:	4543      	cmp	r3, r8
 80076fa:	d321      	bcc.n	8007740 <__multiply+0x98>
 80076fc:	f104 0314 	add.w	r3, r4, #20
 8007700:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007704:	f109 0314 	add.w	r3, r9, #20
 8007708:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800770c:	9202      	str	r2, [sp, #8]
 800770e:	1b3a      	subs	r2, r7, r4
 8007710:	3a15      	subs	r2, #21
 8007712:	f022 0203 	bic.w	r2, r2, #3
 8007716:	3204      	adds	r2, #4
 8007718:	f104 0115 	add.w	r1, r4, #21
 800771c:	428f      	cmp	r7, r1
 800771e:	bf38      	it	cc
 8007720:	2204      	movcc	r2, #4
 8007722:	9201      	str	r2, [sp, #4]
 8007724:	9a02      	ldr	r2, [sp, #8]
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	429a      	cmp	r2, r3
 800772a:	d80c      	bhi.n	8007746 <__multiply+0x9e>
 800772c:	2e00      	cmp	r6, #0
 800772e:	dd03      	ble.n	8007738 <__multiply+0x90>
 8007730:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007734:	2b00      	cmp	r3, #0
 8007736:	d05a      	beq.n	80077ee <__multiply+0x146>
 8007738:	6106      	str	r6, [r0, #16]
 800773a:	b005      	add	sp, #20
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	f843 2b04 	str.w	r2, [r3], #4
 8007744:	e7d8      	b.n	80076f8 <__multiply+0x50>
 8007746:	f8b3 a000 	ldrh.w	sl, [r3]
 800774a:	f1ba 0f00 	cmp.w	sl, #0
 800774e:	d024      	beq.n	800779a <__multiply+0xf2>
 8007750:	f104 0e14 	add.w	lr, r4, #20
 8007754:	46a9      	mov	r9, r5
 8007756:	f04f 0c00 	mov.w	ip, #0
 800775a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800775e:	f8d9 1000 	ldr.w	r1, [r9]
 8007762:	fa1f fb82 	uxth.w	fp, r2
 8007766:	b289      	uxth	r1, r1
 8007768:	fb0a 110b 	mla	r1, sl, fp, r1
 800776c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007770:	f8d9 2000 	ldr.w	r2, [r9]
 8007774:	4461      	add	r1, ip
 8007776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800777a:	fb0a c20b 	mla	r2, sl, fp, ip
 800777e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007782:	b289      	uxth	r1, r1
 8007784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007788:	4577      	cmp	r7, lr
 800778a:	f849 1b04 	str.w	r1, [r9], #4
 800778e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007792:	d8e2      	bhi.n	800775a <__multiply+0xb2>
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	f845 c002 	str.w	ip, [r5, r2]
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077a0:	3304      	adds	r3, #4
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d020      	beq.n	80077ea <__multiply+0x142>
 80077a8:	6829      	ldr	r1, [r5, #0]
 80077aa:	f104 0c14 	add.w	ip, r4, #20
 80077ae:	46ae      	mov	lr, r5
 80077b0:	f04f 0a00 	mov.w	sl, #0
 80077b4:	f8bc b000 	ldrh.w	fp, [ip]
 80077b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077bc:	fb09 220b 	mla	r2, r9, fp, r2
 80077c0:	4492      	add	sl, r2
 80077c2:	b289      	uxth	r1, r1
 80077c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077c8:	f84e 1b04 	str.w	r1, [lr], #4
 80077cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077d0:	f8be 1000 	ldrh.w	r1, [lr]
 80077d4:	0c12      	lsrs	r2, r2, #16
 80077d6:	fb09 1102 	mla	r1, r9, r2, r1
 80077da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077de:	4567      	cmp	r7, ip
 80077e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077e4:	d8e6      	bhi.n	80077b4 <__multiply+0x10c>
 80077e6:	9a01      	ldr	r2, [sp, #4]
 80077e8:	50a9      	str	r1, [r5, r2]
 80077ea:	3504      	adds	r5, #4
 80077ec:	e79a      	b.n	8007724 <__multiply+0x7c>
 80077ee:	3e01      	subs	r6, #1
 80077f0:	e79c      	b.n	800772c <__multiply+0x84>
 80077f2:	bf00      	nop
 80077f4:	0800875b 	.word	0x0800875b
 80077f8:	0800876c 	.word	0x0800876c

080077fc <__pow5mult>:
 80077fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007800:	4615      	mov	r5, r2
 8007802:	f012 0203 	ands.w	r2, r2, #3
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	d007      	beq.n	800781c <__pow5mult+0x20>
 800780c:	4c25      	ldr	r4, [pc, #148]	; (80078a4 <__pow5mult+0xa8>)
 800780e:	3a01      	subs	r2, #1
 8007810:	2300      	movs	r3, #0
 8007812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007816:	f7ff fe9b 	bl	8007550 <__multadd>
 800781a:	4607      	mov	r7, r0
 800781c:	10ad      	asrs	r5, r5, #2
 800781e:	d03d      	beq.n	800789c <__pow5mult+0xa0>
 8007820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007822:	b97c      	cbnz	r4, 8007844 <__pow5mult+0x48>
 8007824:	2010      	movs	r0, #16
 8007826:	f7ff fe1d 	bl	8007464 <malloc>
 800782a:	4602      	mov	r2, r0
 800782c:	6270      	str	r0, [r6, #36]	; 0x24
 800782e:	b928      	cbnz	r0, 800783c <__pow5mult+0x40>
 8007830:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <__pow5mult+0xac>)
 8007832:	481e      	ldr	r0, [pc, #120]	; (80078ac <__pow5mult+0xb0>)
 8007834:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007838:	f7fe fe1c 	bl	8006474 <__assert_func>
 800783c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007840:	6004      	str	r4, [r0, #0]
 8007842:	60c4      	str	r4, [r0, #12]
 8007844:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800784c:	b94c      	cbnz	r4, 8007862 <__pow5mult+0x66>
 800784e:	f240 2171 	movw	r1, #625	; 0x271
 8007852:	4630      	mov	r0, r6
 8007854:	f7ff ff12 	bl	800767c <__i2b>
 8007858:	2300      	movs	r3, #0
 800785a:	f8c8 0008 	str.w	r0, [r8, #8]
 800785e:	4604      	mov	r4, r0
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	f04f 0900 	mov.w	r9, #0
 8007866:	07eb      	lsls	r3, r5, #31
 8007868:	d50a      	bpl.n	8007880 <__pow5mult+0x84>
 800786a:	4639      	mov	r1, r7
 800786c:	4622      	mov	r2, r4
 800786e:	4630      	mov	r0, r6
 8007870:	f7ff ff1a 	bl	80076a8 <__multiply>
 8007874:	4639      	mov	r1, r7
 8007876:	4680      	mov	r8, r0
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff fe47 	bl	800750c <_Bfree>
 800787e:	4647      	mov	r7, r8
 8007880:	106d      	asrs	r5, r5, #1
 8007882:	d00b      	beq.n	800789c <__pow5mult+0xa0>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	b938      	cbnz	r0, 8007898 <__pow5mult+0x9c>
 8007888:	4622      	mov	r2, r4
 800788a:	4621      	mov	r1, r4
 800788c:	4630      	mov	r0, r6
 800788e:	f7ff ff0b 	bl	80076a8 <__multiply>
 8007892:	6020      	str	r0, [r4, #0]
 8007894:	f8c0 9000 	str.w	r9, [r0]
 8007898:	4604      	mov	r4, r0
 800789a:	e7e4      	b.n	8007866 <__pow5mult+0x6a>
 800789c:	4638      	mov	r0, r7
 800789e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a2:	bf00      	nop
 80078a4:	080088b8 	.word	0x080088b8
 80078a8:	080086e9 	.word	0x080086e9
 80078ac:	0800876c 	.word	0x0800876c

080078b0 <__lshift>:
 80078b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	6849      	ldr	r1, [r1, #4]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	4607      	mov	r7, r0
 80078c2:	4691      	mov	r9, r2
 80078c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078c8:	f108 0601 	add.w	r6, r8, #1
 80078cc:	42b3      	cmp	r3, r6
 80078ce:	db0b      	blt.n	80078e8 <__lshift+0x38>
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff fddb 	bl	800748c <_Balloc>
 80078d6:	4605      	mov	r5, r0
 80078d8:	b948      	cbnz	r0, 80078ee <__lshift+0x3e>
 80078da:	4602      	mov	r2, r0
 80078dc:	4b2a      	ldr	r3, [pc, #168]	; (8007988 <__lshift+0xd8>)
 80078de:	482b      	ldr	r0, [pc, #172]	; (800798c <__lshift+0xdc>)
 80078e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078e4:	f7fe fdc6 	bl	8006474 <__assert_func>
 80078e8:	3101      	adds	r1, #1
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	e7ee      	b.n	80078cc <__lshift+0x1c>
 80078ee:	2300      	movs	r3, #0
 80078f0:	f100 0114 	add.w	r1, r0, #20
 80078f4:	f100 0210 	add.w	r2, r0, #16
 80078f8:	4618      	mov	r0, r3
 80078fa:	4553      	cmp	r3, sl
 80078fc:	db37      	blt.n	800796e <__lshift+0xbe>
 80078fe:	6920      	ldr	r0, [r4, #16]
 8007900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007904:	f104 0314 	add.w	r3, r4, #20
 8007908:	f019 091f 	ands.w	r9, r9, #31
 800790c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007910:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007914:	d02f      	beq.n	8007976 <__lshift+0xc6>
 8007916:	f1c9 0e20 	rsb	lr, r9, #32
 800791a:	468a      	mov	sl, r1
 800791c:	f04f 0c00 	mov.w	ip, #0
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	fa02 f209 	lsl.w	r2, r2, r9
 8007926:	ea42 020c 	orr.w	r2, r2, ip
 800792a:	f84a 2b04 	str.w	r2, [sl], #4
 800792e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007932:	4298      	cmp	r0, r3
 8007934:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007938:	d8f2      	bhi.n	8007920 <__lshift+0x70>
 800793a:	1b03      	subs	r3, r0, r4
 800793c:	3b15      	subs	r3, #21
 800793e:	f023 0303 	bic.w	r3, r3, #3
 8007942:	3304      	adds	r3, #4
 8007944:	f104 0215 	add.w	r2, r4, #21
 8007948:	4290      	cmp	r0, r2
 800794a:	bf38      	it	cc
 800794c:	2304      	movcc	r3, #4
 800794e:	f841 c003 	str.w	ip, [r1, r3]
 8007952:	f1bc 0f00 	cmp.w	ip, #0
 8007956:	d001      	beq.n	800795c <__lshift+0xac>
 8007958:	f108 0602 	add.w	r6, r8, #2
 800795c:	3e01      	subs	r6, #1
 800795e:	4638      	mov	r0, r7
 8007960:	612e      	str	r6, [r5, #16]
 8007962:	4621      	mov	r1, r4
 8007964:	f7ff fdd2 	bl	800750c <_Bfree>
 8007968:	4628      	mov	r0, r5
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007972:	3301      	adds	r3, #1
 8007974:	e7c1      	b.n	80078fa <__lshift+0x4a>
 8007976:	3904      	subs	r1, #4
 8007978:	f853 2b04 	ldr.w	r2, [r3], #4
 800797c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007980:	4298      	cmp	r0, r3
 8007982:	d8f9      	bhi.n	8007978 <__lshift+0xc8>
 8007984:	e7ea      	b.n	800795c <__lshift+0xac>
 8007986:	bf00      	nop
 8007988:	0800875b 	.word	0x0800875b
 800798c:	0800876c 	.word	0x0800876c

08007990 <__mcmp>:
 8007990:	b530      	push	{r4, r5, lr}
 8007992:	6902      	ldr	r2, [r0, #16]
 8007994:	690c      	ldr	r4, [r1, #16]
 8007996:	1b12      	subs	r2, r2, r4
 8007998:	d10e      	bne.n	80079b8 <__mcmp+0x28>
 800799a:	f100 0314 	add.w	r3, r0, #20
 800799e:	3114      	adds	r1, #20
 80079a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079b0:	42a5      	cmp	r5, r4
 80079b2:	d003      	beq.n	80079bc <__mcmp+0x2c>
 80079b4:	d305      	bcc.n	80079c2 <__mcmp+0x32>
 80079b6:	2201      	movs	r2, #1
 80079b8:	4610      	mov	r0, r2
 80079ba:	bd30      	pop	{r4, r5, pc}
 80079bc:	4283      	cmp	r3, r0
 80079be:	d3f3      	bcc.n	80079a8 <__mcmp+0x18>
 80079c0:	e7fa      	b.n	80079b8 <__mcmp+0x28>
 80079c2:	f04f 32ff 	mov.w	r2, #4294967295
 80079c6:	e7f7      	b.n	80079b8 <__mcmp+0x28>

080079c8 <__mdiff>:
 80079c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	460c      	mov	r4, r1
 80079ce:	4606      	mov	r6, r0
 80079d0:	4611      	mov	r1, r2
 80079d2:	4620      	mov	r0, r4
 80079d4:	4690      	mov	r8, r2
 80079d6:	f7ff ffdb 	bl	8007990 <__mcmp>
 80079da:	1e05      	subs	r5, r0, #0
 80079dc:	d110      	bne.n	8007a00 <__mdiff+0x38>
 80079de:	4629      	mov	r1, r5
 80079e0:	4630      	mov	r0, r6
 80079e2:	f7ff fd53 	bl	800748c <_Balloc>
 80079e6:	b930      	cbnz	r0, 80079f6 <__mdiff+0x2e>
 80079e8:	4b3a      	ldr	r3, [pc, #232]	; (8007ad4 <__mdiff+0x10c>)
 80079ea:	4602      	mov	r2, r0
 80079ec:	f240 2132 	movw	r1, #562	; 0x232
 80079f0:	4839      	ldr	r0, [pc, #228]	; (8007ad8 <__mdiff+0x110>)
 80079f2:	f7fe fd3f 	bl	8006474 <__assert_func>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	bfa4      	itt	ge
 8007a02:	4643      	movge	r3, r8
 8007a04:	46a0      	movge	r8, r4
 8007a06:	4630      	mov	r0, r6
 8007a08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a0c:	bfa6      	itte	ge
 8007a0e:	461c      	movge	r4, r3
 8007a10:	2500      	movge	r5, #0
 8007a12:	2501      	movlt	r5, #1
 8007a14:	f7ff fd3a 	bl	800748c <_Balloc>
 8007a18:	b920      	cbnz	r0, 8007a24 <__mdiff+0x5c>
 8007a1a:	4b2e      	ldr	r3, [pc, #184]	; (8007ad4 <__mdiff+0x10c>)
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a22:	e7e5      	b.n	80079f0 <__mdiff+0x28>
 8007a24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a28:	6926      	ldr	r6, [r4, #16]
 8007a2a:	60c5      	str	r5, [r0, #12]
 8007a2c:	f104 0914 	add.w	r9, r4, #20
 8007a30:	f108 0514 	add.w	r5, r8, #20
 8007a34:	f100 0e14 	add.w	lr, r0, #20
 8007a38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a40:	f108 0210 	add.w	r2, r8, #16
 8007a44:	46f2      	mov	sl, lr
 8007a46:	2100      	movs	r1, #0
 8007a48:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a50:	fa1f f883 	uxth.w	r8, r3
 8007a54:	fa11 f18b 	uxtah	r1, r1, fp
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	eba1 0808 	sub.w	r8, r1, r8
 8007a5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a66:	fa1f f888 	uxth.w	r8, r8
 8007a6a:	1419      	asrs	r1, r3, #16
 8007a6c:	454e      	cmp	r6, r9
 8007a6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a72:	f84a 3b04 	str.w	r3, [sl], #4
 8007a76:	d8e7      	bhi.n	8007a48 <__mdiff+0x80>
 8007a78:	1b33      	subs	r3, r6, r4
 8007a7a:	3b15      	subs	r3, #21
 8007a7c:	f023 0303 	bic.w	r3, r3, #3
 8007a80:	3304      	adds	r3, #4
 8007a82:	3415      	adds	r4, #21
 8007a84:	42a6      	cmp	r6, r4
 8007a86:	bf38      	it	cc
 8007a88:	2304      	movcc	r3, #4
 8007a8a:	441d      	add	r5, r3
 8007a8c:	4473      	add	r3, lr
 8007a8e:	469e      	mov	lr, r3
 8007a90:	462e      	mov	r6, r5
 8007a92:	4566      	cmp	r6, ip
 8007a94:	d30e      	bcc.n	8007ab4 <__mdiff+0xec>
 8007a96:	f10c 0203 	add.w	r2, ip, #3
 8007a9a:	1b52      	subs	r2, r2, r5
 8007a9c:	f022 0203 	bic.w	r2, r2, #3
 8007aa0:	3d03      	subs	r5, #3
 8007aa2:	45ac      	cmp	ip, r5
 8007aa4:	bf38      	it	cc
 8007aa6:	2200      	movcc	r2, #0
 8007aa8:	441a      	add	r2, r3
 8007aaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007aae:	b17b      	cbz	r3, 8007ad0 <__mdiff+0x108>
 8007ab0:	6107      	str	r7, [r0, #16]
 8007ab2:	e7a3      	b.n	80079fc <__mdiff+0x34>
 8007ab4:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ab8:	fa11 f288 	uxtah	r2, r1, r8
 8007abc:	1414      	asrs	r4, r2, #16
 8007abe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ac8:	f84e 2b04 	str.w	r2, [lr], #4
 8007acc:	1421      	asrs	r1, r4, #16
 8007ace:	e7e0      	b.n	8007a92 <__mdiff+0xca>
 8007ad0:	3f01      	subs	r7, #1
 8007ad2:	e7ea      	b.n	8007aaa <__mdiff+0xe2>
 8007ad4:	0800875b 	.word	0x0800875b
 8007ad8:	0800876c 	.word	0x0800876c

08007adc <__d2b>:
 8007adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ae0:	4689      	mov	r9, r1
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	ec57 6b10 	vmov	r6, r7, d0
 8007ae8:	4690      	mov	r8, r2
 8007aea:	f7ff fccf 	bl	800748c <_Balloc>
 8007aee:	4604      	mov	r4, r0
 8007af0:	b930      	cbnz	r0, 8007b00 <__d2b+0x24>
 8007af2:	4602      	mov	r2, r0
 8007af4:	4b25      	ldr	r3, [pc, #148]	; (8007b8c <__d2b+0xb0>)
 8007af6:	4826      	ldr	r0, [pc, #152]	; (8007b90 <__d2b+0xb4>)
 8007af8:	f240 310a 	movw	r1, #778	; 0x30a
 8007afc:	f7fe fcba 	bl	8006474 <__assert_func>
 8007b00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b08:	bb35      	cbnz	r5, 8007b58 <__d2b+0x7c>
 8007b0a:	2e00      	cmp	r6, #0
 8007b0c:	9301      	str	r3, [sp, #4]
 8007b0e:	d028      	beq.n	8007b62 <__d2b+0x86>
 8007b10:	4668      	mov	r0, sp
 8007b12:	9600      	str	r6, [sp, #0]
 8007b14:	f7ff fd82 	bl	800761c <__lo0bits>
 8007b18:	9900      	ldr	r1, [sp, #0]
 8007b1a:	b300      	cbz	r0, 8007b5e <__d2b+0x82>
 8007b1c:	9a01      	ldr	r2, [sp, #4]
 8007b1e:	f1c0 0320 	rsb	r3, r0, #32
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	430b      	orrs	r3, r1
 8007b28:	40c2      	lsrs	r2, r0
 8007b2a:	6163      	str	r3, [r4, #20]
 8007b2c:	9201      	str	r2, [sp, #4]
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	61a3      	str	r3, [r4, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bf14      	ite	ne
 8007b36:	2202      	movne	r2, #2
 8007b38:	2201      	moveq	r2, #1
 8007b3a:	6122      	str	r2, [r4, #16]
 8007b3c:	b1d5      	cbz	r5, 8007b74 <__d2b+0x98>
 8007b3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b42:	4405      	add	r5, r0
 8007b44:	f8c9 5000 	str.w	r5, [r9]
 8007b48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b4c:	f8c8 0000 	str.w	r0, [r8]
 8007b50:	4620      	mov	r0, r4
 8007b52:	b003      	add	sp, #12
 8007b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b5c:	e7d5      	b.n	8007b0a <__d2b+0x2e>
 8007b5e:	6161      	str	r1, [r4, #20]
 8007b60:	e7e5      	b.n	8007b2e <__d2b+0x52>
 8007b62:	a801      	add	r0, sp, #4
 8007b64:	f7ff fd5a 	bl	800761c <__lo0bits>
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	6163      	str	r3, [r4, #20]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	6122      	str	r2, [r4, #16]
 8007b70:	3020      	adds	r0, #32
 8007b72:	e7e3      	b.n	8007b3c <__d2b+0x60>
 8007b74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b7c:	f8c9 0000 	str.w	r0, [r9]
 8007b80:	6918      	ldr	r0, [r3, #16]
 8007b82:	f7ff fd2b 	bl	80075dc <__hi0bits>
 8007b86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b8a:	e7df      	b.n	8007b4c <__d2b+0x70>
 8007b8c:	0800875b 	.word	0x0800875b
 8007b90:	0800876c 	.word	0x0800876c

08007b94 <_calloc_r>:
 8007b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b96:	fba1 2402 	umull	r2, r4, r1, r2
 8007b9a:	b94c      	cbnz	r4, 8007bb0 <_calloc_r+0x1c>
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	9201      	str	r2, [sp, #4]
 8007ba0:	f7fd fe30 	bl	8005804 <_malloc_r>
 8007ba4:	9a01      	ldr	r2, [sp, #4]
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	b930      	cbnz	r0, 8007bb8 <_calloc_r+0x24>
 8007baa:	4628      	mov	r0, r5
 8007bac:	b003      	add	sp, #12
 8007bae:	bd30      	pop	{r4, r5, pc}
 8007bb0:	220c      	movs	r2, #12
 8007bb2:	6002      	str	r2, [r0, #0]
 8007bb4:	2500      	movs	r5, #0
 8007bb6:	e7f8      	b.n	8007baa <_calloc_r+0x16>
 8007bb8:	4621      	mov	r1, r4
 8007bba:	f7fd fdfa 	bl	80057b2 <memset>
 8007bbe:	e7f4      	b.n	8007baa <_calloc_r+0x16>

08007bc0 <_free_r>:
 8007bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bc2:	2900      	cmp	r1, #0
 8007bc4:	d044      	beq.n	8007c50 <_free_r+0x90>
 8007bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bca:	9001      	str	r0, [sp, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f1a1 0404 	sub.w	r4, r1, #4
 8007bd2:	bfb8      	it	lt
 8007bd4:	18e4      	addlt	r4, r4, r3
 8007bd6:	f7ff fc4d 	bl	8007474 <__malloc_lock>
 8007bda:	4a1e      	ldr	r2, [pc, #120]	; (8007c54 <_free_r+0x94>)
 8007bdc:	9801      	ldr	r0, [sp, #4]
 8007bde:	6813      	ldr	r3, [r2, #0]
 8007be0:	b933      	cbnz	r3, 8007bf0 <_free_r+0x30>
 8007be2:	6063      	str	r3, [r4, #4]
 8007be4:	6014      	str	r4, [r2, #0]
 8007be6:	b003      	add	sp, #12
 8007be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bec:	f7ff bc48 	b.w	8007480 <__malloc_unlock>
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d908      	bls.n	8007c06 <_free_r+0x46>
 8007bf4:	6825      	ldr	r5, [r4, #0]
 8007bf6:	1961      	adds	r1, r4, r5
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	bf01      	itttt	eq
 8007bfc:	6819      	ldreq	r1, [r3, #0]
 8007bfe:	685b      	ldreq	r3, [r3, #4]
 8007c00:	1949      	addeq	r1, r1, r5
 8007c02:	6021      	streq	r1, [r4, #0]
 8007c04:	e7ed      	b.n	8007be2 <_free_r+0x22>
 8007c06:	461a      	mov	r2, r3
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	b10b      	cbz	r3, 8007c10 <_free_r+0x50>
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	d9fa      	bls.n	8007c06 <_free_r+0x46>
 8007c10:	6811      	ldr	r1, [r2, #0]
 8007c12:	1855      	adds	r5, r2, r1
 8007c14:	42a5      	cmp	r5, r4
 8007c16:	d10b      	bne.n	8007c30 <_free_r+0x70>
 8007c18:	6824      	ldr	r4, [r4, #0]
 8007c1a:	4421      	add	r1, r4
 8007c1c:	1854      	adds	r4, r2, r1
 8007c1e:	42a3      	cmp	r3, r4
 8007c20:	6011      	str	r1, [r2, #0]
 8007c22:	d1e0      	bne.n	8007be6 <_free_r+0x26>
 8007c24:	681c      	ldr	r4, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	6053      	str	r3, [r2, #4]
 8007c2a:	4421      	add	r1, r4
 8007c2c:	6011      	str	r1, [r2, #0]
 8007c2e:	e7da      	b.n	8007be6 <_free_r+0x26>
 8007c30:	d902      	bls.n	8007c38 <_free_r+0x78>
 8007c32:	230c      	movs	r3, #12
 8007c34:	6003      	str	r3, [r0, #0]
 8007c36:	e7d6      	b.n	8007be6 <_free_r+0x26>
 8007c38:	6825      	ldr	r5, [r4, #0]
 8007c3a:	1961      	adds	r1, r4, r5
 8007c3c:	428b      	cmp	r3, r1
 8007c3e:	bf04      	itt	eq
 8007c40:	6819      	ldreq	r1, [r3, #0]
 8007c42:	685b      	ldreq	r3, [r3, #4]
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	bf04      	itt	eq
 8007c48:	1949      	addeq	r1, r1, r5
 8007c4a:	6021      	streq	r1, [r4, #0]
 8007c4c:	6054      	str	r4, [r2, #4]
 8007c4e:	e7ca      	b.n	8007be6 <_free_r+0x26>
 8007c50:	b003      	add	sp, #12
 8007c52:	bd30      	pop	{r4, r5, pc}
 8007c54:	20000650 	.word	0x20000650

08007c58 <__ssputs_r>:
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	688e      	ldr	r6, [r1, #8]
 8007c5e:	429e      	cmp	r6, r3
 8007c60:	4682      	mov	sl, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	4690      	mov	r8, r2
 8007c66:	461f      	mov	r7, r3
 8007c68:	d838      	bhi.n	8007cdc <__ssputs_r+0x84>
 8007c6a:	898a      	ldrh	r2, [r1, #12]
 8007c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c70:	d032      	beq.n	8007cd8 <__ssputs_r+0x80>
 8007c72:	6825      	ldr	r5, [r4, #0]
 8007c74:	6909      	ldr	r1, [r1, #16]
 8007c76:	eba5 0901 	sub.w	r9, r5, r1
 8007c7a:	6965      	ldr	r5, [r4, #20]
 8007c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c84:	3301      	adds	r3, #1
 8007c86:	444b      	add	r3, r9
 8007c88:	106d      	asrs	r5, r5, #1
 8007c8a:	429d      	cmp	r5, r3
 8007c8c:	bf38      	it	cc
 8007c8e:	461d      	movcc	r5, r3
 8007c90:	0553      	lsls	r3, r2, #21
 8007c92:	d531      	bpl.n	8007cf8 <__ssputs_r+0xa0>
 8007c94:	4629      	mov	r1, r5
 8007c96:	f7fd fdb5 	bl	8005804 <_malloc_r>
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	b950      	cbnz	r0, 8007cb4 <__ssputs_r+0x5c>
 8007c9e:	230c      	movs	r3, #12
 8007ca0:	f8ca 3000 	str.w	r3, [sl]
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb4:	6921      	ldr	r1, [r4, #16]
 8007cb6:	464a      	mov	r2, r9
 8007cb8:	f7fd fd6d 	bl	8005796 <memcpy>
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	6126      	str	r6, [r4, #16]
 8007cca:	6165      	str	r5, [r4, #20]
 8007ccc:	444e      	add	r6, r9
 8007cce:	eba5 0509 	sub.w	r5, r5, r9
 8007cd2:	6026      	str	r6, [r4, #0]
 8007cd4:	60a5      	str	r5, [r4, #8]
 8007cd6:	463e      	mov	r6, r7
 8007cd8:	42be      	cmp	r6, r7
 8007cda:	d900      	bls.n	8007cde <__ssputs_r+0x86>
 8007cdc:	463e      	mov	r6, r7
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	4641      	mov	r1, r8
 8007ce4:	f000 fabc 	bl	8008260 <memmove>
 8007ce8:	68a3      	ldr	r3, [r4, #8]
 8007cea:	1b9b      	subs	r3, r3, r6
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	4433      	add	r3, r6
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e7db      	b.n	8007cb0 <__ssputs_r+0x58>
 8007cf8:	462a      	mov	r2, r5
 8007cfa:	f000 facb 	bl	8008294 <_realloc_r>
 8007cfe:	4606      	mov	r6, r0
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d1e1      	bne.n	8007cc8 <__ssputs_r+0x70>
 8007d04:	6921      	ldr	r1, [r4, #16]
 8007d06:	4650      	mov	r0, sl
 8007d08:	f7ff ff5a 	bl	8007bc0 <_free_r>
 8007d0c:	e7c7      	b.n	8007c9e <__ssputs_r+0x46>
	...

08007d10 <_svfiprintf_r>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	4698      	mov	r8, r3
 8007d16:	898b      	ldrh	r3, [r1, #12]
 8007d18:	061b      	lsls	r3, r3, #24
 8007d1a:	b09d      	sub	sp, #116	; 0x74
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	460d      	mov	r5, r1
 8007d20:	4614      	mov	r4, r2
 8007d22:	d50e      	bpl.n	8007d42 <_svfiprintf_r+0x32>
 8007d24:	690b      	ldr	r3, [r1, #16]
 8007d26:	b963      	cbnz	r3, 8007d42 <_svfiprintf_r+0x32>
 8007d28:	2140      	movs	r1, #64	; 0x40
 8007d2a:	f7fd fd6b 	bl	8005804 <_malloc_r>
 8007d2e:	6028      	str	r0, [r5, #0]
 8007d30:	6128      	str	r0, [r5, #16]
 8007d32:	b920      	cbnz	r0, 8007d3e <_svfiprintf_r+0x2e>
 8007d34:	230c      	movs	r3, #12
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	e0d1      	b.n	8007ee2 <_svfiprintf_r+0x1d2>
 8007d3e:	2340      	movs	r3, #64	; 0x40
 8007d40:	616b      	str	r3, [r5, #20]
 8007d42:	2300      	movs	r3, #0
 8007d44:	9309      	str	r3, [sp, #36]	; 0x24
 8007d46:	2320      	movs	r3, #32
 8007d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d50:	2330      	movs	r3, #48	; 0x30
 8007d52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007efc <_svfiprintf_r+0x1ec>
 8007d56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d5a:	f04f 0901 	mov.w	r9, #1
 8007d5e:	4623      	mov	r3, r4
 8007d60:	469a      	mov	sl, r3
 8007d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d66:	b10a      	cbz	r2, 8007d6c <_svfiprintf_r+0x5c>
 8007d68:	2a25      	cmp	r2, #37	; 0x25
 8007d6a:	d1f9      	bne.n	8007d60 <_svfiprintf_r+0x50>
 8007d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d70:	d00b      	beq.n	8007d8a <_svfiprintf_r+0x7a>
 8007d72:	465b      	mov	r3, fp
 8007d74:	4622      	mov	r2, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f7ff ff6d 	bl	8007c58 <__ssputs_r>
 8007d7e:	3001      	adds	r0, #1
 8007d80:	f000 80aa 	beq.w	8007ed8 <_svfiprintf_r+0x1c8>
 8007d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d86:	445a      	add	r2, fp
 8007d88:	9209      	str	r2, [sp, #36]	; 0x24
 8007d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 80a2 	beq.w	8007ed8 <_svfiprintf_r+0x1c8>
 8007d94:	2300      	movs	r3, #0
 8007d96:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d9e:	f10a 0a01 	add.w	sl, sl, #1
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	9307      	str	r3, [sp, #28]
 8007da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007daa:	931a      	str	r3, [sp, #104]	; 0x68
 8007dac:	4654      	mov	r4, sl
 8007dae:	2205      	movs	r2, #5
 8007db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db4:	4851      	ldr	r0, [pc, #324]	; (8007efc <_svfiprintf_r+0x1ec>)
 8007db6:	f7f8 fa13 	bl	80001e0 <memchr>
 8007dba:	9a04      	ldr	r2, [sp, #16]
 8007dbc:	b9d8      	cbnz	r0, 8007df6 <_svfiprintf_r+0xe6>
 8007dbe:	06d0      	lsls	r0, r2, #27
 8007dc0:	bf44      	itt	mi
 8007dc2:	2320      	movmi	r3, #32
 8007dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc8:	0711      	lsls	r1, r2, #28
 8007dca:	bf44      	itt	mi
 8007dcc:	232b      	movmi	r3, #43	; 0x2b
 8007dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd8:	d015      	beq.n	8007e06 <_svfiprintf_r+0xf6>
 8007dda:	9a07      	ldr	r2, [sp, #28]
 8007ddc:	4654      	mov	r4, sl
 8007dde:	2000      	movs	r0, #0
 8007de0:	f04f 0c0a 	mov.w	ip, #10
 8007de4:	4621      	mov	r1, r4
 8007de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dea:	3b30      	subs	r3, #48	; 0x30
 8007dec:	2b09      	cmp	r3, #9
 8007dee:	d94e      	bls.n	8007e8e <_svfiprintf_r+0x17e>
 8007df0:	b1b0      	cbz	r0, 8007e20 <_svfiprintf_r+0x110>
 8007df2:	9207      	str	r2, [sp, #28]
 8007df4:	e014      	b.n	8007e20 <_svfiprintf_r+0x110>
 8007df6:	eba0 0308 	sub.w	r3, r0, r8
 8007dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	9304      	str	r3, [sp, #16]
 8007e02:	46a2      	mov	sl, r4
 8007e04:	e7d2      	b.n	8007dac <_svfiprintf_r+0x9c>
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	1d19      	adds	r1, r3, #4
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	9103      	str	r1, [sp, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bfbb      	ittet	lt
 8007e12:	425b      	neglt	r3, r3
 8007e14:	f042 0202 	orrlt.w	r2, r2, #2
 8007e18:	9307      	strge	r3, [sp, #28]
 8007e1a:	9307      	strlt	r3, [sp, #28]
 8007e1c:	bfb8      	it	lt
 8007e1e:	9204      	strlt	r2, [sp, #16]
 8007e20:	7823      	ldrb	r3, [r4, #0]
 8007e22:	2b2e      	cmp	r3, #46	; 0x2e
 8007e24:	d10c      	bne.n	8007e40 <_svfiprintf_r+0x130>
 8007e26:	7863      	ldrb	r3, [r4, #1]
 8007e28:	2b2a      	cmp	r3, #42	; 0x2a
 8007e2a:	d135      	bne.n	8007e98 <_svfiprintf_r+0x188>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	1d1a      	adds	r2, r3, #4
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	9203      	str	r2, [sp, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bfb8      	it	lt
 8007e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e3c:	3402      	adds	r4, #2
 8007e3e:	9305      	str	r3, [sp, #20]
 8007e40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f0c <_svfiprintf_r+0x1fc>
 8007e44:	7821      	ldrb	r1, [r4, #0]
 8007e46:	2203      	movs	r2, #3
 8007e48:	4650      	mov	r0, sl
 8007e4a:	f7f8 f9c9 	bl	80001e0 <memchr>
 8007e4e:	b140      	cbz	r0, 8007e62 <_svfiprintf_r+0x152>
 8007e50:	2340      	movs	r3, #64	; 0x40
 8007e52:	eba0 000a 	sub.w	r0, r0, sl
 8007e56:	fa03 f000 	lsl.w	r0, r3, r0
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	4303      	orrs	r3, r0
 8007e5e:	3401      	adds	r4, #1
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e66:	4826      	ldr	r0, [pc, #152]	; (8007f00 <_svfiprintf_r+0x1f0>)
 8007e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e6c:	2206      	movs	r2, #6
 8007e6e:	f7f8 f9b7 	bl	80001e0 <memchr>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d038      	beq.n	8007ee8 <_svfiprintf_r+0x1d8>
 8007e76:	4b23      	ldr	r3, [pc, #140]	; (8007f04 <_svfiprintf_r+0x1f4>)
 8007e78:	bb1b      	cbnz	r3, 8007ec2 <_svfiprintf_r+0x1b2>
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	3307      	adds	r3, #7
 8007e7e:	f023 0307 	bic.w	r3, r3, #7
 8007e82:	3308      	adds	r3, #8
 8007e84:	9303      	str	r3, [sp, #12]
 8007e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e88:	4433      	add	r3, r6
 8007e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8c:	e767      	b.n	8007d5e <_svfiprintf_r+0x4e>
 8007e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e92:	460c      	mov	r4, r1
 8007e94:	2001      	movs	r0, #1
 8007e96:	e7a5      	b.n	8007de4 <_svfiprintf_r+0xd4>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	9305      	str	r3, [sp, #20]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	f04f 0c0a 	mov.w	ip, #10
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eaa:	3a30      	subs	r2, #48	; 0x30
 8007eac:	2a09      	cmp	r2, #9
 8007eae:	d903      	bls.n	8007eb8 <_svfiprintf_r+0x1a8>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0c5      	beq.n	8007e40 <_svfiprintf_r+0x130>
 8007eb4:	9105      	str	r1, [sp, #20]
 8007eb6:	e7c3      	b.n	8007e40 <_svfiprintf_r+0x130>
 8007eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e7f0      	b.n	8007ea4 <_svfiprintf_r+0x194>
 8007ec2:	ab03      	add	r3, sp, #12
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	; (8007f08 <_svfiprintf_r+0x1f8>)
 8007eca:	a904      	add	r1, sp, #16
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7fd fdad 	bl	8005a2c <_printf_float>
 8007ed2:	1c42      	adds	r2, r0, #1
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	d1d6      	bne.n	8007e86 <_svfiprintf_r+0x176>
 8007ed8:	89ab      	ldrh	r3, [r5, #12]
 8007eda:	065b      	lsls	r3, r3, #25
 8007edc:	f53f af2c 	bmi.w	8007d38 <_svfiprintf_r+0x28>
 8007ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee2:	b01d      	add	sp, #116	; 0x74
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	ab03      	add	r3, sp, #12
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	462a      	mov	r2, r5
 8007eee:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <_svfiprintf_r+0x1f8>)
 8007ef0:	a904      	add	r1, sp, #16
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7fe f83e 	bl	8005f74 <_printf_i>
 8007ef8:	e7eb      	b.n	8007ed2 <_svfiprintf_r+0x1c2>
 8007efa:	bf00      	nop
 8007efc:	080088c4 	.word	0x080088c4
 8007f00:	080088ce 	.word	0x080088ce
 8007f04:	08005a2d 	.word	0x08005a2d
 8007f08:	08007c59 	.word	0x08007c59
 8007f0c:	080088ca 	.word	0x080088ca

08007f10 <__sfputc_r>:
 8007f10:	6893      	ldr	r3, [r2, #8]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	b410      	push	{r4}
 8007f18:	6093      	str	r3, [r2, #8]
 8007f1a:	da08      	bge.n	8007f2e <__sfputc_r+0x1e>
 8007f1c:	6994      	ldr	r4, [r2, #24]
 8007f1e:	42a3      	cmp	r3, r4
 8007f20:	db01      	blt.n	8007f26 <__sfputc_r+0x16>
 8007f22:	290a      	cmp	r1, #10
 8007f24:	d103      	bne.n	8007f2e <__sfputc_r+0x1e>
 8007f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f2a:	f7fe b9d1 	b.w	80062d0 <__swbuf_r>
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	1c58      	adds	r0, r3, #1
 8007f32:	6010      	str	r0, [r2, #0]
 8007f34:	7019      	strb	r1, [r3, #0]
 8007f36:	4608      	mov	r0, r1
 8007f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <__sfputs_r>:
 8007f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f40:	4606      	mov	r6, r0
 8007f42:	460f      	mov	r7, r1
 8007f44:	4614      	mov	r4, r2
 8007f46:	18d5      	adds	r5, r2, r3
 8007f48:	42ac      	cmp	r4, r5
 8007f4a:	d101      	bne.n	8007f50 <__sfputs_r+0x12>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e007      	b.n	8007f60 <__sfputs_r+0x22>
 8007f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f54:	463a      	mov	r2, r7
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff ffda 	bl	8007f10 <__sfputc_r>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d1f3      	bne.n	8007f48 <__sfputs_r+0xa>
 8007f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f64 <_vfiprintf_r>:
 8007f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f68:	460d      	mov	r5, r1
 8007f6a:	b09d      	sub	sp, #116	; 0x74
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	4698      	mov	r8, r3
 8007f70:	4606      	mov	r6, r0
 8007f72:	b118      	cbz	r0, 8007f7c <_vfiprintf_r+0x18>
 8007f74:	6983      	ldr	r3, [r0, #24]
 8007f76:	b90b      	cbnz	r3, 8007f7c <_vfiprintf_r+0x18>
 8007f78:	f7fd fb48 	bl	800560c <__sinit>
 8007f7c:	4b89      	ldr	r3, [pc, #548]	; (80081a4 <_vfiprintf_r+0x240>)
 8007f7e:	429d      	cmp	r5, r3
 8007f80:	d11b      	bne.n	8007fba <_vfiprintf_r+0x56>
 8007f82:	6875      	ldr	r5, [r6, #4]
 8007f84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f86:	07d9      	lsls	r1, r3, #31
 8007f88:	d405      	bmi.n	8007f96 <_vfiprintf_r+0x32>
 8007f8a:	89ab      	ldrh	r3, [r5, #12]
 8007f8c:	059a      	lsls	r2, r3, #22
 8007f8e:	d402      	bmi.n	8007f96 <_vfiprintf_r+0x32>
 8007f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f92:	f7fd fbfe 	bl	8005792 <__retarget_lock_acquire_recursive>
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	071b      	lsls	r3, r3, #28
 8007f9a:	d501      	bpl.n	8007fa0 <_vfiprintf_r+0x3c>
 8007f9c:	692b      	ldr	r3, [r5, #16]
 8007f9e:	b9eb      	cbnz	r3, 8007fdc <_vfiprintf_r+0x78>
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7fe f9f8 	bl	8006398 <__swsetup_r>
 8007fa8:	b1c0      	cbz	r0, 8007fdc <_vfiprintf_r+0x78>
 8007faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fac:	07dc      	lsls	r4, r3, #31
 8007fae:	d50e      	bpl.n	8007fce <_vfiprintf_r+0x6a>
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	b01d      	add	sp, #116	; 0x74
 8007fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fba:	4b7b      	ldr	r3, [pc, #492]	; (80081a8 <_vfiprintf_r+0x244>)
 8007fbc:	429d      	cmp	r5, r3
 8007fbe:	d101      	bne.n	8007fc4 <_vfiprintf_r+0x60>
 8007fc0:	68b5      	ldr	r5, [r6, #8]
 8007fc2:	e7df      	b.n	8007f84 <_vfiprintf_r+0x20>
 8007fc4:	4b79      	ldr	r3, [pc, #484]	; (80081ac <_vfiprintf_r+0x248>)
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	bf08      	it	eq
 8007fca:	68f5      	ldreq	r5, [r6, #12]
 8007fcc:	e7da      	b.n	8007f84 <_vfiprintf_r+0x20>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	0598      	lsls	r0, r3, #22
 8007fd2:	d4ed      	bmi.n	8007fb0 <_vfiprintf_r+0x4c>
 8007fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fd6:	f7fd fbdd 	bl	8005794 <__retarget_lock_release_recursive>
 8007fda:	e7e9      	b.n	8007fb0 <_vfiprintf_r+0x4c>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fea:	2330      	movs	r3, #48	; 0x30
 8007fec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081b0 <_vfiprintf_r+0x24c>
 8007ff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ff4:	f04f 0901 	mov.w	r9, #1
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	469a      	mov	sl, r3
 8007ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008000:	b10a      	cbz	r2, 8008006 <_vfiprintf_r+0xa2>
 8008002:	2a25      	cmp	r2, #37	; 0x25
 8008004:	d1f9      	bne.n	8007ffa <_vfiprintf_r+0x96>
 8008006:	ebba 0b04 	subs.w	fp, sl, r4
 800800a:	d00b      	beq.n	8008024 <_vfiprintf_r+0xc0>
 800800c:	465b      	mov	r3, fp
 800800e:	4622      	mov	r2, r4
 8008010:	4629      	mov	r1, r5
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff ff93 	bl	8007f3e <__sfputs_r>
 8008018:	3001      	adds	r0, #1
 800801a:	f000 80aa 	beq.w	8008172 <_vfiprintf_r+0x20e>
 800801e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008020:	445a      	add	r2, fp
 8008022:	9209      	str	r2, [sp, #36]	; 0x24
 8008024:	f89a 3000 	ldrb.w	r3, [sl]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 80a2 	beq.w	8008172 <_vfiprintf_r+0x20e>
 800802e:	2300      	movs	r3, #0
 8008030:	f04f 32ff 	mov.w	r2, #4294967295
 8008034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008038:	f10a 0a01 	add.w	sl, sl, #1
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	9307      	str	r3, [sp, #28]
 8008040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008044:	931a      	str	r3, [sp, #104]	; 0x68
 8008046:	4654      	mov	r4, sl
 8008048:	2205      	movs	r2, #5
 800804a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804e:	4858      	ldr	r0, [pc, #352]	; (80081b0 <_vfiprintf_r+0x24c>)
 8008050:	f7f8 f8c6 	bl	80001e0 <memchr>
 8008054:	9a04      	ldr	r2, [sp, #16]
 8008056:	b9d8      	cbnz	r0, 8008090 <_vfiprintf_r+0x12c>
 8008058:	06d1      	lsls	r1, r2, #27
 800805a:	bf44      	itt	mi
 800805c:	2320      	movmi	r3, #32
 800805e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008062:	0713      	lsls	r3, r2, #28
 8008064:	bf44      	itt	mi
 8008066:	232b      	movmi	r3, #43	; 0x2b
 8008068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800806c:	f89a 3000 	ldrb.w	r3, [sl]
 8008070:	2b2a      	cmp	r3, #42	; 0x2a
 8008072:	d015      	beq.n	80080a0 <_vfiprintf_r+0x13c>
 8008074:	9a07      	ldr	r2, [sp, #28]
 8008076:	4654      	mov	r4, sl
 8008078:	2000      	movs	r0, #0
 800807a:	f04f 0c0a 	mov.w	ip, #10
 800807e:	4621      	mov	r1, r4
 8008080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008084:	3b30      	subs	r3, #48	; 0x30
 8008086:	2b09      	cmp	r3, #9
 8008088:	d94e      	bls.n	8008128 <_vfiprintf_r+0x1c4>
 800808a:	b1b0      	cbz	r0, 80080ba <_vfiprintf_r+0x156>
 800808c:	9207      	str	r2, [sp, #28]
 800808e:	e014      	b.n	80080ba <_vfiprintf_r+0x156>
 8008090:	eba0 0308 	sub.w	r3, r0, r8
 8008094:	fa09 f303 	lsl.w	r3, r9, r3
 8008098:	4313      	orrs	r3, r2
 800809a:	9304      	str	r3, [sp, #16]
 800809c:	46a2      	mov	sl, r4
 800809e:	e7d2      	b.n	8008046 <_vfiprintf_r+0xe2>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	1d19      	adds	r1, r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	9103      	str	r1, [sp, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bfbb      	ittet	lt
 80080ac:	425b      	neglt	r3, r3
 80080ae:	f042 0202 	orrlt.w	r2, r2, #2
 80080b2:	9307      	strge	r3, [sp, #28]
 80080b4:	9307      	strlt	r3, [sp, #28]
 80080b6:	bfb8      	it	lt
 80080b8:	9204      	strlt	r2, [sp, #16]
 80080ba:	7823      	ldrb	r3, [r4, #0]
 80080bc:	2b2e      	cmp	r3, #46	; 0x2e
 80080be:	d10c      	bne.n	80080da <_vfiprintf_r+0x176>
 80080c0:	7863      	ldrb	r3, [r4, #1]
 80080c2:	2b2a      	cmp	r3, #42	; 0x2a
 80080c4:	d135      	bne.n	8008132 <_vfiprintf_r+0x1ce>
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	1d1a      	adds	r2, r3, #4
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	9203      	str	r2, [sp, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bfb8      	it	lt
 80080d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80080d6:	3402      	adds	r4, #2
 80080d8:	9305      	str	r3, [sp, #20]
 80080da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081c0 <_vfiprintf_r+0x25c>
 80080de:	7821      	ldrb	r1, [r4, #0]
 80080e0:	2203      	movs	r2, #3
 80080e2:	4650      	mov	r0, sl
 80080e4:	f7f8 f87c 	bl	80001e0 <memchr>
 80080e8:	b140      	cbz	r0, 80080fc <_vfiprintf_r+0x198>
 80080ea:	2340      	movs	r3, #64	; 0x40
 80080ec:	eba0 000a 	sub.w	r0, r0, sl
 80080f0:	fa03 f000 	lsl.w	r0, r3, r0
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	4303      	orrs	r3, r0
 80080f8:	3401      	adds	r4, #1
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008100:	482c      	ldr	r0, [pc, #176]	; (80081b4 <_vfiprintf_r+0x250>)
 8008102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008106:	2206      	movs	r2, #6
 8008108:	f7f8 f86a 	bl	80001e0 <memchr>
 800810c:	2800      	cmp	r0, #0
 800810e:	d03f      	beq.n	8008190 <_vfiprintf_r+0x22c>
 8008110:	4b29      	ldr	r3, [pc, #164]	; (80081b8 <_vfiprintf_r+0x254>)
 8008112:	bb1b      	cbnz	r3, 800815c <_vfiprintf_r+0x1f8>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	3307      	adds	r3, #7
 8008118:	f023 0307 	bic.w	r3, r3, #7
 800811c:	3308      	adds	r3, #8
 800811e:	9303      	str	r3, [sp, #12]
 8008120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008122:	443b      	add	r3, r7
 8008124:	9309      	str	r3, [sp, #36]	; 0x24
 8008126:	e767      	b.n	8007ff8 <_vfiprintf_r+0x94>
 8008128:	fb0c 3202 	mla	r2, ip, r2, r3
 800812c:	460c      	mov	r4, r1
 800812e:	2001      	movs	r0, #1
 8008130:	e7a5      	b.n	800807e <_vfiprintf_r+0x11a>
 8008132:	2300      	movs	r3, #0
 8008134:	3401      	adds	r4, #1
 8008136:	9305      	str	r3, [sp, #20]
 8008138:	4619      	mov	r1, r3
 800813a:	f04f 0c0a 	mov.w	ip, #10
 800813e:	4620      	mov	r0, r4
 8008140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008144:	3a30      	subs	r2, #48	; 0x30
 8008146:	2a09      	cmp	r2, #9
 8008148:	d903      	bls.n	8008152 <_vfiprintf_r+0x1ee>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0c5      	beq.n	80080da <_vfiprintf_r+0x176>
 800814e:	9105      	str	r1, [sp, #20]
 8008150:	e7c3      	b.n	80080da <_vfiprintf_r+0x176>
 8008152:	fb0c 2101 	mla	r1, ip, r1, r2
 8008156:	4604      	mov	r4, r0
 8008158:	2301      	movs	r3, #1
 800815a:	e7f0      	b.n	800813e <_vfiprintf_r+0x1da>
 800815c:	ab03      	add	r3, sp, #12
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	462a      	mov	r2, r5
 8008162:	4b16      	ldr	r3, [pc, #88]	; (80081bc <_vfiprintf_r+0x258>)
 8008164:	a904      	add	r1, sp, #16
 8008166:	4630      	mov	r0, r6
 8008168:	f7fd fc60 	bl	8005a2c <_printf_float>
 800816c:	4607      	mov	r7, r0
 800816e:	1c78      	adds	r0, r7, #1
 8008170:	d1d6      	bne.n	8008120 <_vfiprintf_r+0x1bc>
 8008172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008174:	07d9      	lsls	r1, r3, #31
 8008176:	d405      	bmi.n	8008184 <_vfiprintf_r+0x220>
 8008178:	89ab      	ldrh	r3, [r5, #12]
 800817a:	059a      	lsls	r2, r3, #22
 800817c:	d402      	bmi.n	8008184 <_vfiprintf_r+0x220>
 800817e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008180:	f7fd fb08 	bl	8005794 <__retarget_lock_release_recursive>
 8008184:	89ab      	ldrh	r3, [r5, #12]
 8008186:	065b      	lsls	r3, r3, #25
 8008188:	f53f af12 	bmi.w	8007fb0 <_vfiprintf_r+0x4c>
 800818c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800818e:	e711      	b.n	8007fb4 <_vfiprintf_r+0x50>
 8008190:	ab03      	add	r3, sp, #12
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	462a      	mov	r2, r5
 8008196:	4b09      	ldr	r3, [pc, #36]	; (80081bc <_vfiprintf_r+0x258>)
 8008198:	a904      	add	r1, sp, #16
 800819a:	4630      	mov	r0, r6
 800819c:	f7fd feea 	bl	8005f74 <_printf_i>
 80081a0:	e7e4      	b.n	800816c <_vfiprintf_r+0x208>
 80081a2:	bf00      	nop
 80081a4:	08008628 	.word	0x08008628
 80081a8:	08008648 	.word	0x08008648
 80081ac:	08008608 	.word	0x08008608
 80081b0:	080088c4 	.word	0x080088c4
 80081b4:	080088ce 	.word	0x080088ce
 80081b8:	08005a2d 	.word	0x08005a2d
 80081bc:	08007f3f 	.word	0x08007f3f
 80081c0:	080088ca 	.word	0x080088ca

080081c4 <_read_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d07      	ldr	r5, [pc, #28]	; (80081e4 <_read_r+0x20>)
 80081c8:	4604      	mov	r4, r0
 80081ca:	4608      	mov	r0, r1
 80081cc:	4611      	mov	r1, r2
 80081ce:	2200      	movs	r2, #0
 80081d0:	602a      	str	r2, [r5, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	f7fd f8ad 	bl	8005332 <_read>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_read_r+0x1e>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_read_r+0x1e>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	20000658 	.word	0x20000658

080081e8 <abort>:
 80081e8:	b508      	push	{r3, lr}
 80081ea:	2006      	movs	r0, #6
 80081ec:	f000 f8aa 	bl	8008344 <raise>
 80081f0:	2001      	movs	r0, #1
 80081f2:	f000 f8e1 	bl	80083b8 <_exit>
	...

080081f8 <_fstat_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	; (8008218 <_fstat_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7fd f978 	bl	80054fa <_fstat>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_fstat_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_fstat_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	20000658 	.word	0x20000658

0800821c <_isatty_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	; (8008238 <_isatty_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7fd f975 	bl	8005516 <_isatty>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_isatty_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_isatty_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20000658 	.word	0x20000658

0800823c <__ascii_mbtowc>:
 800823c:	b082      	sub	sp, #8
 800823e:	b901      	cbnz	r1, 8008242 <__ascii_mbtowc+0x6>
 8008240:	a901      	add	r1, sp, #4
 8008242:	b142      	cbz	r2, 8008256 <__ascii_mbtowc+0x1a>
 8008244:	b14b      	cbz	r3, 800825a <__ascii_mbtowc+0x1e>
 8008246:	7813      	ldrb	r3, [r2, #0]
 8008248:	600b      	str	r3, [r1, #0]
 800824a:	7812      	ldrb	r2, [r2, #0]
 800824c:	1e10      	subs	r0, r2, #0
 800824e:	bf18      	it	ne
 8008250:	2001      	movne	r0, #1
 8008252:	b002      	add	sp, #8
 8008254:	4770      	bx	lr
 8008256:	4610      	mov	r0, r2
 8008258:	e7fb      	b.n	8008252 <__ascii_mbtowc+0x16>
 800825a:	f06f 0001 	mvn.w	r0, #1
 800825e:	e7f8      	b.n	8008252 <__ascii_mbtowc+0x16>

08008260 <memmove>:
 8008260:	4288      	cmp	r0, r1
 8008262:	b510      	push	{r4, lr}
 8008264:	eb01 0402 	add.w	r4, r1, r2
 8008268:	d902      	bls.n	8008270 <memmove+0x10>
 800826a:	4284      	cmp	r4, r0
 800826c:	4623      	mov	r3, r4
 800826e:	d807      	bhi.n	8008280 <memmove+0x20>
 8008270:	1e43      	subs	r3, r0, #1
 8008272:	42a1      	cmp	r1, r4
 8008274:	d008      	beq.n	8008288 <memmove+0x28>
 8008276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800827a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800827e:	e7f8      	b.n	8008272 <memmove+0x12>
 8008280:	4402      	add	r2, r0
 8008282:	4601      	mov	r1, r0
 8008284:	428a      	cmp	r2, r1
 8008286:	d100      	bne.n	800828a <memmove+0x2a>
 8008288:	bd10      	pop	{r4, pc}
 800828a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800828e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008292:	e7f7      	b.n	8008284 <memmove+0x24>

08008294 <_realloc_r>:
 8008294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	4680      	mov	r8, r0
 800829a:	4614      	mov	r4, r2
 800829c:	460e      	mov	r6, r1
 800829e:	b921      	cbnz	r1, 80082aa <_realloc_r+0x16>
 80082a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a4:	4611      	mov	r1, r2
 80082a6:	f7fd baad 	b.w	8005804 <_malloc_r>
 80082aa:	b92a      	cbnz	r2, 80082b8 <_realloc_r+0x24>
 80082ac:	f7ff fc88 	bl	8007bc0 <_free_r>
 80082b0:	4625      	mov	r5, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b8:	f000 f86d 	bl	8008396 <_malloc_usable_size_r>
 80082bc:	4284      	cmp	r4, r0
 80082be:	4607      	mov	r7, r0
 80082c0:	d802      	bhi.n	80082c8 <_realloc_r+0x34>
 80082c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082c6:	d812      	bhi.n	80082ee <_realloc_r+0x5a>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7fd fa9a 	bl	8005804 <_malloc_r>
 80082d0:	4605      	mov	r5, r0
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d0ed      	beq.n	80082b2 <_realloc_r+0x1e>
 80082d6:	42bc      	cmp	r4, r7
 80082d8:	4622      	mov	r2, r4
 80082da:	4631      	mov	r1, r6
 80082dc:	bf28      	it	cs
 80082de:	463a      	movcs	r2, r7
 80082e0:	f7fd fa59 	bl	8005796 <memcpy>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4640      	mov	r0, r8
 80082e8:	f7ff fc6a 	bl	8007bc0 <_free_r>
 80082ec:	e7e1      	b.n	80082b2 <_realloc_r+0x1e>
 80082ee:	4635      	mov	r5, r6
 80082f0:	e7df      	b.n	80082b2 <_realloc_r+0x1e>

080082f2 <_raise_r>:
 80082f2:	291f      	cmp	r1, #31
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4604      	mov	r4, r0
 80082f8:	460d      	mov	r5, r1
 80082fa:	d904      	bls.n	8008306 <_raise_r+0x14>
 80082fc:	2316      	movs	r3, #22
 80082fe:	6003      	str	r3, [r0, #0]
 8008300:	f04f 30ff 	mov.w	r0, #4294967295
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008308:	b112      	cbz	r2, 8008310 <_raise_r+0x1e>
 800830a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800830e:	b94b      	cbnz	r3, 8008324 <_raise_r+0x32>
 8008310:	4620      	mov	r0, r4
 8008312:	f000 f831 	bl	8008378 <_getpid_r>
 8008316:	462a      	mov	r2, r5
 8008318:	4601      	mov	r1, r0
 800831a:	4620      	mov	r0, r4
 800831c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008320:	f000 b818 	b.w	8008354 <_kill_r>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d00a      	beq.n	800833e <_raise_r+0x4c>
 8008328:	1c59      	adds	r1, r3, #1
 800832a:	d103      	bne.n	8008334 <_raise_r+0x42>
 800832c:	2316      	movs	r3, #22
 800832e:	6003      	str	r3, [r0, #0]
 8008330:	2001      	movs	r0, #1
 8008332:	e7e7      	b.n	8008304 <_raise_r+0x12>
 8008334:	2400      	movs	r4, #0
 8008336:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800833a:	4628      	mov	r0, r5
 800833c:	4798      	blx	r3
 800833e:	2000      	movs	r0, #0
 8008340:	e7e0      	b.n	8008304 <_raise_r+0x12>
	...

08008344 <raise>:
 8008344:	4b02      	ldr	r3, [pc, #8]	; (8008350 <raise+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f7ff bfd2 	b.w	80082f2 <_raise_r>
 800834e:	bf00      	nop
 8008350:	200000d4 	.word	0x200000d4

08008354 <_kill_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	; (8008374 <_kill_r+0x20>)
 8008358:	2300      	movs	r3, #0
 800835a:	4604      	mov	r4, r0
 800835c:	4608      	mov	r0, r1
 800835e:	4611      	mov	r1, r2
 8008360:	602b      	str	r3, [r5, #0]
 8008362:	f000 f821 	bl	80083a8 <_kill>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d102      	bne.n	8008370 <_kill_r+0x1c>
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	b103      	cbz	r3, 8008370 <_kill_r+0x1c>
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	bd38      	pop	{r3, r4, r5, pc}
 8008372:	bf00      	nop
 8008374:	20000658 	.word	0x20000658

08008378 <_getpid_r>:
 8008378:	f7fd b89c 	b.w	80054b4 <_getpid>

0800837c <__ascii_wctomb>:
 800837c:	b149      	cbz	r1, 8008392 <__ascii_wctomb+0x16>
 800837e:	2aff      	cmp	r2, #255	; 0xff
 8008380:	bf85      	ittet	hi
 8008382:	238a      	movhi	r3, #138	; 0x8a
 8008384:	6003      	strhi	r3, [r0, #0]
 8008386:	700a      	strbls	r2, [r1, #0]
 8008388:	f04f 30ff 	movhi.w	r0, #4294967295
 800838c:	bf98      	it	ls
 800838e:	2001      	movls	r0, #1
 8008390:	4770      	bx	lr
 8008392:	4608      	mov	r0, r1
 8008394:	4770      	bx	lr

08008396 <_malloc_usable_size_r>:
 8008396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839a:	1f18      	subs	r0, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfbc      	itt	lt
 80083a0:	580b      	ldrlt	r3, [r1, r0]
 80083a2:	18c0      	addlt	r0, r0, r3
 80083a4:	4770      	bx	lr
	...

080083a8 <_kill>:
 80083a8:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <_kill+0xc>)
 80083aa:	2258      	movs	r2, #88	; 0x58
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	f04f 30ff 	mov.w	r0, #4294967295
 80083b2:	4770      	bx	lr
 80083b4:	20000658 	.word	0x20000658

080083b8 <_exit>:
 80083b8:	e7fe      	b.n	80083b8 <_exit>
	...

080083bc <_init>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	bf00      	nop
 80083c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c2:	bc08      	pop	{r3}
 80083c4:	469e      	mov	lr, r3
 80083c6:	4770      	bx	lr

080083c8 <_fini>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	bf00      	nop
 80083cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ce:	bc08      	pop	{r3}
 80083d0:	469e      	mov	lr, r3
 80083d2:	4770      	bx	lr
