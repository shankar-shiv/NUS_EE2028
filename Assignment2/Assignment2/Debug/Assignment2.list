
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08008490  08008490  00018490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ac0  08008ac0  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ac0  08008ac0  00018ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac8  08008ac8  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac8  08008ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008acc  08008acc  00018acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  08008ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200002a4  08008d74  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08008d74  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea54  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282d  00000000  00000000  0002ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  000322d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029391  00000000  00000000  00032ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a3d  00000000  00000000  0005c261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5fa7  00000000  00000000  0006dc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163c45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a5c  00000000  00000000  00163c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001686f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  00168718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a4 	.word	0x200002a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008474 	.word	0x08008474

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a8 	.word	0x200002a8
 80001cc:	08008474 	.word	0x08008474

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  External Interrupt to detect 1st button press and 2nd button press
 * @note
 * @retval	None
 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag == 0)) {
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ebc:	d10e      	bne.n	8000edc <HAL_GPIO_EXTI_Callback+0x30>
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10a      	bne.n	8000edc <HAL_GPIO_EXTI_Callback+0x30>
		flag++;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ed0:	701a      	strb	r2, [r3, #0]
		T1 = uwTick;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e011      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
	} else if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag > 0)) {
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee2:	d10d      	bne.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
		flag++;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x74>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ef6:	701a      	strb	r2, [r3, #0]
		T2 = uwTick;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x78>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x80>)
 8000efe:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == LSM6DSL_INT1_EXTI11_Pin)
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f06:	d105      	bne.n	8000f14 <HAL_GPIO_EXTI_Callback+0x68>
	{
		EXPLORATION_WARNING_STATE = 1;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x84>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
		BATTLE_WARNING_STATE = 1;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x88>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
	}
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	20000348 	.word	0x20000348
 8000f24:	200005ac 	.word	0x200005ac
 8000f28:	200002c0 	.word	0x200002c0
 8000f2c:	200002c4 	.word	0x200002c4
 8000f30:	2000034a 	.word	0x2000034a
 8000f34:	2000034c 	.word	0x2000034c

08000f38 <main>:

int main(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

	/* Reset of all peripherals */
	HAL_Init();
 8000f3c:	f002 f99a 	bl	8003274 <HAL_Init>
	MX_GPIO_Init(); // initialize PB14, pin connected to LED2
 8000f40:	f000 fe8a 	bl	8001c58 <MX_GPIO_Init>
	UART1_Init(); // initialize UART1 for UART communication
 8000f44:	f000 ff1e 	bl	8001d84 <UART1_Init>

	/* Peripheral initializations using BSP functions for all sensors*/
	BSP_ACCELERO_Init(); // initialize accelerometer
 8000f48:	f001 faa4 	bl	8002494 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();	 // initialize temperature sensor
 8000f4c:	f001 fbf2 	bl	8002734 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();	 // initialize humidity sensor
 8000f50:	f001 fb50 	bl	80025f4 <BSP_HSENSOR_Init>
	BSP_GYRO_Init();	 // initialize gyroscope
 8000f54:	f001 faf4 	bl	8002540 <BSP_GYRO_Init>
	BSP_PSENSOR_Init();	 // initialize pressure sensor
 8000f58:	f001 fbbe 	bl	80026d8 <BSP_PSENSOR_Init>
	BSP_MAGNETO_Init();	 // initialize magnetometer
 8000f5c:	f001 fb78 	bl	8002650 <BSP_MAGNETO_Init>
	acc_interrupt_config(); // initialize Accelerometer interrupt
 8000f60:	f000 fe66 	bl	8001c30 <acc_interrupt_config>

	/* Exploration Mode: Print only once*/
	//memset(message_print, 0, strlen(message_print));
	snprintf(message_print, MESSAGE_SIZE, "Entering EXPLORATION Mode \r\n");
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <main+0x9c>)
 8000f66:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f6a:	481b      	ldr	r0, [pc, #108]	; (8000fd8 <main+0xa0>)
 8000f6c:	f005 f994 	bl	8006298 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print),
 8000f70:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <main+0xa0>)
 8000f72:	f7ff f92d 	bl	80001d0 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f7e:	4916      	ldr	r1, [pc, #88]	; (8000fd8 <main+0xa0>)
 8000f80:	4816      	ldr	r0, [pc, #88]	; (8000fdc <main+0xa4>)
 8000f82:	f003 fc5f 	bl	8004844 <HAL_UART_Transmit>
			0xFFFF);

	while (1) {
		if ((flag == 1) && (uwTick - T1 > 1000)) {
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <main+0xa8>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d10d      	bne.n	8000faa <main+0x72>
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <main+0xac>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <main+0xb0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f9c:	d905      	bls.n	8000faa <main+0x72>
			// Detect a single press
			flag = 0;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <main+0xa8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
			press = 1;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <main+0xb4>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
		}

		if ((flag == 2) && (T2 - T1 < 1000)) {
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <main+0xa8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d10d      	bne.n	8000fce <main+0x96>
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <main+0xb8>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <main+0xb0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fc0:	d205      	bcs.n	8000fce <main+0x96>
			// Detect double press
			press = 2;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <main+0xb4>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	701a      	strb	r2, [r3, #0]
			flag = 0;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <main+0xa8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
		}

		mode_selection();
 8000fce:	f000 f811 	bl	8000ff4 <mode_selection>
		if ((flag == 1) && (uwTick - T1 > 1000)) {
 8000fd2:	e7d8      	b.n	8000f86 <main+0x4e>
 8000fd4:	08008490 	.word	0x08008490
 8000fd8:	20000350 	.word	0x20000350
 8000fdc:	200002c8 	.word	0x200002c8
 8000fe0:	20000348 	.word	0x20000348
 8000fe4:	200005ac 	.word	0x200005ac
 8000fe8:	200002c0 	.word	0x200002c0
 8000fec:	20000349 	.word	0x20000349
 8000ff0:	200002c4 	.word	0x200002c4

08000ff4 <mode_selection>:
 * @brief  	Selects different modes such as Exploration and Battle and selects
 *			different states such as Normal and Warning in the respective modes.
 * @note
 * @retval	None
 */
static void mode_selection() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	/* Exploration Mode */
	if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 0 && BATTLE == 0
 8000ff8:	4b65      	ldr	r3, [pc, #404]	; (8001190 <mode_selection+0x19c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d111      	bne.n	8001024 <mode_selection+0x30>
 8001000:	4b64      	ldr	r3, [pc, #400]	; (8001194 <mode_selection+0x1a0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10d      	bne.n	8001024 <mode_selection+0x30>
 8001008:	4b63      	ldr	r3, [pc, #396]	; (8001198 <mode_selection+0x1a4>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d109      	bne.n	8001024 <mode_selection+0x30>
			&& press <= 1) {
 8001010:	4b62      	ldr	r3, [pc, #392]	; (800119c <mode_selection+0x1a8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d805      	bhi.n	8001024 <mode_selection+0x30>
		// Normal state
		exploration();
 8001018:	f000 f8ca 	bl	80011b0 <exploration>
		press = 0;
 800101c:	4b5f      	ldr	r3, [pc, #380]	; (800119c <mode_selection+0x1a8>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e04a      	b.n	80010ba <mode_selection+0xc6>
	} else if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 1) {
 8001024:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <mode_selection+0x19c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d11e      	bne.n	800106a <mode_selection+0x76>
 800102c:	4b59      	ldr	r3, [pc, #356]	; (8001194 <mode_selection+0x1a0>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d11a      	bne.n	800106a <mode_selection+0x76>
		// Come to the Warning State through interrupts or polling
		exploration_warning();
 8001034:	f000 fb16 	bl	8001664 <exploration_warning>

		if (press == 1) {
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <mode_selection+0x1a8>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10c      	bne.n	800105a <mode_selection+0x66>
			// Clear the warning and go back to Exploration mode
			BATTLE_WARNING_STATE = 0;
 8001040:	4b57      	ldr	r3, [pc, #348]	; (80011a0 <mode_selection+0x1ac>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
			EXPLORATION_WARNING_STATE = 0;
 8001046:	4b53      	ldr	r3, [pc, #332]	; (8001194 <mode_selection+0x1a0>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
			EXPLORATION = 1;
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <mode_selection+0x19c>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
			press = 0;
 8001052:	4b52      	ldr	r3, [pc, #328]	; (800119c <mode_selection+0x1a8>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001058:	e02e      	b.n	80010b8 <mode_selection+0xc4>
		} else if (press == 2) {
 800105a:	4b50      	ldr	r3, [pc, #320]	; (800119c <mode_selection+0x1a8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d12a      	bne.n	80010b8 <mode_selection+0xc4>
			// Ignore it
			press = 0;
 8001062:	4b4e      	ldr	r3, [pc, #312]	; (800119c <mode_selection+0x1a8>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001068:	e026      	b.n	80010b8 <mode_selection+0xc4>
		}
	} else if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 0
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <mode_selection+0x19c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d123      	bne.n	80010ba <mode_selection+0xc6>
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <mode_selection+0x1a0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11f      	bne.n	80010ba <mode_selection+0xc6>
			&& press == 2) {
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <mode_selection+0x1a8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d11b      	bne.n	80010ba <mode_selection+0xc6>
		/* A message "Entering BATTLE mode" is sent once to Cyrix's Lab once
		 * immediately upon entering the BATTLE mode.
		 * The press flag is cleared later in mode_selection()
		 */
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "Entering BATTLE Mode \r\n");
 8001082:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <mode_selection+0x1b0>)
 8001084:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001088:	4847      	ldr	r0, [pc, #284]	; (80011a8 <mode_selection+0x1b4>)
 800108a:	f005 f905 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 800108e:	4846      	ldr	r0, [pc, #280]	; (80011a8 <mode_selection+0x1b4>)
 8001090:	f7ff f89e 	bl	80001d0 <strlen>
 8001094:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001096:	b29a      	uxth	r2, r3
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	4942      	ldr	r1, [pc, #264]	; (80011a8 <mode_selection+0x1b4>)
 800109e:	4843      	ldr	r0, [pc, #268]	; (80011ac <mode_selection+0x1b8>)
 80010a0:	f003 fbd0 	bl	8004844 <HAL_UART_Transmit>

		EXPLORATION = 0;
 80010a4:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <mode_selection+0x19c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
		BATTLE = 1;
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <mode_selection+0x1a4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
		press = 0;
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <mode_selection+0x1a8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e000      	b.n	80010ba <mode_selection+0xc6>
		if (press == 1) {
 80010b8:	bf00      	nop
	}

	/* Battle Mode */
	if (EXPLORATION == 0 && BATTLE_WARNING_STATE == 0 && BATTLE == 1
 80010ba:	4b35      	ldr	r3, [pc, #212]	; (8001190 <mode_selection+0x19c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d111      	bne.n	80010e6 <mode_selection+0xf2>
 80010c2:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <mode_selection+0x1ac>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10d      	bne.n	80010e6 <mode_selection+0xf2>
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <mode_selection+0x1a4>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d109      	bne.n	80010e6 <mode_selection+0xf2>
			&& press == 0) {
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <mode_selection+0x1a8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d105      	bne.n	80010e6 <mode_selection+0xf2>
		// Battle state
		battle();
 80010da:	f000 fb05 	bl	80016e8 <battle>
		press = 0;
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <mode_selection+0x1a8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e052      	b.n	800118c <mode_selection+0x198>
	} else if (EXPLORATION == 0 && BATTLE_WARNING_STATE == 0 && BATTLE == 1
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <mode_selection+0x19c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d114      	bne.n	8001118 <mode_selection+0x124>
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <mode_selection+0x1ac>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d110      	bne.n	8001118 <mode_selection+0x124>
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <mode_selection+0x1a4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10c      	bne.n	8001118 <mode_selection+0x124>
			&& press == 1) {
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <mode_selection+0x1a8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d108      	bne.n	8001118 <mode_selection+0x124>
		/*	In BATTLE_MODE, without WARNING:
		 * 	i.e., when Pixie is not sending 'SOS' message to Cyrix,
		 * 	single press triggers BATTERY_CHARGING,
		 * 	i.e., after single press, Fluxer is charged with 1/10 energy
		 * 	of its capacity.*/
		charge_fluxer_battery();
 8001106:	f000 fd0d 	bl	8001b24 <charge_fluxer_battery>
		BATTLE = 1;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <mode_selection+0x1a4>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
		press = 0; // reset the press flag
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <mode_selection+0x1a8>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e039      	b.n	800118c <mode_selection+0x198>
	} else if (BATTLE == 1 && BATTLE_WARNING_STATE == 1) {
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <mode_selection+0x1a4>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d11e      	bne.n	800115e <mode_selection+0x16a>
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <mode_selection+0x1ac>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d11a      	bne.n	800115e <mode_selection+0x16a>
		battle_warning();
 8001128:	f000 fd20 	bl	8001b6c <battle_warning>

		if (press == 1) {
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <mode_selection+0x1a8>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d10c      	bne.n	800114e <mode_selection+0x15a>
			// Clear the warning and go back to Battle mode
			BATTLE_WARNING_STATE = 0;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <mode_selection+0x1ac>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
			EXPLORATION_WARNING_STATE = 0;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <mode_selection+0x1a0>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
			BATTLE = 1;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <mode_selection+0x1a4>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
			press = 0;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <mode_selection+0x1a8>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 800114c:	e01d      	b.n	800118a <mode_selection+0x196>
		} else if (press == 2) {
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <mode_selection+0x1a8>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d119      	bne.n	800118a <mode_selection+0x196>
			// Ignore it
			press = 0;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <mode_selection+0x1a8>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 800115c:	e015      	b.n	800118a <mode_selection+0x196>
		}
	} else if (BATTLE == 1 && BATTLE_WARNING_STATE == 0 && press == 2) {
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <mode_selection+0x1a4>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d112      	bne.n	800118c <mode_selection+0x198>
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <mode_selection+0x1ac>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10e      	bne.n	800118c <mode_selection+0x198>
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <mode_selection+0x1a8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d10a      	bne.n	800118c <mode_selection+0x198>
		// Change to EXPLORATION Mode
		BATTLE = 0;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <mode_selection+0x1a4>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		EXPLORATION = 1;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <mode_selection+0x19c>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
		press = 0;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <mode_selection+0x1a8>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
	}
}
 8001188:	e000      	b.n	800118c <mode_selection+0x198>
		if (press == 1) {
 800118a:	bf00      	nop
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000000 	.word	0x20000000
 8001194:	2000034a 	.word	0x2000034a
 8001198:	2000034b 	.word	0x2000034b
 800119c:	20000349 	.word	0x20000349
 80011a0:	2000034c 	.word	0x2000034c
 80011a4:	080084b0 	.word	0x080084b0
 80011a8:	20000350 	.word	0x20000350
 80011ac:	200002c8 	.word	0x200002c8

080011b0 <exploration>:
 * 			are send to Cyrix lab periodically.
 * @note	The sensors are grouped in a struct for easier data manipulation.
 * @retval	None
 */

static void exploration(void) {
 80011b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b4:	b096      	sub	sp, #88	; 0x58
 80011b6:	af0e      	add	r7, sp, #56	; 0x38

	// Reset variables
	sensor_data_t_exploration.humidity_data = 0;
 80011b8:	4bb9      	ldr	r3, [pc, #740]	; (80014a0 <exploration+0x2f0>)
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
	sensor_data_t_exploration.pressure_data = 0;
 80011c0:	4bb7      	ldr	r3, [pc, #732]	; (80014a0 <exploration+0x2f0>)
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
	sensor_data_t_exploration.magnetometer_raw_data[3] = 0;
 80011c8:	4bb5      	ldr	r3, [pc, #724]	; (80014a0 <exploration+0x2f0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	82da      	strh	r2, [r3, #22]
	sensor_data_t_exploration.magnetometer_data[3] = 0;
 80011ce:	4bb4      	ldr	r3, [pc, #720]	; (80014a0 <exploration+0x2f0>)
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_data_t_exploration.gyroscope_raw_data[3] = 0;
 80011d6:	4bb2      	ldr	r3, [pc, #712]	; (80014a0 <exploration+0x2f0>)
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
	sensor_data_t_exploration.gyroscope_data[3] = 0;
 80011de:	4bb0      	ldr	r3, [pc, #704]	; (80014a0 <exploration+0x2f0>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	651a      	str	r2, [r3, #80]	; 0x50

	// Read Humidity readings
	sensor_data_t_exploration.humidity_data = BSP_HSENSOR_ReadHumidity();
 80011e6:	f001 fa25 	bl	8002634 <BSP_HSENSOR_ReadHumidity>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	4bac      	ldr	r3, [pc, #688]	; (80014a0 <exploration+0x2f0>)
 80011f0:	edc3 7a01 	vstr	s15, [r3, #4]
	// Read the pressure in units (Pascal)
	// One hectopascal(hPa) is equal to exactly 100 Pascals.
	sensor_data_t_exploration.pressure_data = BSP_PSENSOR_ReadPressure()
 80011f4:	f001 fa90 	bl	8002718 <BSP_PSENSOR_ReadPressure>
 80011f8:	eef0 7a40 	vmov.f32	s15, s0
			* 100.0f;
 80011fc:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80014a4 <exploration+0x2f4>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
	sensor_data_t_exploration.pressure_data = BSP_PSENSOR_ReadPressure()
 8001204:	4ba6      	ldr	r3, [pc, #664]	; (80014a0 <exploration+0x2f0>)
 8001206:	edc3 7a02 	vstr	s15, [r3, #8]

	// Pass in the memory address to pDataXYZ Pointer to get XYZ magnetometer values.
	BSP_MAGNETO_GetXYZ(sensor_data_t_exploration.magnetometer_raw_data);
 800120a:	48a7      	ldr	r0, [pc, #668]	; (80014a8 <exploration+0x2f8>)
 800120c:	f001 fa4c 	bl	80026a8 <BSP_MAGNETO_GetXYZ>

	sensor_data_t_exploration.magnetometer_data[0] =
			(float) sensor_data_t_exploration.magnetometer_raw_data[0]
 8001210:	4ba3      	ldr	r3, [pc, #652]	; (80014a0 <exploration+0x2f0>)
 8001212:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					/ 1000.0f;
 800121e:	eddf 6aa3 	vldr	s13, [pc, #652]	; 80014ac <exploration+0x2fc>
 8001222:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_exploration.magnetometer_data[0] =
 8001226:	4b9e      	ldr	r3, [pc, #632]	; (80014a0 <exploration+0x2f0>)
 8001228:	edc3 7a06 	vstr	s15, [r3, #24]
	sensor_data_t_exploration.magnetometer_data[1] =
			(float) sensor_data_t_exploration.magnetometer_raw_data[1]
 800122c:	4b9c      	ldr	r3, [pc, #624]	; (80014a0 <exploration+0x2f0>)
 800122e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					/ 1000.0f;
 800123a:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80014ac <exploration+0x2fc>
 800123e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_exploration.magnetometer_data[1] =
 8001242:	4b97      	ldr	r3, [pc, #604]	; (80014a0 <exploration+0x2f0>)
 8001244:	edc3 7a07 	vstr	s15, [r3, #28]
	sensor_data_t_exploration.magnetometer_data[2] =
			(float) sensor_data_t_exploration.magnetometer_raw_data[2]
 8001248:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <exploration+0x2f0>)
 800124a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					/ 1000.0f;
 8001256:	eddf 6a95 	vldr	s13, [pc, #596]	; 80014ac <exploration+0x2fc>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_exploration.magnetometer_data[2] =
 800125e:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <exploration+0x2f0>)
 8001260:	edc3 7a08 	vstr	s15, [r3, #32]

	// Pass in the memory address to pDataXYZ Pointer to get XYZ gyroscope values.
	BSP_GYRO_GetXYZ(sensor_data_t_exploration.gyroscope_raw_data);
 8001264:	4892      	ldr	r0, [pc, #584]	; (80014b0 <exploration+0x300>)
 8001266:	f001 f9ad 	bl	80025c4 <BSP_GYRO_GetXYZ>
	sensor_data_t_exploration.gyroscope_data[0] =
			sensor_data_t_exploration.gyroscope_raw_data[0] / 1000.0f;
 800126a:	4b8d      	ldr	r3, [pc, #564]	; (80014a0 <exploration+0x2f0>)
 800126c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001270:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80014ac <exploration+0x2fc>
 8001274:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_exploration.gyroscope_data[0] =
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <exploration+0x2f0>)
 800127a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	sensor_data_t_exploration.gyroscope_data[1] =
			sensor_data_t_exploration.gyroscope_raw_data[1] / 1000.0f;
 800127e:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <exploration+0x2f0>)
 8001280:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001284:	eddf 6a89 	vldr	s13, [pc, #548]	; 80014ac <exploration+0x2fc>
 8001288:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_exploration.gyroscope_data[1] =
 800128c:	4b84      	ldr	r3, [pc, #528]	; (80014a0 <exploration+0x2f0>)
 800128e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	sensor_data_t_exploration.gyroscope_data[2] =
			sensor_data_t_exploration.gyroscope_raw_data[2] / 1000.0f;
 8001292:	4b83      	ldr	r3, [pc, #524]	; (80014a0 <exploration+0x2f0>)
 8001294:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001298:	eddf 6a84 	vldr	s13, [pc, #528]	; 80014ac <exploration+0x2fc>
 800129c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_exploration.gyroscope_data[2] =
 80012a0:	4b7f      	ldr	r3, [pc, #508]	; (80014a0 <exploration+0x2f0>)
 80012a2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	 * 			3. Reset flags to SAFE before leaving exploration mode
	 * 			and reaching to warning state.
	 * 			4. Reset count_warnings counter to 0.
	 * 			5. Set the EXPLORATION_WARNING_STATE flag to 1.
	 */
	if ((abs((int) sensor_data_t_exploration.magnetometer_data[0])
 80012a6:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <exploration+0x2f0>)
 80012a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80012ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b0:	ee17 3a90 	vmov	r3, s15
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bfb8      	it	lt
 80012b8:	425b      	neglt	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	dc17      	bgt.n	80012ee <exploration+0x13e>
			>= MAG_THRESHOLD
			|| abs((int) sensor_data_t_exploration.magnetometer_data[1])
 80012be:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <exploration+0x2f0>)
 80012c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80012c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c8:	ee17 3a90 	vmov	r3, s15
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bfb8      	it	lt
 80012d0:	425b      	neglt	r3, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	dc0b      	bgt.n	80012ee <exploration+0x13e>
					>= MAG_THRESHOLD
			|| abs((int) sensor_data_t_exploration.magnetometer_data[2])
 80012d6:	4b72      	ldr	r3, [pc, #456]	; (80014a0 <exploration+0x2f0>)
 80012d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80012dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e0:	ee17 3a90 	vmov	r3, s15
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bfb8      	it	lt
 80012e8:	425b      	neglt	r3, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	dd1e      	ble.n	800132c <exploration+0x17c>
					>= MAG_THRESHOLD) && MAGNETOMETER_Flag != WARNING) {
 80012ee:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <exploration+0x304>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d019      	beq.n	800132c <exploration+0x17c>

		// Set MAGNETOMETER_Flag to WARNING
		MAGNETOMETER_Flag = WARNING;
 80012f8:	4b6e      	ldr	r3, [pc, #440]	; (80014b4 <exploration+0x304>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]

		snprintf(message_print, MESSAGE_SIZE, "Magnetometer Flag enabled \r\n");
 80012fe:	4a6e      	ldr	r2, [pc, #440]	; (80014b8 <exploration+0x308>)
 8001300:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001304:	486d      	ldr	r0, [pc, #436]	; (80014bc <exploration+0x30c>)
 8001306:	f004 ffc7 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print), 0xFFFF);
 800130a:	486c      	ldr	r0, [pc, #432]	; (80014bc <exploration+0x30c>)
 800130c:	f7fe ff60 	bl	80001d0 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	b29a      	uxth	r2, r3
 8001314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001318:	4968      	ldr	r1, [pc, #416]	; (80014bc <exploration+0x30c>)
 800131a:	4869      	ldr	r0, [pc, #420]	; (80014c0 <exploration+0x310>)
 800131c:	f003 fa92 	bl	8004844 <HAL_UART_Transmit>

		count_warnings += 1;
 8001320:	4b68      	ldr	r3, [pc, #416]	; (80014c4 <exploration+0x314>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <exploration+0x314>)
 800132a:	701a      	strb	r2, [r3, #0]
	}

	if ((abs((int) sensor_data_t_exploration.gyroscope_data[0])
 800132c:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <exploration+0x2f0>)
 800132e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	ee17 3a90 	vmov	r3, s15
 800133a:	2b00      	cmp	r3, #0
 800133c:	bfb8      	it	lt
 800133e:	425b      	neglt	r3, r3
 8001340:	2b63      	cmp	r3, #99	; 0x63
 8001342:	dc0b      	bgt.n	800135c <exploration+0x1ac>
			>= GYRO_THRESHOLD
			|| abs((int) sensor_data_t_exploration.gyroscope_data[1])
 8001344:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <exploration+0x2f0>)
 8001346:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800134a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134e:	ee17 3a90 	vmov	r3, s15
 8001352:	2b00      	cmp	r3, #0
 8001354:	bfb8      	it	lt
 8001356:	425b      	neglt	r3, r3
 8001358:	2b63      	cmp	r3, #99	; 0x63
 800135a:	dd1e      	ble.n	800139a <exploration+0x1ea>
					>= GYRO_THRESHOLD) && GYROSCOPE_Flag != WARNING) {
 800135c:	4b5a      	ldr	r3, [pc, #360]	; (80014c8 <exploration+0x318>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d019      	beq.n	800139a <exploration+0x1ea>

		// Set GYROSCOPE_Flag to WARNING
		GYROSCOPE_Flag = WARNING;
 8001366:	4b58      	ldr	r3, [pc, #352]	; (80014c8 <exploration+0x318>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]

		snprintf(message_print, MESSAGE_SIZE, "Gyroscope Flag enabled \r\n");
 800136c:	4a57      	ldr	r2, [pc, #348]	; (80014cc <exploration+0x31c>)
 800136e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001372:	4852      	ldr	r0, [pc, #328]	; (80014bc <exploration+0x30c>)
 8001374:	f004 ff90 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print), 0xFFFF);
 8001378:	4850      	ldr	r0, [pc, #320]	; (80014bc <exploration+0x30c>)
 800137a:	f7fe ff29 	bl	80001d0 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001386:	494d      	ldr	r1, [pc, #308]	; (80014bc <exploration+0x30c>)
 8001388:	484d      	ldr	r0, [pc, #308]	; (80014c0 <exploration+0x310>)
 800138a:	f003 fa5b 	bl	8004844 <HAL_UART_Transmit>

		count_warnings += 1;
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <exploration+0x314>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <exploration+0x314>)
 8001398:	701a      	strb	r2, [r3, #0]
	}

	if (((sensor_data_t_exploration.pressure_data <= PRES_THRESHOLD_MIN)
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <exploration+0x2f0>)
 800139c:	edd3 7a02 	vldr	s15, [r3, #8]
 80013a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80014d0 <exploration+0x320>
 80013a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d909      	bls.n	80013c2 <exploration+0x212>
			|| (sensor_data_t_exploration.pressure_data >= PRES_THRESHOLD_MAX))
 80013ae:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <exploration+0x2f0>)
 80013b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80013b4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80014d4 <exploration+0x324>
 80013b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	db27      	blt.n	8001412 <exploration+0x262>
			&& PRESSURE_Flag != WARNING) {
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <exploration+0x328>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d022      	beq.n	8001412 <exploration+0x262>

		// Set PRESSURE_Flag to WARNING
		PRESSURE_Flag = WARNING;
 80013cc:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <exploration+0x328>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]

		snprintf(message_print, MESSAGE_SIZE,
				"Pressure Flag enabled P:%0.2f (Pa) \r\n",
				sensor_data_t_exploration.pressure_data);
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <exploration+0x2f0>)
 80013d4:	689b      	ldr	r3, [r3, #8]
		snprintf(message_print, MESSAGE_SIZE,
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8b6 	bl	8000548 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	e9cd 2300 	strd	r2, r3, [sp]
 80013e4:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <exploration+0x32c>)
 80013e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013ea:	4834      	ldr	r0, [pc, #208]	; (80014bc <exploration+0x30c>)
 80013ec:	f004 ff54 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print), 0xFFFF);
 80013f0:	4832      	ldr	r0, [pc, #200]	; (80014bc <exploration+0x30c>)
 80013f2:	f7fe feed 	bl	80001d0 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fe:	492f      	ldr	r1, [pc, #188]	; (80014bc <exploration+0x30c>)
 8001400:	482f      	ldr	r0, [pc, #188]	; (80014c0 <exploration+0x310>)
 8001402:	f003 fa1f 	bl	8004844 <HAL_UART_Transmit>

		count_warnings += 1;
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <exploration+0x314>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <exploration+0x314>)
 8001410:	701a      	strb	r2, [r3, #0]
	}

	if ((sensor_data_t_exploration.humidity_data <= HUM_THRESHOLD)
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <exploration+0x2f0>)
 8001414:	edd3 7a01 	vldr	s15, [r3, #4]
 8001418:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800141c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	d827      	bhi.n	8001476 <exploration+0x2c6>
			&& (HUMIDITY_Flag != WARNING)) {
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <exploration+0x330>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d022      	beq.n	8001476 <exploration+0x2c6>

		// Set HUMIDITY_Flag to WARNING
		HUMIDITY_Flag = WARNING;
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <exploration+0x330>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]

		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE,
				"Humidity Flag enabled , H:%0.2f (%%RH) \r\n",
				sensor_data_t_exploration.humidity_data);
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <exploration+0x2f0>)
 8001438:	685b      	ldr	r3, [r3, #4]
		snprintf(message_print, MESSAGE_SIZE,
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f884 	bl	8000548 <__aeabi_f2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	e9cd 2300 	strd	r2, r3, [sp]
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <exploration+0x334>)
 800144a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800144e:	481b      	ldr	r0, [pc, #108]	; (80014bc <exploration+0x30c>)
 8001450:	f004 ff22 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print), 0xFFFF);
 8001454:	4819      	ldr	r0, [pc, #100]	; (80014bc <exploration+0x30c>)
 8001456:	f7fe febb 	bl	80001d0 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001462:	4916      	ldr	r1, [pc, #88]	; (80014bc <exploration+0x30c>)
 8001464:	4816      	ldr	r0, [pc, #88]	; (80014c0 <exploration+0x310>)
 8001466:	f003 f9ed 	bl	8004844 <HAL_UART_Transmit>

		count_warnings += 1;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <exploration+0x314>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <exploration+0x314>)
 8001474:	701a      	strb	r2, [r3, #0]
	}

	// Code for IR sensor; CCK to reduce the distance, ACCK to increase the distance
	uint8_t IR_sensor = HAL_GPIO_ReadPin(GPIOA, ARD_D9_Pin);
 8001476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f002 fb19 	bl	8003ab4 <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	77fb      	strb	r3, [r7, #31]
	if ((IR_sensor == 0) && (IR_Flag != WARNING)) {
 8001486:	7ffb      	ldrb	r3, [r7, #31]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d146      	bne.n	800151a <exploration+0x36a>
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <exploration+0x338>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d041      	beq.n	800151a <exploration+0x36a>

		IR_Flag = WARNING;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <exploration+0x338>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e026      	b.n	80014ec <exploration+0x33c>
 800149e:	bf00      	nop
 80014a0:	200004a4 	.word	0x200004a4
 80014a4:	42c80000 	.word	0x42c80000
 80014a8:	200004b4 	.word	0x200004b4
 80014ac:	447a0000 	.word	0x447a0000
 80014b0:	200004dc 	.word	0x200004dc
 80014b4:	2000049d 	.word	0x2000049d
 80014b8:	080084c8 	.word	0x080084c8
 80014bc:	20000350 	.word	0x20000350
 80014c0:	200002c8 	.word	0x200002c8
 80014c4:	2000034d 	.word	0x2000034d
 80014c8:	2000049c 	.word	0x2000049c
 80014cc:	080084e8 	.word	0x080084e8
 80014d0:	47afc800 	.word	0x47afc800
 80014d4:	47cd1400 	.word	0x47cd1400
 80014d8:	2000049e 	.word	0x2000049e
 80014dc:	08008504 	.word	0x08008504
 80014e0:	2000049f 	.word	0x2000049f
 80014e4:	0800852c 	.word	0x0800852c
 80014e8:	200004a0 	.word	0x200004a0
		snprintf(message_print, MESSAGE_SIZE, "INFRARED SENSOR enabled \r\n");
 80014ec:	4a53      	ldr	r2, [pc, #332]	; (800163c <exploration+0x48c>)
 80014ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014f2:	4853      	ldr	r0, [pc, #332]	; (8001640 <exploration+0x490>)
 80014f4:	f004 fed0 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print), 0xFFFF);
 80014f8:	4851      	ldr	r0, [pc, #324]	; (8001640 <exploration+0x490>)
 80014fa:	f7fe fe69 	bl	80001d0 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29a      	uxth	r2, r3
 8001502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001506:	494e      	ldr	r1, [pc, #312]	; (8001640 <exploration+0x490>)
 8001508:	484e      	ldr	r0, [pc, #312]	; (8001644 <exploration+0x494>)
 800150a:	f003 f99b 	bl	8004844 <HAL_UART_Transmit>

		count_warnings += 1;
 800150e:	4b4e      	ldr	r3, [pc, #312]	; (8001648 <exploration+0x498>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <exploration+0x498>)
 8001518:	701a      	strb	r2, [r3, #0]

		// IR_sensor = 1; // reset the state
	}

	// In EXPLORATION MODE, only those sensors mounted on Pixie are read periodically every ONE second
	if ((HAL_GetTick() - time_EXPLORATION_SENSOR > 1000)
 800151a:	f001 ff0f 	bl	800333c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	4b4a      	ldr	r3, [pc, #296]	; (800164c <exploration+0x49c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152a:	d95e      	bls.n	80015ea <exploration+0x43a>
			&& (count_warnings != 2)) {
 800152c:	4b46      	ldr	r3, [pc, #280]	; (8001648 <exploration+0x498>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d05a      	beq.n	80015ea <exploration+0x43a>
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE,
				"1, G:%0.2f:%0.2f (dps), M:%0.3f:%0.3f:%0.3f (Gauss), P:%0.2f (Pa), H:%0.2f (%%RH) \r\n",
				sensor_data_t_exploration.gyroscope_data[0],
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <exploration+0x4a0>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		snprintf(message_print, MESSAGE_SIZE,
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4680      	mov	r8, r0
 8001540:	4689      	mov	r9, r1
				sensor_data_t_exploration.gyroscope_data[1],
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <exploration+0x4a0>)
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		snprintf(message_print, MESSAGE_SIZE,
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fffe 	bl	8000548 <__aeabi_f2d>
 800154c:	4682      	mov	sl, r0
 800154e:	468b      	mov	fp, r1
				// sensor_data_t_exploration.gyroscope_data[2],
				sensor_data_t_exploration.magnetometer_data[0],
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <exploration+0x4a0>)
 8001552:	699b      	ldr	r3, [r3, #24]
		snprintf(message_print, MESSAGE_SIZE,
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fff7 	bl	8000548 <__aeabi_f2d>
 800155a:	e9c7 0104 	strd	r0, r1, [r7, #16]
				sensor_data_t_exploration.magnetometer_data[1],
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <exploration+0x4a0>)
 8001560:	69db      	ldr	r3, [r3, #28]
		snprintf(message_print, MESSAGE_SIZE,
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fff0 	bl	8000548 <__aeabi_f2d>
 8001568:	e9c7 0102 	strd	r0, r1, [r7, #8]
				sensor_data_t_exploration.magnetometer_data[2],
 800156c:	4b38      	ldr	r3, [pc, #224]	; (8001650 <exploration+0x4a0>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
		snprintf(message_print, MESSAGE_SIZE,
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffe9 	bl	8000548 <__aeabi_f2d>
 8001576:	e9c7 0100 	strd	r0, r1, [r7]
				sensor_data_t_exploration.pressure_data,
 800157a:	4b35      	ldr	r3, [pc, #212]	; (8001650 <exploration+0x4a0>)
 800157c:	689b      	ldr	r3, [r3, #8]
		snprintf(message_print, MESSAGE_SIZE,
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffe2 	bl	8000548 <__aeabi_f2d>
 8001584:	4604      	mov	r4, r0
 8001586:	460d      	mov	r5, r1
				sensor_data_t_exploration.humidity_data);
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <exploration+0x4a0>)
 800158a:	685b      	ldr	r3, [r3, #4]
		snprintf(message_print, MESSAGE_SIZE,
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffdb 	bl	8000548 <__aeabi_f2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800159a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800159e:	ed97 7b00 	vldr	d7, [r7]
 80015a2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80015a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80015aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80015b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80015b6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80015ba:	e9cd 8900 	strd	r8, r9, [sp]
 80015be:	4a25      	ldr	r2, [pc, #148]	; (8001654 <exploration+0x4a4>)
 80015c0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <exploration+0x490>)
 80015c6:	f004 fe67 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,strlen(message_print), 0xFFFF);
 80015ca:	481d      	ldr	r0, [pc, #116]	; (8001640 <exploration+0x490>)
 80015cc:	f7fe fe00 	bl	80001d0 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d8:	4919      	ldr	r1, [pc, #100]	; (8001640 <exploration+0x490>)
 80015da:	481a      	ldr	r0, [pc, #104]	; (8001644 <exploration+0x494>)
 80015dc:	f003 f932 	bl	8004844 <HAL_UART_Transmit>

		time_EXPLORATION_SENSOR = HAL_GetTick(); // reset the variable
 80015e0:	f001 feac 	bl	800333c <HAL_GetTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a19      	ldr	r2, [pc, #100]	; (800164c <exploration+0x49c>)
 80015e8:	6013      	str	r3, [r2, #0]
	}

	// EXPLORATION LED will always be ON
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f0:	4819      	ldr	r0, [pc, #100]	; (8001658 <exploration+0x4a8>)
 80015f2:	f002 fa77 	bl	8003ae4 <HAL_GPIO_WritePin>

	if (count_warnings == 2) {
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <exploration+0x498>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d118      	bne.n	8001630 <exploration+0x480>

		reset_sensor_warning_flags();
 80015fe:	f000 faf7 	bl	8001bf0 <reset_sensor_warning_flags>
		count_warnings = 0;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <exploration+0x498>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]

		snprintf(message_print, MESSAGE_SIZE,"EXPLORATION_WARNING_STATE enabled \r\n");
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <exploration+0x4ac>)
 800160a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <exploration+0x490>)
 8001610:	f004 fe42 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,strlen(message_print), 0xFFFF);
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <exploration+0x490>)
 8001616:	f7fe fddb 	bl	80001d0 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001622:	4907      	ldr	r1, [pc, #28]	; (8001640 <exploration+0x490>)
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <exploration+0x494>)
 8001626:	f003 f90d 	bl	8004844 <HAL_UART_Transmit>

		// Set the EXPLORATION_WARNING_STATE flag to 1
		EXPLORATION_WARNING_STATE = 1;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <exploration+0x4b0>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
	}
}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800163a:	bf00      	nop
 800163c:	08008558 	.word	0x08008558
 8001640:	20000350 	.word	0x20000350
 8001644:	200002c8 	.word	0x200002c8
 8001648:	2000034d 	.word	0x2000034d
 800164c:	2000047c 	.word	0x2000047c
 8001650:	200004a4 	.word	0x200004a4
 8001654:	08008574 	.word	0x08008574
 8001658:	48000400 	.word	0x48000400
 800165c:	080085cc 	.word	0x080085cc
 8001660:	2000034a 	.word	0x2000034a

08001664 <exploration_warning>:

static void exploration_warning(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	// Toggle WARNING LED every 3 seconds.
	if ((HAL_GetTick() - time_EXPLORATION_WARNING_LED) > 333) {
 8001668:	f001 fe68 	bl	800333c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <exploration_warning+0x6c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8001678:	d309      	bcc.n	800168e <exploration_warning+0x2a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800167a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167e:	4815      	ldr	r0, [pc, #84]	; (80016d4 <exploration_warning+0x70>)
 8001680:	f002 fa48 	bl	8003b14 <HAL_GPIO_TogglePin>
		time_EXPLORATION_WARNING_LED = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 8001684:	f001 fe5a 	bl	800333c <HAL_GetTick>
 8001688:	4603      	mov	r3, r0
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <exploration_warning+0x6c>)
 800168c:	6013      	str	r3, [r2, #0]
	}

	// Send WARNING mode: SOS once every 1 second.
	if ((HAL_GetTick() - time_EXPLORATION_WARNING_MESSAGE) > 1000) {
 800168e:	f001 fe55 	bl	800333c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <exploration_warning+0x74>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169e:	d915      	bls.n	80016cc <exploration_warning+0x68>
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "2, WARNING mode: SOS \r\n");
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <exploration_warning+0x78>)
 80016a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <exploration_warning+0x7c>)
 80016a8:	f004 fdf6 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <exploration_warning+0x7c>)
 80016ae:	f7fe fd8f 	bl	80001d0 <strlen>
 80016b2:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ba:	4909      	ldr	r1, [pc, #36]	; (80016e0 <exploration_warning+0x7c>)
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <exploration_warning+0x80>)
 80016be:	f003 f8c1 	bl	8004844 <HAL_UART_Transmit>
		time_EXPLORATION_WARNING_MESSAGE = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 80016c2:	f001 fe3b 	bl	800333c <HAL_GetTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <exploration_warning+0x74>)
 80016ca:	6013      	str	r3, [r2, #0]
	}
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000480 	.word	0x20000480
 80016d4:	48000400 	.word	0x48000400
 80016d8:	20000484 	.word	0x20000484
 80016dc:	080085f4 	.word	0x080085f4
 80016e0:	20000350 	.word	0x20000350
 80016e4:	200002c8 	.word	0x200002c8

080016e8 <battle>:

static void battle(void) {
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b09e      	sub	sp, #120	; 0x78
 80016ee:	af12      	add	r7, sp, #72	; 0x48

	// Reset variables
	sensor_data_t_battle.temperature_data = 0;
 80016f0:	4bc0      	ldr	r3, [pc, #768]	; (80019f4 <battle+0x30c>)
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
	sensor_data_t_battle.humidity_data = 0;
 80016f8:	4bbe      	ldr	r3, [pc, #760]	; (80019f4 <battle+0x30c>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
	sensor_data_t_battle.pressure_data = 0;
 8001700:	4bbc      	ldr	r3, [pc, #752]	; (80019f4 <battle+0x30c>)
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
	sensor_data_t_battle.magnetometer_raw_data[3] = 0;
 8001708:	4bba      	ldr	r3, [pc, #744]	; (80019f4 <battle+0x30c>)
 800170a:	2200      	movs	r2, #0
 800170c:	82da      	strh	r2, [r3, #22]
	sensor_data_t_battle.magnetometer_data[3] = 0;
 800170e:	4bb9      	ldr	r3, [pc, #740]	; (80019f4 <battle+0x30c>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_data_t_battle.gyroscope_raw_data[3] = 0;
 8001716:	4bb7      	ldr	r3, [pc, #732]	; (80019f4 <battle+0x30c>)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
	sensor_data_t_battle.gyroscope_data[3] = 0;
 800171e:	4bb5      	ldr	r3, [pc, #724]	; (80019f4 <battle+0x30c>)
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	651a      	str	r2, [r3, #80]	; 0x50
	sensor_data_t_battle.accelerometer_raw_data[3] = 0;
 8001726:	4bb3      	ldr	r3, [pc, #716]	; (80019f4 <battle+0x30c>)
 8001728:	2200      	movs	r2, #0
 800172a:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor_data_t_battle.accelerometer_data[3] = 0;
 800172c:	4bb1      	ldr	r3, [pc, #708]	; (80019f4 <battle+0x30c>)
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	639a      	str	r2, [r3, #56]	; 0x38

	// Read Humidity readings
	sensor_data_t_battle.humidity_data = BSP_HSENSOR_ReadHumidity();
 8001734:	f000 ff7e 	bl	8002634 <BSP_HSENSOR_ReadHumidity>
 8001738:	eef0 7a40 	vmov.f32	s15, s0
 800173c:	4bad      	ldr	r3, [pc, #692]	; (80019f4 <battle+0x30c>)
 800173e:	edc3 7a01 	vstr	s15, [r3, #4]

	/*	Read the pressure in units (Pascal)
	 * 	One hectopascal(hPa) is equal to exactly 100 Pascals. */
	sensor_data_t_battle.pressure_data = BSP_PSENSOR_ReadPressure() * 100.0f;
 8001742:	f000 ffe9 	bl	8002718 <BSP_PSENSOR_ReadPressure>
 8001746:	eef0 7a40 	vmov.f32	s15, s0
 800174a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80019f8 <battle+0x310>
 800174e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001752:	4ba8      	ldr	r3, [pc, #672]	; (80019f4 <battle+0x30c>)
 8001754:	edc3 7a02 	vstr	s15, [r3, #8]

	// Read Temperature Readings
	sensor_data_t_battle.temperature_data = BSP_TSENSOR_ReadTemp();
 8001758:	f001 f808 	bl	800276c <BSP_TSENSOR_ReadTemp>
 800175c:	eef0 7a40 	vmov.f32	s15, s0
 8001760:	4ba4      	ldr	r3, [pc, #656]	; (80019f4 <battle+0x30c>)
 8001762:	edc3 7a00 	vstr	s15, [r3]

	// Pass in the memory address to pDataXYZ Pointer to get XYZ magnetometer values.
	BSP_MAGNETO_GetXYZ(sensor_data_t_battle.magnetometer_raw_data);
 8001766:	48a5      	ldr	r0, [pc, #660]	; (80019fc <battle+0x314>)
 8001768:	f000 ff9e 	bl	80026a8 <BSP_MAGNETO_GetXYZ>
	sensor_data_t_battle.magnetometer_data[0] =
			(float) sensor_data_t_battle.magnetometer_raw_data[0] / 1000.0f;
 800176c:	4ba1      	ldr	r3, [pc, #644]	; (80019f4 <battle+0x30c>)
 800176e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177a:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8001a00 <battle+0x318>
 800177e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.magnetometer_data[0] =
 8001782:	4b9c      	ldr	r3, [pc, #624]	; (80019f4 <battle+0x30c>)
 8001784:	edc3 7a06 	vstr	s15, [r3, #24]
	sensor_data_t_battle.magnetometer_data[1] =
			(float) sensor_data_t_battle.magnetometer_raw_data[1] / 1000.0f;
 8001788:	4b9a      	ldr	r3, [pc, #616]	; (80019f4 <battle+0x30c>)
 800178a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001796:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8001a00 <battle+0x318>
 800179a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.magnetometer_data[1] =
 800179e:	4b95      	ldr	r3, [pc, #596]	; (80019f4 <battle+0x30c>)
 80017a0:	edc3 7a07 	vstr	s15, [r3, #28]
	sensor_data_t_battle.magnetometer_data[2] =
			(float) sensor_data_t_battle.magnetometer_raw_data[2] / 1000.0f;
 80017a4:	4b93      	ldr	r3, [pc, #588]	; (80019f4 <battle+0x30c>)
 80017a6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b2:	eddf 6a93 	vldr	s13, [pc, #588]	; 8001a00 <battle+0x318>
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.magnetometer_data[2] =
 80017ba:	4b8e      	ldr	r3, [pc, #568]	; (80019f4 <battle+0x30c>)
 80017bc:	edc3 7a08 	vstr	s15, [r3, #32]

	// Pass in the memory address to pDataXYZ Pointer to get XYZ gyroscope values.
	BSP_GYRO_GetXYZ(sensor_data_t_battle.gyroscope_raw_data);
 80017c0:	4890      	ldr	r0, [pc, #576]	; (8001a04 <battle+0x31c>)
 80017c2:	f000 feff 	bl	80025c4 <BSP_GYRO_GetXYZ>
	sensor_data_t_battle.gyroscope_data[0] =
			sensor_data_t_battle.gyroscope_raw_data[0] / 1000.0f;
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <battle+0x30c>)
 80017c8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80017cc:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8001a00 <battle+0x318>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.gyroscope_data[0] =
 80017d4:	4b87      	ldr	r3, [pc, #540]	; (80019f4 <battle+0x30c>)
 80017d6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	sensor_data_t_battle.gyroscope_data[1] =
			sensor_data_t_battle.gyroscope_raw_data[1] / 1000.0f;
 80017da:	4b86      	ldr	r3, [pc, #536]	; (80019f4 <battle+0x30c>)
 80017dc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80017e0:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001a00 <battle+0x318>
 80017e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.gyroscope_data[1] =
 80017e8:	4b82      	ldr	r3, [pc, #520]	; (80019f4 <battle+0x30c>)
 80017ea:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	sensor_data_t_battle.gyroscope_data[2] =
			sensor_data_t_battle.gyroscope_raw_data[2] / 1000.0f;
 80017ee:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <battle+0x30c>)
 80017f0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80017f4:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001a00 <battle+0x318>
 80017f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.gyroscope_data[2] =
 80017fc:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <battle+0x30c>)
 80017fe:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	/* Pass in the memory address to pDataXYZ Pointer to get XYZ accelerometer values.
	 * The function below returns 16 bit integers which are 100 * acceleration(m/s^2).
	 * Convert to float to print the actual acceleration*/
	BSP_ACCELERO_AccGetXYZ(sensor_data_t_battle.accelerometer_raw_data);
 8001802:	4881      	ldr	r0, [pc, #516]	; (8001a08 <battle+0x320>)
 8001804:	f000 fe84 	bl	8002510 <BSP_ACCELERO_AccGetXYZ>
	sensor_data_t_battle.accelerometer_data[0] =
			sensor_data_t_battle.accelerometer_raw_data[0] / 100.0f;
 8001808:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <battle+0x30c>)
 800180a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001816:	eddf 6a78 	vldr	s13, [pc, #480]	; 80019f8 <battle+0x310>
 800181a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.accelerometer_data[0] =
 800181e:	4b75      	ldr	r3, [pc, #468]	; (80019f4 <battle+0x30c>)
 8001820:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	sensor_data_t_battle.accelerometer_data[1] =
			sensor_data_t_battle.accelerometer_raw_data[1] / 100.0f;
 8001824:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <battle+0x30c>)
 8001826:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001832:	eddf 6a71 	vldr	s13, [pc, #452]	; 80019f8 <battle+0x310>
 8001836:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.accelerometer_data[1] =
 800183a:	4b6e      	ldr	r3, [pc, #440]	; (80019f4 <battle+0x30c>)
 800183c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	sensor_data_t_battle.accelerometer_data[2] =
			sensor_data_t_battle.accelerometer_raw_data[2] / 100.0f;
 8001840:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <battle+0x30c>)
 8001842:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80019f8 <battle+0x310>
 8001852:	eec7 7a26 	vdiv.f32	s15, s14, s13
	sensor_data_t_battle.accelerometer_data[2] =
 8001856:	4b67      	ldr	r3, [pc, #412]	; (80019f4 <battle+0x30c>)
 8001858:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	// read IR output here
	uint8_t IR_sensor = HAL_GPIO_ReadPin(GPIOA, ARD_D9_Pin);
 800185c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f002 f926 	bl	8003ab4 <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 * 			go to the WARNING state.
	 * @steps	1. Raise flags if threshold is reached.
	 * 			2. Type-cast variables explicitly to (int) to use abs()
	 * 			3. Set the EXPLORATION_WARNING_STATE flag to 1.
	 */
	if ((sensor_data_t_battle.temperature_data >= TEMP_THRESHOLD_MAX
 800186e:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <battle+0x30c>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001a0c <battle+0x324>
 8001878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	da4f      	bge.n	8001922 <battle+0x23a>
			|| sensor_data_t_battle.temperature_data < TEMP_THRESHOLD_MIN)
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <battle+0x30c>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800188c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d445      	bmi.n	8001922 <battle+0x23a>
			|| sensor_data_t_battle.humidity_data <= HUM_THRESHOLD
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <battle+0x30c>)
 8001898:	edd3 7a01 	vldr	s15, [r3, #4]
 800189c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80018a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d93b      	bls.n	8001922 <battle+0x23a>
			|| (sensor_data_t_battle.pressure_data >= PRES_THRESHOLD_MAX
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <battle+0x30c>)
 80018ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80018b0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001a10 <battle+0x328>
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	da31      	bge.n	8001922 <battle+0x23a>
					|| sensor_data_t_battle.pressure_data <= PRES_THRESHOLD_MIN)
 80018be:	4b4d      	ldr	r3, [pc, #308]	; (80019f4 <battle+0x30c>)
 80018c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001a14 <battle+0x32c>
 80018c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d927      	bls.n	8001922 <battle+0x23a>
			|| (abs(sensor_data_t_battle.magnetometer_data[0]) >= MAG_THRESHOLD)
 80018d2:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <battle+0x30c>)
 80018d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80018d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bfb8      	it	lt
 80018e4:	425b      	neglt	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	dc1b      	bgt.n	8001922 <battle+0x23a>
			|| (abs(sensor_data_t_battle.magnetometer_data[1]) >= MAG_THRESHOLD)
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <battle+0x30c>)
 80018ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80018f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f4:	ee17 3a90 	vmov	r3, s15
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bfb8      	it	lt
 80018fc:	425b      	neglt	r3, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	dc0f      	bgt.n	8001922 <battle+0x23a>
			|| (abs(sensor_data_t_battle.magnetometer_data[2]) >= MAG_THRESHOLD)
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <battle+0x30c>)
 8001904:	edd3 7a08 	vldr	s15, [r3, #32]
 8001908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	2b00      	cmp	r3, #0
 8001912:	bfb8      	it	lt
 8001914:	425b      	neglt	r3, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	dc03      	bgt.n	8001922 <battle+0x23a>
			|| (IR_sensor == 0)) {
 800191a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <battle+0x240>
		BATTLE_WARNING_STATE = 1;
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <battle+0x330>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
		// IR_sensor = 1;
	}

	// In BATTLE MODE, only those sensors mounted on Pixie are read periodically every ONE second.
	if (HAL_GetTick() - time_BATTLE_SENSOR > 1000
 8001928:	f001 fd08 	bl	800333c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <battle+0x334>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001938:	f240 808e 	bls.w	8001a58 <battle+0x370>
			&& BATTLE_WARNING_STATE != 1) {
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <battle+0x330>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	f000 8089 	beq.w	8001a58 <battle+0x370>
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE,
				"3, T:%0.2f (deg C), P:%0.2f (Pa), H:%0.2f (%%RH), A:%0.2f (g), G:%0.2f:%0.2f (dps), M:%0.3f:%0.3f:%0.3f (Gauss) \r\n",
				sensor_data_t_battle.temperature_data,
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <battle+0x30c>)
 8001948:	681b      	ldr	r3, [r3, #0]
		snprintf(message_print, MESSAGE_SIZE,
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fdfc 	bl	8000548 <__aeabi_f2d>
 8001950:	e9c7 0108 	strd	r0, r1, [r7, #32]
				sensor_data_t_battle.pressure_data,
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <battle+0x30c>)
 8001956:	689b      	ldr	r3, [r3, #8]
		snprintf(message_print, MESSAGE_SIZE,
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdf5 	bl	8000548 <__aeabi_f2d>
 800195e:	e9c7 0106 	strd	r0, r1, [r7, #24]
				sensor_data_t_battle.humidity_data,
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <battle+0x30c>)
 8001964:	685b      	ldr	r3, [r3, #4]
		snprintf(message_print, MESSAGE_SIZE,
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fdee 	bl	8000548 <__aeabi_f2d>
 800196c:	e9c7 0104 	strd	r0, r1, [r7, #16]
				sensor_data_t_battle.accelerometer_data[2],
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <battle+0x30c>)
 8001972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		snprintf(message_print, MESSAGE_SIZE,
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fde7 	bl	8000548 <__aeabi_f2d>
 800197a:	e9c7 0102 	strd	r0, r1, [r7, #8]
				sensor_data_t_battle.gyroscope_data[0],
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <battle+0x30c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		snprintf(message_print, MESSAGE_SIZE,
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fde0 	bl	8000548 <__aeabi_f2d>
 8001988:	e9c7 0100 	strd	r0, r1, [r7]
				sensor_data_t_battle.gyroscope_data[1],
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <battle+0x30c>)
 800198e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		snprintf(message_print, MESSAGE_SIZE,
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdd9 	bl	8000548 <__aeabi_f2d>
 8001996:	4682      	mov	sl, r0
 8001998:	468b      	mov	fp, r1
				// sensor_data_t_battle.gyroscope_data[2],
				sensor_data_t_battle.magnetometer_data[0],
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <battle+0x30c>)
 800199c:	699b      	ldr	r3, [r3, #24]
		snprintf(message_print, MESSAGE_SIZE,
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdd2 	bl	8000548 <__aeabi_f2d>
 80019a4:	4680      	mov	r8, r0
 80019a6:	4689      	mov	r9, r1
				sensor_data_t_battle.magnetometer_data[1],
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <battle+0x30c>)
 80019aa:	69db      	ldr	r3, [r3, #28]
		snprintf(message_print, MESSAGE_SIZE,
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdcb 	bl	8000548 <__aeabi_f2d>
 80019b2:	4604      	mov	r4, r0
 80019b4:	460d      	mov	r5, r1
				sensor_data_t_battle.magnetometer_data[2]);
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <battle+0x30c>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
		snprintf(message_print, MESSAGE_SIZE,
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdc4 	bl	8000548 <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80019c8:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80019cc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80019d0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80019d4:	ed97 7b00 	vldr	d7, [r7]
 80019d8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80019dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80019e0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80019e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019ec:	ed97 7b06 	vldr	d7, [r7, #24]
 80019f0:	e016      	b.n	8001a20 <battle+0x338>
 80019f2:	bf00      	nop
 80019f4:	200004f4 	.word	0x200004f4
 80019f8:	42c80000 	.word	0x42c80000
 80019fc:	20000504 	.word	0x20000504
 8001a00:	447a0000 	.word	0x447a0000
 8001a04:	2000052c 	.word	0x2000052c
 8001a08:	20000518 	.word	0x20000518
 8001a0c:	428c0000 	.word	0x428c0000
 8001a10:	47cd1400 	.word	0x47cd1400
 8001a14:	47afc800 	.word	0x47afc800
 8001a18:	2000034c 	.word	0x2000034c
 8001a1c:	20000488 	.word	0x20000488
 8001a20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a24:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a28:	ed8d 7b00 	vstr	d7, [sp]
 8001a2c:	4a33      	ldr	r2, [pc, #204]	; (8001afc <battle+0x414>)
 8001a2e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a32:	4833      	ldr	r0, [pc, #204]	; (8001b00 <battle+0x418>)
 8001a34:	f004 fc30 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001a38:	4831      	ldr	r0, [pc, #196]	; (8001b00 <battle+0x418>)
 8001a3a:	f7fe fbc9 	bl	80001d0 <strlen>
 8001a3e:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a46:	492e      	ldr	r1, [pc, #184]	; (8001b00 <battle+0x418>)
 8001a48:	482e      	ldr	r0, [pc, #184]	; (8001b04 <battle+0x41c>)
 8001a4a:	f002 fefb 	bl	8004844 <HAL_UART_Transmit>

		time_BATTLE_SENSOR = HAL_GetTick();
 8001a4e:	f001 fc75 	bl	800333c <HAL_GetTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <battle+0x420>)
 8001a56:	6013      	str	r3, [r2, #0]
	}

	// Toggle WARNING LED every 1 second.
	if ((HAL_GetTick() - time_BATTLE_LED) > 1000) {
 8001a58:	f001 fc70 	bl	800333c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <battle+0x424>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a68:	d909      	bls.n	8001a7e <battle+0x396>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6e:	4828      	ldr	r0, [pc, #160]	; (8001b10 <battle+0x428>)
 8001a70:	f002 f850 	bl	8003b14 <HAL_GPIO_TogglePin>
		time_BATTLE_LED = HAL_GetTick(); // reset time_BATTLE_LED
 8001a74:	f001 fc62 	bl	800333c <HAL_GetTick>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <battle+0x424>)
 8001a7c:	6013      	str	r3, [r2, #0]
	}

	// Self firing Fluxer every 5s.
	if (HAL_GetTick() - time_fluxer > 5000 && fluxer_battery > 1
 8001a7e:	f001 fc5d 	bl	800333c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <battle+0x42c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d92a      	bls.n	8001ae8 <battle+0x400>
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <battle+0x430>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d926      	bls.n	8001ae8 <battle+0x400>
			&& BATTLE_WARNING_STATE != 1) {
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <battle+0x434>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d022      	beq.n	8001ae8 <battle+0x400>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); //On Buzzer
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	481a      	ldr	r0, [pc, #104]	; (8001b10 <battle+0x428>)
 8001aa8:	f002 f81c 	bl	8003ae4 <HAL_GPIO_WritePin>

		fluxer_battery -= 2;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <battle+0x430>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3b02      	subs	r3, #2
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <battle+0x430>)
 8001ab6:	701a      	strb	r2, [r3, #0]

		time_fluxer = HAL_GetTick(); // reset time_fluxer
 8001ab8:	f001 fc40 	bl	800333c <HAL_GetTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <battle+0x42c>)
 8001ac0:	6013      	str	r3, [r2, #0]

		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "5, Battery: %d/10 \r\n",
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <battle+0x430>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <battle+0x438>)
 8001ac8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <battle+0x418>)
 8001ace:	f004 fbe3 	bl	8006298 <sniprintf>
				fluxer_battery);
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001ad2:	480b      	ldr	r0, [pc, #44]	; (8001b00 <battle+0x418>)
 8001ad4:	f7fe fb7c 	bl	80001d0 <strlen>
 8001ad8:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <battle+0x418>)
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <battle+0x41c>)
 8001ae4:	f002 feae 	bl	8004844 <HAL_UART_Transmit>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Off Buzzer
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2104      	movs	r1, #4
 8001aec:	4808      	ldr	r0, [pc, #32]	; (8001b10 <battle+0x428>)
 8001aee:	f001 fff9 	bl	8003ae4 <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	3730      	adds	r7, #48	; 0x30
 8001af6:	46bd      	mov	sp, r7
 8001af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afc:	0800860c 	.word	0x0800860c
 8001b00:	20000350 	.word	0x20000350
 8001b04:	200002c8 	.word	0x200002c8
 8001b08:	20000488 	.word	0x20000488
 8001b0c:	20000494 	.word	0x20000494
 8001b10:	48000400 	.word	0x48000400
 8001b14:	20000498 	.word	0x20000498
 8001b18:	20000001 	.word	0x20000001
 8001b1c:	2000034c 	.word	0x2000034c
 8001b20:	08008680 	.word	0x08008680

08001b24 <charge_fluxer_battery>:

static void charge_fluxer_battery(void) {
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
	// Fluxer recharging using PB.
	if (fluxer_battery <= 10 && BATTLE_WARNING_STATE != 1) {
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <charge_fluxer_battery+0x3c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b0a      	cmp	r3, #10
 8001b2e:	d80d      	bhi.n	8001b4c <charge_fluxer_battery+0x28>
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <charge_fluxer_battery+0x40>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d009      	beq.n	8001b4c <charge_fluxer_battery+0x28>
		fluxer_battery += 1;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <charge_fluxer_battery+0x3c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <charge_fluxer_battery+0x3c>)
 8001b42:	701a      	strb	r2, [r3, #0]
		press = 0;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <charge_fluxer_battery+0x44>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e003      	b.n	8001b54 <charge_fluxer_battery+0x30>
	} else {
		press = 0;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <charge_fluxer_battery+0x44>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
	}
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000001 	.word	0x20000001
 8001b64:	2000034c 	.word	0x2000034c
 8001b68:	20000349 	.word	0x20000349

08001b6c <battle_warning>:

static void battle_warning(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	// Toggle WARNING LED every 3 seconds.
	if ((HAL_GetTick() - time_BATTLE_WARNING_LED) > 333) {
 8001b70:	f001 fbe4 	bl	800333c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <battle_warning+0x6c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8001b80:	d309      	bcc.n	8001b96 <battle_warning+0x2a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b86:	4815      	ldr	r0, [pc, #84]	; (8001bdc <battle_warning+0x70>)
 8001b88:	f001 ffc4 	bl	8003b14 <HAL_GPIO_TogglePin>
		time_BATTLE_WARNING_LED = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 8001b8c:	f001 fbd6 	bl	800333c <HAL_GetTick>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <battle_warning+0x6c>)
 8001b94:	6013      	str	r3, [r2, #0]
	}

	// Warning Message sent every once a second
	if ((HAL_GetTick() - time_BATTLE_WARNING_MESSAGE) > 1000) {
 8001b96:	f001 fbd1 	bl	800333c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <battle_warning+0x74>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ba6:	d915      	bls.n	8001bd4 <battle_warning+0x68>
		// send BATTLE mode: SOS
		//memset(message_print, 0, strlen(message_print));
		snprintf(message_print, MESSAGE_SIZE, "4, BATTLE mode: SOS \r\n");
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <battle_warning+0x78>)
 8001baa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001bae:	480e      	ldr	r0, [pc, #56]	; (8001be8 <battle_warning+0x7c>)
 8001bb0:	f004 fb72 	bl	8006298 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <battle_warning+0x7c>)
 8001bb6:	f7fe fb0b 	bl	80001d0 <strlen>
 8001bba:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc2:	4909      	ldr	r1, [pc, #36]	; (8001be8 <battle_warning+0x7c>)
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <battle_warning+0x80>)
 8001bc6:	f002 fe3d 	bl	8004844 <HAL_UART_Transmit>
		time_BATTLE_WARNING_MESSAGE = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 8001bca:	f001 fbb7 	bl	800333c <HAL_GetTick>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <battle_warning+0x74>)
 8001bd2:	6013      	str	r3, [r2, #0]
	}
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000048c 	.word	0x2000048c
 8001bdc:	48000400 	.word	0x48000400
 8001be0:	20000490 	.word	0x20000490
 8001be4:	08008698 	.word	0x08008698
 8001be8:	20000350 	.word	0x20000350
 8001bec:	200002c8 	.word	0x200002c8

08001bf0 <reset_sensor_warning_flags>:
/**
 * @brief  	Set the flags of various sensors to the default state
 * @note	For example, accflag = SAFE; gyroflag = SAFE; and so on ...
 * @retval	None
 */
void reset_sensor_warning_flags(void) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	GYROSCOPE_Flag = SAFE;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <reset_sensor_warning_flags+0x2c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
	MAGNETOMETER_Flag = SAFE;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <reset_sensor_warning_flags+0x30>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
	PRESSURE_Flag = SAFE;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <reset_sensor_warning_flags+0x34>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
	HUMIDITY_Flag = SAFE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <reset_sensor_warning_flags+0x38>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
	IR_Flag = SAFE;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <reset_sensor_warning_flags+0x3c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	2000049c 	.word	0x2000049c
 8001c20:	2000049d 	.word	0x2000049d
 8001c24:	2000049e 	.word	0x2000049e
 8001c28:	2000049f 	.word	0x2000049f
 8001c2c:	200004a0 	.word	0x200004a0

08001c30 <acc_interrupt_config>:
 * @brief  	Set LSM6DSL to detect freefall and eanble INT1
 * @note
 * @retval	None
 */
void acc_interrupt_config(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	//1000 0000 set bit[7] to enable interrupts
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x80);
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	2158      	movs	r1, #88	; 0x58
 8001c38:	20d4      	movs	r0, #212	; 0xd4
 8001c3a:	f000 fbd5 	bl	80023e8 <SENSOR_IO_Write>
	//0000 1000 FF_Dur [4:0] = 00001 & FF_Ths [2:0] = 000
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_FREE_FALL, 0x08);
 8001c3e:	2208      	movs	r2, #8
 8001c40:	215d      	movs	r1, #93	; 0x5d
 8001c42:	20d4      	movs	r0, #212	; 0xd4
 8001c44:	f000 fbd0 	bl	80023e8 <SENSOR_IO_Write>
	//0001 0000 Enables bit 4 of MD1_CFG Register
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x10);
 8001c48:	2210      	movs	r2, #16
 8001c4a:	215e      	movs	r1, #94	; 0x5e
 8001c4c:	20d4      	movs	r0, #212	; 0xd4
 8001c4e:	f000 fbcb 	bl	80023e8 <SENSOR_IO_Write>
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) //For LED and PB
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]

	//GPIO Ports Clock Enable
	__HAL_RCC_GPIOA_CLK_ENABLE();// Buzzer output
 8001c6e:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a3f      	ldr	r2, [pc, #252]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();// For LED
 8001c86:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	4a39      	ldr	r2, [pc, #228]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();// For Push Button
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	4a33      	ldr	r2, [pc, #204]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001caa:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();// IR Sensor and LSM6DSL interrupt
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	4a2d      	ldr	r2, [pc, #180]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

	//Configure GPIO pin Output Level // Pin Initialization
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd4:	4827      	ldr	r0, [pc, #156]	; (8001d74 <MX_GPIO_Init+0x11c>)
 8001cd6:	f001 ff05 	bl	8003ae4 <HAL_GPIO_WritePin>

	//Configure GPIO pin LED2_Pin  // Pin Configuration
	GPIO_InitStruct.Pin = LED2_Pin;
 8001cda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4820      	ldr	r0, [pc, #128]	; (8001d74 <MX_GPIO_Init+0x11c>)
 8001cf4:	f001 fc40 	bl	8003578 <HAL_GPIO_Init>

	//Configuration of D8 as output for Buzzer
	GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); // PB8
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481a      	ldr	r0, [pc, #104]	; (8001d74 <MX_GPIO_Init+0x11c>)
 8001d0c:	f001 fc34 	bl	8003578 <HAL_GPIO_Init>

	//Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_GPIO_Init+0x120>)
 8001d18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4815      	ldr	r0, [pc, #84]	; (8001d7c <MX_GPIO_Init+0x124>)
 8001d26:	f001 fc27 	bl	8003578 <HAL_GPIO_Init>

	//Configuration of D9 as input for IR Sensor
	GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // Pull-UP / not sure?
 8001d34:	2301      	movs	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d42:	f001 fc19 	bl	8003578 <HAL_GPIO_Init>

	// Configuration of LSM6DSL EXTI 11
	GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8001d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <MX_GPIO_Init+0x120>)
 8001d4e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct); // PD11
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <MX_GPIO_Init+0x128>)
 8001d5c:	f001 fc0c 	bl	8003578 <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d60:	2028      	movs	r0, #40	; 0x28
 8001d62:	f001 fbee 	bl	8003542 <HAL_NVIC_EnableIRQ>
}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	48000400 	.word	0x48000400
 8001d78:	10210000 	.word	0x10210000
 8001d7c:	48000800 	.word	0x48000800
 8001d80:	48000c00 	.word	0x48000c00

08001d84 <UART1_Init>:
 *
 * @note
 *
 * @retval	None
 */
static void UART1_Init(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <UART1_Init+0xa0>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <UART1_Init+0xa0>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <UART1_Init+0xa0>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db0:	2307      	movs	r3, #7
 8001db2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4817      	ldr	r0, [pc, #92]	; (8001e28 <UART1_Init+0xa4>)
 8001dca:	f001 fbd5 	bl	8003578 <HAL_GPIO_Init>

	/* Configuring UART1 */
	huart1.Instance = USART1;
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <UART1_Init+0xa8>)
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <UART1_Init+0xac>)
 8001dd2:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <UART1_Init+0xa8>)
 8001dd6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dda:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <UART1_Init+0xa8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <UART1_Init+0xa8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <UART1_Init+0xa8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <UART1_Init+0xa8>)
 8001df0:	220c      	movs	r2, #12
 8001df2:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <UART1_Init+0xa8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <UART1_Init+0xa8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <UART1_Init+0xa8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <UART1_Init+0xa8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001e0c:	4807      	ldr	r0, [pc, #28]	; (8001e2c <UART1_Init+0xa8>)
 8001e0e:	f002 fccb 	bl	80047a8 <HAL_UART_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d000      	beq.n	8001e1a <UART1_Init+0x96>
		while (1)
 8001e18:	e7fe      	b.n	8001e18 <UART1_Init+0x94>
			;
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	48000400 	.word	0x48000400
 8001e2c:	200002c8 	.word	0x200002c8
 8001e30:	40013800 	.word	0x40013800

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_MspInit+0x44>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_MspInit+0x44>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6613      	str	r3, [r2, #96]	; 0x60
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_MspInit+0x44>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_MspInit+0x44>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HAL_MspInit+0x44>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_MspInit+0x44>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_I2C_MspInit+0x7c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d128      	bne.n	8001ef0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_I2C_MspInit+0x80>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a16      	ldr	r2, [pc, #88]	; (8001efc <HAL_I2C_MspInit+0x80>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_I2C_MspInit+0x80>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001eb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ebc:	2312      	movs	r3, #18
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480b      	ldr	r0, [pc, #44]	; (8001f00 <HAL_I2C_MspInit+0x84>)
 8001ed4:	f001 fb50 	bl	8003578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_I2C_MspInit+0x80>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_I2C_MspInit+0x80>)
 8001ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_I2C_MspInit+0x80>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40005800 	.word	0x40005800
 8001efc:	40021000 	.word	0x40021000
 8001f00:	48000400 	.word	0x48000400

08001f04 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_I2C_MspDeInit+0x30>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10a      	bne.n	8001f2c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_I2C_MspDeInit+0x34>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_I2C_MspDeInit+0x34>)
 8001f1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001f22:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_I2C_MspDeInit+0x38>)
 8001f28:	f001 fcd0 	bl	80038cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40005800 	.word	0x40005800
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48000400 	.word	0x48000400

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <HAL_UART_MspInit+0xd8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d128      	bne.n	8001fb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f66:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a27      	ldr	r2, [pc, #156]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001f92:	23c0      	movs	r3, #192	; 0xc0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	481c      	ldr	r0, [pc, #112]	; (8002020 <HAL_UART_MspInit+0xe0>)
 8001fae:	f001 fae3 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fb2:	e02d      	b.n	8002010 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_UART_MspInit+0xe4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d128      	bne.n	8002010 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	4a16      	ldr	r2, [pc, #88]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002000:	2307      	movs	r3, #7
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <HAL_UART_MspInit+0xe8>)
 800200c:	f001 fab4 	bl	8003578 <HAL_GPIO_Init>
}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40013800 	.word	0x40013800
 800201c:	40021000 	.word	0x40021000
 8002020:	48000400 	.word	0x48000400
 8002024:	40004800 	.word	0x40004800
 8002028:	48000c00 	.word	0x48000c00

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <MemManage_Handler+0x4>

08002046 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <UsageFault_Handler+0x4>

08002052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f001 f94a 	bl	8003318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800208c:	2020      	movs	r0, #32
 800208e:	f001 fd5b 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002092:	2040      	movs	r0, #64	; 0x40
 8002094:	f001 fd58 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002098:	2080      	movs	r0, #128	; 0x80
 800209a:	f001 fd55 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800209e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020a2:	f001 fd51 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}

080020aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80020ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020b2:	f001 fd49 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80020b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020ba:	f001 fd45 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020c2:	f001 fd41 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80020c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ca:	f001 fd3d 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80020ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020d2:	f001 fd39 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <_sbrk+0x50>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <_sbrk+0x16>
		heap_end = &end;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <_sbrk+0x50>)
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <_sbrk+0x54>)
 80020f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <_sbrk+0x50>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <_sbrk+0x50>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	466a      	mov	r2, sp
 8002102:	4293      	cmp	r3, r2
 8002104:	d907      	bls.n	8002116 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002106:	f003 fa7f 	bl	8005608 <__errno>
 800210a:	4603      	mov	r3, r0
 800210c:	220c      	movs	r2, #12
 800210e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
 8002114:	e006      	b.n	8002124 <_sbrk+0x48>
	}

	heap_end += incr;
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <_sbrk+0x50>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a03      	ldr	r2, [pc, #12]	; (800212c <_sbrk+0x50>)
 8002120:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000544 	.word	0x20000544
 8002130:	20000660 	.word	0x20000660

08002134 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <SystemInit+0x64>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	4a16      	ldr	r2, [pc, #88]	; (8002198 <SystemInit+0x64>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <SystemInit+0x68>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a13      	ldr	r2, [pc, #76]	; (800219c <SystemInit+0x68>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <SystemInit+0x68>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <SystemInit+0x68>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <SystemInit+0x68>)
 8002160:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002164:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002168:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <SystemInit+0x68>)
 800216c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002170:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <SystemInit+0x68>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <SystemInit+0x68>)
 8002178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <SystemInit+0x68>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SystemInit+0x64>)
 8002186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800218a:	609a      	str	r2, [r3, #8]
#endif
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	40021000 	.word	0x40021000

080021a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021a6:	e003      	b.n	80021b0 <LoopCopyDataInit>

080021a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021ae:	3104      	adds	r1, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021b0:	480b      	ldr	r0, [pc, #44]	; (80021e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80021b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021b8:	d3f6      	bcc.n	80021a8 <CopyDataInit>
	ldr	r2, =_sbss
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80021bc:	e002      	b.n	80021c4 <LoopFillZerobss>

080021be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80021be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80021c0:	f842 3b04 	str.w	r3, [r2], #4

080021c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <LoopForever+0x16>)
	cmp	r2, r3
 80021c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80021c8:	d3f9      	bcc.n	80021be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ca:	f7ff ffb3 	bl	8002134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f003 fb17 	bl	8005800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021d2:	f7fe feb1 	bl	8000f38 <main>

080021d6 <LoopForever>:

LoopForever:
    b LoopForever
 80021d6:	e7fe      	b.n	80021d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80021dc:	08008ad0 	.word	0x08008ad0
	ldr	r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021e4:	200002a4 	.word	0x200002a4
	ldr	r2, =_sbss
 80021e8:	200002a4 	.word	0x200002a4
	ldr	r3, = _ebss
 80021ec:	20000660 	.word	0x20000660

080021f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC1_2_IRQHandler>
	...

080021f4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <I2Cx_MspInit+0xa8>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	4a26      	ldr	r2, [pc, #152]	; (800229c <I2Cx_MspInit+0xa8>)
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <I2Cx_MspInit+0xa8>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002214:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002218:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800221a:	2312      	movs	r3, #18
 800221c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800221e:	2301      	movs	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002226:	2304      	movs	r3, #4
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	481b      	ldr	r0, [pc, #108]	; (80022a0 <I2Cx_MspInit+0xac>)
 8002232:	f001 f9a1 	bl	8003578 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <I2Cx_MspInit+0xac>)
 800223e:	f001 f99b 	bl	8003578 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <I2Cx_MspInit+0xa8>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <I2Cx_MspInit+0xa8>)
 8002248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800224c:	6593      	str	r3, [r2, #88]	; 0x58
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <I2Cx_MspInit+0xa8>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <I2Cx_MspInit+0xa8>)
 800225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <I2Cx_MspInit+0xa8>)
 8002260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002264:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <I2Cx_MspInit+0xa8>)
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <I2Cx_MspInit+0xa8>)
 800226c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002270:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	210f      	movs	r1, #15
 8002276:	2021      	movs	r0, #33	; 0x21
 8002278:	f001 f947 	bl	800350a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800227c:	2021      	movs	r0, #33	; 0x21
 800227e:	f001 f960 	bl	8003542 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	210f      	movs	r1, #15
 8002286:	2022      	movs	r0, #34	; 0x22
 8002288:	f001 f93f 	bl	800350a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800228c:	2022      	movs	r0, #34	; 0x22
 800228e:	f001 f958 	bl	8003542 <HAL_NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	; 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	48000400 	.word	0x48000400

080022a4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <I2Cx_Init+0x54>)
 80022b0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <I2Cx_Init+0x58>)
 80022b6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff89 	bl	80021f4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f001 fc48 	bl	8003b78 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80022e8:	2100      	movs	r1, #0
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f002 f94c 	bl	8004588 <HAL_I2CEx_ConfigAnalogFilter>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40005800 	.word	0x40005800
 80022fc:	00702681 	.word	0x00702681

08002300 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af04      	add	r7, sp, #16
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4603      	mov	r3, r0
 8002310:	72fb      	strb	r3, [r7, #11]
 8002312:	460b      	mov	r3, r1
 8002314:	813b      	strh	r3, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	b299      	uxth	r1, r3
 8002322:	88f8      	ldrh	r0, [r7, #6]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232a:	9302      	str	r3, [sp, #8]
 800232c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4603      	mov	r3, r0
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f001 fdf0 	bl	8003f1c <HAL_I2C_Mem_Read>
 800233c:	4603      	mov	r3, r0
 800233e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	4619      	mov	r1, r3
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f832 	bl	80023b4 <I2Cx_Error>
  }
  return status;
 8002350:	7dfb      	ldrb	r3, [r7, #23]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b08a      	sub	sp, #40	; 0x28
 800235e:	af04      	add	r7, sp, #16
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4603      	mov	r3, r0
 800236a:	72fb      	strb	r3, [r7, #11]
 800236c:	460b      	mov	r3, r1
 800236e:	813b      	strh	r3, [r7, #8]
 8002370:	4613      	mov	r3, r2
 8002372:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002378:	7afb      	ldrb	r3, [r7, #11]
 800237a:	b299      	uxth	r1, r3
 800237c:	88f8      	ldrh	r0, [r7, #6]
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4603      	mov	r3, r0
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f001 fcaf 	bl	8003cf4 <HAL_I2C_Mem_Write>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80023a0:	7afb      	ldrb	r3, [r7, #11]
 80023a2:	4619      	mov	r1, r3
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f805 	bl	80023b4 <I2Cx_Error>
  }
  return status;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f001 fc68 	bl	8003c96 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff6c 	bl	80022a4 <I2Cx_Init>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <SENSOR_IO_Init+0x10>)
 80023da:	f7ff ff63 	bl	80022a4 <I2Cx_Init>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000548 	.word	0x20000548

080023e8 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
 80023f2:	460b      	mov	r3, r1
 80023f4:	71bb      	strb	r3, [r7, #6]
 80023f6:	4613      	mov	r3, r2
 80023f8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	79f9      	ldrb	r1, [r7, #7]
 8002400:	2301      	movs	r3, #1
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	1d7b      	adds	r3, r7, #5
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <SENSOR_IO_Write+0x30>)
 800240c:	f7ff ffa5 	bl	800235a <I2Cx_WriteMultiple>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000548 	.word	0x20000548

0800241c <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
 8002422:	4603      	mov	r3, r0
 8002424:	460a      	mov	r2, r1
 8002426:	71fb      	strb	r3, [r7, #7]
 8002428:	4613      	mov	r3, r2
 800242a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	b29a      	uxth	r2, r3
 8002434:	79f9      	ldrb	r1, [r7, #7]
 8002436:	2301      	movs	r3, #1
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	f107 030f 	add.w	r3, r7, #15
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2301      	movs	r3, #1
 8002442:	4804      	ldr	r0, [pc, #16]	; (8002454 <SENSOR_IO_Read+0x38>)
 8002444:	f7ff ff5c 	bl	8002300 <I2Cx_ReadMultiple>

  return read_value;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000548 	.word	0x20000548

08002458 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af02      	add	r7, sp, #8
 800245e:	603a      	str	r2, [r7, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
 8002466:	460b      	mov	r3, r1
 8002468:	71bb      	strb	r3, [r7, #6]
 800246a:	4613      	mov	r3, r2
 800246c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800246e:	79bb      	ldrb	r3, [r7, #6]
 8002470:	b29a      	uxth	r2, r3
 8002472:	79f9      	ldrb	r1, [r7, #7]
 8002474:	88bb      	ldrh	r3, [r7, #4]
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2301      	movs	r3, #1
 800247e:	4804      	ldr	r0, [pc, #16]	; (8002490 <SENSOR_IO_ReadMultiple+0x38>)
 8002480:	f7ff ff3e 	bl	8002300 <I2Cx_ReadMultiple>
 8002484:	4603      	mov	r3, r0
 8002486:	b29b      	uxth	r3, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000548 	.word	0x20000548

08002494 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800249e:	2300      	movs	r3, #0
 80024a0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <BSP_ACCELERO_Init+0x74>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4798      	blx	r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b6a      	cmp	r3, #106	; 0x6a
 80024ac:	d002      	beq.n	80024b4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e024      	b.n	80024fe <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <BSP_ACCELERO_Init+0x78>)
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <BSP_ACCELERO_Init+0x74>)
 80024b8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80024ba:	2330      	movs	r3, #48	; 0x30
 80024bc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80024c2:	2300      	movs	r3, #0
 80024c4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80024c6:	2340      	movs	r3, #64	; 0x40
 80024c8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80024d2:	797a      	ldrb	r2, [r7, #5]
 80024d4:	7abb      	ldrb	r3, [r7, #10]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80024dc:	7a3b      	ldrb	r3, [r7, #8]
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <BSP_ACCELERO_Init+0x78>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	89ba      	ldrh	r2, [r7, #12]
 80024fa:	4610      	mov	r0, r2
 80024fc:	4798      	blx	r3
  }  

  return ret;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000064 	.word	0x20000064
 800250c:	20000594 	.word	0x20000594

08002510 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
    }
  }
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000594 	.word	0x20000594

08002540 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800254a:	2300      	movs	r3, #0
 800254c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <BSP_GYRO_Init+0x7c>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4798      	blx	r3
 8002554:	4603      	mov	r3, r0
 8002556:	2b6a      	cmp	r3, #106	; 0x6a
 8002558:	d002      	beq.n	8002560 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e028      	b.n	80025b2 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <BSP_GYRO_Init+0x80>)
 8002562:	4a16      	ldr	r2, [pc, #88]	; (80025bc <BSP_GYRO_Init+0x7c>)
 8002564:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800256a:	2330      	movs	r3, #48	; 0x30
 800256c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002576:	2340      	movs	r3, #64	; 0x40
 8002578:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800257e:	230c      	movs	r3, #12
 8002580:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002582:	7aba      	ldrb	r2, [r7, #10]
 8002584:	797b      	ldrb	r3, [r7, #5]
 8002586:	4313      	orrs	r3, r2
 8002588:	b2db      	uxtb	r3, r3
 800258a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800258c:	7a3b      	ldrb	r3, [r7, #8]
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	b2db      	uxtb	r3, r3
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	b21b      	sxth	r3, r3
 80025a0:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <BSP_GYRO_Init+0x80>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	89ba      	ldrh	r2, [r7, #12]
 80025aa:	4610      	mov	r0, r2
 80025ac:	4798      	blx	r3
    
    ret = GYRO_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000098 	.word	0x20000098
 80025c0:	20000598 	.word	0x20000598

080025c4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <BSP_GYRO_GetXYZ+0x2c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <BSP_GYRO_GetXYZ+0x2c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d004      	beq.n	80025e8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <BSP_GYRO_GetXYZ+0x2c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000598 	.word	0x20000598

080025f4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <BSP_HSENSOR_Init+0x38>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	20be      	movs	r0, #190	; 0xbe
 8002600:	4798      	blx	r3
 8002602:	4603      	mov	r3, r0
 8002604:	2bbc      	cmp	r3, #188	; 0xbc
 8002606:	d002      	beq.n	800260e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	e009      	b.n	8002622 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <BSP_HSENSOR_Init+0x3c>)
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <BSP_HSENSOR_Init+0x38>)
 8002612:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <BSP_HSENSOR_Init+0x3c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	20be      	movs	r0, #190	; 0xbe
 800261c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002622:	687b      	ldr	r3, [r7, #4]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000008 	.word	0x20000008
 8002630:	2000059c 	.word	0x2000059c

08002634 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <BSP_HSENSOR_ReadHumidity+0x18>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	20be      	movs	r0, #190	; 0xbe
 8002640:	4798      	blx	r3
 8002642:	eef0 7a40 	vmov.f32	s15, s0
}
 8002646:	eeb0 0a67 	vmov.f32	s0, s15
 800264a:	bd80      	pop	{r7, pc}
 800264c:	2000059c 	.word	0x2000059c

08002650 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <BSP_MAGNETO_Init+0x50>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4798      	blx	r3
 8002660:	4603      	mov	r3, r0
 8002662:	2b3d      	cmp	r3, #61	; 0x3d
 8002664:	d002      	beq.n	800266c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	e013      	b.n	8002694 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <BSP_MAGNETO_Init+0x54>)
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <BSP_MAGNETO_Init+0x50>)
 8002670:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002672:	2358      	movs	r3, #88	; 0x58
 8002674:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002676:	2300      	movs	r3, #0
 8002678:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800267a:	2300      	movs	r3, #0
 800267c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800267e:	2308      	movs	r3, #8
 8002680:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002682:	2340      	movs	r3, #64	; 0x40
 8002684:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <BSP_MAGNETO_Init+0x54>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	463a      	mov	r2, r7
 800268e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002692:	4798      	blx	r3
  } 

  return ret;  
 8002694:	79fb      	ldrb	r3, [r7, #7]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000024 	.word	0x20000024
 80026a4:	200005a0 	.word	0x200005a0

080026a8 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <BSP_MAGNETO_GetXYZ+0x2c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <BSP_MAGNETO_GetXYZ+0x2c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <BSP_MAGNETO_GetXYZ+0x2c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
    }
  }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200005a0 	.word	0x200005a0

080026d8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <BSP_PSENSOR_Init+0x38>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	20ba      	movs	r0, #186	; 0xba
 80026e4:	4798      	blx	r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	2bb1      	cmp	r3, #177	; 0xb1
 80026ea:	d002      	beq.n	80026f2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	e009      	b.n	8002706 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <BSP_PSENSOR_Init+0x3c>)
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <BSP_PSENSOR_Init+0x38>)
 80026f6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <BSP_PSENSOR_Init+0x3c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	20ba      	movs	r0, #186	; 0xba
 8002700:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000058 	.word	0x20000058
 8002714:	200005a4 	.word	0x200005a4

08002718 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <BSP_PSENSOR_ReadPressure+0x18>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	20ba      	movs	r0, #186	; 0xba
 8002724:	4798      	blx	r3
 8002726:	eef0 7a40 	vmov.f32	s15, s0
}
 800272a:	eeb0 0a67 	vmov.f32	s0, s15
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200005a4 	.word	0x200005a4

08002734 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <BSP_TSENSOR_Init+0x30>)
 8002740:	4a09      	ldr	r2, [pc, #36]	; (8002768 <BSP_TSENSOR_Init+0x34>)
 8002742:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002744:	f7ff fe46 	bl	80023d4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <BSP_TSENSOR_Init+0x30>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2100      	movs	r1, #0
 8002750:	20be      	movs	r0, #190	; 0xbe
 8002752:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002758:	79fb      	ldrb	r3, [r7, #7]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200005a8 	.word	0x200005a8
 8002768:	20000014 	.word	0x20000014

0800276c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <BSP_TSENSOR_ReadTemp+0x18>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	20be      	movs	r0, #190	; 0xbe
 8002778:	4798      	blx	r3
 800277a:	eef0 7a40 	vmov.f32	s15, s0
}
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200005a8 	.word	0x200005a8

08002788 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2120      	movs	r1, #32
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fe3f 	bl	800241c <SENSOR_IO_Read>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027c8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	2120      	movs	r1, #32
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fe08 	bl	80023e8 <SENSOR_IO_Write>
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80027ee:	f7ff fdf1 	bl	80023d4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	210f      	movs	r1, #15
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fe0f 	bl	800241c <SENSOR_IO_Read>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	b2d8      	uxtb	r0, r3
 800281a:	f107 020c 	add.w	r2, r7, #12
 800281e:	2302      	movs	r3, #2
 8002820:	21b0      	movs	r1, #176	; 0xb0
 8002822:	f7ff fe19 	bl	8002458 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002826:	7b3b      	ldrb	r3, [r7, #12]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800282e:	7b7b      	ldrb	r3, [r7, #13]
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2d8      	uxtb	r0, r3
 800283a:	f107 020c 	add.w	r2, r7, #12
 800283e:	2302      	movs	r3, #2
 8002840:	21b6      	movs	r1, #182	; 0xb6
 8002842:	f7ff fe09 	bl	8002458 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002846:	7b7b      	ldrb	r3, [r7, #13]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	b2d8      	uxtb	r0, r3
 8002858:	f107 020c 	add.w	r2, r7, #12
 800285c:	2302      	movs	r3, #2
 800285e:	21ba      	movs	r1, #186	; 0xba
 8002860:	f7ff fdfa 	bl	8002458 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002864:	7b7b      	ldrb	r3, [r7, #13]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	b21a      	sxth	r2, r3
 800286a:	7b3b      	ldrb	r3, [r7, #12]
 800286c:	b21b      	sxth	r3, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	b2d8      	uxtb	r0, r3
 8002876:	f107 020c 	add.w	r2, r7, #12
 800287a:	2302      	movs	r3, #2
 800287c:	21a8      	movs	r1, #168	; 0xa8
 800287e:	f7ff fdeb 	bl	8002458 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002882:	7b7b      	ldrb	r3, [r7, #13]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	b21a      	sxth	r2, r3
 8002888:	7b3b      	ldrb	r3, [r7, #12]
 800288a:	b21b      	sxth	r3, r3
 800288c:	4313      	orrs	r3, r2
 800288e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002890:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002894:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028a2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80028a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80028b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80028bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028de:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80028e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80028e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ee:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80028f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80028f6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800293c <HTS221_H_ReadHumidity+0x130>
 80028fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	dd01      	ble.n	8002908 <HTS221_H_ReadHumidity+0xfc>
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HTS221_H_ReadHumidity+0x134>)
 8002906:	e00a      	b.n	800291e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002908:	edd7 7a04 	vldr	s15, [r7, #16]
 800290c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	d502      	bpl.n	800291c <HTS221_H_ReadHumidity+0x110>
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e000      	b.n	800291e <HTS221_H_ReadHumidity+0x112>
 800291c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800291e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002920:	edd7 7a04 	vldr	s15, [r7, #16]
 8002924:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002928:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800292c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002930:	eeb0 0a67 	vmov.f32	s0, s15
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	447a0000 	.word	0x447a0000
 8002940:	447a0000 	.word	0x447a0000

08002944 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2120      	movs	r1, #32
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fd60 	bl	800241c <SENSOR_IO_Read>
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	f023 0303 	bic.w	r3, r3, #3
 8002976:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002986:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	2120      	movs	r1, #32
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fd29 	bl	80023e8 <SENSOR_IO_Write>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b088      	sub	sp, #32
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	b2d8      	uxtb	r0, r3
 80029ac:	f107 0208 	add.w	r2, r7, #8
 80029b0:	2302      	movs	r3, #2
 80029b2:	21b2      	movs	r1, #178	; 0xb2
 80029b4:	f7ff fd50 	bl	8002458 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2135      	movs	r1, #53	; 0x35
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fd2c 	bl	800241c <SENSOR_IO_Read>
 80029c4:	4603      	mov	r3, r0
 80029c6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80029c8:	7ffb      	ldrb	r3, [r7, #31]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	7a3b      	ldrb	r3, [r7, #8]
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	4313      	orrs	r3, r2
 80029da:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80029dc:	7ffb      	ldrb	r3, [r7, #31]
 80029de:	019b      	lsls	r3, r3, #6
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	7a7b      	ldrb	r3, [r7, #9]
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80029f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029f4:	10db      	asrs	r3, r3, #3
 80029f6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80029f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029fc:	10db      	asrs	r3, r3, #3
 80029fe:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	b2d8      	uxtb	r0, r3
 8002a04:	f107 0208 	add.w	r2, r7, #8
 8002a08:	2304      	movs	r3, #4
 8002a0a:	21bc      	movs	r1, #188	; 0xbc
 8002a0c:	f7ff fd24 	bl	8002458 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a10:	7a7b      	ldrb	r3, [r7, #9]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	7a3b      	ldrb	r3, [r7, #8]
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	7abb      	ldrb	r3, [r7, #10]
 8002a26:	b21b      	sxth	r3, r3
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	b2d8      	uxtb	r0, r3
 8002a30:	f107 0208 	add.w	r2, r7, #8
 8002a34:	2302      	movs	r3, #2
 8002a36:	21aa      	movs	r1, #170	; 0xaa
 8002a38:	f7ff fd0e 	bl	8002458 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a3c:	7a7b      	ldrb	r3, [r7, #9]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	7a3b      	ldrb	r3, [r7, #8]
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002a4a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002a4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a60:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a72:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a98:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	ee07 3a90 	vmov	s15, r3
}
 8002aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002ab8:	783b      	ldrb	r3, [r7, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	2120      	movs	r1, #32
 8002abe:	203c      	movs	r0, #60	; 0x3c
 8002ac0:	f7ff fc92 	bl	80023e8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2121      	movs	r1, #33	; 0x21
 8002aca:	203c      	movs	r0, #60	; 0x3c
 8002acc:	f7ff fc8c 	bl	80023e8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002ad0:	78bb      	ldrb	r3, [r7, #2]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2122      	movs	r1, #34	; 0x22
 8002ad6:	203c      	movs	r0, #60	; 0x3c
 8002ad8:	f7ff fc86 	bl	80023e8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2123      	movs	r1, #35	; 0x23
 8002ae2:	203c      	movs	r0, #60	; 0x3c
 8002ae4:	f7ff fc80 	bl	80023e8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002ae8:	793b      	ldrb	r3, [r7, #4]
 8002aea:	461a      	mov	r2, r3
 8002aec:	2124      	movs	r1, #36	; 0x24
 8002aee:	203c      	movs	r0, #60	; 0x3c
 8002af0:	f7ff fc7a 	bl	80023e8 <SENSOR_IO_Write>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002b02:	2300      	movs	r3, #0
 8002b04:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002b06:	2122      	movs	r1, #34	; 0x22
 8002b08:	203c      	movs	r0, #60	; 0x3c
 8002b0a:	f7ff fc87 	bl	800241c <SENSOR_IO_Read>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f023 0303 	bic.w	r3, r3, #3
 8002b18:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f043 0303 	orr.w	r3, r3, #3
 8002b20:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	461a      	mov	r2, r3
 8002b26:	2122      	movs	r1, #34	; 0x22
 8002b28:	203c      	movs	r0, #60	; 0x3c
 8002b2a:	f7ff fc5d 	bl	80023e8 <SENSOR_IO_Write>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002b3a:	f7ff fc4b 	bl	80023d4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002b3e:	210f      	movs	r1, #15
 8002b40:	203c      	movs	r0, #60	; 0x3c
 8002b42:	f7ff fc6b 	bl	800241c <SENSOR_IO_Read>
 8002b46:	4603      	mov	r3, r0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002b5a:	2122      	movs	r1, #34	; 0x22
 8002b5c:	203c      	movs	r0, #60	; 0x3c
 8002b5e:	f7ff fc5d 	bl	800241c <SENSOR_IO_Read>
 8002b62:	4603      	mov	r3, r0
 8002b64:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	f023 0320 	bic.w	r3, r3, #32
 8002b6c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2122      	movs	r1, #34	; 0x22
 8002b82:	203c      	movs	r0, #60	; 0x3c
 8002b84:	f7ff fc30 	bl	80023e8 <SENSOR_IO_Write>
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002ba6:	2121      	movs	r1, #33	; 0x21
 8002ba8:	203c      	movs	r0, #60	; 0x3c
 8002baa:	f7ff fc37 	bl	800241c <SENSOR_IO_Read>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002bb2:	f107 0208 	add.w	r2, r7, #8
 8002bb6:	2306      	movs	r3, #6
 8002bb8:	21a8      	movs	r1, #168	; 0xa8
 8002bba:	203c      	movs	r0, #60	; 0x3c
 8002bbc:	f7ff fc4c 	bl	8002458 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e01c      	b.n	8002c00 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002bc6:	7ffb      	ldrb	r3, [r7, #31]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	3301      	adds	r3, #1
 8002bcc:	3320      	adds	r3, #32
 8002bce:	443b      	add	r3, r7
 8002bd0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	7ffb      	ldrb	r3, [r7, #31]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	3320      	adds	r3, #32
 8002be0:	443b      	add	r3, r7
 8002be2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	7ffb      	ldrb	r3, [r7, #31]
 8002bee:	b212      	sxth	r2, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	3320      	adds	r3, #32
 8002bf4:	443b      	add	r3, r7
 8002bf6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002bfa:	7ffb      	ldrb	r3, [r7, #31]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d9df      	bls.n	8002bc6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002c0c:	2b60      	cmp	r3, #96	; 0x60
 8002c0e:	d013      	beq.n	8002c38 <LIS3MDL_MagReadXYZ+0xa8>
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	dc14      	bgt.n	8002c3e <LIS3MDL_MagReadXYZ+0xae>
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d00c      	beq.n	8002c32 <LIS3MDL_MagReadXYZ+0xa2>
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	dc10      	bgt.n	8002c3e <LIS3MDL_MagReadXYZ+0xae>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <LIS3MDL_MagReadXYZ+0x96>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d003      	beq.n	8002c2c <LIS3MDL_MagReadXYZ+0x9c>
 8002c24:	e00b      	b.n	8002c3e <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <LIS3MDL_MagReadXYZ+0xfc>)
 8002c28:	61bb      	str	r3, [r7, #24]
    break;
 8002c2a:	e008      	b.n	8002c3e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002c2c:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <LIS3MDL_MagReadXYZ+0x100>)
 8002c2e:	61bb      	str	r3, [r7, #24]
    break;
 8002c30:	e005      	b.n	8002c3e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <LIS3MDL_MagReadXYZ+0x104>)
 8002c34:	61bb      	str	r3, [r7, #24]
    break;
 8002c36:	e002      	b.n	8002c3e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <LIS3MDL_MagReadXYZ+0x108>)
 8002c3a:	61bb      	str	r3, [r7, #24]
    break;    
 8002c3c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	77fb      	strb	r3, [r7, #31]
 8002c42:	e01a      	b.n	8002c7a <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	3320      	adds	r3, #32
 8002c4a:	443b      	add	r3, r7
 8002c4c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c60:	7ffb      	ldrb	r3, [r7, #31]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6c:	ee17 2a90 	vmov	r2, s15
 8002c70:	b212      	sxth	r2, r2
 8002c72:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002c74:	7ffb      	ldrb	r3, [r7, #31]
 8002c76:	3301      	adds	r3, #1
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	7ffb      	ldrb	r3, [r7, #31]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d9e1      	bls.n	8002c44 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	3e0f5c29 	.word	0x3e0f5c29
 8002c90:	3e947ae1 	.word	0x3e947ae1
 8002c94:	3edc28f6 	.word	0x3edc28f6
 8002c98:	3f147ae1 	.word	0x3f147ae1

08002c9c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f879 	bl	8002da0 <LPS22HB_Init>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002cc4:	f7ff fb86 	bl	80023d4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	210f      	movs	r1, #15
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fba4 	bl	800241c <SENSOR_IO_Read>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	74fb      	strb	r3, [r7, #19]
 8002cf6:	e013      	b.n	8002d20 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	3328      	adds	r3, #40	; 0x28
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	7cfc      	ldrb	r4, [r7, #19]
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7ff fb88 	bl	800241c <SENSOR_IO_Read>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f104 0318 	add.w	r3, r4, #24
 8002d14:	443b      	add	r3, r7
 8002d16:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	74fb      	strb	r3, [r7, #19]
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d9e8      	bls.n	8002cf8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	74fb      	strb	r3, [r7, #19]
 8002d2a:	e00f      	b.n	8002d4c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	3318      	adds	r3, #24
 8002d30:	443b      	add	r3, r7
 8002d32:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d36:	461a      	mov	r2, r3
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	74fb      	strb	r3, [r7, #19]
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d9ec      	bls.n	8002d2c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d62:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2264      	movs	r2, #100	; 0x64
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da01      	bge.n	8002d78 <LPS22HB_P_ReadPressure+0x94>
 8002d74:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002d78:	131b      	asrs	r3, r3, #12
 8002d7a:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d86:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002d9c <LPS22HB_P_ReadPressure+0xb8>
 8002d8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d8e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	42c80000 	.word	0x42c80000

08002da0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	211a      	movs	r1, #26
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fb33 	bl	800241c <SENSOR_IO_Read>
 8002db6:	4603      	mov	r3, r0
 8002db8:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	211a      	movs	r1, #26
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fb08 	bl	80023e8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2110      	movs	r1, #16
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fb1c 	bl	800241c <SENSOR_IO_Read>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dee:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002df6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	f023 0302 	bic.w	r3, r3, #2
 8002dfe:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	f043 0302 	orr.w	r3, r3, #2
 8002e06:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	2110      	movs	r1, #16
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fae9 	bl	80023e8 <SENSOR_IO_Write>
}  
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	20d4      	movs	r0, #212	; 0xd4
 8002e30:	f7ff faf4 	bl	800241c <SENSOR_IO_Read>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002e3c:	7bbb      	ldrb	r3, [r7, #14]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002e44:	7bba      	ldrb	r2, [r7, #14]
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002e4c:	7bbb      	ldrb	r3, [r7, #14]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2110      	movs	r1, #16
 8002e52:	20d4      	movs	r0, #212	; 0xd4
 8002e54:	f7ff fac8 	bl	80023e8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002e58:	2112      	movs	r1, #18
 8002e5a:	20d4      	movs	r0, #212	; 0xd4
 8002e5c:	f7ff fade 	bl	800241c <SENSOR_IO_Read>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002e6c:	7bbb      	ldrb	r3, [r7, #14]
 8002e6e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002e72:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002e74:	7bba      	ldrb	r2, [r7, #14]
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002e7c:	7bbb      	ldrb	r3, [r7, #14]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2112      	movs	r1, #18
 8002e82:	20d4      	movs	r0, #212	; 0xd4
 8002e84:	f7ff fab0 	bl	80023e8 <SENSOR_IO_Write>
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002e96:	2300      	movs	r3, #0
 8002e98:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	20d4      	movs	r0, #212	; 0xd4
 8002e9e:	f7ff fabd 	bl	800241c <SENSOR_IO_Read>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	20d4      	movs	r0, #212	; 0xd4
 8002eb6:	f7ff fa97 	bl	80023e8 <SENSOR_IO_Write>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002ec6:	f7ff fa85 	bl	80023d4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002eca:	210f      	movs	r1, #15
 8002ecc:	20d4      	movs	r0, #212	; 0xd4
 8002ece:	f7ff faa5 	bl	800241c <SENSOR_IO_Read>
 8002ed2:	4603      	mov	r3, r0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002ee6:	2115      	movs	r1, #21
 8002ee8:	20d4      	movs	r0, #212	; 0xd4
 8002eea:	f7ff fa97 	bl	800241c <SENSOR_IO_Read>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	f023 0310 	bic.w	r3, r3, #16
 8002ef8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	f043 0310 	orr.w	r3, r3, #16
 8002f06:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2115      	movs	r1, #21
 8002f0e:	20d4      	movs	r0, #212	; 0xd4
 8002f10:	f7ff fa6a 	bl	80023e8 <SENSOR_IO_Write>
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002f32:	2110      	movs	r1, #16
 8002f34:	20d4      	movs	r0, #212	; 0xd4
 8002f36:	f7ff fa71 	bl	800241c <SENSOR_IO_Read>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002f3e:	f107 0208 	add.w	r2, r7, #8
 8002f42:	2306      	movs	r3, #6
 8002f44:	2128      	movs	r1, #40	; 0x28
 8002f46:	20d4      	movs	r0, #212	; 0xd4
 8002f48:	f7ff fa86 	bl	8002458 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e01c      	b.n	8002f8c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002f52:	7ffb      	ldrb	r3, [r7, #31]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	3301      	adds	r3, #1
 8002f58:	3320      	adds	r3, #32
 8002f5a:	443b      	add	r3, r7
 8002f5c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	3320      	adds	r3, #32
 8002f6c:	443b      	add	r3, r7
 8002f6e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	7ffb      	ldrb	r3, [r7, #31]
 8002f7a:	b212      	sxth	r2, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	3320      	adds	r3, #32
 8002f80:	443b      	add	r3, r7
 8002f82:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002f86:	7ffb      	ldrb	r3, [r7, #31]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	7ffb      	ldrb	r3, [r7, #31]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d9df      	bls.n	8002f52 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b0c      	cmp	r3, #12
 8002f9a:	d829      	bhi.n	8002ff0 <LSM6DSL_AccReadXYZ+0xd4>
 8002f9c:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <LSM6DSL_AccReadXYZ+0x88>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fd9 	.word	0x08002fd9
 8002fa8:	08002ff1 	.word	0x08002ff1
 8002fac:	08002ff1 	.word	0x08002ff1
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	08002feb 	.word	0x08002feb
 8002fb8:	08002ff1 	.word	0x08002ff1
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08002ff1 	.word	0x08002ff1
 8002fc4:	08002fdf 	.word	0x08002fdf
 8002fc8:	08002ff1 	.word	0x08002ff1
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08002ff1 	.word	0x08002ff1
 8002fd4:	08002fe5 	.word	0x08002fe5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <LSM6DSL_AccReadXYZ+0x120>)
 8002fda:	61bb      	str	r3, [r7, #24]
    break;
 8002fdc:	e008      	b.n	8002ff0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <LSM6DSL_AccReadXYZ+0x124>)
 8002fe0:	61bb      	str	r3, [r7, #24]
    break;
 8002fe2:	e005      	b.n	8002ff0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <LSM6DSL_AccReadXYZ+0x128>)
 8002fe6:	61bb      	str	r3, [r7, #24]
    break;
 8002fe8:	e002      	b.n	8002ff0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <LSM6DSL_AccReadXYZ+0x12c>)
 8002fec:	61bb      	str	r3, [r7, #24]
    break;    
 8002fee:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e01a      	b.n	800302c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	443b      	add	r3, r7
 8002ffe:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800300a:	edd7 7a06 	vldr	s15, [r7, #24]
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	7ffb      	ldrb	r3, [r7, #31]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800301e:	ee17 2a90 	vmov	r2, s15
 8003022:	b212      	sxth	r2, r2
 8003024:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	3301      	adds	r3, #1
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d9e1      	bls.n	8002ff6 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	3d79db23 	.word	0x3d79db23
 8003040:	3df9db23 	.word	0x3df9db23
 8003044:	3e79db23 	.word	0x3e79db23
 8003048:	3ef9db23 	.word	0x3ef9db23

0800304c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800305a:	2111      	movs	r1, #17
 800305c:	20d4      	movs	r0, #212	; 0xd4
 800305e:	f7ff f9dd 	bl	800241c <SENSOR_IO_Read>
 8003062:	4603      	mov	r3, r0
 8003064:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800306a:	7bbb      	ldrb	r3, [r7, #14]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003072:	7bba      	ldrb	r2, [r7, #14]
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	4313      	orrs	r3, r2
 8003078:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800307a:	7bbb      	ldrb	r3, [r7, #14]
 800307c:	461a      	mov	r2, r3
 800307e:	2111      	movs	r1, #17
 8003080:	20d4      	movs	r0, #212	; 0xd4
 8003082:	f7ff f9b1 	bl	80023e8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003086:	2112      	movs	r1, #18
 8003088:	20d4      	movs	r0, #212	; 0xd4
 800308a:	f7ff f9c7 	bl	800241c <SENSOR_IO_Read>
 800308e:	4603      	mov	r3, r0
 8003090:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	b29b      	uxth	r3, r3
 8003098:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800309a:	7bbb      	ldrb	r3, [r7, #14]
 800309c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80030a0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80030a2:	7bba      	ldrb	r2, [r7, #14]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80030aa:	7bbb      	ldrb	r3, [r7, #14]
 80030ac:	461a      	mov	r2, r3
 80030ae:	2112      	movs	r1, #18
 80030b0:	20d4      	movs	r0, #212	; 0xd4
 80030b2:	f7ff f999 	bl	80023e8 <SENSOR_IO_Write>
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80030c4:	2300      	movs	r3, #0
 80030c6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80030c8:	2111      	movs	r1, #17
 80030ca:	20d4      	movs	r0, #212	; 0xd4
 80030cc:	f7ff f9a6 	bl	800241c <SENSOR_IO_Read>
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	461a      	mov	r2, r3
 80030e0:	2111      	movs	r1, #17
 80030e2:	20d4      	movs	r0, #212	; 0xd4
 80030e4:	f7ff f980 	bl	80023e8 <SENSOR_IO_Write>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80030f4:	f7ff f96e 	bl	80023d4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80030f8:	210f      	movs	r1, #15
 80030fa:	20d4      	movs	r0, #212	; 0xd4
 80030fc:	f7ff f98e 	bl	800241c <SENSOR_IO_Read>
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	bd80      	pop	{r7, pc}

08003106 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003114:	2116      	movs	r1, #22
 8003116:	20d4      	movs	r0, #212	; 0xd4
 8003118:	f7ff f980 	bl	800241c <SENSOR_IO_Read>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003126:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003134:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	461a      	mov	r2, r3
 800313a:	2116      	movs	r1, #22
 800313c:	20d4      	movs	r0, #212	; 0xd4
 800313e:	f7ff f953 	bl	80023e8 <SENSOR_IO_Write>
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003154:	2300      	movs	r3, #0
 8003156:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003162:	2111      	movs	r1, #17
 8003164:	20d4      	movs	r0, #212	; 0xd4
 8003166:	f7ff f959 	bl	800241c <SENSOR_IO_Read>
 800316a:	4603      	mov	r3, r0
 800316c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800316e:	f107 0208 	add.w	r2, r7, #8
 8003172:	2306      	movs	r3, #6
 8003174:	2122      	movs	r1, #34	; 0x22
 8003176:	20d4      	movs	r0, #212	; 0xd4
 8003178:	f7ff f96e 	bl	8002458 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e01c      	b.n	80031bc <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003182:	7ffb      	ldrb	r3, [r7, #31]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	3301      	adds	r3, #1
 8003188:	3320      	adds	r3, #32
 800318a:	443b      	add	r3, r7
 800318c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003190:	b29b      	uxth	r3, r3
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	b29a      	uxth	r2, r3
 8003196:	7ffb      	ldrb	r3, [r7, #31]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	3320      	adds	r3, #32
 800319c:	443b      	add	r3, r7
 800319e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
 80031aa:	b212      	sxth	r2, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	3320      	adds	r3, #32
 80031b0:	443b      	add	r3, r7
 80031b2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	3301      	adds	r3, #1
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	7ffb      	ldrb	r3, [r7, #31]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d9df      	bls.n	8003182 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d829      	bhi.n	8003220 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	08003209 	.word	0x08003209
 80031d8:	08003221 	.word	0x08003221
 80031dc:	08003221 	.word	0x08003221
 80031e0:	08003221 	.word	0x08003221
 80031e4:	0800320f 	.word	0x0800320f
 80031e8:	08003221 	.word	0x08003221
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003221 	.word	0x08003221
 80031f4:	08003215 	.word	0x08003215
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003221 	.word	0x08003221
 8003204:	0800321b 	.word	0x0800321b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800320a:	61bb      	str	r3, [r7, #24]
    break;
 800320c:	e008      	b.n	8003220 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003210:	61bb      	str	r3, [r7, #24]
    break;
 8003212:	e005      	b.n	8003220 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003214:	4b15      	ldr	r3, [pc, #84]	; (800326c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003216:	61bb      	str	r3, [r7, #24]
    break;
 8003218:	e002      	b.n	8003220 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800321c:	61bb      	str	r3, [r7, #24]
    break;    
 800321e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003220:	2300      	movs	r3, #0
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e016      	b.n	8003254 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003226:	7ffb      	ldrb	r3, [r7, #31]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	3320      	adds	r3, #32
 800322c:	443b      	add	r3, r7
 800322e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800323a:	7ffb      	ldrb	r3, [r7, #31]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	edd7 7a06 	vldr	s15, [r7, #24]
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	3301      	adds	r3, #1
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	7ffb      	ldrb	r3, [r7, #31]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d9e5      	bls.n	8003226 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	410c0000 	.word	0x410c0000
 8003268:	418c0000 	.word	0x418c0000
 800326c:	420c0000 	.word	0x420c0000
 8003270:	428c0000 	.word	0x428c0000

08003274 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327e:	2003      	movs	r0, #3
 8003280:	f000 f938 	bl	80034f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003284:	2000      	movs	r0, #0
 8003286:	f000 f80d 	bl	80032a4 <HAL_InitTick>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	71fb      	strb	r3, [r7, #7]
 8003294:	e001      	b.n	800329a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003296:	f7fe fdcd 	bl	8001e34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800329a:	79fb      	ldrb	r3, [r7, #7]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032b0:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_InitTick+0x68>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d022      	beq.n	80032fe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_InitTick+0x6c>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_InitTick+0x68>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f946 	bl	800355e <HAL_SYSTICK_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10f      	bne.n	80032f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	d809      	bhi.n	80032f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032de:	2200      	movs	r2, #0
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	f04f 30ff 	mov.w	r0, #4294967295
 80032e6:	f000 f910 	bl	800350a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_InitTick+0x70>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e007      	b.n	8003302 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	e004      	b.n	8003302 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e001      	b.n	8003302 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200000d0 	.word	0x200000d0
 8003310:	20000004 	.word	0x20000004
 8003314:	200000cc 	.word	0x200000cc

08003318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_IncTick+0x1c>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_IncTick+0x20>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4413      	add	r3, r2
 8003326:	4a03      	ldr	r2, [pc, #12]	; (8003334 <HAL_IncTick+0x1c>)
 8003328:	6013      	str	r3, [r2, #0]
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	200005ac 	.word	0x200005ac
 8003338:	200000d0 	.word	0x200000d0

0800333c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return uwTick;
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_GetTick+0x14>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	200005ac 	.word	0x200005ac

08003354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800337c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60d3      	str	r3, [r2, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	2b00      	cmp	r3, #0
 8003406:	db0a      	blt.n	800341e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	490c      	ldr	r1, [pc, #48]	; (8003440 <__NVIC_SetPriority+0x4c>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	440b      	add	r3, r1
 8003418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800341c:	e00a      	b.n	8003434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4908      	ldr	r1, [pc, #32]	; (8003444 <__NVIC_SetPriority+0x50>)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3b04      	subs	r3, #4
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	440b      	add	r3, r1
 8003432:	761a      	strb	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000e100 	.word	0xe000e100
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f1c3 0307 	rsb	r3, r3, #7
 8003462:	2b04      	cmp	r3, #4
 8003464:	bf28      	it	cs
 8003466:	2304      	movcs	r3, #4
 8003468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3304      	adds	r3, #4
 800346e:	2b06      	cmp	r3, #6
 8003470:	d902      	bls.n	8003478 <NVIC_EncodePriority+0x30>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3b03      	subs	r3, #3
 8003476:	e000      	b.n	800347a <NVIC_EncodePriority+0x32>
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	401a      	ands	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003490:	f04f 31ff 	mov.w	r1, #4294967295
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43d9      	mvns	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	4313      	orrs	r3, r2
         );
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c0:	d301      	bcc.n	80034c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c2:	2301      	movs	r3, #1
 80034c4:	e00f      	b.n	80034e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <SysTick_Config+0x40>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ce:	210f      	movs	r1, #15
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	f7ff ff8e 	bl	80033f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SysTick_Config+0x40>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <SysTick_Config+0x40>)
 80034e0:	2207      	movs	r2, #7
 80034e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	e000e010 	.word	0xe000e010

080034f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff29 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	4603      	mov	r3, r0
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800351c:	f7ff ff3e 	bl	800339c <__NVIC_GetPriorityGrouping>
 8003520:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	6978      	ldr	r0, [r7, #20]
 8003528:	f7ff ff8e 	bl	8003448 <NVIC_EncodePriority>
 800352c:	4602      	mov	r2, r0
 800352e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff5d 	bl	80033f4 <__NVIC_SetPriority>
}
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800354c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ff31 	bl	80033b8 <__NVIC_EnableIRQ>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ffa2 	bl	80034b0 <SysTick_Config>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003586:	e17f      	b.n	8003888 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8171 	beq.w	8003882 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d00b      	beq.n	80035c0 <HAL_GPIO_Init+0x48>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d007      	beq.n	80035c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035b4:	2b11      	cmp	r3, #17
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b12      	cmp	r3, #18
 80035be:	d130      	bne.n	8003622 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035f6:	2201      	movs	r2, #1
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0201 	and.w	r2, r3, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b03      	cmp	r3, #3
 800362c:	d118      	bne.n	8003660 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003634:	2201      	movs	r2, #1
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	f003 0201 	and.w	r2, r3, #1
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x128>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b12      	cmp	r3, #18
 800369e:	d123      	bne.n	80036e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	08da      	lsrs	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3208      	adds	r2, #8
 80036a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	220f      	movs	r2, #15
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	08da      	lsrs	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3208      	adds	r2, #8
 80036e2:	6939      	ldr	r1, [r7, #16]
 80036e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0203 	and.w	r2, r3, #3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80ac 	beq.w	8003882 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372a:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <HAL_GPIO_Init+0x330>)
 800372c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372e:	4a5e      	ldr	r2, [pc, #376]	; (80038a8 <HAL_GPIO_Init+0x330>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6613      	str	r3, [r2, #96]	; 0x60
 8003736:	4b5c      	ldr	r3, [pc, #368]	; (80038a8 <HAL_GPIO_Init+0x330>)
 8003738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003742:	4a5a      	ldr	r2, [pc, #360]	; (80038ac <HAL_GPIO_Init+0x334>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	220f      	movs	r2, #15
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800376c:	d025      	beq.n	80037ba <HAL_GPIO_Init+0x242>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4f      	ldr	r2, [pc, #316]	; (80038b0 <HAL_GPIO_Init+0x338>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01f      	beq.n	80037b6 <HAL_GPIO_Init+0x23e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4e      	ldr	r2, [pc, #312]	; (80038b4 <HAL_GPIO_Init+0x33c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d019      	beq.n	80037b2 <HAL_GPIO_Init+0x23a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4d      	ldr	r2, [pc, #308]	; (80038b8 <HAL_GPIO_Init+0x340>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_GPIO_Init+0x236>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4c      	ldr	r2, [pc, #304]	; (80038bc <HAL_GPIO_Init+0x344>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00d      	beq.n	80037aa <HAL_GPIO_Init+0x232>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4b      	ldr	r2, [pc, #300]	; (80038c0 <HAL_GPIO_Init+0x348>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <HAL_GPIO_Init+0x22e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4a      	ldr	r2, [pc, #296]	; (80038c4 <HAL_GPIO_Init+0x34c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_GPIO_Init+0x22a>
 800379e:	2306      	movs	r3, #6
 80037a0:	e00c      	b.n	80037bc <HAL_GPIO_Init+0x244>
 80037a2:	2307      	movs	r3, #7
 80037a4:	e00a      	b.n	80037bc <HAL_GPIO_Init+0x244>
 80037a6:	2305      	movs	r3, #5
 80037a8:	e008      	b.n	80037bc <HAL_GPIO_Init+0x244>
 80037aa:	2304      	movs	r3, #4
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x244>
 80037ae:	2303      	movs	r3, #3
 80037b0:	e004      	b.n	80037bc <HAL_GPIO_Init+0x244>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_Init+0x244>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_Init+0x244>
 80037ba:	2300      	movs	r3, #0
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	f002 0203 	and.w	r2, r2, #3
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	4093      	lsls	r3, r2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037cc:	4937      	ldr	r1, [pc, #220]	; (80038ac <HAL_GPIO_Init+0x334>)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037da:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <HAL_GPIO_Init+0x350>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037fe:	4a32      	ldr	r2, [pc, #200]	; (80038c8 <HAL_GPIO_Init+0x350>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003804:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_GPIO_Init+0x350>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003828:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <HAL_GPIO_Init+0x350>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_GPIO_Init+0x350>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_GPIO_Init+0x350>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_GPIO_Init+0x350>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800387c:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_GPIO_Init+0x350>)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	3301      	adds	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	f47f ae78 	bne.w	8003588 <HAL_GPIO_Init+0x10>
  }
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40010000 	.word	0x40010000
 80038b0:	48000400 	.word	0x48000400
 80038b4:	48000800 	.word	0x48000800
 80038b8:	48000c00 	.word	0x48000c00
 80038bc:	48001000 	.word	0x48001000
 80038c0:	48001400 	.word	0x48001400
 80038c4:	48001800 	.word	0x48001800
 80038c8:	40010400 	.word	0x40010400

080038cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80038da:	e0cd      	b.n	8003a78 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80038dc:	2201      	movs	r2, #1
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80c0 	beq.w	8003a72 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80038f2:	4a68      	ldr	r2, [pc, #416]	; (8003a94 <HAL_GPIO_DeInit+0x1c8>)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4013      	ands	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800391a:	d025      	beq.n	8003968 <HAL_GPIO_DeInit+0x9c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <HAL_GPIO_DeInit+0x1cc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01f      	beq.n	8003964 <HAL_GPIO_DeInit+0x98>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a5d      	ldr	r2, [pc, #372]	; (8003a9c <HAL_GPIO_DeInit+0x1d0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d019      	beq.n	8003960 <HAL_GPIO_DeInit+0x94>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a5c      	ldr	r2, [pc, #368]	; (8003aa0 <HAL_GPIO_DeInit+0x1d4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_GPIO_DeInit+0x90>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a5b      	ldr	r2, [pc, #364]	; (8003aa4 <HAL_GPIO_DeInit+0x1d8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00d      	beq.n	8003958 <HAL_GPIO_DeInit+0x8c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a5a      	ldr	r2, [pc, #360]	; (8003aa8 <HAL_GPIO_DeInit+0x1dc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <HAL_GPIO_DeInit+0x88>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a59      	ldr	r2, [pc, #356]	; (8003aac <HAL_GPIO_DeInit+0x1e0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_GPIO_DeInit+0x84>
 800394c:	2306      	movs	r3, #6
 800394e:	e00c      	b.n	800396a <HAL_GPIO_DeInit+0x9e>
 8003950:	2307      	movs	r3, #7
 8003952:	e00a      	b.n	800396a <HAL_GPIO_DeInit+0x9e>
 8003954:	2305      	movs	r3, #5
 8003956:	e008      	b.n	800396a <HAL_GPIO_DeInit+0x9e>
 8003958:	2304      	movs	r3, #4
 800395a:	e006      	b.n	800396a <HAL_GPIO_DeInit+0x9e>
 800395c:	2303      	movs	r3, #3
 800395e:	e004      	b.n	800396a <HAL_GPIO_DeInit+0x9e>
 8003960:	2302      	movs	r3, #2
 8003962:	e002      	b.n	800396a <HAL_GPIO_DeInit+0x9e>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_GPIO_DeInit+0x9e>
 8003968:	2300      	movs	r3, #0
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	f002 0203 	and.w	r2, r2, #3
 8003970:	0092      	lsls	r2, r2, #2
 8003972:	4093      	lsls	r3, r2
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	429a      	cmp	r2, r3
 8003978:	d132      	bne.n	80039e0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800397a:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <HAL_GPIO_DeInit+0x1e4>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	43db      	mvns	r3, r3
 8003982:	494b      	ldr	r1, [pc, #300]	; (8003ab0 <HAL_GPIO_DeInit+0x1e4>)
 8003984:	4013      	ands	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003988:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <HAL_GPIO_DeInit+0x1e4>)
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	4947      	ldr	r1, [pc, #284]	; (8003ab0 <HAL_GPIO_DeInit+0x1e4>)
 8003992:	4013      	ands	r3, r2
 8003994:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003996:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <HAL_GPIO_DeInit+0x1e4>)
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	4944      	ldr	r1, [pc, #272]	; (8003ab0 <HAL_GPIO_DeInit+0x1e4>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80039a4:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <HAL_GPIO_DeInit+0x1e4>)
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	4940      	ldr	r1, [pc, #256]	; (8003ab0 <HAL_GPIO_DeInit+0x1e4>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	220f      	movs	r2, #15
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80039c2:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <HAL_GPIO_DeInit+0x1c8>)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43da      	mvns	r2, r3
 80039d2:	4830      	ldr	r0, [pc, #192]	; (8003a94 <HAL_GPIO_DeInit+0x1c8>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	400a      	ands	r2, r1
 80039da:	3302      	adds	r3, #2
 80039dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2103      	movs	r1, #3
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	08da      	lsrs	r2, r3, #3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3208      	adds	r2, #8
 80039fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	220f      	movs	r2, #15
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	08d2      	lsrs	r2, r2, #3
 8003a14:	4019      	ands	r1, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2103      	movs	r1, #3
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	2101      	movs	r1, #1
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2103      	movs	r1, #3
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	401a      	ands	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	2101      	movs	r1, #1
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	401a      	ands	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f af2b 	bne.w	80038dc <HAL_GPIO_DeInit+0x10>
  }
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40010000 	.word	0x40010000
 8003a98:	48000400 	.word	0x48000400
 8003a9c:	48000800 	.word	0x48000800
 8003aa0:	48000c00 	.word	0x48000c00
 8003aa4:	48001000 	.word	0x48001000
 8003aa8:	48001400 	.word	0x48001400
 8003aac:	48001800 	.word	0x48001800
 8003ab0:	40010400 	.word	0x40010400

08003ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	887b      	ldrh	r3, [r7, #2]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	e001      	b.n	8003ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
 8003af0:	4613      	mov	r3, r2
 8003af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003af4:	787b      	ldrb	r3, [r7, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b00:	e002      	b.n	8003b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b02:	887a      	ldrh	r2, [r7, #2]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2c:	887a      	ldrh	r2, [r7, #2]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003b32:	e002      	b.n	8003b3a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	619a      	str	r2, [r3, #24]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b5e:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd f9a0 	bl	8000eac <HAL_GPIO_EXTI_Callback>
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e081      	b.n	8003c8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fe f96c 	bl	8001e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	e006      	b.n	8003c00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d104      	bne.n	8003c12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	ea42 0103 	orr.w	r1, r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69d9      	ldr	r1, [r3, #28]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e021      	b.n	8003cec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2224      	movs	r2, #36	; 0x24
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fe f91f 	bl	8001f04 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	461a      	mov	r2, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	817b      	strh	r3, [r7, #10]
 8003d06:	460b      	mov	r3, r1
 8003d08:	813b      	strh	r3, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	f040 80f9 	bne.w	8003f0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_I2C_Mem_Write+0x34>
 8003d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0ed      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Mem_Write+0x4e>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e0e6      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d4a:	f7ff faf7 	bl	800333c <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2319      	movs	r3, #25
 8003d56:	2201      	movs	r2, #1
 8003d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fac3 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0d1      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2221      	movs	r2, #33	; 0x21
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a3a      	ldr	r2, [r7, #32]
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d94:	88f8      	ldrh	r0, [r7, #6]
 8003d96:	893a      	ldrh	r2, [r7, #8]
 8003d98:	8979      	ldrh	r1, [r7, #10]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4603      	mov	r3, r0
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f9d3 	bl	8004150 <I2C_RequestMemoryWrite>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0a9      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2bff      	cmp	r3, #255	; 0xff
 8003dc4:	d90e      	bls.n	8003de4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22ff      	movs	r2, #255	; 0xff
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	8979      	ldrh	r1, [r7, #10]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fba5 	bl	800452c <I2C_TransferConfig>
 8003de2:	e00f      	b.n	8003e04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	8979      	ldrh	r1, [r7, #10]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fb94 	bl	800452c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 faad 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e07b      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d034      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x1c8>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d130      	bne.n	8003ebc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	2200      	movs	r2, #0
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fa3f 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e04d      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2bff      	cmp	r3, #255	; 0xff
 8003e7c:	d90e      	bls.n	8003e9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	22ff      	movs	r2, #255	; 0xff
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	8979      	ldrh	r1, [r7, #10]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fb49 	bl	800452c <I2C_TransferConfig>
 8003e9a:	e00f      	b.n	8003ebc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fb38 	bl	800452c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d19e      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fa8c 	bl	80043e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e01a      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_I2C_Mem_Write+0x224>)
 8003eee:	400b      	ands	r3, r1
 8003ef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	fe00e800 	.word	0xfe00e800

08003f1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	f040 80fd 	bne.w	800413e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_I2C_Mem_Read+0x34>
 8003f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0f1      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_I2C_Mem_Read+0x4e>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e0ea      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f72:	f7ff f9e3 	bl	800333c <HAL_GetTick>
 8003f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2319      	movs	r3, #25
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f9af 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0d5      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2222      	movs	r2, #34	; 0x22
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fbc:	88f8      	ldrh	r0, [r7, #6]
 8003fbe:	893a      	ldrh	r2, [r7, #8]
 8003fc0:	8979      	ldrh	r1, [r7, #10]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	4603      	mov	r3, r0
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f913 	bl	80041f8 <I2C_RequestMemoryRead>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0ad      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2bff      	cmp	r3, #255	; 0xff
 8003fec:	d90e      	bls.n	800400c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	8979      	ldrh	r1, [r7, #10]
 8003ffc:	4b52      	ldr	r3, [pc, #328]	; (8004148 <HAL_I2C_Mem_Read+0x22c>)
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fa91 	bl	800452c <I2C_TransferConfig>
 800400a:	e00f      	b.n	800402c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401a:	b2da      	uxtb	r2, r3
 800401c:	8979      	ldrh	r1, [r7, #10]
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_I2C_Mem_Read+0x22c>)
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fa80 	bl	800452c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	2200      	movs	r2, #0
 8004034:	2104      	movs	r1, #4
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f956 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e07c      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d034      	beq.n	80040ec <HAL_I2C_Mem_Read+0x1d0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d130      	bne.n	80040ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	2200      	movs	r2, #0
 8004092:	2180      	movs	r1, #128	; 0x80
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f927 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e04d      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2bff      	cmp	r3, #255	; 0xff
 80040ac:	d90e      	bls.n	80040cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	22ff      	movs	r2, #255	; 0xff
 80040b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	8979      	ldrh	r1, [r7, #10]
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa31 	bl	800452c <I2C_TransferConfig>
 80040ca:	e00f      	b.n	80040ec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	8979      	ldrh	r1, [r7, #10]
 80040de:	2300      	movs	r3, #0
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa20 	bl	800452c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d19a      	bne.n	800402c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f974 	bl	80043e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e01a      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2220      	movs	r2, #32
 8004110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_I2C_Mem_Read+0x230>)
 800411e:	400b      	ands	r3, r1
 8004120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	80002400 	.word	0x80002400
 800414c:	fe00e800 	.word	0xfe00e800

08004150 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	461a      	mov	r2, r3
 800415e:	4603      	mov	r3, r0
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	460b      	mov	r3, r1
 8004164:	813b      	strh	r3, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	8979      	ldrh	r1, [r7, #10]
 8004170:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <I2C_RequestMemoryWrite+0xa4>)
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f9d7 	bl	800452c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	69b9      	ldr	r1, [r7, #24]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f8f0 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e02c      	b.n	80041ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
 80041a2:	e015      	b.n	80041d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	69b9      	ldr	r1, [r7, #24]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f8d6 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e012      	b.n	80041ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c6:	893b      	ldrh	r3, [r7, #8]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f884 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	80002000 	.word	0x80002000

080041f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	817b      	strh	r3, [r7, #10]
 800420a:	460b      	mov	r3, r1
 800420c:	813b      	strh	r3, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	8979      	ldrh	r1, [r7, #10]
 8004218:	4b20      	ldr	r3, [pc, #128]	; (800429c <I2C_RequestMemoryRead+0xa4>)
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2300      	movs	r3, #0
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f984 	bl	800452c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f89d 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e02c      	b.n	8004292 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	629a      	str	r2, [r3, #40]	; 0x28
 8004248:	e015      	b.n	8004276 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800424a:	893b      	ldrh	r3, [r7, #8]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	b29b      	uxth	r3, r3
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	69b9      	ldr	r1, [r7, #24]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f883 	bl	8004368 <I2C_WaitOnTXISFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e012      	b.n	8004292 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2200      	movs	r2, #0
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f831 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	80002000 	.word	0x80002000

080042a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d103      	bne.n	80042be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d007      	beq.n	80042dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	619a      	str	r2, [r3, #24]
  }
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f8:	e022      	b.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d01e      	beq.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7ff f81b 	bl	800333c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d113      	bne.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e00f      	b.n	8004360 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	429a      	cmp	r2, r3
 800435c:	d0cd      	beq.n	80042fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004374:	e02c      	b.n	80043d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f870 	bl	8004460 <I2C_IsAcknowledgeFailed>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e02a      	b.n	80043e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d01e      	beq.n	80043d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fe ffd3 	bl	800333c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d113      	bne.n	80043d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e007      	b.n	80043e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d1cb      	bne.n	8004376 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f4:	e028      	b.n	8004448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f830 	bl	8004460 <I2C_IsAcknowledgeFailed>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e026      	b.n	8004458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440a:	f7fe ff97 	bl	800333c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d113      	bne.n	8004448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e007      	b.n	8004458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b20      	cmp	r3, #32
 8004454:	d1cf      	bne.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b10      	cmp	r3, #16
 8004478:	d151      	bne.n	800451e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800447a:	e022      	b.n	80044c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d01e      	beq.n	80044c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004484:	f7fe ff5a 	bl	800333c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	d302      	bcc.n	800449a <I2C_IsAcknowledgeFailed+0x3a>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f043 0220 	orr.w	r2, r3, #32
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e02e      	b.n	8004520 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d1d5      	bne.n	800447c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2210      	movs	r2, #16
 80044d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2220      	movs	r2, #32
 80044de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fedd 	bl	80042a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <I2C_IsAcknowledgeFailed+0xc8>)
 80044f2:	400b      	ands	r3, r1
 80044f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f043 0204 	orr.w	r2, r3, #4
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	fe00e800 	.word	0xfe00e800

0800452c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	817b      	strh	r3, [r7, #10]
 800453a:	4613      	mov	r3, r2
 800453c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	0d5b      	lsrs	r3, r3, #21
 8004548:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <I2C_TransferConfig+0x58>)
 800454e:	430b      	orrs	r3, r1
 8004550:	43db      	mvns	r3, r3
 8004552:	ea02 0103 	and.w	r1, r2, r3
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800455c:	7a7b      	ldrb	r3, [r7, #9]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	431a      	orrs	r2, r3
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	03ff63ff 	.word	0x03ff63ff

08004588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b20      	cmp	r3, #32
 800459c:	d138      	bne.n	8004610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e032      	b.n	8004612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6819      	ldr	r1, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462e:	4b3e      	ldr	r3, [pc, #248]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004638:	4b3b      	ldr	r3, [pc, #236]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x34>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d121      	bne.n	8004692 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d11e      	bne.n	8004692 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004654:	4b34      	ldr	r3, [pc, #208]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004660:	4b31      	ldr	r3, [pc, #196]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	e005      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004670:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800467c:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_RCC_GetSysClockFreq+0x10c>)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004684:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10d      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d102      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <HAL_RCC_GetSysClockFreq+0x110>)
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e004      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046a4:	4b23      	ldr	r3, [pc, #140]	; (8004734 <HAL_RCC_GetSysClockFreq+0x114>)
 80046a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d134      	bne.n	8004718 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ae:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d003      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0xac>
 80046c4:	e005      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <HAL_RCC_GetSysClockFreq+0x110>)
 80046c8:	617b      	str	r3, [r7, #20]
      break;
 80046ca:	e005      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046cc:	4b19      	ldr	r3, [pc, #100]	; (8004734 <HAL_RCC_GetSysClockFreq+0x114>)
 80046ce:	617b      	str	r3, [r7, #20]
      break;
 80046d0:	e002      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	617b      	str	r3, [r7, #20]
      break;
 80046d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	3301      	adds	r3, #1
 80046e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	fb03 f202 	mul.w	r2, r3, r2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	0e5b      	lsrs	r3, r3, #25
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	3301      	adds	r3, #1
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	fbb2 f3f3 	udiv	r3, r2, r3
 8004716:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004718:	69bb      	ldr	r3, [r7, #24]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	080086b8 	.word	0x080086b8
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200

08004738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000004 	.word	0x20000004

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4904      	ldr	r1, [pc, #16]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	080086b0 	.word	0x080086b0

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004780:	f7ff ffda 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0adb      	lsrs	r3, r3, #11
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	080086b0 	.word	0x080086b0

080047a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e040      	b.n	800483c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fd fbb8 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2224      	movs	r2, #36	; 0x24
 80047d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8c0 	bl	800496c <UART_SetConfig>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e022      	b.n	800483c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fc54 	bl	80050ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fcdb 	bl	80051f0 <UART_CheckIdleState>
 800483a:	4603      	mov	r3, r0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004858:	2b20      	cmp	r3, #32
 800485a:	f040 8081 	bne.w	8004960 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_UART_Transmit+0x26>
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e079      	b.n	8004962 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_UART_Transmit+0x38>
 8004878:	2302      	movs	r3, #2
 800487a:	e072      	b.n	8004962 <HAL_UART_Transmit+0x11e>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2221      	movs	r2, #33	; 0x21
 800488e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004890:	f7fe fd54 	bl	800333c <HAL_GetTick>
 8004894:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d108      	bne.n	80048c2 <HAL_UART_Transmit+0x7e>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e003      	b.n	80048ca <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80048d2:	e02d      	b.n	8004930 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2200      	movs	r2, #0
 80048dc:	2180      	movs	r1, #128	; 0x80
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fccb 	bl	800527a <UART_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e039      	b.n	8004962 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	881a      	ldrh	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004900:	b292      	uxth	r2, r2
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	3302      	adds	r3, #2
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	e008      	b.n	800491e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	b292      	uxth	r2, r2
 8004916:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	3301      	adds	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1cb      	bne.n	80048d4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2200      	movs	r2, #0
 8004944:	2140      	movs	r1, #64	; 0x40
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fc97 	bl	800527a <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e005      	b.n	8004962 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800496c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004970:	b0a0      	sub	sp, #128	; 0x80
 8004972:	af00      	add	r7, sp, #0
 8004974:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004976:	2300      	movs	r3, #0
 8004978:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004980:	2300      	movs	r3, #0
 8004982:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	431a      	orrs	r2, r3
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	431a      	orrs	r2, r3
 8004994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	4313      	orrs	r3, r2
 800499a:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800499c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	49a4      	ldr	r1, [pc, #656]	; (8004c34 <UART_SetConfig+0x2c8>)
 80049a4:	4019      	ands	r1, r3
 80049a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049bc:	68d9      	ldr	r1, [r3, #12]
 80049be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	ea40 0301 	orr.w	r3, r0, r1
 80049c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b99      	ldr	r3, [pc, #612]	; (8004c38 <UART_SetConfig+0x2cc>)
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d004      	beq.n	80049e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049de:	4313      	orrs	r3, r2
 80049e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b90      	ldr	r3, [pc, #576]	; (8004c3c <UART_SetConfig+0x2d0>)
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d125      	bne.n	8004a4c <UART_SetConfig+0xe0>
 8004a00:	4b8f      	ldr	r3, [pc, #572]	; (8004c40 <UART_SetConfig+0x2d4>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d81a      	bhi.n	8004a44 <UART_SetConfig+0xd8>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <UART_SetConfig+0xa8>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a35 	.word	0x08004a35
 8004a1c:	08004a2d 	.word	0x08004a2d
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a2a:	e116      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a32:	e112      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a3a:	e10e      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a42:	e10a      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a4a:	e106      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b7c      	ldr	r3, [pc, #496]	; (8004c44 <UART_SetConfig+0x2d8>)
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d138      	bne.n	8004ac8 <UART_SetConfig+0x15c>
 8004a56:	4b7a      	ldr	r3, [pc, #488]	; (8004c40 <UART_SetConfig+0x2d4>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b0c      	cmp	r3, #12
 8004a62:	d82d      	bhi.n	8004ac0 <UART_SetConfig+0x154>
 8004a64:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <UART_SetConfig+0x100>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004aa1 	.word	0x08004aa1
 8004a70:	08004ac1 	.word	0x08004ac1
 8004a74:	08004ac1 	.word	0x08004ac1
 8004a78:	08004ac1 	.word	0x08004ac1
 8004a7c:	08004ab1 	.word	0x08004ab1
 8004a80:	08004ac1 	.word	0x08004ac1
 8004a84:	08004ac1 	.word	0x08004ac1
 8004a88:	08004ac1 	.word	0x08004ac1
 8004a8c:	08004aa9 	.word	0x08004aa9
 8004a90:	08004ac1 	.word	0x08004ac1
 8004a94:	08004ac1 	.word	0x08004ac1
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ab9 	.word	0x08004ab9
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004aa6:	e0d8      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004aae:	e0d4      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ab6:	e0d0      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004abe:	e0cc      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004ac6:	e0c8      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b5e      	ldr	r3, [pc, #376]	; (8004c48 <UART_SetConfig+0x2dc>)
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d125      	bne.n	8004b1e <UART_SetConfig+0x1b2>
 8004ad2:	4b5b      	ldr	r3, [pc, #364]	; (8004c40 <UART_SetConfig+0x2d4>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004adc:	2b30      	cmp	r3, #48	; 0x30
 8004ade:	d016      	beq.n	8004b0e <UART_SetConfig+0x1a2>
 8004ae0:	2b30      	cmp	r3, #48	; 0x30
 8004ae2:	d818      	bhi.n	8004b16 <UART_SetConfig+0x1aa>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d00a      	beq.n	8004afe <UART_SetConfig+0x192>
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d814      	bhi.n	8004b16 <UART_SetConfig+0x1aa>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <UART_SetConfig+0x18a>
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d008      	beq.n	8004b06 <UART_SetConfig+0x19a>
 8004af4:	e00f      	b.n	8004b16 <UART_SetConfig+0x1aa>
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004afc:	e0ad      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004afe:	2302      	movs	r3, #2
 8004b00:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b04:	e0a9      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b06:	2304      	movs	r3, #4
 8004b08:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b0c:	e0a5      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b0e:	2308      	movs	r3, #8
 8004b10:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b14:	e0a1      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b16:	2310      	movs	r3, #16
 8004b18:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b1c:	e09d      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b4a      	ldr	r3, [pc, #296]	; (8004c4c <UART_SetConfig+0x2e0>)
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d125      	bne.n	8004b74 <UART_SetConfig+0x208>
 8004b28:	4b45      	ldr	r3, [pc, #276]	; (8004c40 <UART_SetConfig+0x2d4>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b32:	2bc0      	cmp	r3, #192	; 0xc0
 8004b34:	d016      	beq.n	8004b64 <UART_SetConfig+0x1f8>
 8004b36:	2bc0      	cmp	r3, #192	; 0xc0
 8004b38:	d818      	bhi.n	8004b6c <UART_SetConfig+0x200>
 8004b3a:	2b80      	cmp	r3, #128	; 0x80
 8004b3c:	d00a      	beq.n	8004b54 <UART_SetConfig+0x1e8>
 8004b3e:	2b80      	cmp	r3, #128	; 0x80
 8004b40:	d814      	bhi.n	8004b6c <UART_SetConfig+0x200>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <UART_SetConfig+0x1e0>
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d008      	beq.n	8004b5c <UART_SetConfig+0x1f0>
 8004b4a:	e00f      	b.n	8004b6c <UART_SetConfig+0x200>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b52:	e082      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b54:	2302      	movs	r3, #2
 8004b56:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b5a:	e07e      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b62:	e07a      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b64:	2308      	movs	r3, #8
 8004b66:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b6a:	e076      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004b72:	e072      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b35      	ldr	r3, [pc, #212]	; (8004c50 <UART_SetConfig+0x2e4>)
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d12a      	bne.n	8004bd4 <UART_SetConfig+0x268>
 8004b7e:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <UART_SetConfig+0x2d4>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8c:	d01a      	beq.n	8004bc4 <UART_SetConfig+0x258>
 8004b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b92:	d81b      	bhi.n	8004bcc <UART_SetConfig+0x260>
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b98:	d00c      	beq.n	8004bb4 <UART_SetConfig+0x248>
 8004b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9e:	d815      	bhi.n	8004bcc <UART_SetConfig+0x260>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <UART_SetConfig+0x240>
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba8:	d008      	beq.n	8004bbc <UART_SetConfig+0x250>
 8004baa:	e00f      	b.n	8004bcc <UART_SetConfig+0x260>
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bb2:	e052      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bba:	e04e      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bc2:	e04a      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bca:	e046      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004bd2:	e042      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <UART_SetConfig+0x2cc>)
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d13a      	bne.n	8004c54 <UART_SetConfig+0x2e8>
 8004bde:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <UART_SetConfig+0x2d4>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bec:	d01a      	beq.n	8004c24 <UART_SetConfig+0x2b8>
 8004bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf2:	d81b      	bhi.n	8004c2c <UART_SetConfig+0x2c0>
 8004bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf8:	d00c      	beq.n	8004c14 <UART_SetConfig+0x2a8>
 8004bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfe:	d815      	bhi.n	8004c2c <UART_SetConfig+0x2c0>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <UART_SetConfig+0x2a0>
 8004c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c08:	d008      	beq.n	8004c1c <UART_SetConfig+0x2b0>
 8004c0a:	e00f      	b.n	8004c2c <UART_SetConfig+0x2c0>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c12:	e022      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004c14:	2302      	movs	r3, #2
 8004c16:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c1a:	e01e      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c22:	e01a      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004c24:	2308      	movs	r3, #8
 8004c26:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c2a:	e016      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004c32:	e012      	b.n	8004c5a <UART_SetConfig+0x2ee>
 8004c34:	efff69f3 	.word	0xefff69f3
 8004c38:	40008000 	.word	0x40008000
 8004c3c:	40013800 	.word	0x40013800
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40004400 	.word	0x40004400
 8004c48:	40004800 	.word	0x40004800
 8004c4c:	40004c00 	.word	0x40004c00
 8004c50:	40005000 	.word	0x40005000
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4bb6      	ldr	r3, [pc, #728]	; (8004f38 <UART_SetConfig+0x5cc>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	f040 810c 	bne.w	8004e7e <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c66:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d823      	bhi.n	8004cb6 <UART_SetConfig+0x34a>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <UART_SetConfig+0x308>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004cb7 	.word	0x08004cb7
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004cb7 	.word	0x08004cb7
 8004c84:	08004ca7 	.word	0x08004ca7
 8004c88:	08004cb7 	.word	0x08004cb7
 8004c8c:	08004cb7 	.word	0x08004cb7
 8004c90:	08004cb7 	.word	0x08004cb7
 8004c94:	08004caf 	.word	0x08004caf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7ff fd5a 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c9e:	e00e      	b.n	8004cbe <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004ca0:	4ba6      	ldr	r3, [pc, #664]	; (8004f3c <UART_SetConfig+0x5d0>)
 8004ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ca4:	e00b      	b.n	8004cbe <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004ca6:	f7ff fcbb 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8004caa:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cac:	e007      	b.n	8004cbe <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cb4:	e003      	b.n	8004cbe <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004cbc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 81e5 	beq.w	8005090 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	441a      	add	r2, r3
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d305      	bcc.n	8004ce2 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d903      	bls.n	8004cea <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004ce8:	e1d2      	b.n	8005090 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8004cea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	f200 80b0 	bhi.w	8004e54 <UART_SetConfig+0x4e8>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0x390>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004e55 	.word	0x08004e55
 8004d04:	08004d81 	.word	0x08004d81
 8004d08:	08004e55 	.word	0x08004e55
 8004d0c:	08004dc1 	.word	0x08004dc1
 8004d10:	08004e55 	.word	0x08004e55
 8004d14:	08004e55 	.word	0x08004e55
 8004d18:	08004e55 	.word	0x08004e55
 8004d1c:	08004e1d 	.word	0x08004e1d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7ff fd16 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8004d24:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4698      	mov	r8, r3
 8004d2c:	4691      	mov	r9, r2
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8004d3a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8004d3e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8004d42:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004d44:	6849      	ldr	r1, [r1, #4]
 8004d46:	0849      	lsrs	r1, r1, #1
 8004d48:	2000      	movs	r0, #0
 8004d4a:	6539      	str	r1, [r7, #80]	; 0x50
 8004d4c:	6578      	str	r0, [r7, #84]	; 0x54
 8004d4e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004d52:	4621      	mov	r1, r4
 8004d54:	1851      	adds	r1, r2, r1
 8004d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d58:	4629      	mov	r1, r5
 8004d5a:	eb43 0101 	adc.w	r1, r3, r1
 8004d5e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	643b      	str	r3, [r7, #64]	; 0x40
 8004d68:	647a      	str	r2, [r7, #68]	; 0x44
 8004d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d72:	f7fb ff19 	bl	8000ba8 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d7e:	e06d      	b.n	8004e5c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	2200      	movs	r2, #0
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d8a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d8c:	4b6c      	ldr	r3, [pc, #432]	; (8004f40 <UART_SetConfig+0x5d4>)
 8004d8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004d92:	4602      	mov	r2, r0
 8004d94:	18d3      	adds	r3, r2, r3
 8004d96:	633b      	str	r3, [r7, #48]	; 0x30
 8004d98:	460b      	mov	r3, r1
 8004d9a:	f143 0300 	adc.w	r3, r3, #0
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004db2:	f7fb fef9 	bl	8000ba8 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4613      	mov	r3, r2
 8004dbc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004dbe:	e04d      	b.n	8004e5c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004dc0:	f7ff fc2e 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8004dc4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc8:	2200      	movs	r2, #0
 8004dca:	461c      	mov	r4, r3
 8004dcc:	4615      	mov	r5, r2
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	022b      	lsls	r3, r5, #8
 8004dd8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ddc:	0222      	lsls	r2, r4, #8
 8004dde:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004de0:	6849      	ldr	r1, [r1, #4]
 8004de2:	0849      	lsrs	r1, r1, #1
 8004de4:	2000      	movs	r0, #0
 8004de6:	6239      	str	r1, [r7, #32]
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24
 8004dea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004dee:	4621      	mov	r1, r4
 8004df0:	1851      	adds	r1, r2, r1
 8004df2:	61b9      	str	r1, [r7, #24]
 8004df4:	4629      	mov	r1, r5
 8004df6:	eb43 0101 	adc.w	r1, r3, r1
 8004dfa:	61f9      	str	r1, [r7, #28]
 8004dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	617a      	str	r2, [r7, #20]
 8004e06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e0e:	f7fb fecb 	bl	8000ba8 <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4613      	mov	r3, r2
 8004e18:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e1a:	e01f      	b.n	8004e5c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	2200      	movs	r2, #0
 8004e24:	469a      	mov	sl, r3
 8004e26:	4693      	mov	fp, r2
 8004e28:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	f14b 0300 	adc.w	r3, fp, #0
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e46:	f7fb feaf 	bl	8000ba8 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4613      	mov	r3, r2
 8004e50:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e52:	e003      	b.n	8004e5c <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8004e5a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e62:	d308      	bcc.n	8004e76 <UART_SetConfig+0x50a>
 8004e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6a:	d204      	bcs.n	8004e76 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8004e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e10c      	b.n	8005090 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004e7c:	e108      	b.n	8005090 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e86:	f040 808f 	bne.w	8004fa8 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8004e8a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d864      	bhi.n	8004f5c <UART_SetConfig+0x5f0>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <UART_SetConfig+0x52c>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004edd 	.word	0x08004edd
 8004ea0:	08004efd 	.word	0x08004efd
 8004ea4:	08004f5d 	.word	0x08004f5d
 8004ea8:	08004f19 	.word	0x08004f19
 8004eac:	08004f5d 	.word	0x08004f5d
 8004eb0:	08004f5d 	.word	0x08004f5d
 8004eb4:	08004f5d 	.word	0x08004f5d
 8004eb8:	08004f45 	.word	0x08004f45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7ff fc48 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec4:	005a      	lsls	r2, r3, #1
 8004ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	441a      	add	r2, r3
 8004ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eda:	e043      	b.n	8004f64 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7ff fc4e 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8004ee0:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee4:	005a      	lsls	r2, r3, #1
 8004ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	441a      	add	r2, r3
 8004eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004efa:	e033      	b.n	8004f64 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004f06:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004f0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f0c:	6852      	ldr	r2, [r2, #4]
 8004f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f16:	e025      	b.n	8004f64 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f18:	f7ff fb82 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8004f1c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f20:	005a      	lsls	r2, r3, #1
 8004f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	441a      	add	r2, r3
 8004f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f36:	e015      	b.n	8004f64 <UART_SetConfig+0x5f8>
 8004f38:	40008000 	.word	0x40008000
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f5a:	e003      	b.n	8004f64 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004f62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d91a      	bls.n	8004fa0 <UART_SetConfig+0x634>
 8004f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d216      	bcs.n	8004fa0 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f023 030f 	bic.w	r3, r3, #15
 8004f7a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8004f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	e077      	b.n	8005090 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004fa6:	e073      	b.n	8005090 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8004fa8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d85c      	bhi.n	800506a <UART_SetConfig+0x6fe>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <UART_SetConfig+0x64c>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	0800506b 	.word	0x0800506b
 8004fc8:	08005035 	.word	0x08005035
 8004fcc:	0800506b 	.word	0x0800506b
 8004fd0:	0800506b 	.word	0x0800506b
 8004fd4:	0800506b 	.word	0x0800506b
 8004fd8:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fdc:	f7ff fbb8 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8004fe0:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	085a      	lsrs	r2, r3, #1
 8004fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fea:	441a      	add	r2, r3
 8004fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ff8:	e03b      	b.n	8005072 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ffa:	f7ff fbbf 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8004ffe:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	085a      	lsrs	r2, r3, #1
 8005006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005008:	441a      	add	r2, r3
 800500a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005016:	e02c      	b.n	8005072 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005022:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005026:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005028:	6852      	ldr	r2, [r2, #4]
 800502a:	fbb3 f3f2 	udiv	r3, r3, r2
 800502e:	b29b      	uxth	r3, r3
 8005030:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005032:	e01e      	b.n	8005072 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005034:	f7ff faf4 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8005038:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800503a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	085a      	lsrs	r2, r3, #1
 8005040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005042:	441a      	add	r2, r3
 8005044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	b29b      	uxth	r3, r3
 800504e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005050:	e00f      	b.n	8005072 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800505c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005068:	e003      	b.n	8005072 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005074:	2b0f      	cmp	r3, #15
 8005076:	d908      	bls.n	800508a <UART_SetConfig+0x71e>
 8005078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507e:	d204      	bcs.n	800508a <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8005080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	e002      	b.n	8005090 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005092:	2200      	movs	r2, #0
 8005094:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005098:	2200      	movs	r2, #0
 800509a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800509c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3780      	adds	r7, #128	; 0x80
 80050a4:	46bd      	mov	sp, r7
 80050a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050aa:	bf00      	nop

080050ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051aa:	d10a      	bne.n	80051c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051fe:	f7fe f89d 	bl	800333c <HAL_GetTick>
 8005202:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b08      	cmp	r3, #8
 8005210:	d10e      	bne.n	8005230 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005212:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f82a 	bl	800527a <UART_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e020      	b.n	8005272 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d10e      	bne.n	800525c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800523e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f814 	bl	800527a <UART_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e00a      	b.n	8005272 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528a:	e05d      	b.n	8005348 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d059      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005294:	f7fe f852 	bl	800333c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d302      	bcc.n	80052aa <UART_WaitOnFlagUntilTimeout+0x30>
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d11b      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e042      	b.n	8005368 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02b      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fe:	d123      	bne.n	8005348 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005308:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005318:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e00f      	b.n	8005368 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	429a      	cmp	r2, r3
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	429a      	cmp	r2, r3
 8005364:	d092      	beq.n	800528c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <findslot>:
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <findslot+0x2c>)
 8005372:	b510      	push	{r4, lr}
 8005374:	4604      	mov	r4, r0
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	b118      	cbz	r0, 8005382 <findslot+0x12>
 800537a:	6983      	ldr	r3, [r0, #24]
 800537c:	b90b      	cbnz	r3, 8005382 <findslot+0x12>
 800537e:	f000 f9a1 	bl	80056c4 <__sinit>
 8005382:	2c13      	cmp	r4, #19
 8005384:	d807      	bhi.n	8005396 <findslot+0x26>
 8005386:	4806      	ldr	r0, [pc, #24]	; (80053a0 <findslot+0x30>)
 8005388:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800538c:	3201      	adds	r2, #1
 800538e:	d002      	beq.n	8005396 <findslot+0x26>
 8005390:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005394:	bd10      	pop	{r4, pc}
 8005396:	2000      	movs	r0, #0
 8005398:	e7fc      	b.n	8005394 <findslot+0x24>
 800539a:	bf00      	nop
 800539c:	200000d4 	.word	0x200000d4
 80053a0:	200005b0 	.word	0x200005b0

080053a4 <error>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	4604      	mov	r4, r0
 80053a8:	f000 f92e 	bl	8005608 <__errno>
 80053ac:	2613      	movs	r6, #19
 80053ae:	4605      	mov	r5, r0
 80053b0:	2700      	movs	r7, #0
 80053b2:	4630      	mov	r0, r6
 80053b4:	4639      	mov	r1, r7
 80053b6:	beab      	bkpt	0x00ab
 80053b8:	4606      	mov	r6, r0
 80053ba:	602e      	str	r6, [r5, #0]
 80053bc:	4620      	mov	r0, r4
 80053be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080053c0 <checkerror>:
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d101      	bne.n	80053c8 <checkerror+0x8>
 80053c4:	f7ff bfee 	b.w	80053a4 <error>
 80053c8:	4770      	bx	lr

080053ca <_swiread>:
 80053ca:	b530      	push	{r4, r5, lr}
 80053cc:	b085      	sub	sp, #20
 80053ce:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80053d2:	9203      	str	r2, [sp, #12]
 80053d4:	2406      	movs	r4, #6
 80053d6:	ad01      	add	r5, sp, #4
 80053d8:	4620      	mov	r0, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	beab      	bkpt	0x00ab
 80053de:	4604      	mov	r4, r0
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7ff ffed 	bl	80053c0 <checkerror>
 80053e6:	b005      	add	sp, #20
 80053e8:	bd30      	pop	{r4, r5, pc}

080053ea <_read>:
 80053ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ec:	4615      	mov	r5, r2
 80053ee:	9101      	str	r1, [sp, #4]
 80053f0:	f7ff ffbe 	bl	8005370 <findslot>
 80053f4:	9901      	ldr	r1, [sp, #4]
 80053f6:	4604      	mov	r4, r0
 80053f8:	b938      	cbnz	r0, 800540a <_read+0x20>
 80053fa:	f000 f905 	bl	8005608 <__errno>
 80053fe:	2309      	movs	r3, #9
 8005400:	6003      	str	r3, [r0, #0]
 8005402:	f04f 30ff 	mov.w	r0, #4294967295
 8005406:	b003      	add	sp, #12
 8005408:	bd30      	pop	{r4, r5, pc}
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	462a      	mov	r2, r5
 800540e:	f7ff ffdc 	bl	80053ca <_swiread>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d0f7      	beq.n	8005406 <_read+0x1c>
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	1a2a      	subs	r2, r5, r0
 800541a:	4413      	add	r3, r2
 800541c:	6063      	str	r3, [r4, #4]
 800541e:	4610      	mov	r0, r2
 8005420:	e7f1      	b.n	8005406 <_read+0x1c>

08005422 <_swilseek>:
 8005422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005424:	460c      	mov	r4, r1
 8005426:	4616      	mov	r6, r2
 8005428:	f7ff ffa2 	bl	8005370 <findslot>
 800542c:	4605      	mov	r5, r0
 800542e:	b940      	cbnz	r0, 8005442 <_swilseek+0x20>
 8005430:	f000 f8ea 	bl	8005608 <__errno>
 8005434:	2309      	movs	r3, #9
 8005436:	6003      	str	r3, [r0, #0]
 8005438:	f04f 34ff 	mov.w	r4, #4294967295
 800543c:	4620      	mov	r0, r4
 800543e:	b003      	add	sp, #12
 8005440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005442:	2e02      	cmp	r6, #2
 8005444:	d903      	bls.n	800544e <_swilseek+0x2c>
 8005446:	f000 f8df 	bl	8005608 <__errno>
 800544a:	2316      	movs	r3, #22
 800544c:	e7f3      	b.n	8005436 <_swilseek+0x14>
 800544e:	2e01      	cmp	r6, #1
 8005450:	d112      	bne.n	8005478 <_swilseek+0x56>
 8005452:	6843      	ldr	r3, [r0, #4]
 8005454:	18e4      	adds	r4, r4, r3
 8005456:	d4f6      	bmi.n	8005446 <_swilseek+0x24>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	260a      	movs	r6, #10
 800545c:	e9cd 3400 	strd	r3, r4, [sp]
 8005460:	466f      	mov	r7, sp
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	beab      	bkpt	0x00ab
 8005468:	4606      	mov	r6, r0
 800546a:	4630      	mov	r0, r6
 800546c:	f7ff ffa8 	bl	80053c0 <checkerror>
 8005470:	2800      	cmp	r0, #0
 8005472:	dbe1      	blt.n	8005438 <_swilseek+0x16>
 8005474:	606c      	str	r4, [r5, #4]
 8005476:	e7e1      	b.n	800543c <_swilseek+0x1a>
 8005478:	2e02      	cmp	r6, #2
 800547a:	d1ed      	bne.n	8005458 <_swilseek+0x36>
 800547c:	6803      	ldr	r3, [r0, #0]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	260c      	movs	r6, #12
 8005482:	466f      	mov	r7, sp
 8005484:	4630      	mov	r0, r6
 8005486:	4639      	mov	r1, r7
 8005488:	beab      	bkpt	0x00ab
 800548a:	4606      	mov	r6, r0
 800548c:	4630      	mov	r0, r6
 800548e:	f7ff ff97 	bl	80053c0 <checkerror>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d0d0      	beq.n	8005438 <_swilseek+0x16>
 8005496:	4404      	add	r4, r0
 8005498:	e7de      	b.n	8005458 <_swilseek+0x36>

0800549a <_lseek>:
 800549a:	f7ff bfc2 	b.w	8005422 <_swilseek>

0800549e <_swiwrite>:
 800549e:	b530      	push	{r4, r5, lr}
 80054a0:	b085      	sub	sp, #20
 80054a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80054a6:	9203      	str	r2, [sp, #12]
 80054a8:	2405      	movs	r4, #5
 80054aa:	ad01      	add	r5, sp, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	beab      	bkpt	0x00ab
 80054b2:	4604      	mov	r4, r0
 80054b4:	4620      	mov	r0, r4
 80054b6:	f7ff ff83 	bl	80053c0 <checkerror>
 80054ba:	b005      	add	sp, #20
 80054bc:	bd30      	pop	{r4, r5, pc}

080054be <_write>:
 80054be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054c0:	4615      	mov	r5, r2
 80054c2:	9101      	str	r1, [sp, #4]
 80054c4:	f7ff ff54 	bl	8005370 <findslot>
 80054c8:	9901      	ldr	r1, [sp, #4]
 80054ca:	4604      	mov	r4, r0
 80054cc:	b930      	cbnz	r0, 80054dc <_write+0x1e>
 80054ce:	f000 f89b 	bl	8005608 <__errno>
 80054d2:	2309      	movs	r3, #9
 80054d4:	6003      	str	r3, [r0, #0]
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	e012      	b.n	8005502 <_write+0x44>
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	462a      	mov	r2, r5
 80054e0:	f7ff ffdd 	bl	800549e <_swiwrite>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	dbf6      	blt.n	80054d6 <_write+0x18>
 80054e8:	6862      	ldr	r2, [r4, #4]
 80054ea:	1a2b      	subs	r3, r5, r0
 80054ec:	441a      	add	r2, r3
 80054ee:	42a8      	cmp	r0, r5
 80054f0:	6062      	str	r2, [r4, #4]
 80054f2:	d105      	bne.n	8005500 <_write+0x42>
 80054f4:	2000      	movs	r0, #0
 80054f6:	b003      	add	sp, #12
 80054f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054fc:	f7ff bf52 	b.w	80053a4 <error>
 8005500:	4618      	mov	r0, r3
 8005502:	b003      	add	sp, #12
 8005504:	bd30      	pop	{r4, r5, pc}

08005506 <_swiclose>:
 8005506:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005508:	2402      	movs	r4, #2
 800550a:	9001      	str	r0, [sp, #4]
 800550c:	ad01      	add	r5, sp, #4
 800550e:	4620      	mov	r0, r4
 8005510:	4629      	mov	r1, r5
 8005512:	beab      	bkpt	0x00ab
 8005514:	4604      	mov	r4, r0
 8005516:	4620      	mov	r0, r4
 8005518:	f7ff ff52 	bl	80053c0 <checkerror>
 800551c:	b003      	add	sp, #12
 800551e:	bd30      	pop	{r4, r5, pc}

08005520 <_close>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4605      	mov	r5, r0
 8005524:	f7ff ff24 	bl	8005370 <findslot>
 8005528:	4604      	mov	r4, r0
 800552a:	b930      	cbnz	r0, 800553a <_close+0x1a>
 800552c:	f000 f86c 	bl	8005608 <__errno>
 8005530:	2309      	movs	r3, #9
 8005532:	6003      	str	r3, [r0, #0]
 8005534:	f04f 30ff 	mov.w	r0, #4294967295
 8005538:	bd38      	pop	{r3, r4, r5, pc}
 800553a:	3d01      	subs	r5, #1
 800553c:	2d01      	cmp	r5, #1
 800553e:	d809      	bhi.n	8005554 <_close+0x34>
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <_close+0x48>)
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	429a      	cmp	r2, r3
 8005548:	d104      	bne.n	8005554 <_close+0x34>
 800554a:	f04f 33ff 	mov.w	r3, #4294967295
 800554e:	6003      	str	r3, [r0, #0]
 8005550:	2000      	movs	r0, #0
 8005552:	e7f1      	b.n	8005538 <_close+0x18>
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	f7ff ffd6 	bl	8005506 <_swiclose>
 800555a:	2800      	cmp	r0, #0
 800555c:	d1ec      	bne.n	8005538 <_close+0x18>
 800555e:	f04f 33ff 	mov.w	r3, #4294967295
 8005562:	6023      	str	r3, [r4, #0]
 8005564:	e7e8      	b.n	8005538 <_close+0x18>
 8005566:	bf00      	nop
 8005568:	200005b0 	.word	0x200005b0

0800556c <_getpid>:
 800556c:	2001      	movs	r0, #1
 800556e:	4770      	bx	lr

08005570 <_swistat>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	460c      	mov	r4, r1
 8005574:	f7ff fefc 	bl	8005370 <findslot>
 8005578:	4605      	mov	r5, r0
 800557a:	b930      	cbnz	r0, 800558a <_swistat+0x1a>
 800557c:	f000 f844 	bl	8005608 <__errno>
 8005580:	2309      	movs	r3, #9
 8005582:	6003      	str	r3, [r0, #0]
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	bd70      	pop	{r4, r5, r6, pc}
 800558a:	6863      	ldr	r3, [r4, #4]
 800558c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005590:	6063      	str	r3, [r4, #4]
 8005592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005596:	64a3      	str	r3, [r4, #72]	; 0x48
 8005598:	260c      	movs	r6, #12
 800559a:	4630      	mov	r0, r6
 800559c:	4629      	mov	r1, r5
 800559e:	beab      	bkpt	0x00ab
 80055a0:	4605      	mov	r5, r0
 80055a2:	4628      	mov	r0, r5
 80055a4:	f7ff ff0c 	bl	80053c0 <checkerror>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	bf1c      	itt	ne
 80055ac:	6120      	strne	r0, [r4, #16]
 80055ae:	2000      	movne	r0, #0
 80055b0:	e7ea      	b.n	8005588 <_swistat+0x18>

080055b2 <_fstat>:
 80055b2:	460b      	mov	r3, r1
 80055b4:	b510      	push	{r4, lr}
 80055b6:	2100      	movs	r1, #0
 80055b8:	4604      	mov	r4, r0
 80055ba:	2258      	movs	r2, #88	; 0x58
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f954 	bl	800586a <memset>
 80055c2:	4601      	mov	r1, r0
 80055c4:	4620      	mov	r0, r4
 80055c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ca:	f7ff bfd1 	b.w	8005570 <_swistat>

080055ce <_isatty>:
 80055ce:	b570      	push	{r4, r5, r6, lr}
 80055d0:	f7ff fece 	bl	8005370 <findslot>
 80055d4:	2509      	movs	r5, #9
 80055d6:	4604      	mov	r4, r0
 80055d8:	b920      	cbnz	r0, 80055e4 <_isatty+0x16>
 80055da:	f000 f815 	bl	8005608 <__errno>
 80055de:	6005      	str	r5, [r0, #0]
 80055e0:	4620      	mov	r0, r4
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	4628      	mov	r0, r5
 80055e6:	4621      	mov	r1, r4
 80055e8:	beab      	bkpt	0x00ab
 80055ea:	4604      	mov	r4, r0
 80055ec:	2c01      	cmp	r4, #1
 80055ee:	d0f7      	beq.n	80055e0 <_isatty+0x12>
 80055f0:	f000 f80a 	bl	8005608 <__errno>
 80055f4:	2400      	movs	r4, #0
 80055f6:	4605      	mov	r5, r0
 80055f8:	2613      	movs	r6, #19
 80055fa:	4630      	mov	r0, r6
 80055fc:	4621      	mov	r1, r4
 80055fe:	beab      	bkpt	0x00ab
 8005600:	4606      	mov	r6, r0
 8005602:	602e      	str	r6, [r5, #0]
 8005604:	e7ec      	b.n	80055e0 <_isatty+0x12>
	...

08005608 <__errno>:
 8005608:	4b01      	ldr	r3, [pc, #4]	; (8005610 <__errno+0x8>)
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	200000d4 	.word	0x200000d4

08005614 <std>:
 8005614:	2300      	movs	r3, #0
 8005616:	b510      	push	{r4, lr}
 8005618:	4604      	mov	r4, r0
 800561a:	e9c0 3300 	strd	r3, r3, [r0]
 800561e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005622:	6083      	str	r3, [r0, #8]
 8005624:	8181      	strh	r1, [r0, #12]
 8005626:	6643      	str	r3, [r0, #100]	; 0x64
 8005628:	81c2      	strh	r2, [r0, #14]
 800562a:	6183      	str	r3, [r0, #24]
 800562c:	4619      	mov	r1, r3
 800562e:	2208      	movs	r2, #8
 8005630:	305c      	adds	r0, #92	; 0x5c
 8005632:	f000 f91a 	bl	800586a <memset>
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <std+0x38>)
 8005638:	6263      	str	r3, [r4, #36]	; 0x24
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <std+0x3c>)
 800563c:	62a3      	str	r3, [r4, #40]	; 0x28
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <std+0x40>)
 8005640:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <std+0x44>)
 8005644:	6224      	str	r4, [r4, #32]
 8005646:	6323      	str	r3, [r4, #48]	; 0x30
 8005648:	bd10      	pop	{r4, pc}
 800564a:	bf00      	nop
 800564c:	08006301 	.word	0x08006301
 8005650:	08006323 	.word	0x08006323
 8005654:	0800635b 	.word	0x0800635b
 8005658:	0800637f 	.word	0x0800637f

0800565c <_cleanup_r>:
 800565c:	4901      	ldr	r1, [pc, #4]	; (8005664 <_cleanup_r+0x8>)
 800565e:	f000 b8af 	b.w	80057c0 <_fwalk_reent>
 8005662:	bf00      	nop
 8005664:	08007389 	.word	0x08007389

08005668 <__sfmoreglue>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	2268      	movs	r2, #104	; 0x68
 800566c:	1e4d      	subs	r5, r1, #1
 800566e:	4355      	muls	r5, r2
 8005670:	460e      	mov	r6, r1
 8005672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005676:	f000 f921 	bl	80058bc <_malloc_r>
 800567a:	4604      	mov	r4, r0
 800567c:	b140      	cbz	r0, 8005690 <__sfmoreglue+0x28>
 800567e:	2100      	movs	r1, #0
 8005680:	e9c0 1600 	strd	r1, r6, [r0]
 8005684:	300c      	adds	r0, #12
 8005686:	60a0      	str	r0, [r4, #8]
 8005688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800568c:	f000 f8ed 	bl	800586a <memset>
 8005690:	4620      	mov	r0, r4
 8005692:	bd70      	pop	{r4, r5, r6, pc}

08005694 <__sfp_lock_acquire>:
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <__sfp_lock_acquire+0x8>)
 8005696:	f000 b8d8 	b.w	800584a <__retarget_lock_acquire_recursive>
 800569a:	bf00      	nop
 800569c:	20000651 	.word	0x20000651

080056a0 <__sfp_lock_release>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__sfp_lock_release+0x8>)
 80056a2:	f000 b8d3 	b.w	800584c <__retarget_lock_release_recursive>
 80056a6:	bf00      	nop
 80056a8:	20000651 	.word	0x20000651

080056ac <__sinit_lock_acquire>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__sinit_lock_acquire+0x8>)
 80056ae:	f000 b8cc 	b.w	800584a <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	20000652 	.word	0x20000652

080056b8 <__sinit_lock_release>:
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <__sinit_lock_release+0x8>)
 80056ba:	f000 b8c7 	b.w	800584c <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	20000652 	.word	0x20000652

080056c4 <__sinit>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	4604      	mov	r4, r0
 80056c8:	f7ff fff0 	bl	80056ac <__sinit_lock_acquire>
 80056cc:	69a3      	ldr	r3, [r4, #24]
 80056ce:	b11b      	cbz	r3, 80056d8 <__sinit+0x14>
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f7ff bff0 	b.w	80056b8 <__sinit_lock_release>
 80056d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056dc:	6523      	str	r3, [r4, #80]	; 0x50
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <__sinit+0x68>)
 80056e0:	4a13      	ldr	r2, [pc, #76]	; (8005730 <__sinit+0x6c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	bf04      	itt	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	61a3      	streq	r3, [r4, #24]
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f820 	bl	8005734 <__sfp>
 80056f4:	6060      	str	r0, [r4, #4]
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 f81c 	bl	8005734 <__sfp>
 80056fc:	60a0      	str	r0, [r4, #8]
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 f818 	bl	8005734 <__sfp>
 8005704:	2200      	movs	r2, #0
 8005706:	60e0      	str	r0, [r4, #12]
 8005708:	2104      	movs	r1, #4
 800570a:	6860      	ldr	r0, [r4, #4]
 800570c:	f7ff ff82 	bl	8005614 <std>
 8005710:	68a0      	ldr	r0, [r4, #8]
 8005712:	2201      	movs	r2, #1
 8005714:	2109      	movs	r1, #9
 8005716:	f7ff ff7d 	bl	8005614 <std>
 800571a:	68e0      	ldr	r0, [r4, #12]
 800571c:	2202      	movs	r2, #2
 800571e:	2112      	movs	r1, #18
 8005720:	f7ff ff78 	bl	8005614 <std>
 8005724:	2301      	movs	r3, #1
 8005726:	61a3      	str	r3, [r4, #24]
 8005728:	e7d2      	b.n	80056d0 <__sinit+0xc>
 800572a:	bf00      	nop
 800572c:	08008748 	.word	0x08008748
 8005730:	0800565d 	.word	0x0800565d

08005734 <__sfp>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	4607      	mov	r7, r0
 8005738:	f7ff ffac 	bl	8005694 <__sfp_lock_acquire>
 800573c:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <__sfp+0x84>)
 800573e:	681e      	ldr	r6, [r3, #0]
 8005740:	69b3      	ldr	r3, [r6, #24]
 8005742:	b913      	cbnz	r3, 800574a <__sfp+0x16>
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff ffbd 	bl	80056c4 <__sinit>
 800574a:	3648      	adds	r6, #72	; 0x48
 800574c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005750:	3b01      	subs	r3, #1
 8005752:	d503      	bpl.n	800575c <__sfp+0x28>
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	b30b      	cbz	r3, 800579c <__sfp+0x68>
 8005758:	6836      	ldr	r6, [r6, #0]
 800575a:	e7f7      	b.n	800574c <__sfp+0x18>
 800575c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005760:	b9d5      	cbnz	r5, 8005798 <__sfp+0x64>
 8005762:	4b16      	ldr	r3, [pc, #88]	; (80057bc <__sfp+0x88>)
 8005764:	60e3      	str	r3, [r4, #12]
 8005766:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800576a:	6665      	str	r5, [r4, #100]	; 0x64
 800576c:	f000 f86c 	bl	8005848 <__retarget_lock_init_recursive>
 8005770:	f7ff ff96 	bl	80056a0 <__sfp_lock_release>
 8005774:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005778:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800577c:	6025      	str	r5, [r4, #0]
 800577e:	61a5      	str	r5, [r4, #24]
 8005780:	2208      	movs	r2, #8
 8005782:	4629      	mov	r1, r5
 8005784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005788:	f000 f86f 	bl	800586a <memset>
 800578c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005794:	4620      	mov	r0, r4
 8005796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005798:	3468      	adds	r4, #104	; 0x68
 800579a:	e7d9      	b.n	8005750 <__sfp+0x1c>
 800579c:	2104      	movs	r1, #4
 800579e:	4638      	mov	r0, r7
 80057a0:	f7ff ff62 	bl	8005668 <__sfmoreglue>
 80057a4:	4604      	mov	r4, r0
 80057a6:	6030      	str	r0, [r6, #0]
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d1d5      	bne.n	8005758 <__sfp+0x24>
 80057ac:	f7ff ff78 	bl	80056a0 <__sfp_lock_release>
 80057b0:	230c      	movs	r3, #12
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	e7ee      	b.n	8005794 <__sfp+0x60>
 80057b6:	bf00      	nop
 80057b8:	08008748 	.word	0x08008748
 80057bc:	ffff0001 	.word	0xffff0001

080057c0 <_fwalk_reent>:
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4606      	mov	r6, r0
 80057c6:	4688      	mov	r8, r1
 80057c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057cc:	2700      	movs	r7, #0
 80057ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057d2:	f1b9 0901 	subs.w	r9, r9, #1
 80057d6:	d505      	bpl.n	80057e4 <_fwalk_reent+0x24>
 80057d8:	6824      	ldr	r4, [r4, #0]
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d1f7      	bne.n	80057ce <_fwalk_reent+0xe>
 80057de:	4638      	mov	r0, r7
 80057e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e4:	89ab      	ldrh	r3, [r5, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d907      	bls.n	80057fa <_fwalk_reent+0x3a>
 80057ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057ee:	3301      	adds	r3, #1
 80057f0:	d003      	beq.n	80057fa <_fwalk_reent+0x3a>
 80057f2:	4629      	mov	r1, r5
 80057f4:	4630      	mov	r0, r6
 80057f6:	47c0      	blx	r8
 80057f8:	4307      	orrs	r7, r0
 80057fa:	3568      	adds	r5, #104	; 0x68
 80057fc:	e7e9      	b.n	80057d2 <_fwalk_reent+0x12>
	...

08005800 <__libc_init_array>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	4d0d      	ldr	r5, [pc, #52]	; (8005838 <__libc_init_array+0x38>)
 8005804:	4c0d      	ldr	r4, [pc, #52]	; (800583c <__libc_init_array+0x3c>)
 8005806:	1b64      	subs	r4, r4, r5
 8005808:	10a4      	asrs	r4, r4, #2
 800580a:	2600      	movs	r6, #0
 800580c:	42a6      	cmp	r6, r4
 800580e:	d109      	bne.n	8005824 <__libc_init_array+0x24>
 8005810:	4d0b      	ldr	r5, [pc, #44]	; (8005840 <__libc_init_array+0x40>)
 8005812:	4c0c      	ldr	r4, [pc, #48]	; (8005844 <__libc_init_array+0x44>)
 8005814:	f002 fe2e 	bl	8008474 <_init>
 8005818:	1b64      	subs	r4, r4, r5
 800581a:	10a4      	asrs	r4, r4, #2
 800581c:	2600      	movs	r6, #0
 800581e:	42a6      	cmp	r6, r4
 8005820:	d105      	bne.n	800582e <__libc_init_array+0x2e>
 8005822:	bd70      	pop	{r4, r5, r6, pc}
 8005824:	f855 3b04 	ldr.w	r3, [r5], #4
 8005828:	4798      	blx	r3
 800582a:	3601      	adds	r6, #1
 800582c:	e7ee      	b.n	800580c <__libc_init_array+0xc>
 800582e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005832:	4798      	blx	r3
 8005834:	3601      	adds	r6, #1
 8005836:	e7f2      	b.n	800581e <__libc_init_array+0x1e>
 8005838:	08008ac8 	.word	0x08008ac8
 800583c:	08008ac8 	.word	0x08008ac8
 8005840:	08008ac8 	.word	0x08008ac8
 8005844:	08008acc 	.word	0x08008acc

08005848 <__retarget_lock_init_recursive>:
 8005848:	4770      	bx	lr

0800584a <__retarget_lock_acquire_recursive>:
 800584a:	4770      	bx	lr

0800584c <__retarget_lock_release_recursive>:
 800584c:	4770      	bx	lr

0800584e <memcpy>:
 800584e:	440a      	add	r2, r1
 8005850:	4291      	cmp	r1, r2
 8005852:	f100 33ff 	add.w	r3, r0, #4294967295
 8005856:	d100      	bne.n	800585a <memcpy+0xc>
 8005858:	4770      	bx	lr
 800585a:	b510      	push	{r4, lr}
 800585c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005864:	4291      	cmp	r1, r2
 8005866:	d1f9      	bne.n	800585c <memcpy+0xe>
 8005868:	bd10      	pop	{r4, pc}

0800586a <memset>:
 800586a:	4402      	add	r2, r0
 800586c:	4603      	mov	r3, r0
 800586e:	4293      	cmp	r3, r2
 8005870:	d100      	bne.n	8005874 <memset+0xa>
 8005872:	4770      	bx	lr
 8005874:	f803 1b01 	strb.w	r1, [r3], #1
 8005878:	e7f9      	b.n	800586e <memset+0x4>
	...

0800587c <sbrk_aligned>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4e0e      	ldr	r6, [pc, #56]	; (80058b8 <sbrk_aligned+0x3c>)
 8005880:	460c      	mov	r4, r1
 8005882:	6831      	ldr	r1, [r6, #0]
 8005884:	4605      	mov	r5, r0
 8005886:	b911      	cbnz	r1, 800588e <sbrk_aligned+0x12>
 8005888:	f000 fcf6 	bl	8006278 <_sbrk_r>
 800588c:	6030      	str	r0, [r6, #0]
 800588e:	4621      	mov	r1, r4
 8005890:	4628      	mov	r0, r5
 8005892:	f000 fcf1 	bl	8006278 <_sbrk_r>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d00a      	beq.n	80058b0 <sbrk_aligned+0x34>
 800589a:	1cc4      	adds	r4, r0, #3
 800589c:	f024 0403 	bic.w	r4, r4, #3
 80058a0:	42a0      	cmp	r0, r4
 80058a2:	d007      	beq.n	80058b4 <sbrk_aligned+0x38>
 80058a4:	1a21      	subs	r1, r4, r0
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 fce6 	bl	8006278 <_sbrk_r>
 80058ac:	3001      	adds	r0, #1
 80058ae:	d101      	bne.n	80058b4 <sbrk_aligned+0x38>
 80058b0:	f04f 34ff 	mov.w	r4, #4294967295
 80058b4:	4620      	mov	r0, r4
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	20000658 	.word	0x20000658

080058bc <_malloc_r>:
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	1ccd      	adds	r5, r1, #3
 80058c2:	f025 0503 	bic.w	r5, r5, #3
 80058c6:	3508      	adds	r5, #8
 80058c8:	2d0c      	cmp	r5, #12
 80058ca:	bf38      	it	cc
 80058cc:	250c      	movcc	r5, #12
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	4607      	mov	r7, r0
 80058d2:	db01      	blt.n	80058d8 <_malloc_r+0x1c>
 80058d4:	42a9      	cmp	r1, r5
 80058d6:	d905      	bls.n	80058e4 <_malloc_r+0x28>
 80058d8:	230c      	movs	r3, #12
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	2600      	movs	r6, #0
 80058de:	4630      	mov	r0, r6
 80058e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e4:	4e2e      	ldr	r6, [pc, #184]	; (80059a0 <_malloc_r+0xe4>)
 80058e6:	f001 fe21 	bl	800752c <__malloc_lock>
 80058ea:	6833      	ldr	r3, [r6, #0]
 80058ec:	461c      	mov	r4, r3
 80058ee:	bb34      	cbnz	r4, 800593e <_malloc_r+0x82>
 80058f0:	4629      	mov	r1, r5
 80058f2:	4638      	mov	r0, r7
 80058f4:	f7ff ffc2 	bl	800587c <sbrk_aligned>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	4604      	mov	r4, r0
 80058fc:	d14d      	bne.n	800599a <_malloc_r+0xde>
 80058fe:	6834      	ldr	r4, [r6, #0]
 8005900:	4626      	mov	r6, r4
 8005902:	2e00      	cmp	r6, #0
 8005904:	d140      	bne.n	8005988 <_malloc_r+0xcc>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	4631      	mov	r1, r6
 800590a:	4638      	mov	r0, r7
 800590c:	eb04 0803 	add.w	r8, r4, r3
 8005910:	f000 fcb2 	bl	8006278 <_sbrk_r>
 8005914:	4580      	cmp	r8, r0
 8005916:	d13a      	bne.n	800598e <_malloc_r+0xd2>
 8005918:	6821      	ldr	r1, [r4, #0]
 800591a:	3503      	adds	r5, #3
 800591c:	1a6d      	subs	r5, r5, r1
 800591e:	f025 0503 	bic.w	r5, r5, #3
 8005922:	3508      	adds	r5, #8
 8005924:	2d0c      	cmp	r5, #12
 8005926:	bf38      	it	cc
 8005928:	250c      	movcc	r5, #12
 800592a:	4629      	mov	r1, r5
 800592c:	4638      	mov	r0, r7
 800592e:	f7ff ffa5 	bl	800587c <sbrk_aligned>
 8005932:	3001      	adds	r0, #1
 8005934:	d02b      	beq.n	800598e <_malloc_r+0xd2>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	442b      	add	r3, r5
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	e00e      	b.n	800595c <_malloc_r+0xa0>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	1b52      	subs	r2, r2, r5
 8005942:	d41e      	bmi.n	8005982 <_malloc_r+0xc6>
 8005944:	2a0b      	cmp	r2, #11
 8005946:	d916      	bls.n	8005976 <_malloc_r+0xba>
 8005948:	1961      	adds	r1, r4, r5
 800594a:	42a3      	cmp	r3, r4
 800594c:	6025      	str	r5, [r4, #0]
 800594e:	bf18      	it	ne
 8005950:	6059      	strne	r1, [r3, #4]
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	bf08      	it	eq
 8005956:	6031      	streq	r1, [r6, #0]
 8005958:	5162      	str	r2, [r4, r5]
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	4638      	mov	r0, r7
 800595e:	f104 060b 	add.w	r6, r4, #11
 8005962:	f001 fde9 	bl	8007538 <__malloc_unlock>
 8005966:	f026 0607 	bic.w	r6, r6, #7
 800596a:	1d23      	adds	r3, r4, #4
 800596c:	1af2      	subs	r2, r6, r3
 800596e:	d0b6      	beq.n	80058de <_malloc_r+0x22>
 8005970:	1b9b      	subs	r3, r3, r6
 8005972:	50a3      	str	r3, [r4, r2]
 8005974:	e7b3      	b.n	80058de <_malloc_r+0x22>
 8005976:	6862      	ldr	r2, [r4, #4]
 8005978:	42a3      	cmp	r3, r4
 800597a:	bf0c      	ite	eq
 800597c:	6032      	streq	r2, [r6, #0]
 800597e:	605a      	strne	r2, [r3, #4]
 8005980:	e7ec      	b.n	800595c <_malloc_r+0xa0>
 8005982:	4623      	mov	r3, r4
 8005984:	6864      	ldr	r4, [r4, #4]
 8005986:	e7b2      	b.n	80058ee <_malloc_r+0x32>
 8005988:	4634      	mov	r4, r6
 800598a:	6876      	ldr	r6, [r6, #4]
 800598c:	e7b9      	b.n	8005902 <_malloc_r+0x46>
 800598e:	230c      	movs	r3, #12
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	4638      	mov	r0, r7
 8005994:	f001 fdd0 	bl	8007538 <__malloc_unlock>
 8005998:	e7a1      	b.n	80058de <_malloc_r+0x22>
 800599a:	6025      	str	r5, [r4, #0]
 800599c:	e7de      	b.n	800595c <_malloc_r+0xa0>
 800599e:	bf00      	nop
 80059a0:	20000654 	.word	0x20000654

080059a4 <__cvt>:
 80059a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a8:	ec55 4b10 	vmov	r4, r5, d0
 80059ac:	2d00      	cmp	r5, #0
 80059ae:	460e      	mov	r6, r1
 80059b0:	4619      	mov	r1, r3
 80059b2:	462b      	mov	r3, r5
 80059b4:	bfbb      	ittet	lt
 80059b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059ba:	461d      	movlt	r5, r3
 80059bc:	2300      	movge	r3, #0
 80059be:	232d      	movlt	r3, #45	; 0x2d
 80059c0:	700b      	strb	r3, [r1, #0]
 80059c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059c8:	4691      	mov	r9, r2
 80059ca:	f023 0820 	bic.w	r8, r3, #32
 80059ce:	bfbc      	itt	lt
 80059d0:	4622      	movlt	r2, r4
 80059d2:	4614      	movlt	r4, r2
 80059d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059d8:	d005      	beq.n	80059e6 <__cvt+0x42>
 80059da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059de:	d100      	bne.n	80059e2 <__cvt+0x3e>
 80059e0:	3601      	adds	r6, #1
 80059e2:	2102      	movs	r1, #2
 80059e4:	e000      	b.n	80059e8 <__cvt+0x44>
 80059e6:	2103      	movs	r1, #3
 80059e8:	ab03      	add	r3, sp, #12
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	ab02      	add	r3, sp, #8
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	ec45 4b10 	vmov	d0, r4, r5
 80059f4:	4653      	mov	r3, sl
 80059f6:	4632      	mov	r2, r6
 80059f8:	f000 fe52 	bl	80066a0 <_dtoa_r>
 80059fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a00:	4607      	mov	r7, r0
 8005a02:	d102      	bne.n	8005a0a <__cvt+0x66>
 8005a04:	f019 0f01 	tst.w	r9, #1
 8005a08:	d022      	beq.n	8005a50 <__cvt+0xac>
 8005a0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a0e:	eb07 0906 	add.w	r9, r7, r6
 8005a12:	d110      	bne.n	8005a36 <__cvt+0x92>
 8005a14:	783b      	ldrb	r3, [r7, #0]
 8005a16:	2b30      	cmp	r3, #48	; 0x30
 8005a18:	d10a      	bne.n	8005a30 <__cvt+0x8c>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4620      	mov	r0, r4
 8005a20:	4629      	mov	r1, r5
 8005a22:	f7fb f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a26:	b918      	cbnz	r0, 8005a30 <__cvt+0x8c>
 8005a28:	f1c6 0601 	rsb	r6, r6, #1
 8005a2c:	f8ca 6000 	str.w	r6, [sl]
 8005a30:	f8da 3000 	ldr.w	r3, [sl]
 8005a34:	4499      	add	r9, r3
 8005a36:	2200      	movs	r2, #0
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7fb f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a42:	b108      	cbz	r0, 8005a48 <__cvt+0xa4>
 8005a44:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a48:	2230      	movs	r2, #48	; 0x30
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	454b      	cmp	r3, r9
 8005a4e:	d307      	bcc.n	8005a60 <__cvt+0xbc>
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a54:	1bdb      	subs	r3, r3, r7
 8005a56:	4638      	mov	r0, r7
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	b004      	add	sp, #16
 8005a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a60:	1c59      	adds	r1, r3, #1
 8005a62:	9103      	str	r1, [sp, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e7f0      	b.n	8005a4a <__cvt+0xa6>

08005a68 <__exponent>:
 8005a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	bfb8      	it	lt
 8005a70:	4249      	neglt	r1, r1
 8005a72:	f803 2b02 	strb.w	r2, [r3], #2
 8005a76:	bfb4      	ite	lt
 8005a78:	222d      	movlt	r2, #45	; 0x2d
 8005a7a:	222b      	movge	r2, #43	; 0x2b
 8005a7c:	2909      	cmp	r1, #9
 8005a7e:	7042      	strb	r2, [r0, #1]
 8005a80:	dd2a      	ble.n	8005ad8 <__exponent+0x70>
 8005a82:	f10d 0407 	add.w	r4, sp, #7
 8005a86:	46a4      	mov	ip, r4
 8005a88:	270a      	movs	r7, #10
 8005a8a:	46a6      	mov	lr, r4
 8005a8c:	460a      	mov	r2, r1
 8005a8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a92:	fb07 1516 	mls	r5, r7, r6, r1
 8005a96:	3530      	adds	r5, #48	; 0x30
 8005a98:	2a63      	cmp	r2, #99	; 0x63
 8005a9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	dcf1      	bgt.n	8005a8a <__exponent+0x22>
 8005aa6:	3130      	adds	r1, #48	; 0x30
 8005aa8:	f1ae 0502 	sub.w	r5, lr, #2
 8005aac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ab0:	1c44      	adds	r4, r0, #1
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	4561      	cmp	r1, ip
 8005ab6:	d30a      	bcc.n	8005ace <__exponent+0x66>
 8005ab8:	f10d 0209 	add.w	r2, sp, #9
 8005abc:	eba2 020e 	sub.w	r2, r2, lr
 8005ac0:	4565      	cmp	r5, ip
 8005ac2:	bf88      	it	hi
 8005ac4:	2200      	movhi	r2, #0
 8005ac6:	4413      	add	r3, r2
 8005ac8:	1a18      	subs	r0, r3, r0
 8005aca:	b003      	add	sp, #12
 8005acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ad2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ad6:	e7ed      	b.n	8005ab4 <__exponent+0x4c>
 8005ad8:	2330      	movs	r3, #48	; 0x30
 8005ada:	3130      	adds	r1, #48	; 0x30
 8005adc:	7083      	strb	r3, [r0, #2]
 8005ade:	70c1      	strb	r1, [r0, #3]
 8005ae0:	1d03      	adds	r3, r0, #4
 8005ae2:	e7f1      	b.n	8005ac8 <__exponent+0x60>

08005ae4 <_printf_float>:
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	ed2d 8b02 	vpush	{d8}
 8005aec:	b08d      	sub	sp, #52	; 0x34
 8005aee:	460c      	mov	r4, r1
 8005af0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005af4:	4616      	mov	r6, r2
 8005af6:	461f      	mov	r7, r3
 8005af8:	4605      	mov	r5, r0
 8005afa:	f001 fc93 	bl	8007424 <_localeconv_r>
 8005afe:	f8d0 a000 	ldr.w	sl, [r0]
 8005b02:	4650      	mov	r0, sl
 8005b04:	f7fa fb64 	bl	80001d0 <strlen>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	f8d8 3000 	ldr.w	r3, [r8]
 8005b14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b18:	3307      	adds	r3, #7
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	f103 0208 	add.w	r2, r3, #8
 8005b22:	f8c8 2000 	str.w	r2, [r8]
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b36:	9307      	str	r3, [sp, #28]
 8005b38:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b3c:	ee08 0a10 	vmov	s16, r0
 8005b40:	4b9f      	ldr	r3, [pc, #636]	; (8005dc0 <_printf_float+0x2dc>)
 8005b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b46:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4a:	f7fa ffef 	bl	8000b2c <__aeabi_dcmpun>
 8005b4e:	bb88      	cbnz	r0, 8005bb4 <_printf_float+0xd0>
 8005b50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b54:	4b9a      	ldr	r3, [pc, #616]	; (8005dc0 <_printf_float+0x2dc>)
 8005b56:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5a:	f7fa ffc9 	bl	8000af0 <__aeabi_dcmple>
 8005b5e:	bb48      	cbnz	r0, 8005bb4 <_printf_float+0xd0>
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	4640      	mov	r0, r8
 8005b66:	4649      	mov	r1, r9
 8005b68:	f7fa ffb8 	bl	8000adc <__aeabi_dcmplt>
 8005b6c:	b110      	cbz	r0, 8005b74 <_printf_float+0x90>
 8005b6e:	232d      	movs	r3, #45	; 0x2d
 8005b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b74:	4b93      	ldr	r3, [pc, #588]	; (8005dc4 <_printf_float+0x2e0>)
 8005b76:	4894      	ldr	r0, [pc, #592]	; (8005dc8 <_printf_float+0x2e4>)
 8005b78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b7c:	bf94      	ite	ls
 8005b7e:	4698      	movls	r8, r3
 8005b80:	4680      	movhi	r8, r0
 8005b82:	2303      	movs	r3, #3
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	9b05      	ldr	r3, [sp, #20]
 8005b88:	f023 0204 	bic.w	r2, r3, #4
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	f04f 0900 	mov.w	r9, #0
 8005b92:	9700      	str	r7, [sp, #0]
 8005b94:	4633      	mov	r3, r6
 8005b96:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 f9d8 	bl	8005f50 <_printf_common>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	f040 8090 	bne.w	8005cc6 <_printf_float+0x1e2>
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8005baa:	b00d      	add	sp, #52	; 0x34
 8005bac:	ecbd 8b02 	vpop	{d8}
 8005bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4649      	mov	r1, r9
 8005bbc:	f7fa ffb6 	bl	8000b2c <__aeabi_dcmpun>
 8005bc0:	b140      	cbz	r0, 8005bd4 <_printf_float+0xf0>
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bfbc      	itt	lt
 8005bc8:	232d      	movlt	r3, #45	; 0x2d
 8005bca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bce:	487f      	ldr	r0, [pc, #508]	; (8005dcc <_printf_float+0x2e8>)
 8005bd0:	4b7f      	ldr	r3, [pc, #508]	; (8005dd0 <_printf_float+0x2ec>)
 8005bd2:	e7d1      	b.n	8005b78 <_printf_float+0x94>
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bda:	9206      	str	r2, [sp, #24]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	d13f      	bne.n	8005c60 <_printf_float+0x17c>
 8005be0:	2306      	movs	r3, #6
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	9b05      	ldr	r3, [sp, #20]
 8005be6:	6861      	ldr	r1, [r4, #4]
 8005be8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bec:	2300      	movs	r3, #0
 8005bee:	9303      	str	r3, [sp, #12]
 8005bf0:	ab0a      	add	r3, sp, #40	; 0x28
 8005bf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005bf6:	ab09      	add	r3, sp, #36	; 0x24
 8005bf8:	ec49 8b10 	vmov	d0, r8, r9
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	6022      	str	r2, [r4, #0]
 8005c00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c04:	4628      	mov	r0, r5
 8005c06:	f7ff fecd 	bl	80059a4 <__cvt>
 8005c0a:	9b06      	ldr	r3, [sp, #24]
 8005c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c0e:	2b47      	cmp	r3, #71	; 0x47
 8005c10:	4680      	mov	r8, r0
 8005c12:	d108      	bne.n	8005c26 <_printf_float+0x142>
 8005c14:	1cc8      	adds	r0, r1, #3
 8005c16:	db02      	blt.n	8005c1e <_printf_float+0x13a>
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	dd41      	ble.n	8005ca2 <_printf_float+0x1be>
 8005c1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c22:	fa5f fb8b 	uxtb.w	fp, fp
 8005c26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c2a:	d820      	bhi.n	8005c6e <_printf_float+0x18a>
 8005c2c:	3901      	subs	r1, #1
 8005c2e:	465a      	mov	r2, fp
 8005c30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c34:	9109      	str	r1, [sp, #36]	; 0x24
 8005c36:	f7ff ff17 	bl	8005a68 <__exponent>
 8005c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c3c:	1813      	adds	r3, r2, r0
 8005c3e:	2a01      	cmp	r2, #1
 8005c40:	4681      	mov	r9, r0
 8005c42:	6123      	str	r3, [r4, #16]
 8005c44:	dc02      	bgt.n	8005c4c <_printf_float+0x168>
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	07d2      	lsls	r2, r2, #31
 8005c4a:	d501      	bpl.n	8005c50 <_printf_float+0x16c>
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	6123      	str	r3, [r4, #16]
 8005c50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d09c      	beq.n	8005b92 <_printf_float+0xae>
 8005c58:	232d      	movs	r3, #45	; 0x2d
 8005c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5e:	e798      	b.n	8005b92 <_printf_float+0xae>
 8005c60:	9a06      	ldr	r2, [sp, #24]
 8005c62:	2a47      	cmp	r2, #71	; 0x47
 8005c64:	d1be      	bne.n	8005be4 <_printf_float+0x100>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1bc      	bne.n	8005be4 <_printf_float+0x100>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e7b9      	b.n	8005be2 <_printf_float+0xfe>
 8005c6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c72:	d118      	bne.n	8005ca6 <_printf_float+0x1c2>
 8005c74:	2900      	cmp	r1, #0
 8005c76:	6863      	ldr	r3, [r4, #4]
 8005c78:	dd0b      	ble.n	8005c92 <_printf_float+0x1ae>
 8005c7a:	6121      	str	r1, [r4, #16]
 8005c7c:	b913      	cbnz	r3, 8005c84 <_printf_float+0x1a0>
 8005c7e:	6822      	ldr	r2, [r4, #0]
 8005c80:	07d0      	lsls	r0, r2, #31
 8005c82:	d502      	bpl.n	8005c8a <_printf_float+0x1a6>
 8005c84:	3301      	adds	r3, #1
 8005c86:	440b      	add	r3, r1
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c8c:	f04f 0900 	mov.w	r9, #0
 8005c90:	e7de      	b.n	8005c50 <_printf_float+0x16c>
 8005c92:	b913      	cbnz	r3, 8005c9a <_printf_float+0x1b6>
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	07d2      	lsls	r2, r2, #31
 8005c98:	d501      	bpl.n	8005c9e <_printf_float+0x1ba>
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	e7f4      	b.n	8005c88 <_printf_float+0x1a4>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e7f2      	b.n	8005c88 <_printf_float+0x1a4>
 8005ca2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca8:	4299      	cmp	r1, r3
 8005caa:	db05      	blt.n	8005cb8 <_printf_float+0x1d4>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	6121      	str	r1, [r4, #16]
 8005cb0:	07d8      	lsls	r0, r3, #31
 8005cb2:	d5ea      	bpl.n	8005c8a <_printf_float+0x1a6>
 8005cb4:	1c4b      	adds	r3, r1, #1
 8005cb6:	e7e7      	b.n	8005c88 <_printf_float+0x1a4>
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	bfd4      	ite	le
 8005cbc:	f1c1 0202 	rsble	r2, r1, #2
 8005cc0:	2201      	movgt	r2, #1
 8005cc2:	4413      	add	r3, r2
 8005cc4:	e7e0      	b.n	8005c88 <_printf_float+0x1a4>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	055a      	lsls	r2, r3, #21
 8005cca:	d407      	bmi.n	8005cdc <_printf_float+0x1f8>
 8005ccc:	6923      	ldr	r3, [r4, #16]
 8005cce:	4642      	mov	r2, r8
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d12c      	bne.n	8005d34 <_printf_float+0x250>
 8005cda:	e764      	b.n	8005ba6 <_printf_float+0xc2>
 8005cdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ce0:	f240 80e0 	bls.w	8005ea4 <_printf_float+0x3c0>
 8005ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2300      	movs	r3, #0
 8005cec:	f7fa feec 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d034      	beq.n	8005d5e <_printf_float+0x27a>
 8005cf4:	4a37      	ldr	r2, [pc, #220]	; (8005dd4 <_printf_float+0x2f0>)
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f43f af51 	beq.w	8005ba6 <_printf_float+0xc2>
 8005d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	db02      	blt.n	8005d12 <_printf_float+0x22e>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	07d8      	lsls	r0, r3, #31
 8005d10:	d510      	bpl.n	8005d34 <_printf_float+0x250>
 8005d12:	ee18 3a10 	vmov	r3, s16
 8005d16:	4652      	mov	r2, sl
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f43f af41 	beq.w	8005ba6 <_printf_float+0xc2>
 8005d24:	f04f 0800 	mov.w	r8, #0
 8005d28:	f104 091a 	add.w	r9, r4, #26
 8005d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	4543      	cmp	r3, r8
 8005d32:	dc09      	bgt.n	8005d48 <_printf_float+0x264>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	079b      	lsls	r3, r3, #30
 8005d38:	f100 8105 	bmi.w	8005f46 <_printf_float+0x462>
 8005d3c:	68e0      	ldr	r0, [r4, #12]
 8005d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d40:	4298      	cmp	r0, r3
 8005d42:	bfb8      	it	lt
 8005d44:	4618      	movlt	r0, r3
 8005d46:	e730      	b.n	8005baa <_printf_float+0xc6>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	464a      	mov	r2, r9
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	f43f af27 	beq.w	8005ba6 <_printf_float+0xc2>
 8005d58:	f108 0801 	add.w	r8, r8, #1
 8005d5c:	e7e6      	b.n	8005d2c <_printf_float+0x248>
 8005d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	dc39      	bgt.n	8005dd8 <_printf_float+0x2f4>
 8005d64:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <_printf_float+0x2f0>)
 8005d66:	2301      	movs	r3, #1
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	f43f af19 	beq.w	8005ba6 <_printf_float+0xc2>
 8005d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	d102      	bne.n	8005d82 <_printf_float+0x29e>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	07d9      	lsls	r1, r3, #31
 8005d80:	d5d8      	bpl.n	8005d34 <_printf_float+0x250>
 8005d82:	ee18 3a10 	vmov	r3, s16
 8005d86:	4652      	mov	r2, sl
 8005d88:	4631      	mov	r1, r6
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	f43f af09 	beq.w	8005ba6 <_printf_float+0xc2>
 8005d94:	f04f 0900 	mov.w	r9, #0
 8005d98:	f104 0a1a 	add.w	sl, r4, #26
 8005d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9e:	425b      	negs	r3, r3
 8005da0:	454b      	cmp	r3, r9
 8005da2:	dc01      	bgt.n	8005da8 <_printf_float+0x2c4>
 8005da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da6:	e792      	b.n	8005cce <_printf_float+0x1ea>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4652      	mov	r2, sl
 8005dac:	4631      	mov	r1, r6
 8005dae:	4628      	mov	r0, r5
 8005db0:	47b8      	blx	r7
 8005db2:	3001      	adds	r0, #1
 8005db4:	f43f aef7 	beq.w	8005ba6 <_printf_float+0xc2>
 8005db8:	f109 0901 	add.w	r9, r9, #1
 8005dbc:	e7ee      	b.n	8005d9c <_printf_float+0x2b8>
 8005dbe:	bf00      	nop
 8005dc0:	7fefffff 	.word	0x7fefffff
 8005dc4:	0800874c 	.word	0x0800874c
 8005dc8:	08008750 	.word	0x08008750
 8005dcc:	08008758 	.word	0x08008758
 8005dd0:	08008754 	.word	0x08008754
 8005dd4:	0800875c 	.word	0x0800875c
 8005dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	bfa8      	it	ge
 8005de0:	461a      	movge	r2, r3
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	4691      	mov	r9, r2
 8005de6:	dc37      	bgt.n	8005e58 <_printf_float+0x374>
 8005de8:	f04f 0b00 	mov.w	fp, #0
 8005dec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005df0:	f104 021a 	add.w	r2, r4, #26
 8005df4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005df6:	9305      	str	r3, [sp, #20]
 8005df8:	eba3 0309 	sub.w	r3, r3, r9
 8005dfc:	455b      	cmp	r3, fp
 8005dfe:	dc33      	bgt.n	8005e68 <_printf_float+0x384>
 8005e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e04:	429a      	cmp	r2, r3
 8005e06:	db3b      	blt.n	8005e80 <_printf_float+0x39c>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	07da      	lsls	r2, r3, #31
 8005e0c:	d438      	bmi.n	8005e80 <_printf_float+0x39c>
 8005e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e10:	9a05      	ldr	r2, [sp, #20]
 8005e12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e14:	1a9a      	subs	r2, r3, r2
 8005e16:	eba3 0901 	sub.w	r9, r3, r1
 8005e1a:	4591      	cmp	r9, r2
 8005e1c:	bfa8      	it	ge
 8005e1e:	4691      	movge	r9, r2
 8005e20:	f1b9 0f00 	cmp.w	r9, #0
 8005e24:	dc35      	bgt.n	8005e92 <_printf_float+0x3ae>
 8005e26:	f04f 0800 	mov.w	r8, #0
 8005e2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e2e:	f104 0a1a 	add.w	sl, r4, #26
 8005e32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	eba3 0309 	sub.w	r3, r3, r9
 8005e3c:	4543      	cmp	r3, r8
 8005e3e:	f77f af79 	ble.w	8005d34 <_printf_float+0x250>
 8005e42:	2301      	movs	r3, #1
 8005e44:	4652      	mov	r2, sl
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f43f aeaa 	beq.w	8005ba6 <_printf_float+0xc2>
 8005e52:	f108 0801 	add.w	r8, r8, #1
 8005e56:	e7ec      	b.n	8005e32 <_printf_float+0x34e>
 8005e58:	4613      	mov	r3, r2
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	4628      	mov	r0, r5
 8005e60:	47b8      	blx	r7
 8005e62:	3001      	adds	r0, #1
 8005e64:	d1c0      	bne.n	8005de8 <_printf_float+0x304>
 8005e66:	e69e      	b.n	8005ba6 <_printf_float+0xc2>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	9205      	str	r2, [sp, #20]
 8005e70:	47b8      	blx	r7
 8005e72:	3001      	adds	r0, #1
 8005e74:	f43f ae97 	beq.w	8005ba6 <_printf_float+0xc2>
 8005e78:	9a05      	ldr	r2, [sp, #20]
 8005e7a:	f10b 0b01 	add.w	fp, fp, #1
 8005e7e:	e7b9      	b.n	8005df4 <_printf_float+0x310>
 8005e80:	ee18 3a10 	vmov	r3, s16
 8005e84:	4652      	mov	r2, sl
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d1be      	bne.n	8005e0e <_printf_float+0x32a>
 8005e90:	e689      	b.n	8005ba6 <_printf_float+0xc2>
 8005e92:	9a05      	ldr	r2, [sp, #20]
 8005e94:	464b      	mov	r3, r9
 8005e96:	4442      	add	r2, r8
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d1c1      	bne.n	8005e26 <_printf_float+0x342>
 8005ea2:	e680      	b.n	8005ba6 <_printf_float+0xc2>
 8005ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ea6:	2a01      	cmp	r2, #1
 8005ea8:	dc01      	bgt.n	8005eae <_printf_float+0x3ca>
 8005eaa:	07db      	lsls	r3, r3, #31
 8005eac:	d538      	bpl.n	8005f20 <_printf_float+0x43c>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f ae74 	beq.w	8005ba6 <_printf_float+0xc2>
 8005ebe:	ee18 3a10 	vmov	r3, s16
 8005ec2:	4652      	mov	r2, sl
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f ae6b 	beq.w	8005ba6 <_printf_float+0xc2>
 8005ed0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f7fa fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005edc:	b9d8      	cbnz	r0, 8005f16 <_printf_float+0x432>
 8005ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee0:	f108 0201 	add.w	r2, r8, #1
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	d10e      	bne.n	8005f0e <_printf_float+0x42a>
 8005ef0:	e659      	b.n	8005ba6 <_printf_float+0xc2>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b8      	blx	r7
 8005efc:	3001      	adds	r0, #1
 8005efe:	f43f ae52 	beq.w	8005ba6 <_printf_float+0xc2>
 8005f02:	f108 0801 	add.w	r8, r8, #1
 8005f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	4543      	cmp	r3, r8
 8005f0c:	dcf1      	bgt.n	8005ef2 <_printf_float+0x40e>
 8005f0e:	464b      	mov	r3, r9
 8005f10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f14:	e6dc      	b.n	8005cd0 <_printf_float+0x1ec>
 8005f16:	f04f 0800 	mov.w	r8, #0
 8005f1a:	f104 0a1a 	add.w	sl, r4, #26
 8005f1e:	e7f2      	b.n	8005f06 <_printf_float+0x422>
 8005f20:	2301      	movs	r3, #1
 8005f22:	4642      	mov	r2, r8
 8005f24:	e7df      	b.n	8005ee6 <_printf_float+0x402>
 8005f26:	2301      	movs	r3, #1
 8005f28:	464a      	mov	r2, r9
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	f43f ae38 	beq.w	8005ba6 <_printf_float+0xc2>
 8005f36:	f108 0801 	add.w	r8, r8, #1
 8005f3a:	68e3      	ldr	r3, [r4, #12]
 8005f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f3e:	1a5b      	subs	r3, r3, r1
 8005f40:	4543      	cmp	r3, r8
 8005f42:	dcf0      	bgt.n	8005f26 <_printf_float+0x442>
 8005f44:	e6fa      	b.n	8005d3c <_printf_float+0x258>
 8005f46:	f04f 0800 	mov.w	r8, #0
 8005f4a:	f104 0919 	add.w	r9, r4, #25
 8005f4e:	e7f4      	b.n	8005f3a <_printf_float+0x456>

08005f50 <_printf_common>:
 8005f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	4616      	mov	r6, r2
 8005f56:	4699      	mov	r9, r3
 8005f58:	688a      	ldr	r2, [r1, #8]
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfb8      	it	lt
 8005f64:	4613      	movlt	r3, r2
 8005f66:	6033      	str	r3, [r6, #0]
 8005f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	b10a      	cbz	r2, 8005f76 <_printf_common+0x26>
 8005f72:	3301      	adds	r3, #1
 8005f74:	6033      	str	r3, [r6, #0]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	0699      	lsls	r1, r3, #26
 8005f7a:	bf42      	ittt	mi
 8005f7c:	6833      	ldrmi	r3, [r6, #0]
 8005f7e:	3302      	addmi	r3, #2
 8005f80:	6033      	strmi	r3, [r6, #0]
 8005f82:	6825      	ldr	r5, [r4, #0]
 8005f84:	f015 0506 	ands.w	r5, r5, #6
 8005f88:	d106      	bne.n	8005f98 <_printf_common+0x48>
 8005f8a:	f104 0a19 	add.w	sl, r4, #25
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	6832      	ldr	r2, [r6, #0]
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dc26      	bgt.n	8005fe6 <_printf_common+0x96>
 8005f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f9c:	1e13      	subs	r3, r2, #0
 8005f9e:	6822      	ldr	r2, [r4, #0]
 8005fa0:	bf18      	it	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	0692      	lsls	r2, r2, #26
 8005fa6:	d42b      	bmi.n	8006000 <_printf_common+0xb0>
 8005fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fac:	4649      	mov	r1, r9
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c0      	blx	r8
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d01e      	beq.n	8005ff4 <_printf_common+0xa4>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	68e5      	ldr	r5, [r4, #12]
 8005fba:	6832      	ldr	r2, [r6, #0]
 8005fbc:	f003 0306 	and.w	r3, r3, #6
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	bf08      	it	eq
 8005fc4:	1aad      	subeq	r5, r5, r2
 8005fc6:	68a3      	ldr	r3, [r4, #8]
 8005fc8:	6922      	ldr	r2, [r4, #16]
 8005fca:	bf0c      	ite	eq
 8005fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd0:	2500      	movne	r5, #0
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	bfc4      	itt	gt
 8005fd6:	1a9b      	subgt	r3, r3, r2
 8005fd8:	18ed      	addgt	r5, r5, r3
 8005fda:	2600      	movs	r6, #0
 8005fdc:	341a      	adds	r4, #26
 8005fde:	42b5      	cmp	r5, r6
 8005fe0:	d11a      	bne.n	8006018 <_printf_common+0xc8>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e008      	b.n	8005ff8 <_printf_common+0xa8>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4652      	mov	r2, sl
 8005fea:	4649      	mov	r1, r9
 8005fec:	4638      	mov	r0, r7
 8005fee:	47c0      	blx	r8
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d103      	bne.n	8005ffc <_printf_common+0xac>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	e7c6      	b.n	8005f8e <_printf_common+0x3e>
 8006000:	18e1      	adds	r1, r4, r3
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	2030      	movs	r0, #48	; 0x30
 8006006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800600a:	4422      	add	r2, r4
 800600c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006014:	3302      	adds	r3, #2
 8006016:	e7c7      	b.n	8005fa8 <_printf_common+0x58>
 8006018:	2301      	movs	r3, #1
 800601a:	4622      	mov	r2, r4
 800601c:	4649      	mov	r1, r9
 800601e:	4638      	mov	r0, r7
 8006020:	47c0      	blx	r8
 8006022:	3001      	adds	r0, #1
 8006024:	d0e6      	beq.n	8005ff4 <_printf_common+0xa4>
 8006026:	3601      	adds	r6, #1
 8006028:	e7d9      	b.n	8005fde <_printf_common+0x8e>
	...

0800602c <_printf_i>:
 800602c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	7e0f      	ldrb	r7, [r1, #24]
 8006032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006034:	2f78      	cmp	r7, #120	; 0x78
 8006036:	4691      	mov	r9, r2
 8006038:	4680      	mov	r8, r0
 800603a:	460c      	mov	r4, r1
 800603c:	469a      	mov	sl, r3
 800603e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006042:	d807      	bhi.n	8006054 <_printf_i+0x28>
 8006044:	2f62      	cmp	r7, #98	; 0x62
 8006046:	d80a      	bhi.n	800605e <_printf_i+0x32>
 8006048:	2f00      	cmp	r7, #0
 800604a:	f000 80d8 	beq.w	80061fe <_printf_i+0x1d2>
 800604e:	2f58      	cmp	r7, #88	; 0x58
 8006050:	f000 80a3 	beq.w	800619a <_printf_i+0x16e>
 8006054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800605c:	e03a      	b.n	80060d4 <_printf_i+0xa8>
 800605e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006062:	2b15      	cmp	r3, #21
 8006064:	d8f6      	bhi.n	8006054 <_printf_i+0x28>
 8006066:	a101      	add	r1, pc, #4	; (adr r1, 800606c <_printf_i+0x40>)
 8006068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060d9 	.word	0x080060d9
 8006074:	08006055 	.word	0x08006055
 8006078:	08006055 	.word	0x08006055
 800607c:	08006055 	.word	0x08006055
 8006080:	08006055 	.word	0x08006055
 8006084:	080060d9 	.word	0x080060d9
 8006088:	08006055 	.word	0x08006055
 800608c:	08006055 	.word	0x08006055
 8006090:	08006055 	.word	0x08006055
 8006094:	08006055 	.word	0x08006055
 8006098:	080061e5 	.word	0x080061e5
 800609c:	08006109 	.word	0x08006109
 80060a0:	080061c7 	.word	0x080061c7
 80060a4:	08006055 	.word	0x08006055
 80060a8:	08006055 	.word	0x08006055
 80060ac:	08006207 	.word	0x08006207
 80060b0:	08006055 	.word	0x08006055
 80060b4:	08006109 	.word	0x08006109
 80060b8:	08006055 	.word	0x08006055
 80060bc:	08006055 	.word	0x08006055
 80060c0:	080061cf 	.word	0x080061cf
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	602a      	str	r2, [r5, #0]
 80060cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0a3      	b.n	8006220 <_printf_i+0x1f4>
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	6829      	ldr	r1, [r5, #0]
 80060dc:	0606      	lsls	r6, r0, #24
 80060de:	f101 0304 	add.w	r3, r1, #4
 80060e2:	d50a      	bpl.n	80060fa <_printf_i+0xce>
 80060e4:	680e      	ldr	r6, [r1, #0]
 80060e6:	602b      	str	r3, [r5, #0]
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	da03      	bge.n	80060f4 <_printf_i+0xc8>
 80060ec:	232d      	movs	r3, #45	; 0x2d
 80060ee:	4276      	negs	r6, r6
 80060f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f4:	485e      	ldr	r0, [pc, #376]	; (8006270 <_printf_i+0x244>)
 80060f6:	230a      	movs	r3, #10
 80060f8:	e019      	b.n	800612e <_printf_i+0x102>
 80060fa:	680e      	ldr	r6, [r1, #0]
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006102:	bf18      	it	ne
 8006104:	b236      	sxthne	r6, r6
 8006106:	e7ef      	b.n	80060e8 <_printf_i+0xbc>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	1d19      	adds	r1, r3, #4
 800610e:	6029      	str	r1, [r5, #0]
 8006110:	0601      	lsls	r1, r0, #24
 8006112:	d501      	bpl.n	8006118 <_printf_i+0xec>
 8006114:	681e      	ldr	r6, [r3, #0]
 8006116:	e002      	b.n	800611e <_printf_i+0xf2>
 8006118:	0646      	lsls	r6, r0, #25
 800611a:	d5fb      	bpl.n	8006114 <_printf_i+0xe8>
 800611c:	881e      	ldrh	r6, [r3, #0]
 800611e:	4854      	ldr	r0, [pc, #336]	; (8006270 <_printf_i+0x244>)
 8006120:	2f6f      	cmp	r7, #111	; 0x6f
 8006122:	bf0c      	ite	eq
 8006124:	2308      	moveq	r3, #8
 8006126:	230a      	movne	r3, #10
 8006128:	2100      	movs	r1, #0
 800612a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800612e:	6865      	ldr	r5, [r4, #4]
 8006130:	60a5      	str	r5, [r4, #8]
 8006132:	2d00      	cmp	r5, #0
 8006134:	bfa2      	ittt	ge
 8006136:	6821      	ldrge	r1, [r4, #0]
 8006138:	f021 0104 	bicge.w	r1, r1, #4
 800613c:	6021      	strge	r1, [r4, #0]
 800613e:	b90e      	cbnz	r6, 8006144 <_printf_i+0x118>
 8006140:	2d00      	cmp	r5, #0
 8006142:	d04d      	beq.n	80061e0 <_printf_i+0x1b4>
 8006144:	4615      	mov	r5, r2
 8006146:	fbb6 f1f3 	udiv	r1, r6, r3
 800614a:	fb03 6711 	mls	r7, r3, r1, r6
 800614e:	5dc7      	ldrb	r7, [r0, r7]
 8006150:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006154:	4637      	mov	r7, r6
 8006156:	42bb      	cmp	r3, r7
 8006158:	460e      	mov	r6, r1
 800615a:	d9f4      	bls.n	8006146 <_printf_i+0x11a>
 800615c:	2b08      	cmp	r3, #8
 800615e:	d10b      	bne.n	8006178 <_printf_i+0x14c>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	07de      	lsls	r6, r3, #31
 8006164:	d508      	bpl.n	8006178 <_printf_i+0x14c>
 8006166:	6923      	ldr	r3, [r4, #16]
 8006168:	6861      	ldr	r1, [r4, #4]
 800616a:	4299      	cmp	r1, r3
 800616c:	bfde      	ittt	le
 800616e:	2330      	movle	r3, #48	; 0x30
 8006170:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006174:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006178:	1b52      	subs	r2, r2, r5
 800617a:	6122      	str	r2, [r4, #16]
 800617c:	f8cd a000 	str.w	sl, [sp]
 8006180:	464b      	mov	r3, r9
 8006182:	aa03      	add	r2, sp, #12
 8006184:	4621      	mov	r1, r4
 8006186:	4640      	mov	r0, r8
 8006188:	f7ff fee2 	bl	8005f50 <_printf_common>
 800618c:	3001      	adds	r0, #1
 800618e:	d14c      	bne.n	800622a <_printf_i+0x1fe>
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	b004      	add	sp, #16
 8006196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800619a:	4835      	ldr	r0, [pc, #212]	; (8006270 <_printf_i+0x244>)
 800619c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061a0:	6829      	ldr	r1, [r5, #0]
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80061a8:	6029      	str	r1, [r5, #0]
 80061aa:	061d      	lsls	r5, r3, #24
 80061ac:	d514      	bpl.n	80061d8 <_printf_i+0x1ac>
 80061ae:	07df      	lsls	r7, r3, #31
 80061b0:	bf44      	itt	mi
 80061b2:	f043 0320 	orrmi.w	r3, r3, #32
 80061b6:	6023      	strmi	r3, [r4, #0]
 80061b8:	b91e      	cbnz	r6, 80061c2 <_printf_i+0x196>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	f023 0320 	bic.w	r3, r3, #32
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	2310      	movs	r3, #16
 80061c4:	e7b0      	b.n	8006128 <_printf_i+0xfc>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f043 0320 	orr.w	r3, r3, #32
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	2378      	movs	r3, #120	; 0x78
 80061d0:	4828      	ldr	r0, [pc, #160]	; (8006274 <_printf_i+0x248>)
 80061d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061d6:	e7e3      	b.n	80061a0 <_printf_i+0x174>
 80061d8:	0659      	lsls	r1, r3, #25
 80061da:	bf48      	it	mi
 80061dc:	b2b6      	uxthmi	r6, r6
 80061de:	e7e6      	b.n	80061ae <_printf_i+0x182>
 80061e0:	4615      	mov	r5, r2
 80061e2:	e7bb      	b.n	800615c <_printf_i+0x130>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	6826      	ldr	r6, [r4, #0]
 80061e8:	6961      	ldr	r1, [r4, #20]
 80061ea:	1d18      	adds	r0, r3, #4
 80061ec:	6028      	str	r0, [r5, #0]
 80061ee:	0635      	lsls	r5, r6, #24
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	d501      	bpl.n	80061f8 <_printf_i+0x1cc>
 80061f4:	6019      	str	r1, [r3, #0]
 80061f6:	e002      	b.n	80061fe <_printf_i+0x1d2>
 80061f8:	0670      	lsls	r0, r6, #25
 80061fa:	d5fb      	bpl.n	80061f4 <_printf_i+0x1c8>
 80061fc:	8019      	strh	r1, [r3, #0]
 80061fe:	2300      	movs	r3, #0
 8006200:	6123      	str	r3, [r4, #16]
 8006202:	4615      	mov	r5, r2
 8006204:	e7ba      	b.n	800617c <_printf_i+0x150>
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	1d1a      	adds	r2, r3, #4
 800620a:	602a      	str	r2, [r5, #0]
 800620c:	681d      	ldr	r5, [r3, #0]
 800620e:	6862      	ldr	r2, [r4, #4]
 8006210:	2100      	movs	r1, #0
 8006212:	4628      	mov	r0, r5
 8006214:	f7f9 ffe4 	bl	80001e0 <memchr>
 8006218:	b108      	cbz	r0, 800621e <_printf_i+0x1f2>
 800621a:	1b40      	subs	r0, r0, r5
 800621c:	6060      	str	r0, [r4, #4]
 800621e:	6863      	ldr	r3, [r4, #4]
 8006220:	6123      	str	r3, [r4, #16]
 8006222:	2300      	movs	r3, #0
 8006224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006228:	e7a8      	b.n	800617c <_printf_i+0x150>
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	462a      	mov	r2, r5
 800622e:	4649      	mov	r1, r9
 8006230:	4640      	mov	r0, r8
 8006232:	47d0      	blx	sl
 8006234:	3001      	adds	r0, #1
 8006236:	d0ab      	beq.n	8006190 <_printf_i+0x164>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	079b      	lsls	r3, r3, #30
 800623c:	d413      	bmi.n	8006266 <_printf_i+0x23a>
 800623e:	68e0      	ldr	r0, [r4, #12]
 8006240:	9b03      	ldr	r3, [sp, #12]
 8006242:	4298      	cmp	r0, r3
 8006244:	bfb8      	it	lt
 8006246:	4618      	movlt	r0, r3
 8006248:	e7a4      	b.n	8006194 <_printf_i+0x168>
 800624a:	2301      	movs	r3, #1
 800624c:	4632      	mov	r2, r6
 800624e:	4649      	mov	r1, r9
 8006250:	4640      	mov	r0, r8
 8006252:	47d0      	blx	sl
 8006254:	3001      	adds	r0, #1
 8006256:	d09b      	beq.n	8006190 <_printf_i+0x164>
 8006258:	3501      	adds	r5, #1
 800625a:	68e3      	ldr	r3, [r4, #12]
 800625c:	9903      	ldr	r1, [sp, #12]
 800625e:	1a5b      	subs	r3, r3, r1
 8006260:	42ab      	cmp	r3, r5
 8006262:	dcf2      	bgt.n	800624a <_printf_i+0x21e>
 8006264:	e7eb      	b.n	800623e <_printf_i+0x212>
 8006266:	2500      	movs	r5, #0
 8006268:	f104 0619 	add.w	r6, r4, #25
 800626c:	e7f5      	b.n	800625a <_printf_i+0x22e>
 800626e:	bf00      	nop
 8006270:	0800875e 	.word	0x0800875e
 8006274:	0800876f 	.word	0x0800876f

08006278 <_sbrk_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d06      	ldr	r5, [pc, #24]	; (8006294 <_sbrk_r+0x1c>)
 800627c:	2300      	movs	r3, #0
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	602b      	str	r3, [r5, #0]
 8006284:	f7fb ff2a 	bl	80020dc <_sbrk>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_sbrk_r+0x1a>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_sbrk_r+0x1a>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	2000065c 	.word	0x2000065c

08006298 <sniprintf>:
 8006298:	b40c      	push	{r2, r3}
 800629a:	b530      	push	{r4, r5, lr}
 800629c:	4b17      	ldr	r3, [pc, #92]	; (80062fc <sniprintf+0x64>)
 800629e:	1e0c      	subs	r4, r1, #0
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	b09d      	sub	sp, #116	; 0x74
 80062a4:	da08      	bge.n	80062b8 <sniprintf+0x20>
 80062a6:	238b      	movs	r3, #139	; 0x8b
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	b01d      	add	sp, #116	; 0x74
 80062b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062b4:	b002      	add	sp, #8
 80062b6:	4770      	bx	lr
 80062b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062c0:	bf14      	ite	ne
 80062c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062c6:	4623      	moveq	r3, r4
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	9307      	str	r3, [sp, #28]
 80062cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062d0:	9002      	str	r0, [sp, #8]
 80062d2:	9006      	str	r0, [sp, #24]
 80062d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062da:	ab21      	add	r3, sp, #132	; 0x84
 80062dc:	a902      	add	r1, sp, #8
 80062de:	4628      	mov	r0, r5
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	f001 fd71 	bl	8007dc8 <_svfiprintf_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	bfbc      	itt	lt
 80062ea:	238b      	movlt	r3, #139	; 0x8b
 80062ec:	602b      	strlt	r3, [r5, #0]
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	d0dd      	beq.n	80062ae <sniprintf+0x16>
 80062f2:	9b02      	ldr	r3, [sp, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	e7d9      	b.n	80062ae <sniprintf+0x16>
 80062fa:	bf00      	nop
 80062fc:	200000d4 	.word	0x200000d4

08006300 <__sread>:
 8006300:	b510      	push	{r4, lr}
 8006302:	460c      	mov	r4, r1
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	f001 ffb8 	bl	800827c <_read_r>
 800630c:	2800      	cmp	r0, #0
 800630e:	bfab      	itete	ge
 8006310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006312:	89a3      	ldrhlt	r3, [r4, #12]
 8006314:	181b      	addge	r3, r3, r0
 8006316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800631a:	bfac      	ite	ge
 800631c:	6563      	strge	r3, [r4, #84]	; 0x54
 800631e:	81a3      	strhlt	r3, [r4, #12]
 8006320:	bd10      	pop	{r4, pc}

08006322 <__swrite>:
 8006322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006326:	461f      	mov	r7, r3
 8006328:	898b      	ldrh	r3, [r1, #12]
 800632a:	05db      	lsls	r3, r3, #23
 800632c:	4605      	mov	r5, r0
 800632e:	460c      	mov	r4, r1
 8006330:	4616      	mov	r6, r2
 8006332:	d505      	bpl.n	8006340 <__swrite+0x1e>
 8006334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006338:	2302      	movs	r3, #2
 800633a:	2200      	movs	r2, #0
 800633c:	f001 f876 	bl	800742c <_lseek_r>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	4632      	mov	r2, r6
 800634e:	463b      	mov	r3, r7
 8006350:	4628      	mov	r0, r5
 8006352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006356:	f000 b869 	b.w	800642c <_write_r>

0800635a <__sseek>:
 800635a:	b510      	push	{r4, lr}
 800635c:	460c      	mov	r4, r1
 800635e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006362:	f001 f863 	bl	800742c <_lseek_r>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	bf15      	itete	ne
 800636c:	6560      	strne	r0, [r4, #84]	; 0x54
 800636e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006376:	81a3      	strheq	r3, [r4, #12]
 8006378:	bf18      	it	ne
 800637a:	81a3      	strhne	r3, [r4, #12]
 800637c:	bd10      	pop	{r4, pc}

0800637e <__sclose>:
 800637e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006382:	f000 b8f1 	b.w	8006568 <_close_r>
	...

08006388 <__swbuf_r>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	460e      	mov	r6, r1
 800638c:	4614      	mov	r4, r2
 800638e:	4605      	mov	r5, r0
 8006390:	b118      	cbz	r0, 800639a <__swbuf_r+0x12>
 8006392:	6983      	ldr	r3, [r0, #24]
 8006394:	b90b      	cbnz	r3, 800639a <__swbuf_r+0x12>
 8006396:	f7ff f995 	bl	80056c4 <__sinit>
 800639a:	4b21      	ldr	r3, [pc, #132]	; (8006420 <__swbuf_r+0x98>)
 800639c:	429c      	cmp	r4, r3
 800639e:	d12b      	bne.n	80063f8 <__swbuf_r+0x70>
 80063a0:	686c      	ldr	r4, [r5, #4]
 80063a2:	69a3      	ldr	r3, [r4, #24]
 80063a4:	60a3      	str	r3, [r4, #8]
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	071a      	lsls	r2, r3, #28
 80063aa:	d52f      	bpl.n	800640c <__swbuf_r+0x84>
 80063ac:	6923      	ldr	r3, [r4, #16]
 80063ae:	b36b      	cbz	r3, 800640c <__swbuf_r+0x84>
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	6820      	ldr	r0, [r4, #0]
 80063b4:	1ac0      	subs	r0, r0, r3
 80063b6:	6963      	ldr	r3, [r4, #20]
 80063b8:	b2f6      	uxtb	r6, r6
 80063ba:	4283      	cmp	r3, r0
 80063bc:	4637      	mov	r7, r6
 80063be:	dc04      	bgt.n	80063ca <__swbuf_r+0x42>
 80063c0:	4621      	mov	r1, r4
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 ffe0 	bl	8007388 <_fflush_r>
 80063c8:	bb30      	cbnz	r0, 8006418 <__swbuf_r+0x90>
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	60a3      	str	r3, [r4, #8]
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	6022      	str	r2, [r4, #0]
 80063d6:	701e      	strb	r6, [r3, #0]
 80063d8:	6963      	ldr	r3, [r4, #20]
 80063da:	3001      	adds	r0, #1
 80063dc:	4283      	cmp	r3, r0
 80063de:	d004      	beq.n	80063ea <__swbuf_r+0x62>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	07db      	lsls	r3, r3, #31
 80063e4:	d506      	bpl.n	80063f4 <__swbuf_r+0x6c>
 80063e6:	2e0a      	cmp	r6, #10
 80063e8:	d104      	bne.n	80063f4 <__swbuf_r+0x6c>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4628      	mov	r0, r5
 80063ee:	f000 ffcb 	bl	8007388 <_fflush_r>
 80063f2:	b988      	cbnz	r0, 8006418 <__swbuf_r+0x90>
 80063f4:	4638      	mov	r0, r7
 80063f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <__swbuf_r+0x9c>)
 80063fa:	429c      	cmp	r4, r3
 80063fc:	d101      	bne.n	8006402 <__swbuf_r+0x7a>
 80063fe:	68ac      	ldr	r4, [r5, #8]
 8006400:	e7cf      	b.n	80063a2 <__swbuf_r+0x1a>
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <__swbuf_r+0xa0>)
 8006404:	429c      	cmp	r4, r3
 8006406:	bf08      	it	eq
 8006408:	68ec      	ldreq	r4, [r5, #12]
 800640a:	e7ca      	b.n	80063a2 <__swbuf_r+0x1a>
 800640c:	4621      	mov	r1, r4
 800640e:	4628      	mov	r0, r5
 8006410:	f000 f81e 	bl	8006450 <__swsetup_r>
 8006414:	2800      	cmp	r0, #0
 8006416:	d0cb      	beq.n	80063b0 <__swbuf_r+0x28>
 8006418:	f04f 37ff 	mov.w	r7, #4294967295
 800641c:	e7ea      	b.n	80063f4 <__swbuf_r+0x6c>
 800641e:	bf00      	nop
 8006420:	08008708 	.word	0x08008708
 8006424:	08008728 	.word	0x08008728
 8006428:	080086e8 	.word	0x080086e8

0800642c <_write_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	; (800644c <_write_r+0x20>)
 8006430:	4604      	mov	r4, r0
 8006432:	4608      	mov	r0, r1
 8006434:	4611      	mov	r1, r2
 8006436:	2200      	movs	r2, #0
 8006438:	602a      	str	r2, [r5, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	f7ff f83f 	bl	80054be <_write>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_write_r+0x1e>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_write_r+0x1e>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	2000065c 	.word	0x2000065c

08006450 <__swsetup_r>:
 8006450:	4b32      	ldr	r3, [pc, #200]	; (800651c <__swsetup_r+0xcc>)
 8006452:	b570      	push	{r4, r5, r6, lr}
 8006454:	681d      	ldr	r5, [r3, #0]
 8006456:	4606      	mov	r6, r0
 8006458:	460c      	mov	r4, r1
 800645a:	b125      	cbz	r5, 8006466 <__swsetup_r+0x16>
 800645c:	69ab      	ldr	r3, [r5, #24]
 800645e:	b913      	cbnz	r3, 8006466 <__swsetup_r+0x16>
 8006460:	4628      	mov	r0, r5
 8006462:	f7ff f92f 	bl	80056c4 <__sinit>
 8006466:	4b2e      	ldr	r3, [pc, #184]	; (8006520 <__swsetup_r+0xd0>)
 8006468:	429c      	cmp	r4, r3
 800646a:	d10f      	bne.n	800648c <__swsetup_r+0x3c>
 800646c:	686c      	ldr	r4, [r5, #4]
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006474:	0719      	lsls	r1, r3, #28
 8006476:	d42c      	bmi.n	80064d2 <__swsetup_r+0x82>
 8006478:	06dd      	lsls	r5, r3, #27
 800647a:	d411      	bmi.n	80064a0 <__swsetup_r+0x50>
 800647c:	2309      	movs	r3, #9
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006484:	81a3      	strh	r3, [r4, #12]
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	e03e      	b.n	800650a <__swsetup_r+0xba>
 800648c:	4b25      	ldr	r3, [pc, #148]	; (8006524 <__swsetup_r+0xd4>)
 800648e:	429c      	cmp	r4, r3
 8006490:	d101      	bne.n	8006496 <__swsetup_r+0x46>
 8006492:	68ac      	ldr	r4, [r5, #8]
 8006494:	e7eb      	b.n	800646e <__swsetup_r+0x1e>
 8006496:	4b24      	ldr	r3, [pc, #144]	; (8006528 <__swsetup_r+0xd8>)
 8006498:	429c      	cmp	r4, r3
 800649a:	bf08      	it	eq
 800649c:	68ec      	ldreq	r4, [r5, #12]
 800649e:	e7e6      	b.n	800646e <__swsetup_r+0x1e>
 80064a0:	0758      	lsls	r0, r3, #29
 80064a2:	d512      	bpl.n	80064ca <__swsetup_r+0x7a>
 80064a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064a6:	b141      	cbz	r1, 80064ba <__swsetup_r+0x6a>
 80064a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ac:	4299      	cmp	r1, r3
 80064ae:	d002      	beq.n	80064b6 <__swsetup_r+0x66>
 80064b0:	4630      	mov	r0, r6
 80064b2:	f001 fbe1 	bl	8007c78 <_free_r>
 80064b6:	2300      	movs	r3, #0
 80064b8:	6363      	str	r3, [r4, #52]	; 0x34
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064c0:	81a3      	strh	r3, [r4, #12]
 80064c2:	2300      	movs	r3, #0
 80064c4:	6063      	str	r3, [r4, #4]
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f043 0308 	orr.w	r3, r3, #8
 80064d0:	81a3      	strh	r3, [r4, #12]
 80064d2:	6923      	ldr	r3, [r4, #16]
 80064d4:	b94b      	cbnz	r3, 80064ea <__swsetup_r+0x9a>
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e0:	d003      	beq.n	80064ea <__swsetup_r+0x9a>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 ffd9 	bl	800749c <__smakebuf_r>
 80064ea:	89a0      	ldrh	r0, [r4, #12]
 80064ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064f0:	f010 0301 	ands.w	r3, r0, #1
 80064f4:	d00a      	beq.n	800650c <__swsetup_r+0xbc>
 80064f6:	2300      	movs	r3, #0
 80064f8:	60a3      	str	r3, [r4, #8]
 80064fa:	6963      	ldr	r3, [r4, #20]
 80064fc:	425b      	negs	r3, r3
 80064fe:	61a3      	str	r3, [r4, #24]
 8006500:	6923      	ldr	r3, [r4, #16]
 8006502:	b943      	cbnz	r3, 8006516 <__swsetup_r+0xc6>
 8006504:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006508:	d1ba      	bne.n	8006480 <__swsetup_r+0x30>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	0781      	lsls	r1, r0, #30
 800650e:	bf58      	it	pl
 8006510:	6963      	ldrpl	r3, [r4, #20]
 8006512:	60a3      	str	r3, [r4, #8]
 8006514:	e7f4      	b.n	8006500 <__swsetup_r+0xb0>
 8006516:	2000      	movs	r0, #0
 8006518:	e7f7      	b.n	800650a <__swsetup_r+0xba>
 800651a:	bf00      	nop
 800651c:	200000d4 	.word	0x200000d4
 8006520:	08008708 	.word	0x08008708
 8006524:	08008728 	.word	0x08008728
 8006528:	080086e8 	.word	0x080086e8

0800652c <__assert_func>:
 800652c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800652e:	4614      	mov	r4, r2
 8006530:	461a      	mov	r2, r3
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <__assert_func+0x2c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4605      	mov	r5, r0
 8006538:	68d8      	ldr	r0, [r3, #12]
 800653a:	b14c      	cbz	r4, 8006550 <__assert_func+0x24>
 800653c:	4b07      	ldr	r3, [pc, #28]	; (800655c <__assert_func+0x30>)
 800653e:	9100      	str	r1, [sp, #0]
 8006540:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006544:	4906      	ldr	r1, [pc, #24]	; (8006560 <__assert_func+0x34>)
 8006546:	462b      	mov	r3, r5
 8006548:	f000 ff5a 	bl	8007400 <fiprintf>
 800654c:	f001 fea8 	bl	80082a0 <abort>
 8006550:	4b04      	ldr	r3, [pc, #16]	; (8006564 <__assert_func+0x38>)
 8006552:	461c      	mov	r4, r3
 8006554:	e7f3      	b.n	800653e <__assert_func+0x12>
 8006556:	bf00      	nop
 8006558:	200000d4 	.word	0x200000d4
 800655c:	08008780 	.word	0x08008780
 8006560:	0800878d 	.word	0x0800878d
 8006564:	080087bb 	.word	0x080087bb

08006568 <_close_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d06      	ldr	r5, [pc, #24]	; (8006584 <_close_r+0x1c>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	f7fe ffd4 	bl	8005520 <_close>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_close_r+0x1a>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_close_r+0x1a>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	2000065c 	.word	0x2000065c

08006588 <quorem>:
 8006588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	6903      	ldr	r3, [r0, #16]
 800658e:	690c      	ldr	r4, [r1, #16]
 8006590:	42a3      	cmp	r3, r4
 8006592:	4607      	mov	r7, r0
 8006594:	f2c0 8081 	blt.w	800669a <quorem+0x112>
 8006598:	3c01      	subs	r4, #1
 800659a:	f101 0814 	add.w	r8, r1, #20
 800659e:	f100 0514 	add.w	r5, r0, #20
 80065a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065b0:	3301      	adds	r3, #1
 80065b2:	429a      	cmp	r2, r3
 80065b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80065c0:	d331      	bcc.n	8006626 <quorem+0x9e>
 80065c2:	f04f 0e00 	mov.w	lr, #0
 80065c6:	4640      	mov	r0, r8
 80065c8:	46ac      	mov	ip, r5
 80065ca:	46f2      	mov	sl, lr
 80065cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80065d0:	b293      	uxth	r3, r2
 80065d2:	fb06 e303 	mla	r3, r6, r3, lr
 80065d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065da:	b29b      	uxth	r3, r3
 80065dc:	ebaa 0303 	sub.w	r3, sl, r3
 80065e0:	f8dc a000 	ldr.w	sl, [ip]
 80065e4:	0c12      	lsrs	r2, r2, #16
 80065e6:	fa13 f38a 	uxtah	r3, r3, sl
 80065ea:	fb06 e202 	mla	r2, r6, r2, lr
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	9b00      	ldr	r3, [sp, #0]
 80065f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065f6:	b292      	uxth	r2, r2
 80065f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006600:	f8bd 3000 	ldrh.w	r3, [sp]
 8006604:	4581      	cmp	r9, r0
 8006606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800660a:	f84c 3b04 	str.w	r3, [ip], #4
 800660e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006612:	d2db      	bcs.n	80065cc <quorem+0x44>
 8006614:	f855 300b 	ldr.w	r3, [r5, fp]
 8006618:	b92b      	cbnz	r3, 8006626 <quorem+0x9e>
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	3b04      	subs	r3, #4
 800661e:	429d      	cmp	r5, r3
 8006620:	461a      	mov	r2, r3
 8006622:	d32e      	bcc.n	8006682 <quorem+0xfa>
 8006624:	613c      	str	r4, [r7, #16]
 8006626:	4638      	mov	r0, r7
 8006628:	f001 fa0e 	bl	8007a48 <__mcmp>
 800662c:	2800      	cmp	r0, #0
 800662e:	db24      	blt.n	800667a <quorem+0xf2>
 8006630:	3601      	adds	r6, #1
 8006632:	4628      	mov	r0, r5
 8006634:	f04f 0c00 	mov.w	ip, #0
 8006638:	f858 2b04 	ldr.w	r2, [r8], #4
 800663c:	f8d0 e000 	ldr.w	lr, [r0]
 8006640:	b293      	uxth	r3, r2
 8006642:	ebac 0303 	sub.w	r3, ip, r3
 8006646:	0c12      	lsrs	r2, r2, #16
 8006648:	fa13 f38e 	uxtah	r3, r3, lr
 800664c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800665a:	45c1      	cmp	r9, r8
 800665c:	f840 3b04 	str.w	r3, [r0], #4
 8006660:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006664:	d2e8      	bcs.n	8006638 <quorem+0xb0>
 8006666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800666a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800666e:	b922      	cbnz	r2, 800667a <quorem+0xf2>
 8006670:	3b04      	subs	r3, #4
 8006672:	429d      	cmp	r5, r3
 8006674:	461a      	mov	r2, r3
 8006676:	d30a      	bcc.n	800668e <quorem+0x106>
 8006678:	613c      	str	r4, [r7, #16]
 800667a:	4630      	mov	r0, r6
 800667c:	b003      	add	sp, #12
 800667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	3b04      	subs	r3, #4
 8006686:	2a00      	cmp	r2, #0
 8006688:	d1cc      	bne.n	8006624 <quorem+0x9c>
 800668a:	3c01      	subs	r4, #1
 800668c:	e7c7      	b.n	800661e <quorem+0x96>
 800668e:	6812      	ldr	r2, [r2, #0]
 8006690:	3b04      	subs	r3, #4
 8006692:	2a00      	cmp	r2, #0
 8006694:	d1f0      	bne.n	8006678 <quorem+0xf0>
 8006696:	3c01      	subs	r4, #1
 8006698:	e7eb      	b.n	8006672 <quorem+0xea>
 800669a:	2000      	movs	r0, #0
 800669c:	e7ee      	b.n	800667c <quorem+0xf4>
	...

080066a0 <_dtoa_r>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	ed2d 8b04 	vpush	{d8-d9}
 80066a8:	ec57 6b10 	vmov	r6, r7, d0
 80066ac:	b093      	sub	sp, #76	; 0x4c
 80066ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80066b4:	9106      	str	r1, [sp, #24]
 80066b6:	ee10 aa10 	vmov	sl, s0
 80066ba:	4604      	mov	r4, r0
 80066bc:	9209      	str	r2, [sp, #36]	; 0x24
 80066be:	930c      	str	r3, [sp, #48]	; 0x30
 80066c0:	46bb      	mov	fp, r7
 80066c2:	b975      	cbnz	r5, 80066e2 <_dtoa_r+0x42>
 80066c4:	2010      	movs	r0, #16
 80066c6:	f000 ff29 	bl	800751c <malloc>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6260      	str	r0, [r4, #36]	; 0x24
 80066ce:	b920      	cbnz	r0, 80066da <_dtoa_r+0x3a>
 80066d0:	4ba7      	ldr	r3, [pc, #668]	; (8006970 <_dtoa_r+0x2d0>)
 80066d2:	21ea      	movs	r1, #234	; 0xea
 80066d4:	48a7      	ldr	r0, [pc, #668]	; (8006974 <_dtoa_r+0x2d4>)
 80066d6:	f7ff ff29 	bl	800652c <__assert_func>
 80066da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066de:	6005      	str	r5, [r0, #0]
 80066e0:	60c5      	str	r5, [r0, #12]
 80066e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	b151      	cbz	r1, 80066fe <_dtoa_r+0x5e>
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	604a      	str	r2, [r1, #4]
 80066ec:	2301      	movs	r3, #1
 80066ee:	4093      	lsls	r3, r2
 80066f0:	608b      	str	r3, [r1, #8]
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 ff66 	bl	80075c4 <_Bfree>
 80066f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	1e3b      	subs	r3, r7, #0
 8006700:	bfaa      	itet	ge
 8006702:	2300      	movge	r3, #0
 8006704:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006708:	f8c8 3000 	strge.w	r3, [r8]
 800670c:	4b9a      	ldr	r3, [pc, #616]	; (8006978 <_dtoa_r+0x2d8>)
 800670e:	bfbc      	itt	lt
 8006710:	2201      	movlt	r2, #1
 8006712:	f8c8 2000 	strlt.w	r2, [r8]
 8006716:	ea33 030b 	bics.w	r3, r3, fp
 800671a:	d11b      	bne.n	8006754 <_dtoa_r+0xb4>
 800671c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800671e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006728:	4333      	orrs	r3, r6
 800672a:	f000 8592 	beq.w	8007252 <_dtoa_r+0xbb2>
 800672e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006730:	b963      	cbnz	r3, 800674c <_dtoa_r+0xac>
 8006732:	4b92      	ldr	r3, [pc, #584]	; (800697c <_dtoa_r+0x2dc>)
 8006734:	e022      	b.n	800677c <_dtoa_r+0xdc>
 8006736:	4b92      	ldr	r3, [pc, #584]	; (8006980 <_dtoa_r+0x2e0>)
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	3308      	adds	r3, #8
 800673c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	9801      	ldr	r0, [sp, #4]
 8006742:	b013      	add	sp, #76	; 0x4c
 8006744:	ecbd 8b04 	vpop	{d8-d9}
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	4b8b      	ldr	r3, [pc, #556]	; (800697c <_dtoa_r+0x2dc>)
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	3303      	adds	r3, #3
 8006752:	e7f3      	b.n	800673c <_dtoa_r+0x9c>
 8006754:	2200      	movs	r2, #0
 8006756:	2300      	movs	r3, #0
 8006758:	4650      	mov	r0, sl
 800675a:	4659      	mov	r1, fp
 800675c:	f7fa f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006760:	ec4b ab19 	vmov	d9, sl, fp
 8006764:	4680      	mov	r8, r0
 8006766:	b158      	cbz	r0, 8006780 <_dtoa_r+0xe0>
 8006768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800676a:	2301      	movs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 856b 	beq.w	800724c <_dtoa_r+0xbac>
 8006776:	4883      	ldr	r0, [pc, #524]	; (8006984 <_dtoa_r+0x2e4>)
 8006778:	6018      	str	r0, [r3, #0]
 800677a:	1e43      	subs	r3, r0, #1
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	e7df      	b.n	8006740 <_dtoa_r+0xa0>
 8006780:	ec4b ab10 	vmov	d0, sl, fp
 8006784:	aa10      	add	r2, sp, #64	; 0x40
 8006786:	a911      	add	r1, sp, #68	; 0x44
 8006788:	4620      	mov	r0, r4
 800678a:	f001 fa03 	bl	8007b94 <__d2b>
 800678e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006792:	ee08 0a10 	vmov	s16, r0
 8006796:	2d00      	cmp	r5, #0
 8006798:	f000 8084 	beq.w	80068a4 <_dtoa_r+0x204>
 800679c:	ee19 3a90 	vmov	r3, s19
 80067a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80067a8:	4656      	mov	r6, sl
 80067aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80067ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80067b6:	4b74      	ldr	r3, [pc, #464]	; (8006988 <_dtoa_r+0x2e8>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	4630      	mov	r0, r6
 80067bc:	4639      	mov	r1, r7
 80067be:	f7f9 fd63 	bl	8000288 <__aeabi_dsub>
 80067c2:	a365      	add	r3, pc, #404	; (adr r3, 8006958 <_dtoa_r+0x2b8>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	a364      	add	r3, pc, #400	; (adr r3, 8006960 <_dtoa_r+0x2c0>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fd5b 	bl	800028c <__adddf3>
 80067d6:	4606      	mov	r6, r0
 80067d8:	4628      	mov	r0, r5
 80067da:	460f      	mov	r7, r1
 80067dc:	f7f9 fea2 	bl	8000524 <__aeabi_i2d>
 80067e0:	a361      	add	r3, pc, #388	; (adr r3, 8006968 <_dtoa_r+0x2c8>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f7f9 ff07 	bl	80005f8 <__aeabi_dmul>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4630      	mov	r0, r6
 80067f0:	4639      	mov	r1, r7
 80067f2:	f7f9 fd4b 	bl	800028c <__adddf3>
 80067f6:	4606      	mov	r6, r0
 80067f8:	460f      	mov	r7, r1
 80067fa:	f7fa f9ad 	bl	8000b58 <__aeabi_d2iz>
 80067fe:	2200      	movs	r2, #0
 8006800:	9000      	str	r0, [sp, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7fa f968 	bl	8000adc <__aeabi_dcmplt>
 800680c:	b150      	cbz	r0, 8006824 <_dtoa_r+0x184>
 800680e:	9800      	ldr	r0, [sp, #0]
 8006810:	f7f9 fe88 	bl	8000524 <__aeabi_i2d>
 8006814:	4632      	mov	r2, r6
 8006816:	463b      	mov	r3, r7
 8006818:	f7fa f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800681c:	b910      	cbnz	r0, 8006824 <_dtoa_r+0x184>
 800681e:	9b00      	ldr	r3, [sp, #0]
 8006820:	3b01      	subs	r3, #1
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	9b00      	ldr	r3, [sp, #0]
 8006826:	2b16      	cmp	r3, #22
 8006828:	d85a      	bhi.n	80068e0 <_dtoa_r+0x240>
 800682a:	9a00      	ldr	r2, [sp, #0]
 800682c:	4b57      	ldr	r3, [pc, #348]	; (800698c <_dtoa_r+0x2ec>)
 800682e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	ec51 0b19 	vmov	r0, r1, d9
 800683a:	f7fa f94f 	bl	8000adc <__aeabi_dcmplt>
 800683e:	2800      	cmp	r0, #0
 8006840:	d050      	beq.n	80068e4 <_dtoa_r+0x244>
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	3b01      	subs	r3, #1
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	930b      	str	r3, [sp, #44]	; 0x2c
 800684c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800684e:	1b5d      	subs	r5, r3, r5
 8006850:	1e6b      	subs	r3, r5, #1
 8006852:	9305      	str	r3, [sp, #20]
 8006854:	bf45      	ittet	mi
 8006856:	f1c5 0301 	rsbmi	r3, r5, #1
 800685a:	9304      	strmi	r3, [sp, #16]
 800685c:	2300      	movpl	r3, #0
 800685e:	2300      	movmi	r3, #0
 8006860:	bf4c      	ite	mi
 8006862:	9305      	strmi	r3, [sp, #20]
 8006864:	9304      	strpl	r3, [sp, #16]
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	db3d      	blt.n	80068e8 <_dtoa_r+0x248>
 800686c:	9b05      	ldr	r3, [sp, #20]
 800686e:	9a00      	ldr	r2, [sp, #0]
 8006870:	920a      	str	r2, [sp, #40]	; 0x28
 8006872:	4413      	add	r3, r2
 8006874:	9305      	str	r3, [sp, #20]
 8006876:	2300      	movs	r3, #0
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	9b06      	ldr	r3, [sp, #24]
 800687c:	2b09      	cmp	r3, #9
 800687e:	f200 8089 	bhi.w	8006994 <_dtoa_r+0x2f4>
 8006882:	2b05      	cmp	r3, #5
 8006884:	bfc4      	itt	gt
 8006886:	3b04      	subgt	r3, #4
 8006888:	9306      	strgt	r3, [sp, #24]
 800688a:	9b06      	ldr	r3, [sp, #24]
 800688c:	f1a3 0302 	sub.w	r3, r3, #2
 8006890:	bfcc      	ite	gt
 8006892:	2500      	movgt	r5, #0
 8006894:	2501      	movle	r5, #1
 8006896:	2b03      	cmp	r3, #3
 8006898:	f200 8087 	bhi.w	80069aa <_dtoa_r+0x30a>
 800689c:	e8df f003 	tbb	[pc, r3]
 80068a0:	59383a2d 	.word	0x59383a2d
 80068a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80068a8:	441d      	add	r5, r3
 80068aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	bfc1      	itttt	gt
 80068b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80068b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80068ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80068be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80068c2:	bfda      	itte	le
 80068c4:	f1c3 0320 	rsble	r3, r3, #32
 80068c8:	fa06 f003 	lslle.w	r0, r6, r3
 80068cc:	4318      	orrgt	r0, r3
 80068ce:	f7f9 fe19 	bl	8000504 <__aeabi_ui2d>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4606      	mov	r6, r0
 80068d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068da:	3d01      	subs	r5, #1
 80068dc:	930e      	str	r3, [sp, #56]	; 0x38
 80068de:	e76a      	b.n	80067b6 <_dtoa_r+0x116>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e7b2      	b.n	800684a <_dtoa_r+0x1aa>
 80068e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80068e6:	e7b1      	b.n	800684c <_dtoa_r+0x1ac>
 80068e8:	9b04      	ldr	r3, [sp, #16]
 80068ea:	9a00      	ldr	r2, [sp, #0]
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	9304      	str	r3, [sp, #16]
 80068f0:	4253      	negs	r3, r2
 80068f2:	9307      	str	r3, [sp, #28]
 80068f4:	2300      	movs	r3, #0
 80068f6:	930a      	str	r3, [sp, #40]	; 0x28
 80068f8:	e7bf      	b.n	800687a <_dtoa_r+0x1da>
 80068fa:	2300      	movs	r3, #0
 80068fc:	9308      	str	r3, [sp, #32]
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	dc55      	bgt.n	80069b0 <_dtoa_r+0x310>
 8006904:	2301      	movs	r3, #1
 8006906:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800690a:	461a      	mov	r2, r3
 800690c:	9209      	str	r2, [sp, #36]	; 0x24
 800690e:	e00c      	b.n	800692a <_dtoa_r+0x28a>
 8006910:	2301      	movs	r3, #1
 8006912:	e7f3      	b.n	80068fc <_dtoa_r+0x25c>
 8006914:	2300      	movs	r3, #0
 8006916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006918:	9308      	str	r3, [sp, #32]
 800691a:	9b00      	ldr	r3, [sp, #0]
 800691c:	4413      	add	r3, r2
 800691e:	9302      	str	r3, [sp, #8]
 8006920:	3301      	adds	r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	9303      	str	r3, [sp, #12]
 8006926:	bfb8      	it	lt
 8006928:	2301      	movlt	r3, #1
 800692a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800692c:	2200      	movs	r2, #0
 800692e:	6042      	str	r2, [r0, #4]
 8006930:	2204      	movs	r2, #4
 8006932:	f102 0614 	add.w	r6, r2, #20
 8006936:	429e      	cmp	r6, r3
 8006938:	6841      	ldr	r1, [r0, #4]
 800693a:	d93d      	bls.n	80069b8 <_dtoa_r+0x318>
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fe01 	bl	8007544 <_Balloc>
 8006942:	9001      	str	r0, [sp, #4]
 8006944:	2800      	cmp	r0, #0
 8006946:	d13b      	bne.n	80069c0 <_dtoa_r+0x320>
 8006948:	4b11      	ldr	r3, [pc, #68]	; (8006990 <_dtoa_r+0x2f0>)
 800694a:	4602      	mov	r2, r0
 800694c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006950:	e6c0      	b.n	80066d4 <_dtoa_r+0x34>
 8006952:	2301      	movs	r3, #1
 8006954:	e7df      	b.n	8006916 <_dtoa_r+0x276>
 8006956:	bf00      	nop
 8006958:	636f4361 	.word	0x636f4361
 800695c:	3fd287a7 	.word	0x3fd287a7
 8006960:	8b60c8b3 	.word	0x8b60c8b3
 8006964:	3fc68a28 	.word	0x3fc68a28
 8006968:	509f79fb 	.word	0x509f79fb
 800696c:	3fd34413 	.word	0x3fd34413
 8006970:	080087c9 	.word	0x080087c9
 8006974:	080087e0 	.word	0x080087e0
 8006978:	7ff00000 	.word	0x7ff00000
 800697c:	080087c5 	.word	0x080087c5
 8006980:	080087bc 	.word	0x080087bc
 8006984:	0800875d 	.word	0x0800875d
 8006988:	3ff80000 	.word	0x3ff80000
 800698c:	080088d0 	.word	0x080088d0
 8006990:	0800883b 	.word	0x0800883b
 8006994:	2501      	movs	r5, #1
 8006996:	2300      	movs	r3, #0
 8006998:	9306      	str	r3, [sp, #24]
 800699a:	9508      	str	r5, [sp, #32]
 800699c:	f04f 33ff 	mov.w	r3, #4294967295
 80069a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069a4:	2200      	movs	r2, #0
 80069a6:	2312      	movs	r3, #18
 80069a8:	e7b0      	b.n	800690c <_dtoa_r+0x26c>
 80069aa:	2301      	movs	r3, #1
 80069ac:	9308      	str	r3, [sp, #32]
 80069ae:	e7f5      	b.n	800699c <_dtoa_r+0x2fc>
 80069b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069b6:	e7b8      	b.n	800692a <_dtoa_r+0x28a>
 80069b8:	3101      	adds	r1, #1
 80069ba:	6041      	str	r1, [r0, #4]
 80069bc:	0052      	lsls	r2, r2, #1
 80069be:	e7b8      	b.n	8006932 <_dtoa_r+0x292>
 80069c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c2:	9a01      	ldr	r2, [sp, #4]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	2b0e      	cmp	r3, #14
 80069ca:	f200 809d 	bhi.w	8006b08 <_dtoa_r+0x468>
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	f000 809a 	beq.w	8006b08 <_dtoa_r+0x468>
 80069d4:	9b00      	ldr	r3, [sp, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dd32      	ble.n	8006a40 <_dtoa_r+0x3a0>
 80069da:	4ab7      	ldr	r2, [pc, #732]	; (8006cb8 <_dtoa_r+0x618>)
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069e8:	9b00      	ldr	r3, [sp, #0]
 80069ea:	05d8      	lsls	r0, r3, #23
 80069ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80069f0:	d516      	bpl.n	8006a20 <_dtoa_r+0x380>
 80069f2:	4bb2      	ldr	r3, [pc, #712]	; (8006cbc <_dtoa_r+0x61c>)
 80069f4:	ec51 0b19 	vmov	r0, r1, d9
 80069f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069fc:	f7f9 ff26 	bl	800084c <__aeabi_ddiv>
 8006a00:	f007 070f 	and.w	r7, r7, #15
 8006a04:	4682      	mov	sl, r0
 8006a06:	468b      	mov	fp, r1
 8006a08:	2503      	movs	r5, #3
 8006a0a:	4eac      	ldr	r6, [pc, #688]	; (8006cbc <_dtoa_r+0x61c>)
 8006a0c:	b957      	cbnz	r7, 8006a24 <_dtoa_r+0x384>
 8006a0e:	4642      	mov	r2, r8
 8006a10:	464b      	mov	r3, r9
 8006a12:	4650      	mov	r0, sl
 8006a14:	4659      	mov	r1, fp
 8006a16:	f7f9 ff19 	bl	800084c <__aeabi_ddiv>
 8006a1a:	4682      	mov	sl, r0
 8006a1c:	468b      	mov	fp, r1
 8006a1e:	e028      	b.n	8006a72 <_dtoa_r+0x3d2>
 8006a20:	2502      	movs	r5, #2
 8006a22:	e7f2      	b.n	8006a0a <_dtoa_r+0x36a>
 8006a24:	07f9      	lsls	r1, r7, #31
 8006a26:	d508      	bpl.n	8006a3a <_dtoa_r+0x39a>
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a30:	f7f9 fde2 	bl	80005f8 <__aeabi_dmul>
 8006a34:	3501      	adds	r5, #1
 8006a36:	4680      	mov	r8, r0
 8006a38:	4689      	mov	r9, r1
 8006a3a:	107f      	asrs	r7, r7, #1
 8006a3c:	3608      	adds	r6, #8
 8006a3e:	e7e5      	b.n	8006a0c <_dtoa_r+0x36c>
 8006a40:	f000 809b 	beq.w	8006b7a <_dtoa_r+0x4da>
 8006a44:	9b00      	ldr	r3, [sp, #0]
 8006a46:	4f9d      	ldr	r7, [pc, #628]	; (8006cbc <_dtoa_r+0x61c>)
 8006a48:	425e      	negs	r6, r3
 8006a4a:	4b9b      	ldr	r3, [pc, #620]	; (8006cb8 <_dtoa_r+0x618>)
 8006a4c:	f006 020f 	and.w	r2, r6, #15
 8006a50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	ec51 0b19 	vmov	r0, r1, d9
 8006a5c:	f7f9 fdcc 	bl	80005f8 <__aeabi_dmul>
 8006a60:	1136      	asrs	r6, r6, #4
 8006a62:	4682      	mov	sl, r0
 8006a64:	468b      	mov	fp, r1
 8006a66:	2300      	movs	r3, #0
 8006a68:	2502      	movs	r5, #2
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d17a      	bne.n	8006b64 <_dtoa_r+0x4c4>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1d3      	bne.n	8006a1a <_dtoa_r+0x37a>
 8006a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8082 	beq.w	8006b7e <_dtoa_r+0x4de>
 8006a7a:	4b91      	ldr	r3, [pc, #580]	; (8006cc0 <_dtoa_r+0x620>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4650      	mov	r0, sl
 8006a80:	4659      	mov	r1, fp
 8006a82:	f7fa f82b 	bl	8000adc <__aeabi_dcmplt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d079      	beq.n	8006b7e <_dtoa_r+0x4de>
 8006a8a:	9b03      	ldr	r3, [sp, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d076      	beq.n	8006b7e <_dtoa_r+0x4de>
 8006a90:	9b02      	ldr	r3, [sp, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	dd36      	ble.n	8006b04 <_dtoa_r+0x464>
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	4650      	mov	r0, sl
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	1e5f      	subs	r7, r3, #1
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4b88      	ldr	r3, [pc, #544]	; (8006cc4 <_dtoa_r+0x624>)
 8006aa2:	f7f9 fda9 	bl	80005f8 <__aeabi_dmul>
 8006aa6:	9e02      	ldr	r6, [sp, #8]
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	468b      	mov	fp, r1
 8006aac:	3501      	adds	r5, #1
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f7f9 fd38 	bl	8000524 <__aeabi_i2d>
 8006ab4:	4652      	mov	r2, sl
 8006ab6:	465b      	mov	r3, fp
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	4b82      	ldr	r3, [pc, #520]	; (8006cc8 <_dtoa_r+0x628>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f7f9 fbe4 	bl	800028c <__adddf3>
 8006ac4:	46d0      	mov	r8, sl
 8006ac6:	46d9      	mov	r9, fp
 8006ac8:	4682      	mov	sl, r0
 8006aca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ace:	2e00      	cmp	r6, #0
 8006ad0:	d158      	bne.n	8006b84 <_dtoa_r+0x4e4>
 8006ad2:	4b7e      	ldr	r3, [pc, #504]	; (8006ccc <_dtoa_r+0x62c>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4649      	mov	r1, r9
 8006ada:	f7f9 fbd5 	bl	8000288 <__aeabi_dsub>
 8006ade:	4652      	mov	r2, sl
 8006ae0:	465b      	mov	r3, fp
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	4689      	mov	r9, r1
 8006ae6:	f7fa f817 	bl	8000b18 <__aeabi_dcmpgt>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f040 8295 	bne.w	800701a <_dtoa_r+0x97a>
 8006af0:	4652      	mov	r2, sl
 8006af2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f7f9 ffef 	bl	8000adc <__aeabi_dcmplt>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	f040 8289 	bne.w	8007016 <_dtoa_r+0x976>
 8006b04:	ec5b ab19 	vmov	sl, fp, d9
 8006b08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f2c0 8148 	blt.w	8006da0 <_dtoa_r+0x700>
 8006b10:	9a00      	ldr	r2, [sp, #0]
 8006b12:	2a0e      	cmp	r2, #14
 8006b14:	f300 8144 	bgt.w	8006da0 <_dtoa_r+0x700>
 8006b18:	4b67      	ldr	r3, [pc, #412]	; (8006cb8 <_dtoa_r+0x618>)
 8006b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f280 80d5 	bge.w	8006cd4 <_dtoa_r+0x634>
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f300 80d1 	bgt.w	8006cd4 <_dtoa_r+0x634>
 8006b32:	f040 826f 	bne.w	8007014 <_dtoa_r+0x974>
 8006b36:	4b65      	ldr	r3, [pc, #404]	; (8006ccc <_dtoa_r+0x62c>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	f7f9 fd5b 	bl	80005f8 <__aeabi_dmul>
 8006b42:	4652      	mov	r2, sl
 8006b44:	465b      	mov	r3, fp
 8006b46:	f7f9 ffdd 	bl	8000b04 <__aeabi_dcmpge>
 8006b4a:	9e03      	ldr	r6, [sp, #12]
 8006b4c:	4637      	mov	r7, r6
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f040 8245 	bne.w	8006fde <_dtoa_r+0x93e>
 8006b54:	9d01      	ldr	r5, [sp, #4]
 8006b56:	2331      	movs	r3, #49	; 0x31
 8006b58:	f805 3b01 	strb.w	r3, [r5], #1
 8006b5c:	9b00      	ldr	r3, [sp, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	e240      	b.n	8006fe6 <_dtoa_r+0x946>
 8006b64:	07f2      	lsls	r2, r6, #31
 8006b66:	d505      	bpl.n	8006b74 <_dtoa_r+0x4d4>
 8006b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b6c:	f7f9 fd44 	bl	80005f8 <__aeabi_dmul>
 8006b70:	3501      	adds	r5, #1
 8006b72:	2301      	movs	r3, #1
 8006b74:	1076      	asrs	r6, r6, #1
 8006b76:	3708      	adds	r7, #8
 8006b78:	e777      	b.n	8006a6a <_dtoa_r+0x3ca>
 8006b7a:	2502      	movs	r5, #2
 8006b7c:	e779      	b.n	8006a72 <_dtoa_r+0x3d2>
 8006b7e:	9f00      	ldr	r7, [sp, #0]
 8006b80:	9e03      	ldr	r6, [sp, #12]
 8006b82:	e794      	b.n	8006aae <_dtoa_r+0x40e>
 8006b84:	9901      	ldr	r1, [sp, #4]
 8006b86:	4b4c      	ldr	r3, [pc, #304]	; (8006cb8 <_dtoa_r+0x618>)
 8006b88:	4431      	add	r1, r6
 8006b8a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b8c:	9908      	ldr	r1, [sp, #32]
 8006b8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b96:	2900      	cmp	r1, #0
 8006b98:	d043      	beq.n	8006c22 <_dtoa_r+0x582>
 8006b9a:	494d      	ldr	r1, [pc, #308]	; (8006cd0 <_dtoa_r+0x630>)
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f7f9 fe55 	bl	800084c <__aeabi_ddiv>
 8006ba2:	4652      	mov	r2, sl
 8006ba4:	465b      	mov	r3, fp
 8006ba6:	f7f9 fb6f 	bl	8000288 <__aeabi_dsub>
 8006baa:	9d01      	ldr	r5, [sp, #4]
 8006bac:	4682      	mov	sl, r0
 8006bae:	468b      	mov	fp, r1
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f7f9 ffd0 	bl	8000b58 <__aeabi_d2iz>
 8006bb8:	4606      	mov	r6, r0
 8006bba:	f7f9 fcb3 	bl	8000524 <__aeabi_i2d>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	f7f9 fb5f 	bl	8000288 <__aeabi_dsub>
 8006bca:	3630      	adds	r6, #48	; 0x30
 8006bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	465b      	mov	r3, fp
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4689      	mov	r9, r1
 8006bd8:	f7f9 ff80 	bl	8000adc <__aeabi_dcmplt>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d163      	bne.n	8006ca8 <_dtoa_r+0x608>
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	4936      	ldr	r1, [pc, #216]	; (8006cc0 <_dtoa_r+0x620>)
 8006be6:	2000      	movs	r0, #0
 8006be8:	f7f9 fb4e 	bl	8000288 <__aeabi_dsub>
 8006bec:	4652      	mov	r2, sl
 8006bee:	465b      	mov	r3, fp
 8006bf0:	f7f9 ff74 	bl	8000adc <__aeabi_dcmplt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f040 80b5 	bne.w	8006d64 <_dtoa_r+0x6c4>
 8006bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bfc:	429d      	cmp	r5, r3
 8006bfe:	d081      	beq.n	8006b04 <_dtoa_r+0x464>
 8006c00:	4b30      	ldr	r3, [pc, #192]	; (8006cc4 <_dtoa_r+0x624>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	4650      	mov	r0, sl
 8006c06:	4659      	mov	r1, fp
 8006c08:	f7f9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8006c0c:	4b2d      	ldr	r3, [pc, #180]	; (8006cc4 <_dtoa_r+0x624>)
 8006c0e:	4682      	mov	sl, r0
 8006c10:	468b      	mov	fp, r1
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	2200      	movs	r2, #0
 8006c18:	f7f9 fcee 	bl	80005f8 <__aeabi_dmul>
 8006c1c:	4680      	mov	r8, r0
 8006c1e:	4689      	mov	r9, r1
 8006c20:	e7c6      	b.n	8006bb0 <_dtoa_r+0x510>
 8006c22:	4650      	mov	r0, sl
 8006c24:	4659      	mov	r1, fp
 8006c26:	f7f9 fce7 	bl	80005f8 <__aeabi_dmul>
 8006c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c2c:	9d01      	ldr	r5, [sp, #4]
 8006c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c30:	4682      	mov	sl, r0
 8006c32:	468b      	mov	fp, r1
 8006c34:	4649      	mov	r1, r9
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7f9 ff8e 	bl	8000b58 <__aeabi_d2iz>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	f7f9 fc71 	bl	8000524 <__aeabi_i2d>
 8006c42:	3630      	adds	r6, #48	; 0x30
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 fb1c 	bl	8000288 <__aeabi_dsub>
 8006c50:	f805 6b01 	strb.w	r6, [r5], #1
 8006c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c56:	429d      	cmp	r5, r3
 8006c58:	4680      	mov	r8, r0
 8006c5a:	4689      	mov	r9, r1
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	d124      	bne.n	8006cac <_dtoa_r+0x60c>
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <_dtoa_r+0x630>)
 8006c64:	4650      	mov	r0, sl
 8006c66:	4659      	mov	r1, fp
 8006c68:	f7f9 fb10 	bl	800028c <__adddf3>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7f9 ff50 	bl	8000b18 <__aeabi_dcmpgt>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d173      	bne.n	8006d64 <_dtoa_r+0x6c4>
 8006c7c:	4652      	mov	r2, sl
 8006c7e:	465b      	mov	r3, fp
 8006c80:	4913      	ldr	r1, [pc, #76]	; (8006cd0 <_dtoa_r+0x630>)
 8006c82:	2000      	movs	r0, #0
 8006c84:	f7f9 fb00 	bl	8000288 <__aeabi_dsub>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4649      	mov	r1, r9
 8006c90:	f7f9 ff24 	bl	8000adc <__aeabi_dcmplt>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	f43f af35 	beq.w	8006b04 <_dtoa_r+0x464>
 8006c9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c9c:	1e6b      	subs	r3, r5, #1
 8006c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ca0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ca4:	2b30      	cmp	r3, #48	; 0x30
 8006ca6:	d0f8      	beq.n	8006c9a <_dtoa_r+0x5fa>
 8006ca8:	9700      	str	r7, [sp, #0]
 8006caa:	e049      	b.n	8006d40 <_dtoa_r+0x6a0>
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <_dtoa_r+0x624>)
 8006cae:	f7f9 fca3 	bl	80005f8 <__aeabi_dmul>
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	4689      	mov	r9, r1
 8006cb6:	e7bd      	b.n	8006c34 <_dtoa_r+0x594>
 8006cb8:	080088d0 	.word	0x080088d0
 8006cbc:	080088a8 	.word	0x080088a8
 8006cc0:	3ff00000 	.word	0x3ff00000
 8006cc4:	40240000 	.word	0x40240000
 8006cc8:	401c0000 	.word	0x401c0000
 8006ccc:	40140000 	.word	0x40140000
 8006cd0:	3fe00000 	.word	0x3fe00000
 8006cd4:	9d01      	ldr	r5, [sp, #4]
 8006cd6:	4656      	mov	r6, sl
 8006cd8:	465f      	mov	r7, fp
 8006cda:	4642      	mov	r2, r8
 8006cdc:	464b      	mov	r3, r9
 8006cde:	4630      	mov	r0, r6
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	f7f9 fdb3 	bl	800084c <__aeabi_ddiv>
 8006ce6:	f7f9 ff37 	bl	8000b58 <__aeabi_d2iz>
 8006cea:	4682      	mov	sl, r0
 8006cec:	f7f9 fc1a 	bl	8000524 <__aeabi_i2d>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	f7f9 fc80 	bl	80005f8 <__aeabi_dmul>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	4639      	mov	r1, r7
 8006d00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006d04:	f7f9 fac0 	bl	8000288 <__aeabi_dsub>
 8006d08:	f805 6b01 	strb.w	r6, [r5], #1
 8006d0c:	9e01      	ldr	r6, [sp, #4]
 8006d0e:	9f03      	ldr	r7, [sp, #12]
 8006d10:	1bae      	subs	r6, r5, r6
 8006d12:	42b7      	cmp	r7, r6
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	d135      	bne.n	8006d86 <_dtoa_r+0x6e6>
 8006d1a:	f7f9 fab7 	bl	800028c <__adddf3>
 8006d1e:	4642      	mov	r2, r8
 8006d20:	464b      	mov	r3, r9
 8006d22:	4606      	mov	r6, r0
 8006d24:	460f      	mov	r7, r1
 8006d26:	f7f9 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8006d2a:	b9d0      	cbnz	r0, 8006d62 <_dtoa_r+0x6c2>
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	4630      	mov	r0, r6
 8006d32:	4639      	mov	r1, r7
 8006d34:	f7f9 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d38:	b110      	cbz	r0, 8006d40 <_dtoa_r+0x6a0>
 8006d3a:	f01a 0f01 	tst.w	sl, #1
 8006d3e:	d110      	bne.n	8006d62 <_dtoa_r+0x6c2>
 8006d40:	4620      	mov	r0, r4
 8006d42:	ee18 1a10 	vmov	r1, s16
 8006d46:	f000 fc3d 	bl	80075c4 <_Bfree>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9800      	ldr	r0, [sp, #0]
 8006d4e:	702b      	strb	r3, [r5, #0]
 8006d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d52:	3001      	adds	r0, #1
 8006d54:	6018      	str	r0, [r3, #0]
 8006d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f43f acf1 	beq.w	8006740 <_dtoa_r+0xa0>
 8006d5e:	601d      	str	r5, [r3, #0]
 8006d60:	e4ee      	b.n	8006740 <_dtoa_r+0xa0>
 8006d62:	9f00      	ldr	r7, [sp, #0]
 8006d64:	462b      	mov	r3, r5
 8006d66:	461d      	mov	r5, r3
 8006d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d6c:	2a39      	cmp	r2, #57	; 0x39
 8006d6e:	d106      	bne.n	8006d7e <_dtoa_r+0x6de>
 8006d70:	9a01      	ldr	r2, [sp, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d1f7      	bne.n	8006d66 <_dtoa_r+0x6c6>
 8006d76:	9901      	ldr	r1, [sp, #4]
 8006d78:	2230      	movs	r2, #48	; 0x30
 8006d7a:	3701      	adds	r7, #1
 8006d7c:	700a      	strb	r2, [r1, #0]
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	3201      	adds	r2, #1
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e790      	b.n	8006ca8 <_dtoa_r+0x608>
 8006d86:	4ba6      	ldr	r3, [pc, #664]	; (8007020 <_dtoa_r+0x980>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f7f9 fc35 	bl	80005f8 <__aeabi_dmul>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2300      	movs	r3, #0
 8006d92:	4606      	mov	r6, r0
 8006d94:	460f      	mov	r7, r1
 8006d96:	f7f9 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d09d      	beq.n	8006cda <_dtoa_r+0x63a>
 8006d9e:	e7cf      	b.n	8006d40 <_dtoa_r+0x6a0>
 8006da0:	9a08      	ldr	r2, [sp, #32]
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	f000 80d7 	beq.w	8006f56 <_dtoa_r+0x8b6>
 8006da8:	9a06      	ldr	r2, [sp, #24]
 8006daa:	2a01      	cmp	r2, #1
 8006dac:	f300 80ba 	bgt.w	8006f24 <_dtoa_r+0x884>
 8006db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	f000 80b2 	beq.w	8006f1c <_dtoa_r+0x87c>
 8006db8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006dbc:	9e07      	ldr	r6, [sp, #28]
 8006dbe:	9d04      	ldr	r5, [sp, #16]
 8006dc0:	9a04      	ldr	r2, [sp, #16]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	9204      	str	r2, [sp, #16]
 8006dc6:	9a05      	ldr	r2, [sp, #20]
 8006dc8:	2101      	movs	r1, #1
 8006dca:	441a      	add	r2, r3
 8006dcc:	4620      	mov	r0, r4
 8006dce:	9205      	str	r2, [sp, #20]
 8006dd0:	f000 fcb0 	bl	8007734 <__i2b>
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	dd0c      	ble.n	8006df4 <_dtoa_r+0x754>
 8006dda:	9b05      	ldr	r3, [sp, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dd09      	ble.n	8006df4 <_dtoa_r+0x754>
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	9a04      	ldr	r2, [sp, #16]
 8006de4:	bfa8      	it	ge
 8006de6:	462b      	movge	r3, r5
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	9204      	str	r2, [sp, #16]
 8006dec:	9a05      	ldr	r2, [sp, #20]
 8006dee:	1aed      	subs	r5, r5, r3
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	9305      	str	r3, [sp, #20]
 8006df4:	9b07      	ldr	r3, [sp, #28]
 8006df6:	b31b      	cbz	r3, 8006e40 <_dtoa_r+0x7a0>
 8006df8:	9b08      	ldr	r3, [sp, #32]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 80af 	beq.w	8006f5e <_dtoa_r+0x8be>
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	dd13      	ble.n	8006e2c <_dtoa_r+0x78c>
 8006e04:	4639      	mov	r1, r7
 8006e06:	4632      	mov	r2, r6
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fd53 	bl	80078b4 <__pow5mult>
 8006e0e:	ee18 2a10 	vmov	r2, s16
 8006e12:	4601      	mov	r1, r0
 8006e14:	4607      	mov	r7, r0
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 fca2 	bl	8007760 <__multiply>
 8006e1c:	ee18 1a10 	vmov	r1, s16
 8006e20:	4680      	mov	r8, r0
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 fbce 	bl	80075c4 <_Bfree>
 8006e28:	ee08 8a10 	vmov	s16, r8
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	1b9a      	subs	r2, r3, r6
 8006e30:	d006      	beq.n	8006e40 <_dtoa_r+0x7a0>
 8006e32:	ee18 1a10 	vmov	r1, s16
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 fd3c 	bl	80078b4 <__pow5mult>
 8006e3c:	ee08 0a10 	vmov	s16, r0
 8006e40:	2101      	movs	r1, #1
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fc76 	bl	8007734 <__i2b>
 8006e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	f340 8088 	ble.w	8006f62 <_dtoa_r+0x8c2>
 8006e52:	461a      	mov	r2, r3
 8006e54:	4601      	mov	r1, r0
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 fd2c 	bl	80078b4 <__pow5mult>
 8006e5c:	9b06      	ldr	r3, [sp, #24]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	4606      	mov	r6, r0
 8006e62:	f340 8081 	ble.w	8006f68 <_dtoa_r+0x8c8>
 8006e66:	f04f 0800 	mov.w	r8, #0
 8006e6a:	6933      	ldr	r3, [r6, #16]
 8006e6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e70:	6918      	ldr	r0, [r3, #16]
 8006e72:	f000 fc0f 	bl	8007694 <__hi0bits>
 8006e76:	f1c0 0020 	rsb	r0, r0, #32
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	4418      	add	r0, r3
 8006e7e:	f010 001f 	ands.w	r0, r0, #31
 8006e82:	f000 8092 	beq.w	8006faa <_dtoa_r+0x90a>
 8006e86:	f1c0 0320 	rsb	r3, r0, #32
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	f340 808a 	ble.w	8006fa4 <_dtoa_r+0x904>
 8006e90:	f1c0 001c 	rsb	r0, r0, #28
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	4403      	add	r3, r0
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	9b05      	ldr	r3, [sp, #20]
 8006e9c:	4403      	add	r3, r0
 8006e9e:	4405      	add	r5, r0
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd07      	ble.n	8006eb8 <_dtoa_r+0x818>
 8006ea8:	ee18 1a10 	vmov	r1, s16
 8006eac:	461a      	mov	r2, r3
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 fd5a 	bl	8007968 <__lshift>
 8006eb4:	ee08 0a10 	vmov	s16, r0
 8006eb8:	9b05      	ldr	r3, [sp, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	dd05      	ble.n	8006eca <_dtoa_r+0x82a>
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 fd50 	bl	8007968 <__lshift>
 8006ec8:	4606      	mov	r6, r0
 8006eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d06e      	beq.n	8006fae <_dtoa_r+0x90e>
 8006ed0:	ee18 0a10 	vmov	r0, s16
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	f000 fdb7 	bl	8007a48 <__mcmp>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	da67      	bge.n	8006fae <_dtoa_r+0x90e>
 8006ede:	9b00      	ldr	r3, [sp, #0]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	ee18 1a10 	vmov	r1, s16
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	220a      	movs	r2, #10
 8006eea:	2300      	movs	r3, #0
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 fb8b 	bl	8007608 <__multadd>
 8006ef2:	9b08      	ldr	r3, [sp, #32]
 8006ef4:	ee08 0a10 	vmov	s16, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 81b1 	beq.w	8007260 <_dtoa_r+0xbc0>
 8006efe:	2300      	movs	r3, #0
 8006f00:	4639      	mov	r1, r7
 8006f02:	220a      	movs	r2, #10
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 fb7f 	bl	8007608 <__multadd>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	4607      	mov	r7, r0
 8006f10:	f300 808e 	bgt.w	8007030 <_dtoa_r+0x990>
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	dc51      	bgt.n	8006fbe <_dtoa_r+0x91e>
 8006f1a:	e089      	b.n	8007030 <_dtoa_r+0x990>
 8006f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f22:	e74b      	b.n	8006dbc <_dtoa_r+0x71c>
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	1e5e      	subs	r6, r3, #1
 8006f28:	9b07      	ldr	r3, [sp, #28]
 8006f2a:	42b3      	cmp	r3, r6
 8006f2c:	bfbf      	itttt	lt
 8006f2e:	9b07      	ldrlt	r3, [sp, #28]
 8006f30:	9607      	strlt	r6, [sp, #28]
 8006f32:	1af2      	sublt	r2, r6, r3
 8006f34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f36:	bfb6      	itet	lt
 8006f38:	189b      	addlt	r3, r3, r2
 8006f3a:	1b9e      	subge	r6, r3, r6
 8006f3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	bfb8      	it	lt
 8006f42:	2600      	movlt	r6, #0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bfb7      	itett	lt
 8006f48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006f4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006f50:	1a9d      	sublt	r5, r3, r2
 8006f52:	2300      	movlt	r3, #0
 8006f54:	e734      	b.n	8006dc0 <_dtoa_r+0x720>
 8006f56:	9e07      	ldr	r6, [sp, #28]
 8006f58:	9d04      	ldr	r5, [sp, #16]
 8006f5a:	9f08      	ldr	r7, [sp, #32]
 8006f5c:	e73b      	b.n	8006dd6 <_dtoa_r+0x736>
 8006f5e:	9a07      	ldr	r2, [sp, #28]
 8006f60:	e767      	b.n	8006e32 <_dtoa_r+0x792>
 8006f62:	9b06      	ldr	r3, [sp, #24]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	dc18      	bgt.n	8006f9a <_dtoa_r+0x8fa>
 8006f68:	f1ba 0f00 	cmp.w	sl, #0
 8006f6c:	d115      	bne.n	8006f9a <_dtoa_r+0x8fa>
 8006f6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f72:	b993      	cbnz	r3, 8006f9a <_dtoa_r+0x8fa>
 8006f74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f78:	0d1b      	lsrs	r3, r3, #20
 8006f7a:	051b      	lsls	r3, r3, #20
 8006f7c:	b183      	cbz	r3, 8006fa0 <_dtoa_r+0x900>
 8006f7e:	9b04      	ldr	r3, [sp, #16]
 8006f80:	3301      	adds	r3, #1
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	9b05      	ldr	r3, [sp, #20]
 8006f86:	3301      	adds	r3, #1
 8006f88:	9305      	str	r3, [sp, #20]
 8006f8a:	f04f 0801 	mov.w	r8, #1
 8006f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f47f af6a 	bne.w	8006e6a <_dtoa_r+0x7ca>
 8006f96:	2001      	movs	r0, #1
 8006f98:	e76f      	b.n	8006e7a <_dtoa_r+0x7da>
 8006f9a:	f04f 0800 	mov.w	r8, #0
 8006f9e:	e7f6      	b.n	8006f8e <_dtoa_r+0x8ee>
 8006fa0:	4698      	mov	r8, r3
 8006fa2:	e7f4      	b.n	8006f8e <_dtoa_r+0x8ee>
 8006fa4:	f43f af7d 	beq.w	8006ea2 <_dtoa_r+0x802>
 8006fa8:	4618      	mov	r0, r3
 8006faa:	301c      	adds	r0, #28
 8006fac:	e772      	b.n	8006e94 <_dtoa_r+0x7f4>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	dc37      	bgt.n	8007024 <_dtoa_r+0x984>
 8006fb4:	9b06      	ldr	r3, [sp, #24]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	dd34      	ble.n	8007024 <_dtoa_r+0x984>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	9302      	str	r3, [sp, #8]
 8006fbe:	9b02      	ldr	r3, [sp, #8]
 8006fc0:	b96b      	cbnz	r3, 8006fde <_dtoa_r+0x93e>
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	2205      	movs	r2, #5
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 fb1e 	bl	8007608 <__multadd>
 8006fcc:	4601      	mov	r1, r0
 8006fce:	4606      	mov	r6, r0
 8006fd0:	ee18 0a10 	vmov	r0, s16
 8006fd4:	f000 fd38 	bl	8007a48 <__mcmp>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	f73f adbb 	bgt.w	8006b54 <_dtoa_r+0x4b4>
 8006fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe0:	9d01      	ldr	r5, [sp, #4]
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	f04f 0800 	mov.w	r8, #0
 8006fea:	4631      	mov	r1, r6
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fae9 	bl	80075c4 <_Bfree>
 8006ff2:	2f00      	cmp	r7, #0
 8006ff4:	f43f aea4 	beq.w	8006d40 <_dtoa_r+0x6a0>
 8006ff8:	f1b8 0f00 	cmp.w	r8, #0
 8006ffc:	d005      	beq.n	800700a <_dtoa_r+0x96a>
 8006ffe:	45b8      	cmp	r8, r7
 8007000:	d003      	beq.n	800700a <_dtoa_r+0x96a>
 8007002:	4641      	mov	r1, r8
 8007004:	4620      	mov	r0, r4
 8007006:	f000 fadd 	bl	80075c4 <_Bfree>
 800700a:	4639      	mov	r1, r7
 800700c:	4620      	mov	r0, r4
 800700e:	f000 fad9 	bl	80075c4 <_Bfree>
 8007012:	e695      	b.n	8006d40 <_dtoa_r+0x6a0>
 8007014:	2600      	movs	r6, #0
 8007016:	4637      	mov	r7, r6
 8007018:	e7e1      	b.n	8006fde <_dtoa_r+0x93e>
 800701a:	9700      	str	r7, [sp, #0]
 800701c:	4637      	mov	r7, r6
 800701e:	e599      	b.n	8006b54 <_dtoa_r+0x4b4>
 8007020:	40240000 	.word	0x40240000
 8007024:	9b08      	ldr	r3, [sp, #32]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80ca 	beq.w	80071c0 <_dtoa_r+0xb20>
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	9302      	str	r3, [sp, #8]
 8007030:	2d00      	cmp	r5, #0
 8007032:	dd05      	ble.n	8007040 <_dtoa_r+0x9a0>
 8007034:	4639      	mov	r1, r7
 8007036:	462a      	mov	r2, r5
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fc95 	bl	8007968 <__lshift>
 800703e:	4607      	mov	r7, r0
 8007040:	f1b8 0f00 	cmp.w	r8, #0
 8007044:	d05b      	beq.n	80070fe <_dtoa_r+0xa5e>
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4620      	mov	r0, r4
 800704a:	f000 fa7b 	bl	8007544 <_Balloc>
 800704e:	4605      	mov	r5, r0
 8007050:	b928      	cbnz	r0, 800705e <_dtoa_r+0x9be>
 8007052:	4b87      	ldr	r3, [pc, #540]	; (8007270 <_dtoa_r+0xbd0>)
 8007054:	4602      	mov	r2, r0
 8007056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800705a:	f7ff bb3b 	b.w	80066d4 <_dtoa_r+0x34>
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	3202      	adds	r2, #2
 8007062:	0092      	lsls	r2, r2, #2
 8007064:	f107 010c 	add.w	r1, r7, #12
 8007068:	300c      	adds	r0, #12
 800706a:	f7fe fbf0 	bl	800584e <memcpy>
 800706e:	2201      	movs	r2, #1
 8007070:	4629      	mov	r1, r5
 8007072:	4620      	mov	r0, r4
 8007074:	f000 fc78 	bl	8007968 <__lshift>
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	f103 0901 	add.w	r9, r3, #1
 800707e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007082:	4413      	add	r3, r2
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	f00a 0301 	and.w	r3, sl, #1
 800708a:	46b8      	mov	r8, r7
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	4607      	mov	r7, r0
 8007090:	4631      	mov	r1, r6
 8007092:	ee18 0a10 	vmov	r0, s16
 8007096:	f7ff fa77 	bl	8006588 <quorem>
 800709a:	4641      	mov	r1, r8
 800709c:	9002      	str	r0, [sp, #8]
 800709e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070a2:	ee18 0a10 	vmov	r0, s16
 80070a6:	f000 fccf 	bl	8007a48 <__mcmp>
 80070aa:	463a      	mov	r2, r7
 80070ac:	9003      	str	r0, [sp, #12]
 80070ae:	4631      	mov	r1, r6
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fce5 	bl	8007a80 <__mdiff>
 80070b6:	68c2      	ldr	r2, [r0, #12]
 80070b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80070bc:	4605      	mov	r5, r0
 80070be:	bb02      	cbnz	r2, 8007102 <_dtoa_r+0xa62>
 80070c0:	4601      	mov	r1, r0
 80070c2:	ee18 0a10 	vmov	r0, s16
 80070c6:	f000 fcbf 	bl	8007a48 <__mcmp>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4629      	mov	r1, r5
 80070ce:	4620      	mov	r0, r4
 80070d0:	9207      	str	r2, [sp, #28]
 80070d2:	f000 fa77 	bl	80075c4 <_Bfree>
 80070d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80070da:	ea43 0102 	orr.w	r1, r3, r2
 80070de:	9b04      	ldr	r3, [sp, #16]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	464d      	mov	r5, r9
 80070e4:	d10f      	bne.n	8007106 <_dtoa_r+0xa66>
 80070e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070ea:	d02a      	beq.n	8007142 <_dtoa_r+0xaa2>
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dd02      	ble.n	80070f8 <_dtoa_r+0xa58>
 80070f2:	9b02      	ldr	r3, [sp, #8]
 80070f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80070f8:	f88b a000 	strb.w	sl, [fp]
 80070fc:	e775      	b.n	8006fea <_dtoa_r+0x94a>
 80070fe:	4638      	mov	r0, r7
 8007100:	e7ba      	b.n	8007078 <_dtoa_r+0x9d8>
 8007102:	2201      	movs	r2, #1
 8007104:	e7e2      	b.n	80070cc <_dtoa_r+0xa2c>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	db04      	blt.n	8007116 <_dtoa_r+0xa76>
 800710c:	9906      	ldr	r1, [sp, #24]
 800710e:	430b      	orrs	r3, r1
 8007110:	9904      	ldr	r1, [sp, #16]
 8007112:	430b      	orrs	r3, r1
 8007114:	d122      	bne.n	800715c <_dtoa_r+0xabc>
 8007116:	2a00      	cmp	r2, #0
 8007118:	ddee      	ble.n	80070f8 <_dtoa_r+0xa58>
 800711a:	ee18 1a10 	vmov	r1, s16
 800711e:	2201      	movs	r2, #1
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fc21 	bl	8007968 <__lshift>
 8007126:	4631      	mov	r1, r6
 8007128:	ee08 0a10 	vmov	s16, r0
 800712c:	f000 fc8c 	bl	8007a48 <__mcmp>
 8007130:	2800      	cmp	r0, #0
 8007132:	dc03      	bgt.n	800713c <_dtoa_r+0xa9c>
 8007134:	d1e0      	bne.n	80070f8 <_dtoa_r+0xa58>
 8007136:	f01a 0f01 	tst.w	sl, #1
 800713a:	d0dd      	beq.n	80070f8 <_dtoa_r+0xa58>
 800713c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007140:	d1d7      	bne.n	80070f2 <_dtoa_r+0xa52>
 8007142:	2339      	movs	r3, #57	; 0x39
 8007144:	f88b 3000 	strb.w	r3, [fp]
 8007148:	462b      	mov	r3, r5
 800714a:	461d      	mov	r5, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007152:	2a39      	cmp	r2, #57	; 0x39
 8007154:	d071      	beq.n	800723a <_dtoa_r+0xb9a>
 8007156:	3201      	adds	r2, #1
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e746      	b.n	8006fea <_dtoa_r+0x94a>
 800715c:	2a00      	cmp	r2, #0
 800715e:	dd07      	ble.n	8007170 <_dtoa_r+0xad0>
 8007160:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007164:	d0ed      	beq.n	8007142 <_dtoa_r+0xaa2>
 8007166:	f10a 0301 	add.w	r3, sl, #1
 800716a:	f88b 3000 	strb.w	r3, [fp]
 800716e:	e73c      	b.n	8006fea <_dtoa_r+0x94a>
 8007170:	9b05      	ldr	r3, [sp, #20]
 8007172:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007176:	4599      	cmp	r9, r3
 8007178:	d047      	beq.n	800720a <_dtoa_r+0xb6a>
 800717a:	ee18 1a10 	vmov	r1, s16
 800717e:	2300      	movs	r3, #0
 8007180:	220a      	movs	r2, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f000 fa40 	bl	8007608 <__multadd>
 8007188:	45b8      	cmp	r8, r7
 800718a:	ee08 0a10 	vmov	s16, r0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	f04f 020a 	mov.w	r2, #10
 8007196:	4641      	mov	r1, r8
 8007198:	4620      	mov	r0, r4
 800719a:	d106      	bne.n	80071aa <_dtoa_r+0xb0a>
 800719c:	f000 fa34 	bl	8007608 <__multadd>
 80071a0:	4680      	mov	r8, r0
 80071a2:	4607      	mov	r7, r0
 80071a4:	f109 0901 	add.w	r9, r9, #1
 80071a8:	e772      	b.n	8007090 <_dtoa_r+0x9f0>
 80071aa:	f000 fa2d 	bl	8007608 <__multadd>
 80071ae:	4639      	mov	r1, r7
 80071b0:	4680      	mov	r8, r0
 80071b2:	2300      	movs	r3, #0
 80071b4:	220a      	movs	r2, #10
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 fa26 	bl	8007608 <__multadd>
 80071bc:	4607      	mov	r7, r0
 80071be:	e7f1      	b.n	80071a4 <_dtoa_r+0xb04>
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	9302      	str	r3, [sp, #8]
 80071c4:	9d01      	ldr	r5, [sp, #4]
 80071c6:	ee18 0a10 	vmov	r0, s16
 80071ca:	4631      	mov	r1, r6
 80071cc:	f7ff f9dc 	bl	8006588 <quorem>
 80071d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	f805 ab01 	strb.w	sl, [r5], #1
 80071da:	1aea      	subs	r2, r5, r3
 80071dc:	9b02      	ldr	r3, [sp, #8]
 80071de:	4293      	cmp	r3, r2
 80071e0:	dd09      	ble.n	80071f6 <_dtoa_r+0xb56>
 80071e2:	ee18 1a10 	vmov	r1, s16
 80071e6:	2300      	movs	r3, #0
 80071e8:	220a      	movs	r2, #10
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fa0c 	bl	8007608 <__multadd>
 80071f0:	ee08 0a10 	vmov	s16, r0
 80071f4:	e7e7      	b.n	80071c6 <_dtoa_r+0xb26>
 80071f6:	9b02      	ldr	r3, [sp, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfc8      	it	gt
 80071fc:	461d      	movgt	r5, r3
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	bfd8      	it	le
 8007202:	2501      	movle	r5, #1
 8007204:	441d      	add	r5, r3
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	ee18 1a10 	vmov	r1, s16
 800720e:	2201      	movs	r2, #1
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fba9 	bl	8007968 <__lshift>
 8007216:	4631      	mov	r1, r6
 8007218:	ee08 0a10 	vmov	s16, r0
 800721c:	f000 fc14 	bl	8007a48 <__mcmp>
 8007220:	2800      	cmp	r0, #0
 8007222:	dc91      	bgt.n	8007148 <_dtoa_r+0xaa8>
 8007224:	d102      	bne.n	800722c <_dtoa_r+0xb8c>
 8007226:	f01a 0f01 	tst.w	sl, #1
 800722a:	d18d      	bne.n	8007148 <_dtoa_r+0xaa8>
 800722c:	462b      	mov	r3, r5
 800722e:	461d      	mov	r5, r3
 8007230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007234:	2a30      	cmp	r2, #48	; 0x30
 8007236:	d0fa      	beq.n	800722e <_dtoa_r+0xb8e>
 8007238:	e6d7      	b.n	8006fea <_dtoa_r+0x94a>
 800723a:	9a01      	ldr	r2, [sp, #4]
 800723c:	429a      	cmp	r2, r3
 800723e:	d184      	bne.n	800714a <_dtoa_r+0xaaa>
 8007240:	9b00      	ldr	r3, [sp, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	2331      	movs	r3, #49	; 0x31
 8007248:	7013      	strb	r3, [r2, #0]
 800724a:	e6ce      	b.n	8006fea <_dtoa_r+0x94a>
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <_dtoa_r+0xbd4>)
 800724e:	f7ff ba95 	b.w	800677c <_dtoa_r+0xdc>
 8007252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007254:	2b00      	cmp	r3, #0
 8007256:	f47f aa6e 	bne.w	8006736 <_dtoa_r+0x96>
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <_dtoa_r+0xbd8>)
 800725c:	f7ff ba8e 	b.w	800677c <_dtoa_r+0xdc>
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	dcae      	bgt.n	80071c4 <_dtoa_r+0xb24>
 8007266:	9b06      	ldr	r3, [sp, #24]
 8007268:	2b02      	cmp	r3, #2
 800726a:	f73f aea8 	bgt.w	8006fbe <_dtoa_r+0x91e>
 800726e:	e7a9      	b.n	80071c4 <_dtoa_r+0xb24>
 8007270:	0800883b 	.word	0x0800883b
 8007274:	0800875c 	.word	0x0800875c
 8007278:	080087bc 	.word	0x080087bc

0800727c <__sflush_r>:
 800727c:	898a      	ldrh	r2, [r1, #12]
 800727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007282:	4605      	mov	r5, r0
 8007284:	0710      	lsls	r0, r2, #28
 8007286:	460c      	mov	r4, r1
 8007288:	d458      	bmi.n	800733c <__sflush_r+0xc0>
 800728a:	684b      	ldr	r3, [r1, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	dc05      	bgt.n	800729c <__sflush_r+0x20>
 8007290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	dc02      	bgt.n	800729c <__sflush_r+0x20>
 8007296:	2000      	movs	r0, #0
 8007298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800729e:	2e00      	cmp	r6, #0
 80072a0:	d0f9      	beq.n	8007296 <__sflush_r+0x1a>
 80072a2:	2300      	movs	r3, #0
 80072a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072a8:	682f      	ldr	r7, [r5, #0]
 80072aa:	602b      	str	r3, [r5, #0]
 80072ac:	d032      	beq.n	8007314 <__sflush_r+0x98>
 80072ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	075a      	lsls	r2, r3, #29
 80072b4:	d505      	bpl.n	80072c2 <__sflush_r+0x46>
 80072b6:	6863      	ldr	r3, [r4, #4]
 80072b8:	1ac0      	subs	r0, r0, r3
 80072ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072bc:	b10b      	cbz	r3, 80072c2 <__sflush_r+0x46>
 80072be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	2300      	movs	r3, #0
 80072c4:	4602      	mov	r2, r0
 80072c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072c8:	6a21      	ldr	r1, [r4, #32]
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b0      	blx	r6
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	d106      	bne.n	80072e2 <__sflush_r+0x66>
 80072d4:	6829      	ldr	r1, [r5, #0]
 80072d6:	291d      	cmp	r1, #29
 80072d8:	d82c      	bhi.n	8007334 <__sflush_r+0xb8>
 80072da:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <__sflush_r+0x108>)
 80072dc:	40ca      	lsrs	r2, r1
 80072de:	07d6      	lsls	r6, r2, #31
 80072e0:	d528      	bpl.n	8007334 <__sflush_r+0xb8>
 80072e2:	2200      	movs	r2, #0
 80072e4:	6062      	str	r2, [r4, #4]
 80072e6:	04d9      	lsls	r1, r3, #19
 80072e8:	6922      	ldr	r2, [r4, #16]
 80072ea:	6022      	str	r2, [r4, #0]
 80072ec:	d504      	bpl.n	80072f8 <__sflush_r+0x7c>
 80072ee:	1c42      	adds	r2, r0, #1
 80072f0:	d101      	bne.n	80072f6 <__sflush_r+0x7a>
 80072f2:	682b      	ldr	r3, [r5, #0]
 80072f4:	b903      	cbnz	r3, 80072f8 <__sflush_r+0x7c>
 80072f6:	6560      	str	r0, [r4, #84]	; 0x54
 80072f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072fa:	602f      	str	r7, [r5, #0]
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d0ca      	beq.n	8007296 <__sflush_r+0x1a>
 8007300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <__sflush_r+0x92>
 8007308:	4628      	mov	r0, r5
 800730a:	f000 fcb5 	bl	8007c78 <_free_r>
 800730e:	2000      	movs	r0, #0
 8007310:	6360      	str	r0, [r4, #52]	; 0x34
 8007312:	e7c1      	b.n	8007298 <__sflush_r+0x1c>
 8007314:	6a21      	ldr	r1, [r4, #32]
 8007316:	2301      	movs	r3, #1
 8007318:	4628      	mov	r0, r5
 800731a:	47b0      	blx	r6
 800731c:	1c41      	adds	r1, r0, #1
 800731e:	d1c7      	bne.n	80072b0 <__sflush_r+0x34>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0c4      	beq.n	80072b0 <__sflush_r+0x34>
 8007326:	2b1d      	cmp	r3, #29
 8007328:	d001      	beq.n	800732e <__sflush_r+0xb2>
 800732a:	2b16      	cmp	r3, #22
 800732c:	d101      	bne.n	8007332 <__sflush_r+0xb6>
 800732e:	602f      	str	r7, [r5, #0]
 8007330:	e7b1      	b.n	8007296 <__sflush_r+0x1a>
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	e7ad      	b.n	8007298 <__sflush_r+0x1c>
 800733c:	690f      	ldr	r7, [r1, #16]
 800733e:	2f00      	cmp	r7, #0
 8007340:	d0a9      	beq.n	8007296 <__sflush_r+0x1a>
 8007342:	0793      	lsls	r3, r2, #30
 8007344:	680e      	ldr	r6, [r1, #0]
 8007346:	bf08      	it	eq
 8007348:	694b      	ldreq	r3, [r1, #20]
 800734a:	600f      	str	r7, [r1, #0]
 800734c:	bf18      	it	ne
 800734e:	2300      	movne	r3, #0
 8007350:	eba6 0807 	sub.w	r8, r6, r7
 8007354:	608b      	str	r3, [r1, #8]
 8007356:	f1b8 0f00 	cmp.w	r8, #0
 800735a:	dd9c      	ble.n	8007296 <__sflush_r+0x1a>
 800735c:	6a21      	ldr	r1, [r4, #32]
 800735e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007360:	4643      	mov	r3, r8
 8007362:	463a      	mov	r2, r7
 8007364:	4628      	mov	r0, r5
 8007366:	47b0      	blx	r6
 8007368:	2800      	cmp	r0, #0
 800736a:	dc06      	bgt.n	800737a <__sflush_r+0xfe>
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	f04f 30ff 	mov.w	r0, #4294967295
 8007378:	e78e      	b.n	8007298 <__sflush_r+0x1c>
 800737a:	4407      	add	r7, r0
 800737c:	eba8 0800 	sub.w	r8, r8, r0
 8007380:	e7e9      	b.n	8007356 <__sflush_r+0xda>
 8007382:	bf00      	nop
 8007384:	20400001 	.word	0x20400001

08007388 <_fflush_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	690b      	ldr	r3, [r1, #16]
 800738c:	4605      	mov	r5, r0
 800738e:	460c      	mov	r4, r1
 8007390:	b913      	cbnz	r3, 8007398 <_fflush_r+0x10>
 8007392:	2500      	movs	r5, #0
 8007394:	4628      	mov	r0, r5
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	b118      	cbz	r0, 80073a2 <_fflush_r+0x1a>
 800739a:	6983      	ldr	r3, [r0, #24]
 800739c:	b90b      	cbnz	r3, 80073a2 <_fflush_r+0x1a>
 800739e:	f7fe f991 	bl	80056c4 <__sinit>
 80073a2:	4b14      	ldr	r3, [pc, #80]	; (80073f4 <_fflush_r+0x6c>)
 80073a4:	429c      	cmp	r4, r3
 80073a6:	d11b      	bne.n	80073e0 <_fflush_r+0x58>
 80073a8:	686c      	ldr	r4, [r5, #4]
 80073aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0ef      	beq.n	8007392 <_fflush_r+0xa>
 80073b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073b4:	07d0      	lsls	r0, r2, #31
 80073b6:	d404      	bmi.n	80073c2 <_fflush_r+0x3a>
 80073b8:	0599      	lsls	r1, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_fflush_r+0x3a>
 80073bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073be:	f7fe fa44 	bl	800584a <__retarget_lock_acquire_recursive>
 80073c2:	4628      	mov	r0, r5
 80073c4:	4621      	mov	r1, r4
 80073c6:	f7ff ff59 	bl	800727c <__sflush_r>
 80073ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073cc:	07da      	lsls	r2, r3, #31
 80073ce:	4605      	mov	r5, r0
 80073d0:	d4e0      	bmi.n	8007394 <_fflush_r+0xc>
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	059b      	lsls	r3, r3, #22
 80073d6:	d4dd      	bmi.n	8007394 <_fflush_r+0xc>
 80073d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073da:	f7fe fa37 	bl	800584c <__retarget_lock_release_recursive>
 80073de:	e7d9      	b.n	8007394 <_fflush_r+0xc>
 80073e0:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <_fflush_r+0x70>)
 80073e2:	429c      	cmp	r4, r3
 80073e4:	d101      	bne.n	80073ea <_fflush_r+0x62>
 80073e6:	68ac      	ldr	r4, [r5, #8]
 80073e8:	e7df      	b.n	80073aa <_fflush_r+0x22>
 80073ea:	4b04      	ldr	r3, [pc, #16]	; (80073fc <_fflush_r+0x74>)
 80073ec:	429c      	cmp	r4, r3
 80073ee:	bf08      	it	eq
 80073f0:	68ec      	ldreq	r4, [r5, #12]
 80073f2:	e7da      	b.n	80073aa <_fflush_r+0x22>
 80073f4:	08008708 	.word	0x08008708
 80073f8:	08008728 	.word	0x08008728
 80073fc:	080086e8 	.word	0x080086e8

08007400 <fiprintf>:
 8007400:	b40e      	push	{r1, r2, r3}
 8007402:	b503      	push	{r0, r1, lr}
 8007404:	4601      	mov	r1, r0
 8007406:	ab03      	add	r3, sp, #12
 8007408:	4805      	ldr	r0, [pc, #20]	; (8007420 <fiprintf+0x20>)
 800740a:	f853 2b04 	ldr.w	r2, [r3], #4
 800740e:	6800      	ldr	r0, [r0, #0]
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	f000 fe03 	bl	800801c <_vfiprintf_r>
 8007416:	b002      	add	sp, #8
 8007418:	f85d eb04 	ldr.w	lr, [sp], #4
 800741c:	b003      	add	sp, #12
 800741e:	4770      	bx	lr
 8007420:	200000d4 	.word	0x200000d4

08007424 <_localeconv_r>:
 8007424:	4800      	ldr	r0, [pc, #0]	; (8007428 <_localeconv_r+0x4>)
 8007426:	4770      	bx	lr
 8007428:	20000228 	.word	0x20000228

0800742c <_lseek_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d07      	ldr	r5, [pc, #28]	; (800744c <_lseek_r+0x20>)
 8007430:	4604      	mov	r4, r0
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	2200      	movs	r2, #0
 8007438:	602a      	str	r2, [r5, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	f7fe f82d 	bl	800549a <_lseek>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_lseek_r+0x1e>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_lseek_r+0x1e>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	2000065c 	.word	0x2000065c

08007450 <__swhatbuf_r>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	460e      	mov	r6, r1
 8007454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007458:	2900      	cmp	r1, #0
 800745a:	b096      	sub	sp, #88	; 0x58
 800745c:	4614      	mov	r4, r2
 800745e:	461d      	mov	r5, r3
 8007460:	da08      	bge.n	8007474 <__swhatbuf_r+0x24>
 8007462:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	602a      	str	r2, [r5, #0]
 800746a:	061a      	lsls	r2, r3, #24
 800746c:	d410      	bmi.n	8007490 <__swhatbuf_r+0x40>
 800746e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007472:	e00e      	b.n	8007492 <__swhatbuf_r+0x42>
 8007474:	466a      	mov	r2, sp
 8007476:	f000 ff1b 	bl	80082b0 <_fstat_r>
 800747a:	2800      	cmp	r0, #0
 800747c:	dbf1      	blt.n	8007462 <__swhatbuf_r+0x12>
 800747e:	9a01      	ldr	r2, [sp, #4]
 8007480:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007484:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007488:	425a      	negs	r2, r3
 800748a:	415a      	adcs	r2, r3
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	e7ee      	b.n	800746e <__swhatbuf_r+0x1e>
 8007490:	2340      	movs	r3, #64	; 0x40
 8007492:	2000      	movs	r0, #0
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	b016      	add	sp, #88	; 0x58
 8007498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800749c <__smakebuf_r>:
 800749c:	898b      	ldrh	r3, [r1, #12]
 800749e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074a0:	079d      	lsls	r5, r3, #30
 80074a2:	4606      	mov	r6, r0
 80074a4:	460c      	mov	r4, r1
 80074a6:	d507      	bpl.n	80074b8 <__smakebuf_r+0x1c>
 80074a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	2301      	movs	r3, #1
 80074b2:	6163      	str	r3, [r4, #20]
 80074b4:	b002      	add	sp, #8
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	ab01      	add	r3, sp, #4
 80074ba:	466a      	mov	r2, sp
 80074bc:	f7ff ffc8 	bl	8007450 <__swhatbuf_r>
 80074c0:	9900      	ldr	r1, [sp, #0]
 80074c2:	4605      	mov	r5, r0
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7fe f9f9 	bl	80058bc <_malloc_r>
 80074ca:	b948      	cbnz	r0, 80074e0 <__smakebuf_r+0x44>
 80074cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d0:	059a      	lsls	r2, r3, #22
 80074d2:	d4ef      	bmi.n	80074b4 <__smakebuf_r+0x18>
 80074d4:	f023 0303 	bic.w	r3, r3, #3
 80074d8:	f043 0302 	orr.w	r3, r3, #2
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	e7e3      	b.n	80074a8 <__smakebuf_r+0xc>
 80074e0:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <__smakebuf_r+0x7c>)
 80074e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	6020      	str	r0, [r4, #0]
 80074e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	9b00      	ldr	r3, [sp, #0]
 80074f0:	6163      	str	r3, [r4, #20]
 80074f2:	9b01      	ldr	r3, [sp, #4]
 80074f4:	6120      	str	r0, [r4, #16]
 80074f6:	b15b      	cbz	r3, 8007510 <__smakebuf_r+0x74>
 80074f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074fc:	4630      	mov	r0, r6
 80074fe:	f000 fee9 	bl	80082d4 <_isatty_r>
 8007502:	b128      	cbz	r0, 8007510 <__smakebuf_r+0x74>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f023 0303 	bic.w	r3, r3, #3
 800750a:	f043 0301 	orr.w	r3, r3, #1
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	89a0      	ldrh	r0, [r4, #12]
 8007512:	4305      	orrs	r5, r0
 8007514:	81a5      	strh	r5, [r4, #12]
 8007516:	e7cd      	b.n	80074b4 <__smakebuf_r+0x18>
 8007518:	0800565d 	.word	0x0800565d

0800751c <malloc>:
 800751c:	4b02      	ldr	r3, [pc, #8]	; (8007528 <malloc+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f7fe b9cb 	b.w	80058bc <_malloc_r>
 8007526:	bf00      	nop
 8007528:	200000d4 	.word	0x200000d4

0800752c <__malloc_lock>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__malloc_lock+0x8>)
 800752e:	f7fe b98c 	b.w	800584a <__retarget_lock_acquire_recursive>
 8007532:	bf00      	nop
 8007534:	20000650 	.word	0x20000650

08007538 <__malloc_unlock>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__malloc_unlock+0x8>)
 800753a:	f7fe b987 	b.w	800584c <__retarget_lock_release_recursive>
 800753e:	bf00      	nop
 8007540:	20000650 	.word	0x20000650

08007544 <_Balloc>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	b976      	cbnz	r6, 800756c <_Balloc+0x28>
 800754e:	2010      	movs	r0, #16
 8007550:	f7ff ffe4 	bl	800751c <malloc>
 8007554:	4602      	mov	r2, r0
 8007556:	6260      	str	r0, [r4, #36]	; 0x24
 8007558:	b920      	cbnz	r0, 8007564 <_Balloc+0x20>
 800755a:	4b18      	ldr	r3, [pc, #96]	; (80075bc <_Balloc+0x78>)
 800755c:	4818      	ldr	r0, [pc, #96]	; (80075c0 <_Balloc+0x7c>)
 800755e:	2166      	movs	r1, #102	; 0x66
 8007560:	f7fe ffe4 	bl	800652c <__assert_func>
 8007564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007568:	6006      	str	r6, [r0, #0]
 800756a:	60c6      	str	r6, [r0, #12]
 800756c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800756e:	68f3      	ldr	r3, [r6, #12]
 8007570:	b183      	cbz	r3, 8007594 <_Balloc+0x50>
 8007572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800757a:	b9b8      	cbnz	r0, 80075ac <_Balloc+0x68>
 800757c:	2101      	movs	r1, #1
 800757e:	fa01 f605 	lsl.w	r6, r1, r5
 8007582:	1d72      	adds	r2, r6, #5
 8007584:	0092      	lsls	r2, r2, #2
 8007586:	4620      	mov	r0, r4
 8007588:	f000 fb60 	bl	8007c4c <_calloc_r>
 800758c:	b160      	cbz	r0, 80075a8 <_Balloc+0x64>
 800758e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007592:	e00e      	b.n	80075b2 <_Balloc+0x6e>
 8007594:	2221      	movs	r2, #33	; 0x21
 8007596:	2104      	movs	r1, #4
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fb57 	bl	8007c4c <_calloc_r>
 800759e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a0:	60f0      	str	r0, [r6, #12]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e4      	bne.n	8007572 <_Balloc+0x2e>
 80075a8:	2000      	movs	r0, #0
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	6802      	ldr	r2, [r0, #0]
 80075ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075b2:	2300      	movs	r3, #0
 80075b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075b8:	e7f7      	b.n	80075aa <_Balloc+0x66>
 80075ba:	bf00      	nop
 80075bc:	080087c9 	.word	0x080087c9
 80075c0:	0800884c 	.word	0x0800884c

080075c4 <_Bfree>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	b976      	cbnz	r6, 80075ec <_Bfree+0x28>
 80075ce:	2010      	movs	r0, #16
 80075d0:	f7ff ffa4 	bl	800751c <malloc>
 80075d4:	4602      	mov	r2, r0
 80075d6:	6268      	str	r0, [r5, #36]	; 0x24
 80075d8:	b920      	cbnz	r0, 80075e4 <_Bfree+0x20>
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <_Bfree+0x3c>)
 80075dc:	4809      	ldr	r0, [pc, #36]	; (8007604 <_Bfree+0x40>)
 80075de:	218a      	movs	r1, #138	; 0x8a
 80075e0:	f7fe ffa4 	bl	800652c <__assert_func>
 80075e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e8:	6006      	str	r6, [r0, #0]
 80075ea:	60c6      	str	r6, [r0, #12]
 80075ec:	b13c      	cbz	r4, 80075fe <_Bfree+0x3a>
 80075ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075f0:	6862      	ldr	r2, [r4, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f8:	6021      	str	r1, [r4, #0]
 80075fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	080087c9 	.word	0x080087c9
 8007604:	0800884c 	.word	0x0800884c

08007608 <__multadd>:
 8007608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800760c:	690d      	ldr	r5, [r1, #16]
 800760e:	4607      	mov	r7, r0
 8007610:	460c      	mov	r4, r1
 8007612:	461e      	mov	r6, r3
 8007614:	f101 0c14 	add.w	ip, r1, #20
 8007618:	2000      	movs	r0, #0
 800761a:	f8dc 3000 	ldr.w	r3, [ip]
 800761e:	b299      	uxth	r1, r3
 8007620:	fb02 6101 	mla	r1, r2, r1, r6
 8007624:	0c1e      	lsrs	r6, r3, #16
 8007626:	0c0b      	lsrs	r3, r1, #16
 8007628:	fb02 3306 	mla	r3, r2, r6, r3
 800762c:	b289      	uxth	r1, r1
 800762e:	3001      	adds	r0, #1
 8007630:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007634:	4285      	cmp	r5, r0
 8007636:	f84c 1b04 	str.w	r1, [ip], #4
 800763a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800763e:	dcec      	bgt.n	800761a <__multadd+0x12>
 8007640:	b30e      	cbz	r6, 8007686 <__multadd+0x7e>
 8007642:	68a3      	ldr	r3, [r4, #8]
 8007644:	42ab      	cmp	r3, r5
 8007646:	dc19      	bgt.n	800767c <__multadd+0x74>
 8007648:	6861      	ldr	r1, [r4, #4]
 800764a:	4638      	mov	r0, r7
 800764c:	3101      	adds	r1, #1
 800764e:	f7ff ff79 	bl	8007544 <_Balloc>
 8007652:	4680      	mov	r8, r0
 8007654:	b928      	cbnz	r0, 8007662 <__multadd+0x5a>
 8007656:	4602      	mov	r2, r0
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <__multadd+0x84>)
 800765a:	480d      	ldr	r0, [pc, #52]	; (8007690 <__multadd+0x88>)
 800765c:	21b5      	movs	r1, #181	; 0xb5
 800765e:	f7fe ff65 	bl	800652c <__assert_func>
 8007662:	6922      	ldr	r2, [r4, #16]
 8007664:	3202      	adds	r2, #2
 8007666:	f104 010c 	add.w	r1, r4, #12
 800766a:	0092      	lsls	r2, r2, #2
 800766c:	300c      	adds	r0, #12
 800766e:	f7fe f8ee 	bl	800584e <memcpy>
 8007672:	4621      	mov	r1, r4
 8007674:	4638      	mov	r0, r7
 8007676:	f7ff ffa5 	bl	80075c4 <_Bfree>
 800767a:	4644      	mov	r4, r8
 800767c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007680:	3501      	adds	r5, #1
 8007682:	615e      	str	r6, [r3, #20]
 8007684:	6125      	str	r5, [r4, #16]
 8007686:	4620      	mov	r0, r4
 8007688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800768c:	0800883b 	.word	0x0800883b
 8007690:	0800884c 	.word	0x0800884c

08007694 <__hi0bits>:
 8007694:	0c03      	lsrs	r3, r0, #16
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	b9d3      	cbnz	r3, 80076d0 <__hi0bits+0x3c>
 800769a:	0400      	lsls	r0, r0, #16
 800769c:	2310      	movs	r3, #16
 800769e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076a2:	bf04      	itt	eq
 80076a4:	0200      	lsleq	r0, r0, #8
 80076a6:	3308      	addeq	r3, #8
 80076a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076ac:	bf04      	itt	eq
 80076ae:	0100      	lsleq	r0, r0, #4
 80076b0:	3304      	addeq	r3, #4
 80076b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076b6:	bf04      	itt	eq
 80076b8:	0080      	lsleq	r0, r0, #2
 80076ba:	3302      	addeq	r3, #2
 80076bc:	2800      	cmp	r0, #0
 80076be:	db05      	blt.n	80076cc <__hi0bits+0x38>
 80076c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076c4:	f103 0301 	add.w	r3, r3, #1
 80076c8:	bf08      	it	eq
 80076ca:	2320      	moveq	r3, #32
 80076cc:	4618      	mov	r0, r3
 80076ce:	4770      	bx	lr
 80076d0:	2300      	movs	r3, #0
 80076d2:	e7e4      	b.n	800769e <__hi0bits+0xa>

080076d4 <__lo0bits>:
 80076d4:	6803      	ldr	r3, [r0, #0]
 80076d6:	f013 0207 	ands.w	r2, r3, #7
 80076da:	4601      	mov	r1, r0
 80076dc:	d00b      	beq.n	80076f6 <__lo0bits+0x22>
 80076de:	07da      	lsls	r2, r3, #31
 80076e0:	d423      	bmi.n	800772a <__lo0bits+0x56>
 80076e2:	0798      	lsls	r0, r3, #30
 80076e4:	bf49      	itett	mi
 80076e6:	085b      	lsrmi	r3, r3, #1
 80076e8:	089b      	lsrpl	r3, r3, #2
 80076ea:	2001      	movmi	r0, #1
 80076ec:	600b      	strmi	r3, [r1, #0]
 80076ee:	bf5c      	itt	pl
 80076f0:	600b      	strpl	r3, [r1, #0]
 80076f2:	2002      	movpl	r0, #2
 80076f4:	4770      	bx	lr
 80076f6:	b298      	uxth	r0, r3
 80076f8:	b9a8      	cbnz	r0, 8007726 <__lo0bits+0x52>
 80076fa:	0c1b      	lsrs	r3, r3, #16
 80076fc:	2010      	movs	r0, #16
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	b90a      	cbnz	r2, 8007706 <__lo0bits+0x32>
 8007702:	3008      	adds	r0, #8
 8007704:	0a1b      	lsrs	r3, r3, #8
 8007706:	071a      	lsls	r2, r3, #28
 8007708:	bf04      	itt	eq
 800770a:	091b      	lsreq	r3, r3, #4
 800770c:	3004      	addeq	r0, #4
 800770e:	079a      	lsls	r2, r3, #30
 8007710:	bf04      	itt	eq
 8007712:	089b      	lsreq	r3, r3, #2
 8007714:	3002      	addeq	r0, #2
 8007716:	07da      	lsls	r2, r3, #31
 8007718:	d403      	bmi.n	8007722 <__lo0bits+0x4e>
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	f100 0001 	add.w	r0, r0, #1
 8007720:	d005      	beq.n	800772e <__lo0bits+0x5a>
 8007722:	600b      	str	r3, [r1, #0]
 8007724:	4770      	bx	lr
 8007726:	4610      	mov	r0, r2
 8007728:	e7e9      	b.n	80076fe <__lo0bits+0x2a>
 800772a:	2000      	movs	r0, #0
 800772c:	4770      	bx	lr
 800772e:	2020      	movs	r0, #32
 8007730:	4770      	bx	lr
	...

08007734 <__i2b>:
 8007734:	b510      	push	{r4, lr}
 8007736:	460c      	mov	r4, r1
 8007738:	2101      	movs	r1, #1
 800773a:	f7ff ff03 	bl	8007544 <_Balloc>
 800773e:	4602      	mov	r2, r0
 8007740:	b928      	cbnz	r0, 800774e <__i2b+0x1a>
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <__i2b+0x24>)
 8007744:	4805      	ldr	r0, [pc, #20]	; (800775c <__i2b+0x28>)
 8007746:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800774a:	f7fe feef 	bl	800652c <__assert_func>
 800774e:	2301      	movs	r3, #1
 8007750:	6144      	str	r4, [r0, #20]
 8007752:	6103      	str	r3, [r0, #16]
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	0800883b 	.word	0x0800883b
 800775c:	0800884c 	.word	0x0800884c

08007760 <__multiply>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	4691      	mov	r9, r2
 8007766:	690a      	ldr	r2, [r1, #16]
 8007768:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	bfb8      	it	lt
 8007770:	460b      	movlt	r3, r1
 8007772:	460c      	mov	r4, r1
 8007774:	bfbc      	itt	lt
 8007776:	464c      	movlt	r4, r9
 8007778:	4699      	movlt	r9, r3
 800777a:	6927      	ldr	r7, [r4, #16]
 800777c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007780:	68a3      	ldr	r3, [r4, #8]
 8007782:	6861      	ldr	r1, [r4, #4]
 8007784:	eb07 060a 	add.w	r6, r7, sl
 8007788:	42b3      	cmp	r3, r6
 800778a:	b085      	sub	sp, #20
 800778c:	bfb8      	it	lt
 800778e:	3101      	addlt	r1, #1
 8007790:	f7ff fed8 	bl	8007544 <_Balloc>
 8007794:	b930      	cbnz	r0, 80077a4 <__multiply+0x44>
 8007796:	4602      	mov	r2, r0
 8007798:	4b44      	ldr	r3, [pc, #272]	; (80078ac <__multiply+0x14c>)
 800779a:	4845      	ldr	r0, [pc, #276]	; (80078b0 <__multiply+0x150>)
 800779c:	f240 115d 	movw	r1, #349	; 0x15d
 80077a0:	f7fe fec4 	bl	800652c <__assert_func>
 80077a4:	f100 0514 	add.w	r5, r0, #20
 80077a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077ac:	462b      	mov	r3, r5
 80077ae:	2200      	movs	r2, #0
 80077b0:	4543      	cmp	r3, r8
 80077b2:	d321      	bcc.n	80077f8 <__multiply+0x98>
 80077b4:	f104 0314 	add.w	r3, r4, #20
 80077b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077bc:	f109 0314 	add.w	r3, r9, #20
 80077c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077c4:	9202      	str	r2, [sp, #8]
 80077c6:	1b3a      	subs	r2, r7, r4
 80077c8:	3a15      	subs	r2, #21
 80077ca:	f022 0203 	bic.w	r2, r2, #3
 80077ce:	3204      	adds	r2, #4
 80077d0:	f104 0115 	add.w	r1, r4, #21
 80077d4:	428f      	cmp	r7, r1
 80077d6:	bf38      	it	cc
 80077d8:	2204      	movcc	r2, #4
 80077da:	9201      	str	r2, [sp, #4]
 80077dc:	9a02      	ldr	r2, [sp, #8]
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d80c      	bhi.n	80077fe <__multiply+0x9e>
 80077e4:	2e00      	cmp	r6, #0
 80077e6:	dd03      	ble.n	80077f0 <__multiply+0x90>
 80077e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d05a      	beq.n	80078a6 <__multiply+0x146>
 80077f0:	6106      	str	r6, [r0, #16]
 80077f2:	b005      	add	sp, #20
 80077f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f8:	f843 2b04 	str.w	r2, [r3], #4
 80077fc:	e7d8      	b.n	80077b0 <__multiply+0x50>
 80077fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8007802:	f1ba 0f00 	cmp.w	sl, #0
 8007806:	d024      	beq.n	8007852 <__multiply+0xf2>
 8007808:	f104 0e14 	add.w	lr, r4, #20
 800780c:	46a9      	mov	r9, r5
 800780e:	f04f 0c00 	mov.w	ip, #0
 8007812:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007816:	f8d9 1000 	ldr.w	r1, [r9]
 800781a:	fa1f fb82 	uxth.w	fp, r2
 800781e:	b289      	uxth	r1, r1
 8007820:	fb0a 110b 	mla	r1, sl, fp, r1
 8007824:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007828:	f8d9 2000 	ldr.w	r2, [r9]
 800782c:	4461      	add	r1, ip
 800782e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007832:	fb0a c20b 	mla	r2, sl, fp, ip
 8007836:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800783a:	b289      	uxth	r1, r1
 800783c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007840:	4577      	cmp	r7, lr
 8007842:	f849 1b04 	str.w	r1, [r9], #4
 8007846:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800784a:	d8e2      	bhi.n	8007812 <__multiply+0xb2>
 800784c:	9a01      	ldr	r2, [sp, #4]
 800784e:	f845 c002 	str.w	ip, [r5, r2]
 8007852:	9a03      	ldr	r2, [sp, #12]
 8007854:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007858:	3304      	adds	r3, #4
 800785a:	f1b9 0f00 	cmp.w	r9, #0
 800785e:	d020      	beq.n	80078a2 <__multiply+0x142>
 8007860:	6829      	ldr	r1, [r5, #0]
 8007862:	f104 0c14 	add.w	ip, r4, #20
 8007866:	46ae      	mov	lr, r5
 8007868:	f04f 0a00 	mov.w	sl, #0
 800786c:	f8bc b000 	ldrh.w	fp, [ip]
 8007870:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007874:	fb09 220b 	mla	r2, r9, fp, r2
 8007878:	4492      	add	sl, r2
 800787a:	b289      	uxth	r1, r1
 800787c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007880:	f84e 1b04 	str.w	r1, [lr], #4
 8007884:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007888:	f8be 1000 	ldrh.w	r1, [lr]
 800788c:	0c12      	lsrs	r2, r2, #16
 800788e:	fb09 1102 	mla	r1, r9, r2, r1
 8007892:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007896:	4567      	cmp	r7, ip
 8007898:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800789c:	d8e6      	bhi.n	800786c <__multiply+0x10c>
 800789e:	9a01      	ldr	r2, [sp, #4]
 80078a0:	50a9      	str	r1, [r5, r2]
 80078a2:	3504      	adds	r5, #4
 80078a4:	e79a      	b.n	80077dc <__multiply+0x7c>
 80078a6:	3e01      	subs	r6, #1
 80078a8:	e79c      	b.n	80077e4 <__multiply+0x84>
 80078aa:	bf00      	nop
 80078ac:	0800883b 	.word	0x0800883b
 80078b0:	0800884c 	.word	0x0800884c

080078b4 <__pow5mult>:
 80078b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	4615      	mov	r5, r2
 80078ba:	f012 0203 	ands.w	r2, r2, #3
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	d007      	beq.n	80078d4 <__pow5mult+0x20>
 80078c4:	4c25      	ldr	r4, [pc, #148]	; (800795c <__pow5mult+0xa8>)
 80078c6:	3a01      	subs	r2, #1
 80078c8:	2300      	movs	r3, #0
 80078ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078ce:	f7ff fe9b 	bl	8007608 <__multadd>
 80078d2:	4607      	mov	r7, r0
 80078d4:	10ad      	asrs	r5, r5, #2
 80078d6:	d03d      	beq.n	8007954 <__pow5mult+0xa0>
 80078d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078da:	b97c      	cbnz	r4, 80078fc <__pow5mult+0x48>
 80078dc:	2010      	movs	r0, #16
 80078de:	f7ff fe1d 	bl	800751c <malloc>
 80078e2:	4602      	mov	r2, r0
 80078e4:	6270      	str	r0, [r6, #36]	; 0x24
 80078e6:	b928      	cbnz	r0, 80078f4 <__pow5mult+0x40>
 80078e8:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <__pow5mult+0xac>)
 80078ea:	481e      	ldr	r0, [pc, #120]	; (8007964 <__pow5mult+0xb0>)
 80078ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078f0:	f7fe fe1c 	bl	800652c <__assert_func>
 80078f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078f8:	6004      	str	r4, [r0, #0]
 80078fa:	60c4      	str	r4, [r0, #12]
 80078fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007904:	b94c      	cbnz	r4, 800791a <__pow5mult+0x66>
 8007906:	f240 2171 	movw	r1, #625	; 0x271
 800790a:	4630      	mov	r0, r6
 800790c:	f7ff ff12 	bl	8007734 <__i2b>
 8007910:	2300      	movs	r3, #0
 8007912:	f8c8 0008 	str.w	r0, [r8, #8]
 8007916:	4604      	mov	r4, r0
 8007918:	6003      	str	r3, [r0, #0]
 800791a:	f04f 0900 	mov.w	r9, #0
 800791e:	07eb      	lsls	r3, r5, #31
 8007920:	d50a      	bpl.n	8007938 <__pow5mult+0x84>
 8007922:	4639      	mov	r1, r7
 8007924:	4622      	mov	r2, r4
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff ff1a 	bl	8007760 <__multiply>
 800792c:	4639      	mov	r1, r7
 800792e:	4680      	mov	r8, r0
 8007930:	4630      	mov	r0, r6
 8007932:	f7ff fe47 	bl	80075c4 <_Bfree>
 8007936:	4647      	mov	r7, r8
 8007938:	106d      	asrs	r5, r5, #1
 800793a:	d00b      	beq.n	8007954 <__pow5mult+0xa0>
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	b938      	cbnz	r0, 8007950 <__pow5mult+0x9c>
 8007940:	4622      	mov	r2, r4
 8007942:	4621      	mov	r1, r4
 8007944:	4630      	mov	r0, r6
 8007946:	f7ff ff0b 	bl	8007760 <__multiply>
 800794a:	6020      	str	r0, [r4, #0]
 800794c:	f8c0 9000 	str.w	r9, [r0]
 8007950:	4604      	mov	r4, r0
 8007952:	e7e4      	b.n	800791e <__pow5mult+0x6a>
 8007954:	4638      	mov	r0, r7
 8007956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795a:	bf00      	nop
 800795c:	08008998 	.word	0x08008998
 8007960:	080087c9 	.word	0x080087c9
 8007964:	0800884c 	.word	0x0800884c

08007968 <__lshift>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	6849      	ldr	r1, [r1, #4]
 8007970:	6923      	ldr	r3, [r4, #16]
 8007972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	4607      	mov	r7, r0
 800797a:	4691      	mov	r9, r2
 800797c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007980:	f108 0601 	add.w	r6, r8, #1
 8007984:	42b3      	cmp	r3, r6
 8007986:	db0b      	blt.n	80079a0 <__lshift+0x38>
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff fddb 	bl	8007544 <_Balloc>
 800798e:	4605      	mov	r5, r0
 8007990:	b948      	cbnz	r0, 80079a6 <__lshift+0x3e>
 8007992:	4602      	mov	r2, r0
 8007994:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <__lshift+0xd8>)
 8007996:	482b      	ldr	r0, [pc, #172]	; (8007a44 <__lshift+0xdc>)
 8007998:	f240 11d9 	movw	r1, #473	; 0x1d9
 800799c:	f7fe fdc6 	bl	800652c <__assert_func>
 80079a0:	3101      	adds	r1, #1
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	e7ee      	b.n	8007984 <__lshift+0x1c>
 80079a6:	2300      	movs	r3, #0
 80079a8:	f100 0114 	add.w	r1, r0, #20
 80079ac:	f100 0210 	add.w	r2, r0, #16
 80079b0:	4618      	mov	r0, r3
 80079b2:	4553      	cmp	r3, sl
 80079b4:	db37      	blt.n	8007a26 <__lshift+0xbe>
 80079b6:	6920      	ldr	r0, [r4, #16]
 80079b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079bc:	f104 0314 	add.w	r3, r4, #20
 80079c0:	f019 091f 	ands.w	r9, r9, #31
 80079c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079cc:	d02f      	beq.n	8007a2e <__lshift+0xc6>
 80079ce:	f1c9 0e20 	rsb	lr, r9, #32
 80079d2:	468a      	mov	sl, r1
 80079d4:	f04f 0c00 	mov.w	ip, #0
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	fa02 f209 	lsl.w	r2, r2, r9
 80079de:	ea42 020c 	orr.w	r2, r2, ip
 80079e2:	f84a 2b04 	str.w	r2, [sl], #4
 80079e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ea:	4298      	cmp	r0, r3
 80079ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80079f0:	d8f2      	bhi.n	80079d8 <__lshift+0x70>
 80079f2:	1b03      	subs	r3, r0, r4
 80079f4:	3b15      	subs	r3, #21
 80079f6:	f023 0303 	bic.w	r3, r3, #3
 80079fa:	3304      	adds	r3, #4
 80079fc:	f104 0215 	add.w	r2, r4, #21
 8007a00:	4290      	cmp	r0, r2
 8007a02:	bf38      	it	cc
 8007a04:	2304      	movcc	r3, #4
 8007a06:	f841 c003 	str.w	ip, [r1, r3]
 8007a0a:	f1bc 0f00 	cmp.w	ip, #0
 8007a0e:	d001      	beq.n	8007a14 <__lshift+0xac>
 8007a10:	f108 0602 	add.w	r6, r8, #2
 8007a14:	3e01      	subs	r6, #1
 8007a16:	4638      	mov	r0, r7
 8007a18:	612e      	str	r6, [r5, #16]
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f7ff fdd2 	bl	80075c4 <_Bfree>
 8007a20:	4628      	mov	r0, r5
 8007a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	e7c1      	b.n	80079b2 <__lshift+0x4a>
 8007a2e:	3904      	subs	r1, #4
 8007a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a34:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a38:	4298      	cmp	r0, r3
 8007a3a:	d8f9      	bhi.n	8007a30 <__lshift+0xc8>
 8007a3c:	e7ea      	b.n	8007a14 <__lshift+0xac>
 8007a3e:	bf00      	nop
 8007a40:	0800883b 	.word	0x0800883b
 8007a44:	0800884c 	.word	0x0800884c

08007a48 <__mcmp>:
 8007a48:	b530      	push	{r4, r5, lr}
 8007a4a:	6902      	ldr	r2, [r0, #16]
 8007a4c:	690c      	ldr	r4, [r1, #16]
 8007a4e:	1b12      	subs	r2, r2, r4
 8007a50:	d10e      	bne.n	8007a70 <__mcmp+0x28>
 8007a52:	f100 0314 	add.w	r3, r0, #20
 8007a56:	3114      	adds	r1, #20
 8007a58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a68:	42a5      	cmp	r5, r4
 8007a6a:	d003      	beq.n	8007a74 <__mcmp+0x2c>
 8007a6c:	d305      	bcc.n	8007a7a <__mcmp+0x32>
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4610      	mov	r0, r2
 8007a72:	bd30      	pop	{r4, r5, pc}
 8007a74:	4283      	cmp	r3, r0
 8007a76:	d3f3      	bcc.n	8007a60 <__mcmp+0x18>
 8007a78:	e7fa      	b.n	8007a70 <__mcmp+0x28>
 8007a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7e:	e7f7      	b.n	8007a70 <__mcmp+0x28>

08007a80 <__mdiff>:
 8007a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	4606      	mov	r6, r0
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4690      	mov	r8, r2
 8007a8e:	f7ff ffdb 	bl	8007a48 <__mcmp>
 8007a92:	1e05      	subs	r5, r0, #0
 8007a94:	d110      	bne.n	8007ab8 <__mdiff+0x38>
 8007a96:	4629      	mov	r1, r5
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff fd53 	bl	8007544 <_Balloc>
 8007a9e:	b930      	cbnz	r0, 8007aae <__mdiff+0x2e>
 8007aa0:	4b3a      	ldr	r3, [pc, #232]	; (8007b8c <__mdiff+0x10c>)
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	f240 2132 	movw	r1, #562	; 0x232
 8007aa8:	4839      	ldr	r0, [pc, #228]	; (8007b90 <__mdiff+0x110>)
 8007aaa:	f7fe fd3f 	bl	800652c <__assert_func>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	bfa4      	itt	ge
 8007aba:	4643      	movge	r3, r8
 8007abc:	46a0      	movge	r8, r4
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ac4:	bfa6      	itte	ge
 8007ac6:	461c      	movge	r4, r3
 8007ac8:	2500      	movge	r5, #0
 8007aca:	2501      	movlt	r5, #1
 8007acc:	f7ff fd3a 	bl	8007544 <_Balloc>
 8007ad0:	b920      	cbnz	r0, 8007adc <__mdiff+0x5c>
 8007ad2:	4b2e      	ldr	r3, [pc, #184]	; (8007b8c <__mdiff+0x10c>)
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ada:	e7e5      	b.n	8007aa8 <__mdiff+0x28>
 8007adc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ae0:	6926      	ldr	r6, [r4, #16]
 8007ae2:	60c5      	str	r5, [r0, #12]
 8007ae4:	f104 0914 	add.w	r9, r4, #20
 8007ae8:	f108 0514 	add.w	r5, r8, #20
 8007aec:	f100 0e14 	add.w	lr, r0, #20
 8007af0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007af4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007af8:	f108 0210 	add.w	r2, r8, #16
 8007afc:	46f2      	mov	sl, lr
 8007afe:	2100      	movs	r1, #0
 8007b00:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b08:	fa1f f883 	uxth.w	r8, r3
 8007b0c:	fa11 f18b 	uxtah	r1, r1, fp
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	eba1 0808 	sub.w	r8, r1, r8
 8007b16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b1e:	fa1f f888 	uxth.w	r8, r8
 8007b22:	1419      	asrs	r1, r3, #16
 8007b24:	454e      	cmp	r6, r9
 8007b26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b2a:	f84a 3b04 	str.w	r3, [sl], #4
 8007b2e:	d8e7      	bhi.n	8007b00 <__mdiff+0x80>
 8007b30:	1b33      	subs	r3, r6, r4
 8007b32:	3b15      	subs	r3, #21
 8007b34:	f023 0303 	bic.w	r3, r3, #3
 8007b38:	3304      	adds	r3, #4
 8007b3a:	3415      	adds	r4, #21
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	bf38      	it	cc
 8007b40:	2304      	movcc	r3, #4
 8007b42:	441d      	add	r5, r3
 8007b44:	4473      	add	r3, lr
 8007b46:	469e      	mov	lr, r3
 8007b48:	462e      	mov	r6, r5
 8007b4a:	4566      	cmp	r6, ip
 8007b4c:	d30e      	bcc.n	8007b6c <__mdiff+0xec>
 8007b4e:	f10c 0203 	add.w	r2, ip, #3
 8007b52:	1b52      	subs	r2, r2, r5
 8007b54:	f022 0203 	bic.w	r2, r2, #3
 8007b58:	3d03      	subs	r5, #3
 8007b5a:	45ac      	cmp	ip, r5
 8007b5c:	bf38      	it	cc
 8007b5e:	2200      	movcc	r2, #0
 8007b60:	441a      	add	r2, r3
 8007b62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b66:	b17b      	cbz	r3, 8007b88 <__mdiff+0x108>
 8007b68:	6107      	str	r7, [r0, #16]
 8007b6a:	e7a3      	b.n	8007ab4 <__mdiff+0x34>
 8007b6c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b70:	fa11 f288 	uxtah	r2, r1, r8
 8007b74:	1414      	asrs	r4, r2, #16
 8007b76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b7a:	b292      	uxth	r2, r2
 8007b7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b80:	f84e 2b04 	str.w	r2, [lr], #4
 8007b84:	1421      	asrs	r1, r4, #16
 8007b86:	e7e0      	b.n	8007b4a <__mdiff+0xca>
 8007b88:	3f01      	subs	r7, #1
 8007b8a:	e7ea      	b.n	8007b62 <__mdiff+0xe2>
 8007b8c:	0800883b 	.word	0x0800883b
 8007b90:	0800884c 	.word	0x0800884c

08007b94 <__d2b>:
 8007b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b98:	4689      	mov	r9, r1
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	ec57 6b10 	vmov	r6, r7, d0
 8007ba0:	4690      	mov	r8, r2
 8007ba2:	f7ff fccf 	bl	8007544 <_Balloc>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	b930      	cbnz	r0, 8007bb8 <__d2b+0x24>
 8007baa:	4602      	mov	r2, r0
 8007bac:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <__d2b+0xb0>)
 8007bae:	4826      	ldr	r0, [pc, #152]	; (8007c48 <__d2b+0xb4>)
 8007bb0:	f240 310a 	movw	r1, #778	; 0x30a
 8007bb4:	f7fe fcba 	bl	800652c <__assert_func>
 8007bb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bc0:	bb35      	cbnz	r5, 8007c10 <__d2b+0x7c>
 8007bc2:	2e00      	cmp	r6, #0
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	d028      	beq.n	8007c1a <__d2b+0x86>
 8007bc8:	4668      	mov	r0, sp
 8007bca:	9600      	str	r6, [sp, #0]
 8007bcc:	f7ff fd82 	bl	80076d4 <__lo0bits>
 8007bd0:	9900      	ldr	r1, [sp, #0]
 8007bd2:	b300      	cbz	r0, 8007c16 <__d2b+0x82>
 8007bd4:	9a01      	ldr	r2, [sp, #4]
 8007bd6:	f1c0 0320 	rsb	r3, r0, #32
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	430b      	orrs	r3, r1
 8007be0:	40c2      	lsrs	r2, r0
 8007be2:	6163      	str	r3, [r4, #20]
 8007be4:	9201      	str	r2, [sp, #4]
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	61a3      	str	r3, [r4, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bf14      	ite	ne
 8007bee:	2202      	movne	r2, #2
 8007bf0:	2201      	moveq	r2, #1
 8007bf2:	6122      	str	r2, [r4, #16]
 8007bf4:	b1d5      	cbz	r5, 8007c2c <__d2b+0x98>
 8007bf6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bfa:	4405      	add	r5, r0
 8007bfc:	f8c9 5000 	str.w	r5, [r9]
 8007c00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c04:	f8c8 0000 	str.w	r0, [r8]
 8007c08:	4620      	mov	r0, r4
 8007c0a:	b003      	add	sp, #12
 8007c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c14:	e7d5      	b.n	8007bc2 <__d2b+0x2e>
 8007c16:	6161      	str	r1, [r4, #20]
 8007c18:	e7e5      	b.n	8007be6 <__d2b+0x52>
 8007c1a:	a801      	add	r0, sp, #4
 8007c1c:	f7ff fd5a 	bl	80076d4 <__lo0bits>
 8007c20:	9b01      	ldr	r3, [sp, #4]
 8007c22:	6163      	str	r3, [r4, #20]
 8007c24:	2201      	movs	r2, #1
 8007c26:	6122      	str	r2, [r4, #16]
 8007c28:	3020      	adds	r0, #32
 8007c2a:	e7e3      	b.n	8007bf4 <__d2b+0x60>
 8007c2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c34:	f8c9 0000 	str.w	r0, [r9]
 8007c38:	6918      	ldr	r0, [r3, #16]
 8007c3a:	f7ff fd2b 	bl	8007694 <__hi0bits>
 8007c3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c42:	e7df      	b.n	8007c04 <__d2b+0x70>
 8007c44:	0800883b 	.word	0x0800883b
 8007c48:	0800884c 	.word	0x0800884c

08007c4c <_calloc_r>:
 8007c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c4e:	fba1 2402 	umull	r2, r4, r1, r2
 8007c52:	b94c      	cbnz	r4, 8007c68 <_calloc_r+0x1c>
 8007c54:	4611      	mov	r1, r2
 8007c56:	9201      	str	r2, [sp, #4]
 8007c58:	f7fd fe30 	bl	80058bc <_malloc_r>
 8007c5c:	9a01      	ldr	r2, [sp, #4]
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b930      	cbnz	r0, 8007c70 <_calloc_r+0x24>
 8007c62:	4628      	mov	r0, r5
 8007c64:	b003      	add	sp, #12
 8007c66:	bd30      	pop	{r4, r5, pc}
 8007c68:	220c      	movs	r2, #12
 8007c6a:	6002      	str	r2, [r0, #0]
 8007c6c:	2500      	movs	r5, #0
 8007c6e:	e7f8      	b.n	8007c62 <_calloc_r+0x16>
 8007c70:	4621      	mov	r1, r4
 8007c72:	f7fd fdfa 	bl	800586a <memset>
 8007c76:	e7f4      	b.n	8007c62 <_calloc_r+0x16>

08007c78 <_free_r>:
 8007c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c7a:	2900      	cmp	r1, #0
 8007c7c:	d044      	beq.n	8007d08 <_free_r+0x90>
 8007c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c82:	9001      	str	r0, [sp, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f1a1 0404 	sub.w	r4, r1, #4
 8007c8a:	bfb8      	it	lt
 8007c8c:	18e4      	addlt	r4, r4, r3
 8007c8e:	f7ff fc4d 	bl	800752c <__malloc_lock>
 8007c92:	4a1e      	ldr	r2, [pc, #120]	; (8007d0c <_free_r+0x94>)
 8007c94:	9801      	ldr	r0, [sp, #4]
 8007c96:	6813      	ldr	r3, [r2, #0]
 8007c98:	b933      	cbnz	r3, 8007ca8 <_free_r+0x30>
 8007c9a:	6063      	str	r3, [r4, #4]
 8007c9c:	6014      	str	r4, [r2, #0]
 8007c9e:	b003      	add	sp, #12
 8007ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ca4:	f7ff bc48 	b.w	8007538 <__malloc_unlock>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d908      	bls.n	8007cbe <_free_r+0x46>
 8007cac:	6825      	ldr	r5, [r4, #0]
 8007cae:	1961      	adds	r1, r4, r5
 8007cb0:	428b      	cmp	r3, r1
 8007cb2:	bf01      	itttt	eq
 8007cb4:	6819      	ldreq	r1, [r3, #0]
 8007cb6:	685b      	ldreq	r3, [r3, #4]
 8007cb8:	1949      	addeq	r1, r1, r5
 8007cba:	6021      	streq	r1, [r4, #0]
 8007cbc:	e7ed      	b.n	8007c9a <_free_r+0x22>
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	b10b      	cbz	r3, 8007cc8 <_free_r+0x50>
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	d9fa      	bls.n	8007cbe <_free_r+0x46>
 8007cc8:	6811      	ldr	r1, [r2, #0]
 8007cca:	1855      	adds	r5, r2, r1
 8007ccc:	42a5      	cmp	r5, r4
 8007cce:	d10b      	bne.n	8007ce8 <_free_r+0x70>
 8007cd0:	6824      	ldr	r4, [r4, #0]
 8007cd2:	4421      	add	r1, r4
 8007cd4:	1854      	adds	r4, r2, r1
 8007cd6:	42a3      	cmp	r3, r4
 8007cd8:	6011      	str	r1, [r2, #0]
 8007cda:	d1e0      	bne.n	8007c9e <_free_r+0x26>
 8007cdc:	681c      	ldr	r4, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	6053      	str	r3, [r2, #4]
 8007ce2:	4421      	add	r1, r4
 8007ce4:	6011      	str	r1, [r2, #0]
 8007ce6:	e7da      	b.n	8007c9e <_free_r+0x26>
 8007ce8:	d902      	bls.n	8007cf0 <_free_r+0x78>
 8007cea:	230c      	movs	r3, #12
 8007cec:	6003      	str	r3, [r0, #0]
 8007cee:	e7d6      	b.n	8007c9e <_free_r+0x26>
 8007cf0:	6825      	ldr	r5, [r4, #0]
 8007cf2:	1961      	adds	r1, r4, r5
 8007cf4:	428b      	cmp	r3, r1
 8007cf6:	bf04      	itt	eq
 8007cf8:	6819      	ldreq	r1, [r3, #0]
 8007cfa:	685b      	ldreq	r3, [r3, #4]
 8007cfc:	6063      	str	r3, [r4, #4]
 8007cfe:	bf04      	itt	eq
 8007d00:	1949      	addeq	r1, r1, r5
 8007d02:	6021      	streq	r1, [r4, #0]
 8007d04:	6054      	str	r4, [r2, #4]
 8007d06:	e7ca      	b.n	8007c9e <_free_r+0x26>
 8007d08:	b003      	add	sp, #12
 8007d0a:	bd30      	pop	{r4, r5, pc}
 8007d0c:	20000654 	.word	0x20000654

08007d10 <__ssputs_r>:
 8007d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	688e      	ldr	r6, [r1, #8]
 8007d16:	429e      	cmp	r6, r3
 8007d18:	4682      	mov	sl, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	4690      	mov	r8, r2
 8007d1e:	461f      	mov	r7, r3
 8007d20:	d838      	bhi.n	8007d94 <__ssputs_r+0x84>
 8007d22:	898a      	ldrh	r2, [r1, #12]
 8007d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d28:	d032      	beq.n	8007d90 <__ssputs_r+0x80>
 8007d2a:	6825      	ldr	r5, [r4, #0]
 8007d2c:	6909      	ldr	r1, [r1, #16]
 8007d2e:	eba5 0901 	sub.w	r9, r5, r1
 8007d32:	6965      	ldr	r5, [r4, #20]
 8007d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	444b      	add	r3, r9
 8007d40:	106d      	asrs	r5, r5, #1
 8007d42:	429d      	cmp	r5, r3
 8007d44:	bf38      	it	cc
 8007d46:	461d      	movcc	r5, r3
 8007d48:	0553      	lsls	r3, r2, #21
 8007d4a:	d531      	bpl.n	8007db0 <__ssputs_r+0xa0>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f7fd fdb5 	bl	80058bc <_malloc_r>
 8007d52:	4606      	mov	r6, r0
 8007d54:	b950      	cbnz	r0, 8007d6c <__ssputs_r+0x5c>
 8007d56:	230c      	movs	r3, #12
 8007d58:	f8ca 3000 	str.w	r3, [sl]
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6c:	6921      	ldr	r1, [r4, #16]
 8007d6e:	464a      	mov	r2, r9
 8007d70:	f7fd fd6d 	bl	800584e <memcpy>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	6126      	str	r6, [r4, #16]
 8007d82:	6165      	str	r5, [r4, #20]
 8007d84:	444e      	add	r6, r9
 8007d86:	eba5 0509 	sub.w	r5, r5, r9
 8007d8a:	6026      	str	r6, [r4, #0]
 8007d8c:	60a5      	str	r5, [r4, #8]
 8007d8e:	463e      	mov	r6, r7
 8007d90:	42be      	cmp	r6, r7
 8007d92:	d900      	bls.n	8007d96 <__ssputs_r+0x86>
 8007d94:	463e      	mov	r6, r7
 8007d96:	6820      	ldr	r0, [r4, #0]
 8007d98:	4632      	mov	r2, r6
 8007d9a:	4641      	mov	r1, r8
 8007d9c:	f000 fabc 	bl	8008318 <memmove>
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	1b9b      	subs	r3, r3, r6
 8007da4:	60a3      	str	r3, [r4, #8]
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	4433      	add	r3, r6
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	2000      	movs	r0, #0
 8007dae:	e7db      	b.n	8007d68 <__ssputs_r+0x58>
 8007db0:	462a      	mov	r2, r5
 8007db2:	f000 facb 	bl	800834c <_realloc_r>
 8007db6:	4606      	mov	r6, r0
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d1e1      	bne.n	8007d80 <__ssputs_r+0x70>
 8007dbc:	6921      	ldr	r1, [r4, #16]
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	f7ff ff5a 	bl	8007c78 <_free_r>
 8007dc4:	e7c7      	b.n	8007d56 <__ssputs_r+0x46>
	...

08007dc8 <_svfiprintf_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4698      	mov	r8, r3
 8007dce:	898b      	ldrh	r3, [r1, #12]
 8007dd0:	061b      	lsls	r3, r3, #24
 8007dd2:	b09d      	sub	sp, #116	; 0x74
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	4614      	mov	r4, r2
 8007dda:	d50e      	bpl.n	8007dfa <_svfiprintf_r+0x32>
 8007ddc:	690b      	ldr	r3, [r1, #16]
 8007dde:	b963      	cbnz	r3, 8007dfa <_svfiprintf_r+0x32>
 8007de0:	2140      	movs	r1, #64	; 0x40
 8007de2:	f7fd fd6b 	bl	80058bc <_malloc_r>
 8007de6:	6028      	str	r0, [r5, #0]
 8007de8:	6128      	str	r0, [r5, #16]
 8007dea:	b920      	cbnz	r0, 8007df6 <_svfiprintf_r+0x2e>
 8007dec:	230c      	movs	r3, #12
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	e0d1      	b.n	8007f9a <_svfiprintf_r+0x1d2>
 8007df6:	2340      	movs	r3, #64	; 0x40
 8007df8:	616b      	str	r3, [r5, #20]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfe:	2320      	movs	r3, #32
 8007e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e08:	2330      	movs	r3, #48	; 0x30
 8007e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fb4 <_svfiprintf_r+0x1ec>
 8007e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e12:	f04f 0901 	mov.w	r9, #1
 8007e16:	4623      	mov	r3, r4
 8007e18:	469a      	mov	sl, r3
 8007e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e1e:	b10a      	cbz	r2, 8007e24 <_svfiprintf_r+0x5c>
 8007e20:	2a25      	cmp	r2, #37	; 0x25
 8007e22:	d1f9      	bne.n	8007e18 <_svfiprintf_r+0x50>
 8007e24:	ebba 0b04 	subs.w	fp, sl, r4
 8007e28:	d00b      	beq.n	8007e42 <_svfiprintf_r+0x7a>
 8007e2a:	465b      	mov	r3, fp
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	4629      	mov	r1, r5
 8007e30:	4638      	mov	r0, r7
 8007e32:	f7ff ff6d 	bl	8007d10 <__ssputs_r>
 8007e36:	3001      	adds	r0, #1
 8007e38:	f000 80aa 	beq.w	8007f90 <_svfiprintf_r+0x1c8>
 8007e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e3e:	445a      	add	r2, fp
 8007e40:	9209      	str	r2, [sp, #36]	; 0x24
 8007e42:	f89a 3000 	ldrb.w	r3, [sl]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 80a2 	beq.w	8007f90 <_svfiprintf_r+0x1c8>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e56:	f10a 0a01 	add.w	sl, sl, #1
 8007e5a:	9304      	str	r3, [sp, #16]
 8007e5c:	9307      	str	r3, [sp, #28]
 8007e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e62:	931a      	str	r3, [sp, #104]	; 0x68
 8007e64:	4654      	mov	r4, sl
 8007e66:	2205      	movs	r2, #5
 8007e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6c:	4851      	ldr	r0, [pc, #324]	; (8007fb4 <_svfiprintf_r+0x1ec>)
 8007e6e:	f7f8 f9b7 	bl	80001e0 <memchr>
 8007e72:	9a04      	ldr	r2, [sp, #16]
 8007e74:	b9d8      	cbnz	r0, 8007eae <_svfiprintf_r+0xe6>
 8007e76:	06d0      	lsls	r0, r2, #27
 8007e78:	bf44      	itt	mi
 8007e7a:	2320      	movmi	r3, #32
 8007e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e80:	0711      	lsls	r1, r2, #28
 8007e82:	bf44      	itt	mi
 8007e84:	232b      	movmi	r3, #43	; 0x2b
 8007e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e90:	d015      	beq.n	8007ebe <_svfiprintf_r+0xf6>
 8007e92:	9a07      	ldr	r2, [sp, #28]
 8007e94:	4654      	mov	r4, sl
 8007e96:	2000      	movs	r0, #0
 8007e98:	f04f 0c0a 	mov.w	ip, #10
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ea2:	3b30      	subs	r3, #48	; 0x30
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d94e      	bls.n	8007f46 <_svfiprintf_r+0x17e>
 8007ea8:	b1b0      	cbz	r0, 8007ed8 <_svfiprintf_r+0x110>
 8007eaa:	9207      	str	r2, [sp, #28]
 8007eac:	e014      	b.n	8007ed8 <_svfiprintf_r+0x110>
 8007eae:	eba0 0308 	sub.w	r3, r0, r8
 8007eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	46a2      	mov	sl, r4
 8007ebc:	e7d2      	b.n	8007e64 <_svfiprintf_r+0x9c>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	1d19      	adds	r1, r3, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	9103      	str	r1, [sp, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfbb      	ittet	lt
 8007eca:	425b      	neglt	r3, r3
 8007ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ed0:	9307      	strge	r3, [sp, #28]
 8007ed2:	9307      	strlt	r3, [sp, #28]
 8007ed4:	bfb8      	it	lt
 8007ed6:	9204      	strlt	r2, [sp, #16]
 8007ed8:	7823      	ldrb	r3, [r4, #0]
 8007eda:	2b2e      	cmp	r3, #46	; 0x2e
 8007edc:	d10c      	bne.n	8007ef8 <_svfiprintf_r+0x130>
 8007ede:	7863      	ldrb	r3, [r4, #1]
 8007ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee2:	d135      	bne.n	8007f50 <_svfiprintf_r+0x188>
 8007ee4:	9b03      	ldr	r3, [sp, #12]
 8007ee6:	1d1a      	adds	r2, r3, #4
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	9203      	str	r2, [sp, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bfb8      	it	lt
 8007ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ef4:	3402      	adds	r4, #2
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fc4 <_svfiprintf_r+0x1fc>
 8007efc:	7821      	ldrb	r1, [r4, #0]
 8007efe:	2203      	movs	r2, #3
 8007f00:	4650      	mov	r0, sl
 8007f02:	f7f8 f96d 	bl	80001e0 <memchr>
 8007f06:	b140      	cbz	r0, 8007f1a <_svfiprintf_r+0x152>
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	eba0 000a 	sub.w	r0, r0, sl
 8007f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f12:	9b04      	ldr	r3, [sp, #16]
 8007f14:	4303      	orrs	r3, r0
 8007f16:	3401      	adds	r4, #1
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1e:	4826      	ldr	r0, [pc, #152]	; (8007fb8 <_svfiprintf_r+0x1f0>)
 8007f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f24:	2206      	movs	r2, #6
 8007f26:	f7f8 f95b 	bl	80001e0 <memchr>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d038      	beq.n	8007fa0 <_svfiprintf_r+0x1d8>
 8007f2e:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <_svfiprintf_r+0x1f4>)
 8007f30:	bb1b      	cbnz	r3, 8007f7a <_svfiprintf_r+0x1b2>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	3307      	adds	r3, #7
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	4433      	add	r3, r6
 8007f42:	9309      	str	r3, [sp, #36]	; 0x24
 8007f44:	e767      	b.n	8007e16 <_svfiprintf_r+0x4e>
 8007f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	e7a5      	b.n	8007e9c <_svfiprintf_r+0xd4>
 8007f50:	2300      	movs	r3, #0
 8007f52:	3401      	adds	r4, #1
 8007f54:	9305      	str	r3, [sp, #20]
 8007f56:	4619      	mov	r1, r3
 8007f58:	f04f 0c0a 	mov.w	ip, #10
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f62:	3a30      	subs	r2, #48	; 0x30
 8007f64:	2a09      	cmp	r2, #9
 8007f66:	d903      	bls.n	8007f70 <_svfiprintf_r+0x1a8>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0c5      	beq.n	8007ef8 <_svfiprintf_r+0x130>
 8007f6c:	9105      	str	r1, [sp, #20]
 8007f6e:	e7c3      	b.n	8007ef8 <_svfiprintf_r+0x130>
 8007f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f74:	4604      	mov	r4, r0
 8007f76:	2301      	movs	r3, #1
 8007f78:	e7f0      	b.n	8007f5c <_svfiprintf_r+0x194>
 8007f7a:	ab03      	add	r3, sp, #12
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	462a      	mov	r2, r5
 8007f80:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <_svfiprintf_r+0x1f8>)
 8007f82:	a904      	add	r1, sp, #16
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7fd fdad 	bl	8005ae4 <_printf_float>
 8007f8a:	1c42      	adds	r2, r0, #1
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	d1d6      	bne.n	8007f3e <_svfiprintf_r+0x176>
 8007f90:	89ab      	ldrh	r3, [r5, #12]
 8007f92:	065b      	lsls	r3, r3, #25
 8007f94:	f53f af2c 	bmi.w	8007df0 <_svfiprintf_r+0x28>
 8007f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f9a:	b01d      	add	sp, #116	; 0x74
 8007f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa0:	ab03      	add	r3, sp, #12
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	462a      	mov	r2, r5
 8007fa6:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <_svfiprintf_r+0x1f8>)
 8007fa8:	a904      	add	r1, sp, #16
 8007faa:	4638      	mov	r0, r7
 8007fac:	f7fe f83e 	bl	800602c <_printf_i>
 8007fb0:	e7eb      	b.n	8007f8a <_svfiprintf_r+0x1c2>
 8007fb2:	bf00      	nop
 8007fb4:	080089a4 	.word	0x080089a4
 8007fb8:	080089ae 	.word	0x080089ae
 8007fbc:	08005ae5 	.word	0x08005ae5
 8007fc0:	08007d11 	.word	0x08007d11
 8007fc4:	080089aa 	.word	0x080089aa

08007fc8 <__sfputc_r>:
 8007fc8:	6893      	ldr	r3, [r2, #8]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	b410      	push	{r4}
 8007fd0:	6093      	str	r3, [r2, #8]
 8007fd2:	da08      	bge.n	8007fe6 <__sfputc_r+0x1e>
 8007fd4:	6994      	ldr	r4, [r2, #24]
 8007fd6:	42a3      	cmp	r3, r4
 8007fd8:	db01      	blt.n	8007fde <__sfputc_r+0x16>
 8007fda:	290a      	cmp	r1, #10
 8007fdc:	d103      	bne.n	8007fe6 <__sfputc_r+0x1e>
 8007fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fe2:	f7fe b9d1 	b.w	8006388 <__swbuf_r>
 8007fe6:	6813      	ldr	r3, [r2, #0]
 8007fe8:	1c58      	adds	r0, r3, #1
 8007fea:	6010      	str	r0, [r2, #0]
 8007fec:	7019      	strb	r1, [r3, #0]
 8007fee:	4608      	mov	r0, r1
 8007ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <__sfputs_r>:
 8007ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	460f      	mov	r7, r1
 8007ffc:	4614      	mov	r4, r2
 8007ffe:	18d5      	adds	r5, r2, r3
 8008000:	42ac      	cmp	r4, r5
 8008002:	d101      	bne.n	8008008 <__sfputs_r+0x12>
 8008004:	2000      	movs	r0, #0
 8008006:	e007      	b.n	8008018 <__sfputs_r+0x22>
 8008008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800c:	463a      	mov	r2, r7
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff ffda 	bl	8007fc8 <__sfputc_r>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d1f3      	bne.n	8008000 <__sfputs_r+0xa>
 8008018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800801c <_vfiprintf_r>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	460d      	mov	r5, r1
 8008022:	b09d      	sub	sp, #116	; 0x74
 8008024:	4614      	mov	r4, r2
 8008026:	4698      	mov	r8, r3
 8008028:	4606      	mov	r6, r0
 800802a:	b118      	cbz	r0, 8008034 <_vfiprintf_r+0x18>
 800802c:	6983      	ldr	r3, [r0, #24]
 800802e:	b90b      	cbnz	r3, 8008034 <_vfiprintf_r+0x18>
 8008030:	f7fd fb48 	bl	80056c4 <__sinit>
 8008034:	4b89      	ldr	r3, [pc, #548]	; (800825c <_vfiprintf_r+0x240>)
 8008036:	429d      	cmp	r5, r3
 8008038:	d11b      	bne.n	8008072 <_vfiprintf_r+0x56>
 800803a:	6875      	ldr	r5, [r6, #4]
 800803c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800803e:	07d9      	lsls	r1, r3, #31
 8008040:	d405      	bmi.n	800804e <_vfiprintf_r+0x32>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	059a      	lsls	r2, r3, #22
 8008046:	d402      	bmi.n	800804e <_vfiprintf_r+0x32>
 8008048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800804a:	f7fd fbfe 	bl	800584a <__retarget_lock_acquire_recursive>
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	071b      	lsls	r3, r3, #28
 8008052:	d501      	bpl.n	8008058 <_vfiprintf_r+0x3c>
 8008054:	692b      	ldr	r3, [r5, #16]
 8008056:	b9eb      	cbnz	r3, 8008094 <_vfiprintf_r+0x78>
 8008058:	4629      	mov	r1, r5
 800805a:	4630      	mov	r0, r6
 800805c:	f7fe f9f8 	bl	8006450 <__swsetup_r>
 8008060:	b1c0      	cbz	r0, 8008094 <_vfiprintf_r+0x78>
 8008062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008064:	07dc      	lsls	r4, r3, #31
 8008066:	d50e      	bpl.n	8008086 <_vfiprintf_r+0x6a>
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	b01d      	add	sp, #116	; 0x74
 800806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008072:	4b7b      	ldr	r3, [pc, #492]	; (8008260 <_vfiprintf_r+0x244>)
 8008074:	429d      	cmp	r5, r3
 8008076:	d101      	bne.n	800807c <_vfiprintf_r+0x60>
 8008078:	68b5      	ldr	r5, [r6, #8]
 800807a:	e7df      	b.n	800803c <_vfiprintf_r+0x20>
 800807c:	4b79      	ldr	r3, [pc, #484]	; (8008264 <_vfiprintf_r+0x248>)
 800807e:	429d      	cmp	r5, r3
 8008080:	bf08      	it	eq
 8008082:	68f5      	ldreq	r5, [r6, #12]
 8008084:	e7da      	b.n	800803c <_vfiprintf_r+0x20>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	0598      	lsls	r0, r3, #22
 800808a:	d4ed      	bmi.n	8008068 <_vfiprintf_r+0x4c>
 800808c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800808e:	f7fd fbdd 	bl	800584c <__retarget_lock_release_recursive>
 8008092:	e7e9      	b.n	8008068 <_vfiprintf_r+0x4c>
 8008094:	2300      	movs	r3, #0
 8008096:	9309      	str	r3, [sp, #36]	; 0x24
 8008098:	2320      	movs	r3, #32
 800809a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800809e:	f8cd 800c 	str.w	r8, [sp, #12]
 80080a2:	2330      	movs	r3, #48	; 0x30
 80080a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008268 <_vfiprintf_r+0x24c>
 80080a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ac:	f04f 0901 	mov.w	r9, #1
 80080b0:	4623      	mov	r3, r4
 80080b2:	469a      	mov	sl, r3
 80080b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b8:	b10a      	cbz	r2, 80080be <_vfiprintf_r+0xa2>
 80080ba:	2a25      	cmp	r2, #37	; 0x25
 80080bc:	d1f9      	bne.n	80080b2 <_vfiprintf_r+0x96>
 80080be:	ebba 0b04 	subs.w	fp, sl, r4
 80080c2:	d00b      	beq.n	80080dc <_vfiprintf_r+0xc0>
 80080c4:	465b      	mov	r3, fp
 80080c6:	4622      	mov	r2, r4
 80080c8:	4629      	mov	r1, r5
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7ff ff93 	bl	8007ff6 <__sfputs_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	f000 80aa 	beq.w	800822a <_vfiprintf_r+0x20e>
 80080d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d8:	445a      	add	r2, fp
 80080da:	9209      	str	r2, [sp, #36]	; 0x24
 80080dc:	f89a 3000 	ldrb.w	r3, [sl]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80a2 	beq.w	800822a <_vfiprintf_r+0x20e>
 80080e6:	2300      	movs	r3, #0
 80080e8:	f04f 32ff 	mov.w	r2, #4294967295
 80080ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080f0:	f10a 0a01 	add.w	sl, sl, #1
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	9307      	str	r3, [sp, #28]
 80080f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080fc:	931a      	str	r3, [sp, #104]	; 0x68
 80080fe:	4654      	mov	r4, sl
 8008100:	2205      	movs	r2, #5
 8008102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008106:	4858      	ldr	r0, [pc, #352]	; (8008268 <_vfiprintf_r+0x24c>)
 8008108:	f7f8 f86a 	bl	80001e0 <memchr>
 800810c:	9a04      	ldr	r2, [sp, #16]
 800810e:	b9d8      	cbnz	r0, 8008148 <_vfiprintf_r+0x12c>
 8008110:	06d1      	lsls	r1, r2, #27
 8008112:	bf44      	itt	mi
 8008114:	2320      	movmi	r3, #32
 8008116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800811a:	0713      	lsls	r3, r2, #28
 800811c:	bf44      	itt	mi
 800811e:	232b      	movmi	r3, #43	; 0x2b
 8008120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008124:	f89a 3000 	ldrb.w	r3, [sl]
 8008128:	2b2a      	cmp	r3, #42	; 0x2a
 800812a:	d015      	beq.n	8008158 <_vfiprintf_r+0x13c>
 800812c:	9a07      	ldr	r2, [sp, #28]
 800812e:	4654      	mov	r4, sl
 8008130:	2000      	movs	r0, #0
 8008132:	f04f 0c0a 	mov.w	ip, #10
 8008136:	4621      	mov	r1, r4
 8008138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800813c:	3b30      	subs	r3, #48	; 0x30
 800813e:	2b09      	cmp	r3, #9
 8008140:	d94e      	bls.n	80081e0 <_vfiprintf_r+0x1c4>
 8008142:	b1b0      	cbz	r0, 8008172 <_vfiprintf_r+0x156>
 8008144:	9207      	str	r2, [sp, #28]
 8008146:	e014      	b.n	8008172 <_vfiprintf_r+0x156>
 8008148:	eba0 0308 	sub.w	r3, r0, r8
 800814c:	fa09 f303 	lsl.w	r3, r9, r3
 8008150:	4313      	orrs	r3, r2
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	46a2      	mov	sl, r4
 8008156:	e7d2      	b.n	80080fe <_vfiprintf_r+0xe2>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	1d19      	adds	r1, r3, #4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	9103      	str	r1, [sp, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	bfbb      	ittet	lt
 8008164:	425b      	neglt	r3, r3
 8008166:	f042 0202 	orrlt.w	r2, r2, #2
 800816a:	9307      	strge	r3, [sp, #28]
 800816c:	9307      	strlt	r3, [sp, #28]
 800816e:	bfb8      	it	lt
 8008170:	9204      	strlt	r2, [sp, #16]
 8008172:	7823      	ldrb	r3, [r4, #0]
 8008174:	2b2e      	cmp	r3, #46	; 0x2e
 8008176:	d10c      	bne.n	8008192 <_vfiprintf_r+0x176>
 8008178:	7863      	ldrb	r3, [r4, #1]
 800817a:	2b2a      	cmp	r3, #42	; 0x2a
 800817c:	d135      	bne.n	80081ea <_vfiprintf_r+0x1ce>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	1d1a      	adds	r2, r3, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	9203      	str	r2, [sp, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfb8      	it	lt
 800818a:	f04f 33ff 	movlt.w	r3, #4294967295
 800818e:	3402      	adds	r4, #2
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008278 <_vfiprintf_r+0x25c>
 8008196:	7821      	ldrb	r1, [r4, #0]
 8008198:	2203      	movs	r2, #3
 800819a:	4650      	mov	r0, sl
 800819c:	f7f8 f820 	bl	80001e0 <memchr>
 80081a0:	b140      	cbz	r0, 80081b4 <_vfiprintf_r+0x198>
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	eba0 000a 	sub.w	r0, r0, sl
 80081a8:	fa03 f000 	lsl.w	r0, r3, r0
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	4303      	orrs	r3, r0
 80081b0:	3401      	adds	r4, #1
 80081b2:	9304      	str	r3, [sp, #16]
 80081b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b8:	482c      	ldr	r0, [pc, #176]	; (800826c <_vfiprintf_r+0x250>)
 80081ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081be:	2206      	movs	r2, #6
 80081c0:	f7f8 f80e 	bl	80001e0 <memchr>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d03f      	beq.n	8008248 <_vfiprintf_r+0x22c>
 80081c8:	4b29      	ldr	r3, [pc, #164]	; (8008270 <_vfiprintf_r+0x254>)
 80081ca:	bb1b      	cbnz	r3, 8008214 <_vfiprintf_r+0x1f8>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	3307      	adds	r3, #7
 80081d0:	f023 0307 	bic.w	r3, r3, #7
 80081d4:	3308      	adds	r3, #8
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081da:	443b      	add	r3, r7
 80081dc:	9309      	str	r3, [sp, #36]	; 0x24
 80081de:	e767      	b.n	80080b0 <_vfiprintf_r+0x94>
 80081e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e4:	460c      	mov	r4, r1
 80081e6:	2001      	movs	r0, #1
 80081e8:	e7a5      	b.n	8008136 <_vfiprintf_r+0x11a>
 80081ea:	2300      	movs	r3, #0
 80081ec:	3401      	adds	r4, #1
 80081ee:	9305      	str	r3, [sp, #20]
 80081f0:	4619      	mov	r1, r3
 80081f2:	f04f 0c0a 	mov.w	ip, #10
 80081f6:	4620      	mov	r0, r4
 80081f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081fc:	3a30      	subs	r2, #48	; 0x30
 80081fe:	2a09      	cmp	r2, #9
 8008200:	d903      	bls.n	800820a <_vfiprintf_r+0x1ee>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0c5      	beq.n	8008192 <_vfiprintf_r+0x176>
 8008206:	9105      	str	r1, [sp, #20]
 8008208:	e7c3      	b.n	8008192 <_vfiprintf_r+0x176>
 800820a:	fb0c 2101 	mla	r1, ip, r1, r2
 800820e:	4604      	mov	r4, r0
 8008210:	2301      	movs	r3, #1
 8008212:	e7f0      	b.n	80081f6 <_vfiprintf_r+0x1da>
 8008214:	ab03      	add	r3, sp, #12
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	462a      	mov	r2, r5
 800821a:	4b16      	ldr	r3, [pc, #88]	; (8008274 <_vfiprintf_r+0x258>)
 800821c:	a904      	add	r1, sp, #16
 800821e:	4630      	mov	r0, r6
 8008220:	f7fd fc60 	bl	8005ae4 <_printf_float>
 8008224:	4607      	mov	r7, r0
 8008226:	1c78      	adds	r0, r7, #1
 8008228:	d1d6      	bne.n	80081d8 <_vfiprintf_r+0x1bc>
 800822a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800822c:	07d9      	lsls	r1, r3, #31
 800822e:	d405      	bmi.n	800823c <_vfiprintf_r+0x220>
 8008230:	89ab      	ldrh	r3, [r5, #12]
 8008232:	059a      	lsls	r2, r3, #22
 8008234:	d402      	bmi.n	800823c <_vfiprintf_r+0x220>
 8008236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008238:	f7fd fb08 	bl	800584c <__retarget_lock_release_recursive>
 800823c:	89ab      	ldrh	r3, [r5, #12]
 800823e:	065b      	lsls	r3, r3, #25
 8008240:	f53f af12 	bmi.w	8008068 <_vfiprintf_r+0x4c>
 8008244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008246:	e711      	b.n	800806c <_vfiprintf_r+0x50>
 8008248:	ab03      	add	r3, sp, #12
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	462a      	mov	r2, r5
 800824e:	4b09      	ldr	r3, [pc, #36]	; (8008274 <_vfiprintf_r+0x258>)
 8008250:	a904      	add	r1, sp, #16
 8008252:	4630      	mov	r0, r6
 8008254:	f7fd feea 	bl	800602c <_printf_i>
 8008258:	e7e4      	b.n	8008224 <_vfiprintf_r+0x208>
 800825a:	bf00      	nop
 800825c:	08008708 	.word	0x08008708
 8008260:	08008728 	.word	0x08008728
 8008264:	080086e8 	.word	0x080086e8
 8008268:	080089a4 	.word	0x080089a4
 800826c:	080089ae 	.word	0x080089ae
 8008270:	08005ae5 	.word	0x08005ae5
 8008274:	08007ff7 	.word	0x08007ff7
 8008278:	080089aa 	.word	0x080089aa

0800827c <_read_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d07      	ldr	r5, [pc, #28]	; (800829c <_read_r+0x20>)
 8008280:	4604      	mov	r4, r0
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	2200      	movs	r2, #0
 8008288:	602a      	str	r2, [r5, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	f7fd f8ad 	bl	80053ea <_read>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_read_r+0x1e>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_read_r+0x1e>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	2000065c 	.word	0x2000065c

080082a0 <abort>:
 80082a0:	b508      	push	{r3, lr}
 80082a2:	2006      	movs	r0, #6
 80082a4:	f000 f8aa 	bl	80083fc <raise>
 80082a8:	2001      	movs	r0, #1
 80082aa:	f000 f8e1 	bl	8008470 <_exit>
	...

080082b0 <_fstat_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d07      	ldr	r5, [pc, #28]	; (80082d0 <_fstat_r+0x20>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	602b      	str	r3, [r5, #0]
 80082be:	f7fd f978 	bl	80055b2 <_fstat>
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	d102      	bne.n	80082cc <_fstat_r+0x1c>
 80082c6:	682b      	ldr	r3, [r5, #0]
 80082c8:	b103      	cbz	r3, 80082cc <_fstat_r+0x1c>
 80082ca:	6023      	str	r3, [r4, #0]
 80082cc:	bd38      	pop	{r3, r4, r5, pc}
 80082ce:	bf00      	nop
 80082d0:	2000065c 	.word	0x2000065c

080082d4 <_isatty_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d06      	ldr	r5, [pc, #24]	; (80082f0 <_isatty_r+0x1c>)
 80082d8:	2300      	movs	r3, #0
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	f7fd f975 	bl	80055ce <_isatty>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_isatty_r+0x1a>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_isatty_r+0x1a>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	2000065c 	.word	0x2000065c

080082f4 <__ascii_mbtowc>:
 80082f4:	b082      	sub	sp, #8
 80082f6:	b901      	cbnz	r1, 80082fa <__ascii_mbtowc+0x6>
 80082f8:	a901      	add	r1, sp, #4
 80082fa:	b142      	cbz	r2, 800830e <__ascii_mbtowc+0x1a>
 80082fc:	b14b      	cbz	r3, 8008312 <__ascii_mbtowc+0x1e>
 80082fe:	7813      	ldrb	r3, [r2, #0]
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	1e10      	subs	r0, r2, #0
 8008306:	bf18      	it	ne
 8008308:	2001      	movne	r0, #1
 800830a:	b002      	add	sp, #8
 800830c:	4770      	bx	lr
 800830e:	4610      	mov	r0, r2
 8008310:	e7fb      	b.n	800830a <__ascii_mbtowc+0x16>
 8008312:	f06f 0001 	mvn.w	r0, #1
 8008316:	e7f8      	b.n	800830a <__ascii_mbtowc+0x16>

08008318 <memmove>:
 8008318:	4288      	cmp	r0, r1
 800831a:	b510      	push	{r4, lr}
 800831c:	eb01 0402 	add.w	r4, r1, r2
 8008320:	d902      	bls.n	8008328 <memmove+0x10>
 8008322:	4284      	cmp	r4, r0
 8008324:	4623      	mov	r3, r4
 8008326:	d807      	bhi.n	8008338 <memmove+0x20>
 8008328:	1e43      	subs	r3, r0, #1
 800832a:	42a1      	cmp	r1, r4
 800832c:	d008      	beq.n	8008340 <memmove+0x28>
 800832e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008336:	e7f8      	b.n	800832a <memmove+0x12>
 8008338:	4402      	add	r2, r0
 800833a:	4601      	mov	r1, r0
 800833c:	428a      	cmp	r2, r1
 800833e:	d100      	bne.n	8008342 <memmove+0x2a>
 8008340:	bd10      	pop	{r4, pc}
 8008342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800834a:	e7f7      	b.n	800833c <memmove+0x24>

0800834c <_realloc_r>:
 800834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008350:	4680      	mov	r8, r0
 8008352:	4614      	mov	r4, r2
 8008354:	460e      	mov	r6, r1
 8008356:	b921      	cbnz	r1, 8008362 <_realloc_r+0x16>
 8008358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835c:	4611      	mov	r1, r2
 800835e:	f7fd baad 	b.w	80058bc <_malloc_r>
 8008362:	b92a      	cbnz	r2, 8008370 <_realloc_r+0x24>
 8008364:	f7ff fc88 	bl	8007c78 <_free_r>
 8008368:	4625      	mov	r5, r4
 800836a:	4628      	mov	r0, r5
 800836c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008370:	f000 f86d 	bl	800844e <_malloc_usable_size_r>
 8008374:	4284      	cmp	r4, r0
 8008376:	4607      	mov	r7, r0
 8008378:	d802      	bhi.n	8008380 <_realloc_r+0x34>
 800837a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800837e:	d812      	bhi.n	80083a6 <_realloc_r+0x5a>
 8008380:	4621      	mov	r1, r4
 8008382:	4640      	mov	r0, r8
 8008384:	f7fd fa9a 	bl	80058bc <_malloc_r>
 8008388:	4605      	mov	r5, r0
 800838a:	2800      	cmp	r0, #0
 800838c:	d0ed      	beq.n	800836a <_realloc_r+0x1e>
 800838e:	42bc      	cmp	r4, r7
 8008390:	4622      	mov	r2, r4
 8008392:	4631      	mov	r1, r6
 8008394:	bf28      	it	cs
 8008396:	463a      	movcs	r2, r7
 8008398:	f7fd fa59 	bl	800584e <memcpy>
 800839c:	4631      	mov	r1, r6
 800839e:	4640      	mov	r0, r8
 80083a0:	f7ff fc6a 	bl	8007c78 <_free_r>
 80083a4:	e7e1      	b.n	800836a <_realloc_r+0x1e>
 80083a6:	4635      	mov	r5, r6
 80083a8:	e7df      	b.n	800836a <_realloc_r+0x1e>

080083aa <_raise_r>:
 80083aa:	291f      	cmp	r1, #31
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4604      	mov	r4, r0
 80083b0:	460d      	mov	r5, r1
 80083b2:	d904      	bls.n	80083be <_raise_r+0x14>
 80083b4:	2316      	movs	r3, #22
 80083b6:	6003      	str	r3, [r0, #0]
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083c0:	b112      	cbz	r2, 80083c8 <_raise_r+0x1e>
 80083c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083c6:	b94b      	cbnz	r3, 80083dc <_raise_r+0x32>
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 f831 	bl	8008430 <_getpid_r>
 80083ce:	462a      	mov	r2, r5
 80083d0:	4601      	mov	r1, r0
 80083d2:	4620      	mov	r0, r4
 80083d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083d8:	f000 b818 	b.w	800840c <_kill_r>
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d00a      	beq.n	80083f6 <_raise_r+0x4c>
 80083e0:	1c59      	adds	r1, r3, #1
 80083e2:	d103      	bne.n	80083ec <_raise_r+0x42>
 80083e4:	2316      	movs	r3, #22
 80083e6:	6003      	str	r3, [r0, #0]
 80083e8:	2001      	movs	r0, #1
 80083ea:	e7e7      	b.n	80083bc <_raise_r+0x12>
 80083ec:	2400      	movs	r4, #0
 80083ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083f2:	4628      	mov	r0, r5
 80083f4:	4798      	blx	r3
 80083f6:	2000      	movs	r0, #0
 80083f8:	e7e0      	b.n	80083bc <_raise_r+0x12>
	...

080083fc <raise>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <raise+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f7ff bfd2 	b.w	80083aa <_raise_r>
 8008406:	bf00      	nop
 8008408:	200000d4 	.word	0x200000d4

0800840c <_kill_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	; (800842c <_kill_r+0x20>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f000 f821 	bl	8008460 <_kill>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_kill_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_kill_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	2000065c 	.word	0x2000065c

08008430 <_getpid_r>:
 8008430:	f7fd b89c 	b.w	800556c <_getpid>

08008434 <__ascii_wctomb>:
 8008434:	b149      	cbz	r1, 800844a <__ascii_wctomb+0x16>
 8008436:	2aff      	cmp	r2, #255	; 0xff
 8008438:	bf85      	ittet	hi
 800843a:	238a      	movhi	r3, #138	; 0x8a
 800843c:	6003      	strhi	r3, [r0, #0]
 800843e:	700a      	strbls	r2, [r1, #0]
 8008440:	f04f 30ff 	movhi.w	r0, #4294967295
 8008444:	bf98      	it	ls
 8008446:	2001      	movls	r0, #1
 8008448:	4770      	bx	lr
 800844a:	4608      	mov	r0, r1
 800844c:	4770      	bx	lr

0800844e <_malloc_usable_size_r>:
 800844e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008452:	1f18      	subs	r0, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfbc      	itt	lt
 8008458:	580b      	ldrlt	r3, [r1, r0]
 800845a:	18c0      	addlt	r0, r0, r3
 800845c:	4770      	bx	lr
	...

08008460 <_kill>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <_kill+0xc>)
 8008462:	2258      	movs	r2, #88	; 0x58
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	4770      	bx	lr
 800846c:	2000065c 	.word	0x2000065c

08008470 <_exit>:
 8008470:	e7fe      	b.n	8008470 <_exit>
	...

08008474 <_init>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr

08008480 <_fini>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr
