
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08008260  08008260  00018260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008878  08008878  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008880  08008880  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  08008888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200002a4  08008b2c  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08008b2c  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9fc  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  0002ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000314d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00032238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029385  00000000  00000000  00032e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001197c  00000000  00000000  0005c1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5f3b  00000000  00000000  0006db29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163a64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a24  00000000  00000000  00163ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001684d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  001684fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a4 	.word	0x200002a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008244 	.word	0x08008244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a8 	.word	0x200002a8
 80001cc:	08008244 	.word	0x08008244

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  External Interrupt to detect 1st button press and 2nd button press
 * @note
 * @retval	None
 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag == 0)) {
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ebc:	d10e      	bne.n	8000edc <HAL_GPIO_EXTI_Callback+0x30>
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10a      	bne.n	8000edc <HAL_GPIO_EXTI_Callback+0x30>
		flag++;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ed0:	701a      	strb	r2, [r3, #0]
		T1 = uwTick;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ed8:	6013      	str	r3, [r2, #0]
	} else if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag > 0)) {
		flag++;
		T2 = uwTick;
	}
}
 8000eda:	e011      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
	} else if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag > 0)) {
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee2:	d10d      	bne.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <HAL_GPIO_EXTI_Callback+0x54>
		flag++;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000ef6:	701a      	strb	r2, [r3, #0]
		T2 = uwTick;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000348 	.word	0x20000348
 8000f10:	200005a0 	.word	0x200005a0
 8000f14:	200002c0 	.word	0x200002c0
 8000f18:	200002c4 	.word	0x200002c4

08000f1c <main>:

int main(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

	// initialise_monitor_handles();

	/* Reset of all peripherals */
	HAL_Init();
 8000f20:	f002 f8a4 	bl	800306c <HAL_Init>
	MX_GPIO_Init(); // initialize PB14, pin connected to LED2
 8000f24:	f000 fdb0 	bl	8001a88 <MX_GPIO_Init>
	UART1_Init(); // initialize UART1 for UART communication
 8000f28:	f000 fe28 	bl	8001b7c <UART1_Init>

	/* Peripheral initializations using BSP functions for all sensors*/
	BSP_ACCELERO_Init(); // initialize accelerometer
 8000f2c:	f001 f9ae 	bl	800228c <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();	 // initialize temperature sensor
 8000f30:	f001 fafc 	bl	800252c <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();	 // initialize humidity sensor
 8000f34:	f001 fa5a 	bl	80023ec <BSP_HSENSOR_Init>
	BSP_GYRO_Init();	 // initialize gyroscope
 8000f38:	f001 f9fe 	bl	8002338 <BSP_GYRO_Init>
	BSP_PSENSOR_Init();	 // initialize pressure sensor
 8000f3c:	f001 fac8 	bl	80024d0 <BSP_PSENSOR_Init>
	BSP_MAGNETO_Init();	 // initialize magnetometer
 8000f40:	f001 fa82 	bl	8002448 <BSP_MAGNETO_Init>
	/* sensor interrupt configuration*/
	// 		accelero_interrupt_config();
	/*enable NVIC EXTI interrupt*/
	// 		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	/* Exploration Mode: Print only once*/
	memset(message_print, 0, strlen(message_print));
 8000f44:	481f      	ldr	r0, [pc, #124]	; (8000fc4 <main+0xa8>)
 8000f46:	f7ff f943 	bl	80001d0 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <main+0xa8>)
 8000f52:	f004 fb86 	bl	8005662 <memset>
	sprintf(message_print, "Entering EXPLORATION Mode \r\n");
 8000f56:	491c      	ldr	r1, [pc, #112]	; (8000fc8 <main+0xac>)
 8000f58:	481a      	ldr	r0, [pc, #104]	; (8000fc4 <main+0xa8>)
 8000f5a:	f005 f899 	bl	8006090 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print),
 8000f5e:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <main+0xa8>)
 8000f60:	f7ff f936 	bl	80001d0 <strlen>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6c:	4915      	ldr	r1, [pc, #84]	; (8000fc4 <main+0xa8>)
 8000f6e:	4817      	ldr	r0, [pc, #92]	; (8000fcc <main+0xb0>)
 8000f70:	f003 fb64 	bl	800463c <HAL_UART_Transmit>
			0xFFFF);

	while (1) {
		if ((flag == 1) && (uwTick - T1 > 1000)) {
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <main+0xb4>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d10d      	bne.n	8000f98 <main+0x7c>
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <main+0xb8>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <main+0xbc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f8a:	d905      	bls.n	8000f98 <main+0x7c>
			// Detect a single press
			flag = 0;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <main+0xb4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
			press = 1;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <main+0xc0>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
		}

		if ((flag == 2) && (T2 - T1 < 1000)) {
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <main+0xb4>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d10d      	bne.n	8000fbc <main+0xa0>
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <main+0xc4>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <main+0xbc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fae:	d205      	bcs.n	8000fbc <main+0xa0>
			// Detect double press
			press = 2;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <main+0xc0>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	701a      	strb	r2, [r3, #0]
			flag = 0;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <main+0xb4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
		}
		mode_selection();
 8000fbc:	f000 f812 	bl	8000fe4 <mode_selection>
		if ((flag == 1) && (uwTick - T1 > 1000)) {
 8000fc0:	e7d8      	b.n	8000f74 <main+0x58>
 8000fc2:	bf00      	nop
 8000fc4:	20000350 	.word	0x20000350
 8000fc8:	08008260 	.word	0x08008260
 8000fcc:	200002c8 	.word	0x200002c8
 8000fd0:	20000348 	.word	0x20000348
 8000fd4:	200005a0 	.word	0x200005a0
 8000fd8:	200002c0 	.word	0x200002c0
 8000fdc:	20000349 	.word	0x20000349
 8000fe0:	200002c4 	.word	0x200002c4

08000fe4 <mode_selection>:
 *			different states such as Normal and Warning in the respective modes.
 * @note
 *
 * @retval	None
 */
static void mode_selection() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	/* Exploration Mode */
	if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 0 && BATTLE == 0
 8000fe8:	4b64      	ldr	r3, [pc, #400]	; (800117c <mode_selection+0x198>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d111      	bne.n	8001014 <mode_selection+0x30>
 8000ff0:	4b63      	ldr	r3, [pc, #396]	; (8001180 <mode_selection+0x19c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10d      	bne.n	8001014 <mode_selection+0x30>
 8000ff8:	4b62      	ldr	r3, [pc, #392]	; (8001184 <mode_selection+0x1a0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <mode_selection+0x30>
			&& press <= 1) {
 8001000:	4b61      	ldr	r3, [pc, #388]	; (8001188 <mode_selection+0x1a4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d805      	bhi.n	8001014 <mode_selection+0x30>
		// Normal state
		exploration();
 8001008:	f000 f8c8 	bl	800119c <exploration>
		press = 0;
 800100c:	4b5e      	ldr	r3, [pc, #376]	; (8001188 <mode_selection+0x1a4>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e04e      	b.n	80010b2 <mode_selection+0xce>
	} else if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 1) {
 8001014:	4b59      	ldr	r3, [pc, #356]	; (800117c <mode_selection+0x198>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d11b      	bne.n	8001054 <mode_selection+0x70>
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <mode_selection+0x19c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d117      	bne.n	8001054 <mode_selection+0x70>
		// Come to the Warning State through interrupts or polling
		exploration_warning();
 8001024:	f000 fb20 	bl	8001668 <exploration_warning>
		if (press == 1) {
 8001028:	4b57      	ldr	r3, [pc, #348]	; (8001188 <mode_selection+0x1a4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d109      	bne.n	8001044 <mode_selection+0x60>
			// Clear the warning and go back to Exploration mode
			EXPLORATION_WARNING_STATE = 0;
 8001030:	4b53      	ldr	r3, [pc, #332]	; (8001180 <mode_selection+0x19c>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
			EXPLORATION = 1;
 8001036:	4b51      	ldr	r3, [pc, #324]	; (800117c <mode_selection+0x198>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
			press = 0;
 800103c:	4b52      	ldr	r3, [pc, #328]	; (8001188 <mode_selection+0x1a4>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001042:	e035      	b.n	80010b0 <mode_selection+0xcc>
		} else if (press == 2) {
 8001044:	4b50      	ldr	r3, [pc, #320]	; (8001188 <mode_selection+0x1a4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d131      	bne.n	80010b0 <mode_selection+0xcc>
			// Ignore it
			press = 0;
 800104c:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <mode_selection+0x1a4>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001052:	e02d      	b.n	80010b0 <mode_selection+0xcc>
		}
	} else if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 0
 8001054:	4b49      	ldr	r3, [pc, #292]	; (800117c <mode_selection+0x198>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d12a      	bne.n	80010b2 <mode_selection+0xce>
 800105c:	4b48      	ldr	r3, [pc, #288]	; (8001180 <mode_selection+0x19c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d126      	bne.n	80010b2 <mode_selection+0xce>
			&& press == 2) {
 8001064:	4b48      	ldr	r3, [pc, #288]	; (8001188 <mode_selection+0x1a4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d122      	bne.n	80010b2 <mode_selection+0xce>
		// Change to Battle Mode
		/* A message "Entering BATTLE mode" is sent once to Cyrix's Lab once
		 * immediately upon entering the BATTLE mode.
		 * The press flag is cleared later in mode_selection()
		 */
		memset(message_print, 0, strlen(message_print));
 800106c:	4847      	ldr	r0, [pc, #284]	; (800118c <mode_selection+0x1a8>)
 800106e:	f7ff f8af 	bl	80001d0 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	2100      	movs	r1, #0
 8001078:	4844      	ldr	r0, [pc, #272]	; (800118c <mode_selection+0x1a8>)
 800107a:	f004 faf2 	bl	8005662 <memset>
		sprintf(message_print, "Entering BATTLE Mode \r\n");
 800107e:	4944      	ldr	r1, [pc, #272]	; (8001190 <mode_selection+0x1ac>)
 8001080:	4842      	ldr	r0, [pc, #264]	; (800118c <mode_selection+0x1a8>)
 8001082:	f005 f805 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001086:	4841      	ldr	r0, [pc, #260]	; (800118c <mode_selection+0x1a8>)
 8001088:	f7ff f8a2 	bl	80001d0 <strlen>
 800108c:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800108e:	b29a      	uxth	r2, r3
 8001090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001094:	493d      	ldr	r1, [pc, #244]	; (800118c <mode_selection+0x1a8>)
 8001096:	483f      	ldr	r0, [pc, #252]	; (8001194 <mode_selection+0x1b0>)
 8001098:	f003 fad0 	bl	800463c <HAL_UART_Transmit>

		EXPLORATION = 0;
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <mode_selection+0x198>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		BATTLE = 1;
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <mode_selection+0x1a0>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
		press = 0;
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <mode_selection+0x1a4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e000      	b.n	80010b2 <mode_selection+0xce>
		if (press == 1) {
 80010b0:	bf00      	nop
	}

	/* Battle Mode */
	if (EXPLORATION == 0 && BATTLE_WARNING_STATE == 0 && BATTLE == 1
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <mode_selection+0x198>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d111      	bne.n	80010de <mode_selection+0xfa>
 80010ba:	4b37      	ldr	r3, [pc, #220]	; (8001198 <mode_selection+0x1b4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10d      	bne.n	80010de <mode_selection+0xfa>
 80010c2:	4b30      	ldr	r3, [pc, #192]	; (8001184 <mode_selection+0x1a0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d109      	bne.n	80010de <mode_selection+0xfa>
			&& press <= 1) {
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <mode_selection+0x1a4>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d805      	bhi.n	80010de <mode_selection+0xfa>
		// Battle state
		battle();
 80010d2:	f000 fb03 	bl	80016dc <battle>
		press = 0;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <mode_selection+0x1a4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e04b      	b.n	8001176 <mode_selection+0x192>
	} else if (EXPLORATION == 0 && BATTLE_WARNING_STATE == 0 && BATTLE == 1
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <mode_selection+0x198>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d112      	bne.n	800110c <mode_selection+0x128>
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <mode_selection+0x1b4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10e      	bne.n	800110c <mode_selection+0x128>
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <mode_selection+0x1a0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10a      	bne.n	800110c <mode_selection+0x128>
			&& press == 1) {
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <mode_selection+0x1a4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d106      	bne.n	800110c <mode_selection+0x128>
		 * 	i.e., when Pixie is not sending 'SOS' message to Cyrix,
		 * 	single press triggers BATTERY_CHARGING,
		 * 	i.e., after single press, Fluxer is charged with 1/10 energy
		 * 	of its capacity.*/
		// charge_battery();
		BATTLE = 1;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <mode_selection+0x1a0>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
		press = 0; // reset the press flag
 8001104:	4b20      	ldr	r3, [pc, #128]	; (8001188 <mode_selection+0x1a4>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e034      	b.n	8001176 <mode_selection+0x192>
	} else if (BATTLE == 1 && BATTLE_WARNING_STATE == 1) {
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <mode_selection+0x1a0>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d119      	bne.n	8001148 <mode_selection+0x164>
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <mode_selection+0x1b4>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d115      	bne.n	8001148 <mode_selection+0x164>
		if (press == 1) {
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <mode_selection+0x1a4>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d109      	bne.n	8001138 <mode_selection+0x154>
			// Clear the warning and go back to Battle mode
			BATTLE_WARNING_STATE = 0;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <mode_selection+0x1b4>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
			BATTLE = 1;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <mode_selection+0x1a0>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
			press = 0;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <mode_selection+0x1a4>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001136:	e01d      	b.n	8001174 <mode_selection+0x190>
		} else if (press == 2) {
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <mode_selection+0x1a4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d119      	bne.n	8001174 <mode_selection+0x190>
			// Ignore it
			press = 0;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <mode_selection+0x1a4>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8001146:	e015      	b.n	8001174 <mode_selection+0x190>
		}
	} else if (BATTLE == 1 && BATTLE_WARNING_STATE == 0 && press == 2) {
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <mode_selection+0x1a0>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d112      	bne.n	8001176 <mode_selection+0x192>
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <mode_selection+0x1b4>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10e      	bne.n	8001176 <mode_selection+0x192>
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <mode_selection+0x1a4>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d10a      	bne.n	8001176 <mode_selection+0x192>
		// Change to EXPLORATION Mode
		BATTLE = 0;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <mode_selection+0x1a0>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
		EXPLORATION = 1;
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <mode_selection+0x198>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
		press = 0;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <mode_selection+0x1a4>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
	}
}
 8001172:	e000      	b.n	8001176 <mode_selection+0x192>
		if (press == 1) {
 8001174:	bf00      	nop
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000000 	.word	0x20000000
 8001180:	2000034a 	.word	0x2000034a
 8001184:	2000034b 	.word	0x2000034b
 8001188:	20000349 	.word	0x20000349
 800118c:	20000350 	.word	0x20000350
 8001190:	08008280 	.word	0x08008280
 8001194:	200002c8 	.word	0x200002c8
 8001198:	2000034c 	.word	0x2000034c

0800119c <exploration>:
 * 			are send to Cyrix lab periodically.
 * @note	The sensors are grouped in a struct for easier data manipulation.
 * @retval	None
 */

static void exploration(void) {
 800119c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011a0:	b098      	sub	sp, #96	; 0x60
 80011a2:	af0e      	add	r7, sp, #56	; 0x38
	// In EXPLORATION MODE, only those sensors mounted on Pixie are read periodically every ONE second
	if (HAL_GetTick() - time_EXPLORATION_SENSOR > 1000) {
 80011a4:	f001 ffc6 	bl	8003134 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4bba      	ldr	r3, [pc, #744]	; (8001494 <exploration+0x2f8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b4:	f240 80e2 	bls.w	800137c <exploration+0x1e0>

		// Reset variables
		sensor_data_t_exploration.humidity_data = 0;
 80011b8:	4bb7      	ldr	r3, [pc, #732]	; (8001498 <exploration+0x2fc>)
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
		sensor_data_t_exploration.pressure_data = 0;
 80011c0:	4bb5      	ldr	r3, [pc, #724]	; (8001498 <exploration+0x2fc>)
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
		sensor_data_t_exploration.magnetometer_raw_data[3] = 0;
 80011c8:	4bb3      	ldr	r3, [pc, #716]	; (8001498 <exploration+0x2fc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	835a      	strh	r2, [r3, #26]
		sensor_data_t_exploration.magnetometer_data[3] = 0;
 80011ce:	4bb2      	ldr	r3, [pc, #712]	; (8001498 <exploration+0x2fc>)
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
		sensor_data_t_exploration.gyroscope_raw_data[3] = 0;
 80011d6:	4bb0      	ldr	r3, [pc, #704]	; (8001498 <exploration+0x2fc>)
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	649a      	str	r2, [r3, #72]	; 0x48
		sensor_data_t_exploration.gyroscope_data[3] = 0;
 80011de:	4bae      	ldr	r3, [pc, #696]	; (8001498 <exploration+0x2fc>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54

		// Read Humidity readings
		sensor_data_t_exploration.humidity_data = BSP_HSENSOR_ReadHumidity();
 80011e6:	f001 f921 	bl	800242c <BSP_HSENSOR_ReadHumidity>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	4baa      	ldr	r3, [pc, #680]	; (8001498 <exploration+0x2fc>)
 80011f0:	edc3 7a02 	vstr	s15, [r3, #8]
		// Read the pressure in units (Pascal)
		// One hectopascal(hPa) is equal to exactly 100 Pascals.
		sensor_data_t_exploration.pressure_data = BSP_PSENSOR_ReadPressure()
 80011f4:	f001 f98c 	bl	8002510 <BSP_PSENSOR_ReadPressure>
 80011f8:	eef0 7a40 	vmov.f32	s15, s0
				* 100.0f;
 80011fc:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800149c <exploration+0x300>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
		sensor_data_t_exploration.pressure_data = BSP_PSENSOR_ReadPressure()
 8001204:	4ba4      	ldr	r3, [pc, #656]	; (8001498 <exploration+0x2fc>)
 8001206:	edc3 7a03 	vstr	s15, [r3, #12]

		// Pass in the memory address to pDataXYZ Pointer to get XYZ magnetometer values.
		BSP_MAGNETO_GetXYZ(sensor_data_t_exploration.magnetometer_raw_data);
 800120a:	48a5      	ldr	r0, [pc, #660]	; (80014a0 <exploration+0x304>)
 800120c:	f001 f948 	bl	80024a0 <BSP_MAGNETO_GetXYZ>

		sensor_data_t_exploration.magnetometer_data[0] =
				(float) sensor_data_t_exploration.magnetometer_raw_data[0]
 8001210:	4ba1      	ldr	r3, [pc, #644]	; (8001498 <exploration+0x2fc>)
 8001212:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						/ 1000.0f;
 800121e:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80014a4 <exploration+0x308>
 8001222:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.magnetometer_data[0] =
 8001226:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <exploration+0x2fc>)
 8001228:	edc3 7a07 	vstr	s15, [r3, #28]
		sensor_data_t_exploration.magnetometer_data[1] =
				(float) sensor_data_t_exploration.magnetometer_raw_data[1]
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <exploration+0x2fc>)
 800122e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						/ 1000.0f;
 800123a:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80014a4 <exploration+0x308>
 800123e:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.magnetometer_data[1] =
 8001242:	4b95      	ldr	r3, [pc, #596]	; (8001498 <exploration+0x2fc>)
 8001244:	edc3 7a08 	vstr	s15, [r3, #32]
		sensor_data_t_exploration.magnetometer_data[2] =
				(float) sensor_data_t_exploration.magnetometer_raw_data[2]
 8001248:	4b93      	ldr	r3, [pc, #588]	; (8001498 <exploration+0x2fc>)
 800124a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						/ 1000.0f;
 8001256:	eddf 6a93 	vldr	s13, [pc, #588]	; 80014a4 <exploration+0x308>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.magnetometer_data[2] =
 800125e:	4b8e      	ldr	r3, [pc, #568]	; (8001498 <exploration+0x2fc>)
 8001260:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		// Pass in the memory address to pDataXYZ Pointer to get XYZ gyroscope values.
		BSP_GYRO_GetXYZ(sensor_data_t_exploration.gyroscope_raw_data);
 8001264:	4890      	ldr	r0, [pc, #576]	; (80014a8 <exploration+0x30c>)
 8001266:	f001 f8a9 	bl	80023bc <BSP_GYRO_GetXYZ>
		sensor_data_t_exploration.gyroscope_data[0] =
				sensor_data_t_exploration.gyroscope_raw_data[0] / 1000.0f;
 800126a:	4b8b      	ldr	r3, [pc, #556]	; (8001498 <exploration+0x2fc>)
 800126c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001270:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80014a4 <exploration+0x308>
 8001274:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.gyroscope_data[0] =
 8001278:	4b87      	ldr	r3, [pc, #540]	; (8001498 <exploration+0x2fc>)
 800127a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		sensor_data_t_exploration.gyroscope_data[1] =
				sensor_data_t_exploration.gyroscope_raw_data[1] / 1000.0f;
 800127e:	4b86      	ldr	r3, [pc, #536]	; (8001498 <exploration+0x2fc>)
 8001280:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001284:	eddf 6a87 	vldr	s13, [pc, #540]	; 80014a4 <exploration+0x308>
 8001288:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.gyroscope_data[1] =
 800128c:	4b82      	ldr	r3, [pc, #520]	; (8001498 <exploration+0x2fc>)
 800128e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		sensor_data_t_exploration.gyroscope_data[2] =
				sensor_data_t_exploration.gyroscope_raw_data[2] / 1000.0f;
 8001292:	4b81      	ldr	r3, [pc, #516]	; (8001498 <exploration+0x2fc>)
 8001294:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001298:	eddf 6a82 	vldr	s13, [pc, #520]	; 80014a4 <exploration+0x308>
 800129c:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_exploration.gyroscope_data[2] =
 80012a0:	4b7d      	ldr	r3, [pc, #500]	; (8001498 <exploration+0x2fc>)
 80012a2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		memset(message_print, 0, strlen(message_print));
 80012a6:	4881      	ldr	r0, [pc, #516]	; (80014ac <exploration+0x310>)
 80012a8:	f7fe ff92 	bl	80001d0 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	2100      	movs	r1, #0
 80012b2:	487e      	ldr	r0, [pc, #504]	; (80014ac <exploration+0x310>)
 80012b4:	f004 f9d5 	bl	8005662 <memset>
		sprintf(message_print,
				"G:%0.2f:%0.2f:%0.2f (dps), M:%0.3f:%0.3f:%0.3f (Gauss), P:%0.2f (Pa), H:%0.2f (%%RH) \r\n",
				sensor_data_t_exploration.gyroscope_data[0],
 80012b8:	4b77      	ldr	r3, [pc, #476]	; (8001498 <exploration+0x2fc>)
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		sprintf(message_print,
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f943 	bl	8000548 <__aeabi_f2d>
 80012c2:	e9c7 0106 	strd	r0, r1, [r7, #24]
				sensor_data_t_exploration.gyroscope_data[1],
 80012c6:	4b74      	ldr	r3, [pc, #464]	; (8001498 <exploration+0x2fc>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		sprintf(message_print,
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f93c 	bl	8000548 <__aeabi_f2d>
 80012d0:	4682      	mov	sl, r0
 80012d2:	468b      	mov	fp, r1
				sensor_data_t_exploration.gyroscope_data[2],
 80012d4:	4b70      	ldr	r3, [pc, #448]	; (8001498 <exploration+0x2fc>)
 80012d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
		sprintf(message_print,
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f935 	bl	8000548 <__aeabi_f2d>
 80012de:	e9c7 0104 	strd	r0, r1, [r7, #16]
				sensor_data_t_exploration.magnetometer_data[0],
 80012e2:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <exploration+0x2fc>)
 80012e4:	69db      	ldr	r3, [r3, #28]
		sprintf(message_print,
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f92e 	bl	8000548 <__aeabi_f2d>
 80012ec:	e9c7 0102 	strd	r0, r1, [r7, #8]
				sensor_data_t_exploration.magnetometer_data[1],
 80012f0:	4b69      	ldr	r3, [pc, #420]	; (8001498 <exploration+0x2fc>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
		sprintf(message_print,
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f927 	bl	8000548 <__aeabi_f2d>
 80012fa:	e9c7 0100 	strd	r0, r1, [r7]
				sensor_data_t_exploration.magnetometer_data[2],
 80012fe:	4b66      	ldr	r3, [pc, #408]	; (8001498 <exploration+0x2fc>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(message_print,
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f920 	bl	8000548 <__aeabi_f2d>
 8001308:	4680      	mov	r8, r0
 800130a:	4689      	mov	r9, r1
				sensor_data_t_exploration.pressure_data,
 800130c:	4b62      	ldr	r3, [pc, #392]	; (8001498 <exploration+0x2fc>)
 800130e:	68db      	ldr	r3, [r3, #12]
		sprintf(message_print,
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f919 	bl	8000548 <__aeabi_f2d>
 8001316:	4604      	mov	r4, r0
 8001318:	460d      	mov	r5, r1
				sensor_data_t_exploration.humidity_data);
 800131a:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <exploration+0x2fc>)
 800131c:	689b      	ldr	r3, [r3, #8]
		sprintf(message_print,
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f912 	bl	8000548 <__aeabi_f2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800132c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001330:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001334:	ed97 7b00 	vldr	d7, [r7]
 8001338:	ed8d 7b06 	vstr	d7, [sp, #24]
 800133c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001340:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001344:	ed97 7b04 	vldr	d7, [r7, #16]
 8001348:	ed8d 7b02 	vstr	d7, [sp, #8]
 800134c:	e9cd ab00 	strd	sl, fp, [sp]
 8001350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001354:	4956      	ldr	r1, [pc, #344]	; (80014b0 <exploration+0x314>)
 8001356:	4855      	ldr	r0, [pc, #340]	; (80014ac <exploration+0x310>)
 8001358:	f004 fe9a 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 800135c:	4853      	ldr	r0, [pc, #332]	; (80014ac <exploration+0x310>)
 800135e:	f7fe ff37 	bl	80001d0 <strlen>
 8001362:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001364:	b29a      	uxth	r2, r3
 8001366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136a:	4950      	ldr	r1, [pc, #320]	; (80014ac <exploration+0x310>)
 800136c:	4851      	ldr	r0, [pc, #324]	; (80014b4 <exploration+0x318>)
 800136e:	f003 f965 	bl	800463c <HAL_UART_Transmit>

		time_EXPLORATION_SENSOR = HAL_GetTick();
 8001372:	f001 fedf 	bl	8003134 <HAL_GetTick>
 8001376:	4603      	mov	r3, r0
 8001378:	4a46      	ldr	r2, [pc, #280]	; (8001494 <exploration+0x2f8>)
 800137a:	6013      	str	r3, [r2, #0]
	}

	// EXPLORATION LED will always be ON
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001382:	484d      	ldr	r0, [pc, #308]	; (80014b8 <exploration+0x31c>)
 8001384:	f002 faaa 	bl	80038dc <HAL_GPIO_WritePin>
	 * 			3. Reset flags to SAFE before leaving exploration mode
	 * 			and reaching to warning state.
	 * 			4. Reset count_warnings counter to 0.
	 * 			5. Set the EXPLORATION_WARNING_STATE flag to 1.
	 */
	if ((abs((int) sensor_data_t_exploration.magnetometer_data[0])
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <exploration+0x2fc>)
 800138a:	edd3 7a07 	vldr	s15, [r3, #28]
 800138e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001392:	ee17 3a90 	vmov	r3, s15
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfb8      	it	lt
 800139a:	425b      	neglt	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	dc17      	bgt.n	80013d0 <exploration+0x234>
			>= MAG_THRESHOLD
			|| abs((int) sensor_data_t_exploration.magnetometer_data[1])
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <exploration+0x2fc>)
 80013a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80013a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013aa:	ee17 3a90 	vmov	r3, s15
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bfb8      	it	lt
 80013b2:	425b      	neglt	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	dc0b      	bgt.n	80013d0 <exploration+0x234>
					>= MAG_THRESHOLD
			|| abs((int) sensor_data_t_exploration.magnetometer_data[2])
 80013b8:	4b37      	ldr	r3, [pc, #220]	; (8001498 <exploration+0x2fc>)
 80013ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c2:	ee17 3a90 	vmov	r3, s15
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bfb8      	it	lt
 80013ca:	425b      	neglt	r3, r3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	dd25      	ble.n	800141c <exploration+0x280>
					>= MAG_THRESHOLD) && MAGNETOMETER_Flag != WARNING) {
 80013d0:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <exploration+0x320>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d020      	beq.n	800141c <exploration+0x280>

		// Set MAGNETOMETER_Flag to WARNING
		MAGNETOMETER_Flag = WARNING;
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <exploration+0x320>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
		memset(message_print, 0, strlen(message_print));
 80013e0:	4832      	ldr	r0, [pc, #200]	; (80014ac <exploration+0x310>)
 80013e2:	f7fe fef5 	bl	80001d0 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <exploration+0x310>)
 80013ee:	f004 f938 	bl	8005662 <memset>
		sprintf(message_print, "Magnetometer Flag enabled \r\n");
 80013f2:	4933      	ldr	r1, [pc, #204]	; (80014c0 <exploration+0x324>)
 80013f4:	482d      	ldr	r0, [pc, #180]	; (80014ac <exploration+0x310>)
 80013f6:	f004 fe4b 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 80013fa:	482c      	ldr	r0, [pc, #176]	; (80014ac <exploration+0x310>)
 80013fc:	f7fe fee8 	bl	80001d0 <strlen>
 8001400:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001402:	b29a      	uxth	r2, r3
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	4928      	ldr	r1, [pc, #160]	; (80014ac <exploration+0x310>)
 800140a:	482a      	ldr	r0, [pc, #168]	; (80014b4 <exploration+0x318>)
 800140c:	f003 f916 	bl	800463c <HAL_UART_Transmit>
		count_warnings += 1;
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <exploration+0x328>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <exploration+0x328>)
 800141a:	701a      	strb	r2, [r3, #0]
	}

	if ((abs((int) sensor_data_t_exploration.gyroscope_data[0])
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <exploration+0x2fc>)
 800141e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001426:	ee17 3a90 	vmov	r3, s15
 800142a:	2b00      	cmp	r3, #0
 800142c:	bfb8      	it	lt
 800142e:	425b      	neglt	r3, r3
 8001430:	2b13      	cmp	r3, #19
 8001432:	dc0b      	bgt.n	800144c <exploration+0x2b0>
			>= GYRO_THRESHOLD
			|| abs((int) sensor_data_t_exploration.gyroscope_data[1])
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <exploration+0x2fc>)
 8001436:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800143a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143e:	ee17 3a90 	vmov	r3, s15
 8001442:	2b00      	cmp	r3, #0
 8001444:	bfb8      	it	lt
 8001446:	425b      	neglt	r3, r3
 8001448:	2b13      	cmp	r3, #19
 800144a:	dd44      	ble.n	80014d6 <exploration+0x33a>
					>= GYRO_THRESHOLD) && GYROSCOPE_Flag != WARNING) {
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <exploration+0x32c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d03f      	beq.n	80014d6 <exploration+0x33a>

		// Set GYROSCOPE_Flag to WARNING
		GYROSCOPE_Flag = WARNING;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <exploration+0x32c>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
		memset(message_print, 0, strlen(message_print));
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <exploration+0x310>)
 800145e:	f7fe feb7 	bl	80001d0 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	2100      	movs	r1, #0
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <exploration+0x310>)
 800146a:	f004 f8fa 	bl	8005662 <memset>
		sprintf(message_print, "Gyroscope Flag enabled \r\n");
 800146e:	4917      	ldr	r1, [pc, #92]	; (80014cc <exploration+0x330>)
 8001470:	480e      	ldr	r0, [pc, #56]	; (80014ac <exploration+0x310>)
 8001472:	f004 fe0d 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <exploration+0x310>)
 8001478:	f7fe feaa 	bl	80001d0 <strlen>
 800147c:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800147e:	b29a      	uxth	r2, r3
 8001480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001484:	4909      	ldr	r1, [pc, #36]	; (80014ac <exploration+0x310>)
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <exploration+0x318>)
 8001488:	f003 f8d8 	bl	800463c <HAL_UART_Transmit>
		count_warnings += 1;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <exploration+0x328>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	e01d      	b.n	80014d0 <exploration+0x334>
 8001494:	2000047c 	.word	0x2000047c
 8001498:	20000490 	.word	0x20000490
 800149c:	42c80000 	.word	0x42c80000
 80014a0:	200004a4 	.word	0x200004a4
 80014a4:	447a0000 	.word	0x447a0000
 80014a8:	200004cc 	.word	0x200004cc
 80014ac:	20000350 	.word	0x20000350
 80014b0:	08008298 	.word	0x08008298
 80014b4:	200002c8 	.word	0x200002c8
 80014b8:	48000400 	.word	0x48000400
 80014bc:	2000048d 	.word	0x2000048d
 80014c0:	080082f0 	.word	0x080082f0
 80014c4:	2000034d 	.word	0x2000034d
 80014c8:	2000048c 	.word	0x2000048c
 80014cc:	08008310 	.word	0x08008310
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <exploration+0x498>)
 80014d4:	701a      	strb	r2, [r3, #0]
	}

	if ((sensor_data_t_exploration.pressure_data <= PRES_THRESHOLD_MIN)
 80014d6:	4b58      	ldr	r3, [pc, #352]	; (8001638 <exploration+0x49c>)
 80014d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80014dc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800163c <exploration+0x4a0>
 80014e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	d909      	bls.n	80014fe <exploration+0x362>
			|| (sensor_data_t_exploration.pressure_data >= PRES_THRESHOLD_MAX)) {
 80014ea:	4b53      	ldr	r3, [pc, #332]	; (8001638 <exploration+0x49c>)
 80014ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80014f0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001640 <exploration+0x4a4>
 80014f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	db20      	blt.n	8001540 <exploration+0x3a4>

		// Set PRESSURE_Flag to WARNING
		PRESSURE_Flag = WARNING;
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <exploration+0x4a8>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
		memset(message_print, 0, strlen(message_print));
 8001504:	4850      	ldr	r0, [pc, #320]	; (8001648 <exploration+0x4ac>)
 8001506:	f7fe fe63 	bl	80001d0 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	484d      	ldr	r0, [pc, #308]	; (8001648 <exploration+0x4ac>)
 8001512:	f004 f8a6 	bl	8005662 <memset>
		sprintf(message_print, "Pressure Flag enabled \r\n");
 8001516:	494d      	ldr	r1, [pc, #308]	; (800164c <exploration+0x4b0>)
 8001518:	484b      	ldr	r0, [pc, #300]	; (8001648 <exploration+0x4ac>)
 800151a:	f004 fdb9 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 800151e:	484a      	ldr	r0, [pc, #296]	; (8001648 <exploration+0x4ac>)
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001526:	b29a      	uxth	r2, r3
 8001528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152c:	4946      	ldr	r1, [pc, #280]	; (8001648 <exploration+0x4ac>)
 800152e:	4848      	ldr	r0, [pc, #288]	; (8001650 <exploration+0x4b4>)
 8001530:	f003 f884 	bl	800463c <HAL_UART_Transmit>
		count_warnings += 1;
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <exploration+0x498>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <exploration+0x498>)
 800153e:	701a      	strb	r2, [r3, #0]
	}

	if (sensor_data_t_exploration.humidity_data <= HUM_THRESHOLD_MAX) {
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <exploration+0x49c>)
 8001542:	edd3 7a02 	vldr	s15, [r3, #8]
 8001546:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001654 <exploration+0x4b8>
 800154a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d820      	bhi.n	8001596 <exploration+0x3fa>

		// Set HUMIDITY_Flag to WARNING
		HUMIDITY_Flag = WARNING;
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <exploration+0x4bc>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
		memset(message_print, 0, strlen(message_print));
 800155a:	483b      	ldr	r0, [pc, #236]	; (8001648 <exploration+0x4ac>)
 800155c:	f7fe fe38 	bl	80001d0 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	2100      	movs	r1, #0
 8001566:	4838      	ldr	r0, [pc, #224]	; (8001648 <exploration+0x4ac>)
 8001568:	f004 f87b 	bl	8005662 <memset>
		sprintf(message_print, "Humidity Flag enabled \r\n");
 800156c:	493b      	ldr	r1, [pc, #236]	; (800165c <exploration+0x4c0>)
 800156e:	4836      	ldr	r0, [pc, #216]	; (8001648 <exploration+0x4ac>)
 8001570:	f004 fd8e 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001574:	4834      	ldr	r0, [pc, #208]	; (8001648 <exploration+0x4ac>)
 8001576:	f7fe fe2b 	bl	80001d0 <strlen>
 800157a:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800157c:	b29a      	uxth	r2, r3
 800157e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001582:	4931      	ldr	r1, [pc, #196]	; (8001648 <exploration+0x4ac>)
 8001584:	4832      	ldr	r0, [pc, #200]	; (8001650 <exploration+0x4b4>)
 8001586:	f003 f859 	bl	800463c <HAL_UART_Transmit>
		count_warnings += 1;
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <exploration+0x498>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b28      	ldr	r3, [pc, #160]	; (8001634 <exploration+0x498>)
 8001594:	701a      	strb	r2, [r3, #0]
	}

	if (count_warnings == 2) {
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <exploration+0x498>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d11f      	bne.n	80015de <exploration+0x442>
		reset_sensor_warning_flags();
 800159e:	f000 fa57 	bl	8001a50 <reset_sensor_warning_flags>
		count_warnings = 0;
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <exploration+0x498>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
		memset(message_print, 0, strlen(message_print));
 80015a8:	4827      	ldr	r0, [pc, #156]	; (8001648 <exploration+0x4ac>)
 80015aa:	f7fe fe11 	bl	80001d0 <strlen>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <exploration+0x4ac>)
 80015b6:	f004 f854 	bl	8005662 <memset>
		sprintf(message_print, "EXPLORATION_WARNING_STATE enabled \r\n");
 80015ba:	4929      	ldr	r1, [pc, #164]	; (8001660 <exploration+0x4c4>)
 80015bc:	4822      	ldr	r0, [pc, #136]	; (8001648 <exploration+0x4ac>)
 80015be:	f004 fd67 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 80015c2:	4821      	ldr	r0, [pc, #132]	; (8001648 <exploration+0x4ac>)
 80015c4:	f7fe fe04 	bl	80001d0 <strlen>
 80015c8:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d0:	491d      	ldr	r1, [pc, #116]	; (8001648 <exploration+0x4ac>)
 80015d2:	481f      	ldr	r0, [pc, #124]	; (8001650 <exploration+0x4b4>)
 80015d4:	f003 f832 	bl	800463c <HAL_UART_Transmit>
		// Set the EXPLORATION_WARNING_STATE flag to 1
		EXPLORATION_WARNING_STATE = 1;
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <exploration+0x4c8>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
	}

	// Used for testing EXPLORATION_WARNING_STATE
	int stateOfPushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80015de:	2110      	movs	r1, #16
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f002 f962 	bl	80038ac <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
	if (stateOfPushButton == 1) {
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d11a      	bne.n	8001628 <exploration+0x48c>
		memset(message_print, 0, strlen(message_print));
 80015f2:	4815      	ldr	r0, [pc, #84]	; (8001648 <exploration+0x4ac>)
 80015f4:	f7fe fdec 	bl	80001d0 <strlen>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	2100      	movs	r1, #0
 80015fe:	4812      	ldr	r0, [pc, #72]	; (8001648 <exploration+0x4ac>)
 8001600:	f004 f82f 	bl	8005662 <memset>
		sprintf(message_print, "EXPLORATION_WARNING_STATE enabled \r\n");
 8001604:	4916      	ldr	r1, [pc, #88]	; (8001660 <exploration+0x4c4>)
 8001606:	4810      	ldr	r0, [pc, #64]	; (8001648 <exploration+0x4ac>)
 8001608:	f004 fd42 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 800160c:	480e      	ldr	r0, [pc, #56]	; (8001648 <exploration+0x4ac>)
 800160e:	f7fe fddf 	bl	80001d0 <strlen>
 8001612:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001614:	b29a      	uxth	r2, r3
 8001616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161a:	490b      	ldr	r1, [pc, #44]	; (8001648 <exploration+0x4ac>)
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <exploration+0x4b4>)
 800161e:	f003 f80d 	bl	800463c <HAL_UART_Transmit>
		// Set the EXPLORATION_WARNING_STATE flag to 1
		EXPLORATION_WARNING_STATE = 1;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <exploration+0x4c8>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
	}
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001632:	bf00      	nop
 8001634:	2000034d 	.word	0x2000034d
 8001638:	20000490 	.word	0x20000490
 800163c:	47afc800 	.word	0x47afc800
 8001640:	47cd1400 	.word	0x47cd1400
 8001644:	2000048e 	.word	0x2000048e
 8001648:	20000350 	.word	0x20000350
 800164c:	0800832c 	.word	0x0800832c
 8001650:	200002c8 	.word	0x200002c8
 8001654:	42400000 	.word	0x42400000
 8001658:	2000048f 	.word	0x2000048f
 800165c:	08008348 	.word	0x08008348
 8001660:	08008364 	.word	0x08008364
 8001664:	2000034a 	.word	0x2000034a

08001668 <exploration_warning>:

static void exploration_warning(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	// Toggle WARNING LED every 3 seconds.
	if ((HAL_GetTick() - time_EXPLORATION_WARNING_LED) > 3000) {
 800166c:	f001 fd62 	bl	8003134 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <exploration_warning+0x60>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800167c:	4293      	cmp	r3, r2
 800167e:	d909      	bls.n	8001694 <exploration_warning+0x2c>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <exploration_warning+0x64>)
 8001686:	f002 f941 	bl	800390c <HAL_GPIO_TogglePin>
		time_EXPLORATION_WARNING_LED = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 800168a:	f001 fd53 	bl	8003134 <HAL_GetTick>
 800168e:	4603      	mov	r3, r0
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <exploration_warning+0x60>)
 8001692:	6013      	str	r3, [r2, #0]
	}

	// send WARNING mode: SOS
	memset(message_print, 0, strlen(message_print));
 8001694:	480e      	ldr	r0, [pc, #56]	; (80016d0 <exploration_warning+0x68>)
 8001696:	f7fe fd9b 	bl	80001d0 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <exploration_warning+0x68>)
 80016a2:	f003 ffde 	bl	8005662 <memset>
	sprintf(message_print, "WARNING mode: SOS \r\n");
 80016a6:	490b      	ldr	r1, [pc, #44]	; (80016d4 <exploration_warning+0x6c>)
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <exploration_warning+0x68>)
 80016aa:	f004 fcf1 	bl	8006090 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) message_print, strlen(message_print),
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <exploration_warning+0x68>)
 80016b0:	f7fe fd8e 	bl	80001d0 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <exploration_warning+0x68>)
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <exploration_warning+0x70>)
 80016c0:	f002 ffbc 	bl	800463c <HAL_UART_Transmit>
			0xFFFF);
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000480 	.word	0x20000480
 80016cc:	48000400 	.word	0x48000400
 80016d0:	20000350 	.word	0x20000350
 80016d4:	0800838c 	.word	0x0800838c
 80016d8:	200002c8 	.word	0x200002c8

080016dc <battle>:

static void battle(void) {
 80016dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e0:	b0a8      	sub	sp, #160	; 0xa0
 80016e2:	af16      	add	r7, sp, #88	; 0x58

	// In BATTLE MODE, only those sensors mounted on Pixie are read periodically every ONE second.
	if (HAL_GetTick() - time_BATTLE_SENSOR > 1000) {
 80016e4:	f001 fd26 	bl	8003134 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4bbd      	ldr	r3, [pc, #756]	; (80019e0 <battle+0x304>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f4:	f240 814d 	bls.w	8001992 <battle+0x2b6>

		// Reset variables
		sensor_data_t_battle.temperature_data = 0;
 80016f8:	4bba      	ldr	r3, [pc, #744]	; (80019e4 <battle+0x308>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
		sensor_data_t_battle.humidity_data = 0;
 8001700:	4bb8      	ldr	r3, [pc, #736]	; (80019e4 <battle+0x308>)
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
		sensor_data_t_battle.pressure_data = 0;
 8001708:	4bb6      	ldr	r3, [pc, #728]	; (80019e4 <battle+0x308>)
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
		sensor_data_t_battle.magnetometer_raw_data[3] = 0;
 8001710:	4bb4      	ldr	r3, [pc, #720]	; (80019e4 <battle+0x308>)
 8001712:	2200      	movs	r2, #0
 8001714:	835a      	strh	r2, [r3, #26]
		sensor_data_t_battle.magnetometer_data[3] = 0;
 8001716:	4bb3      	ldr	r3, [pc, #716]	; (80019e4 <battle+0x308>)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
		sensor_data_t_battle.gyroscope_raw_data[3] = 0;
 800171e:	4bb1      	ldr	r3, [pc, #708]	; (80019e4 <battle+0x308>)
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	649a      	str	r2, [r3, #72]	; 0x48
		sensor_data_t_battle.gyroscope_data[3] = 0;
 8001726:	4baf      	ldr	r3, [pc, #700]	; (80019e4 <battle+0x308>)
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	655a      	str	r2, [r3, #84]	; 0x54
		sensor_data_t_battle.accelerometer_raw_data[3] = 0;
 800172e:	4bad      	ldr	r3, [pc, #692]	; (80019e4 <battle+0x308>)
 8001730:	2200      	movs	r2, #0
 8001732:	85da      	strh	r2, [r3, #46]	; 0x2e
		sensor_data_t_battle.accelerometer_data[3] = 0;
 8001734:	4bab      	ldr	r3, [pc, #684]	; (80019e4 <battle+0x308>)
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c

		// Read Humidity readings
		sensor_data_t_battle.humidity_data = BSP_HSENSOR_ReadHumidity();
 800173c:	f000 fe76 	bl	800242c <BSP_HSENSOR_ReadHumidity>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	4ba7      	ldr	r3, [pc, #668]	; (80019e4 <battle+0x308>)
 8001746:	edc3 7a02 	vstr	s15, [r3, #8]

		/*	Read the pressure in units (Pascal)
		 * 	One hectopascal(hPa) is equal to exactly 100 Pascals. */
		sensor_data_t_battle.pressure_data = BSP_PSENSOR_ReadPressure()
 800174a:	f000 fee1 	bl	8002510 <BSP_PSENSOR_ReadPressure>
 800174e:	eef0 7a40 	vmov.f32	s15, s0
				* 100.0f;
 8001752:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80019e8 <battle+0x30c>
 8001756:	ee67 7a87 	vmul.f32	s15, s15, s14
		sensor_data_t_battle.pressure_data = BSP_PSENSOR_ReadPressure()
 800175a:	4ba2      	ldr	r3, [pc, #648]	; (80019e4 <battle+0x308>)
 800175c:	edc3 7a03 	vstr	s15, [r3, #12]

		// Read Temperature Readings
		sensor_data_t_battle.temperature_data = BSP_TSENSOR_ReadTemp();
 8001760:	f000 ff00 	bl	8002564 <BSP_TSENSOR_ReadTemp>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	4b9e      	ldr	r3, [pc, #632]	; (80019e4 <battle+0x308>)
 800176a:	edc3 7a01 	vstr	s15, [r3, #4]

		// Pass in the memory address to pDataXYZ Pointer to get XYZ magnetometer values.
		BSP_MAGNETO_GetXYZ(sensor_data_t_battle.magnetometer_raw_data);
 800176e:	489f      	ldr	r0, [pc, #636]	; (80019ec <battle+0x310>)
 8001770:	f000 fe96 	bl	80024a0 <BSP_MAGNETO_GetXYZ>
		sensor_data_t_battle.magnetometer_data[0] =
				(float) sensor_data_t_battle.magnetometer_raw_data[0] / 1000.0f;
 8001774:	4b9b      	ldr	r3, [pc, #620]	; (80019e4 <battle+0x308>)
 8001776:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001782:	eddf 6a9b 	vldr	s13, [pc, #620]	; 80019f0 <battle+0x314>
 8001786:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.magnetometer_data[0] =
 800178a:	4b96      	ldr	r3, [pc, #600]	; (80019e4 <battle+0x308>)
 800178c:	edc3 7a07 	vstr	s15, [r3, #28]
		sensor_data_t_battle.magnetometer_data[1] =
				(float) sensor_data_t_battle.magnetometer_raw_data[1] / 1000.0f;
 8001790:	4b94      	ldr	r3, [pc, #592]	; (80019e4 <battle+0x308>)
 8001792:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800179e:	eddf 6a94 	vldr	s13, [pc, #592]	; 80019f0 <battle+0x314>
 80017a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.magnetometer_data[1] =
 80017a6:	4b8f      	ldr	r3, [pc, #572]	; (80019e4 <battle+0x308>)
 80017a8:	edc3 7a08 	vstr	s15, [r3, #32]
		sensor_data_t_battle.magnetometer_data[2] =
				(float) sensor_data_t_battle.magnetometer_raw_data[2] / 1000.0f;
 80017ac:	4b8d      	ldr	r3, [pc, #564]	; (80019e4 <battle+0x308>)
 80017ae:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ba:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80019f0 <battle+0x314>
 80017be:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.magnetometer_data[2] =
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <battle+0x308>)
 80017c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		// Pass in the memory address to pDataXYZ Pointer to get XYZ gyroscope values.
		BSP_GYRO_GetXYZ(sensor_data_t_battle.gyroscope_raw_data);
 80017c8:	488a      	ldr	r0, [pc, #552]	; (80019f4 <battle+0x318>)
 80017ca:	f000 fdf7 	bl	80023bc <BSP_GYRO_GetXYZ>
		sensor_data_t_battle.gyroscope_data[0] =
				sensor_data_t_battle.gyroscope_raw_data[0] / 1000.0f;
 80017ce:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <battle+0x308>)
 80017d0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80017d4:	eddf 6a86 	vldr	s13, [pc, #536]	; 80019f0 <battle+0x314>
 80017d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.gyroscope_data[0] =
 80017dc:	4b81      	ldr	r3, [pc, #516]	; (80019e4 <battle+0x308>)
 80017de:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		sensor_data_t_battle.gyroscope_data[1] =
				sensor_data_t_battle.gyroscope_raw_data[1] / 1000.0f;
 80017e2:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <battle+0x308>)
 80017e4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80017e8:	eddf 6a81 	vldr	s13, [pc, #516]	; 80019f0 <battle+0x314>
 80017ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.gyroscope_data[1] =
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <battle+0x308>)
 80017f2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		sensor_data_t_battle.gyroscope_data[2] =
				sensor_data_t_battle.gyroscope_raw_data[2] / 1000.0f;
 80017f6:	4b7b      	ldr	r3, [pc, #492]	; (80019e4 <battle+0x308>)
 80017f8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80017fc:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80019f0 <battle+0x314>
 8001800:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.gyroscope_data[2] =
 8001804:	4b77      	ldr	r3, [pc, #476]	; (80019e4 <battle+0x308>)
 8001806:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		/* Pass in the memory address to pDataXYZ Pointer to get XYZ accelerometer values.
		 * The function below returns 16 bit integers which are 100 * acceleration(m/s^2).
		 * Convert to float to print the actual acceleration*/
		BSP_ACCELERO_AccGetXYZ(sensor_data_t_battle.accelerometer_raw_data);
 800180a:	487b      	ldr	r0, [pc, #492]	; (80019f8 <battle+0x31c>)
 800180c:	f000 fd7c 	bl	8002308 <BSP_ACCELERO_AccGetXYZ>
		sensor_data_t_battle.accelerometer_data[0] =
				sensor_data_t_battle.accelerometer_raw_data[0] / 100.0f;
 8001810:	4b74      	ldr	r3, [pc, #464]	; (80019e4 <battle+0x308>)
 8001812:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181e:	eddf 6a72 	vldr	s13, [pc, #456]	; 80019e8 <battle+0x30c>
 8001822:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.accelerometer_data[0] =
 8001826:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <battle+0x308>)
 8001828:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		sensor_data_t_battle.accelerometer_data[1] =
				sensor_data_t_battle.accelerometer_raw_data[1] / 100.0f;
 800182c:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <battle+0x308>)
 800182e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183a:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80019e8 <battle+0x30c>
 800183e:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.accelerometer_data[1] =
 8001842:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <battle+0x308>)
 8001844:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		sensor_data_t_battle.accelerometer_data[2] =
				sensor_data_t_battle.accelerometer_raw_data[2] / 100.0f;
 8001848:	4b66      	ldr	r3, [pc, #408]	; (80019e4 <battle+0x308>)
 800184a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	eddf 6a64 	vldr	s13, [pc, #400]	; 80019e8 <battle+0x30c>
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		sensor_data_t_battle.accelerometer_data[2] =
 800185e:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <battle+0x308>)
 8001860:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		memset(message_print, 0, strlen(message_print));
 8001864:	4865      	ldr	r0, [pc, #404]	; (80019fc <battle+0x320>)
 8001866:	f7fe fcb3 	bl	80001d0 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	4862      	ldr	r0, [pc, #392]	; (80019fc <battle+0x320>)
 8001872:	f003 fef6 	bl	8005662 <memset>
		sprintf(message_print,
				"T:%0.2f (deg C), P:%0.2f (Pa), H:%0.2f (%%RH), A:%0.2f:%0.2f:%0.2f(g), G:%0.2f:%0.2f:%0.2f (dps), M:%0.3f:%0.3f:%0.3f (Gauss) \r\n",
				sensor_data_t_battle.temperature_data,
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <battle+0x308>)
 8001878:	685b      	ldr	r3, [r3, #4]
		sprintf(message_print,
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe64 	bl	8000548 <__aeabi_f2d>
 8001880:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				sensor_data_t_battle.pressure_data,
 8001884:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <battle+0x308>)
 8001886:	68db      	ldr	r3, [r3, #12]
		sprintf(message_print,
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe5d 	bl	8000548 <__aeabi_f2d>
 800188e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				sensor_data_t_battle.humidity_data,
 8001892:	4b54      	ldr	r3, [pc, #336]	; (80019e4 <battle+0x308>)
 8001894:	689b      	ldr	r3, [r3, #8]
		sprintf(message_print,
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				sensor_data_t_battle.accelerometer_data[0],
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <battle+0x308>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		sprintf(message_print,
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe4f 	bl	8000548 <__aeabi_f2d>
 80018aa:	e9c7 0108 	strd	r0, r1, [r7, #32]
				sensor_data_t_battle.accelerometer_data[1],
 80018ae:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <battle+0x308>)
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(message_print,
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe48 	bl	8000548 <__aeabi_f2d>
 80018b8:	e9c7 0106 	strd	r0, r1, [r7, #24]
				sensor_data_t_battle.accelerometer_data[2],
 80018bc:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <battle+0x308>)
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(message_print,
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe41 	bl	8000548 <__aeabi_f2d>
 80018c6:	e9c7 0104 	strd	r0, r1, [r7, #16]
				sensor_data_t_battle.gyroscope_data[0],
 80018ca:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <battle+0x308>)
 80018cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		sprintf(message_print,
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
				sensor_data_t_battle.gyroscope_data[1],
 80018d8:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <battle+0x308>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		sprintf(message_print,
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe33 	bl	8000548 <__aeabi_f2d>
 80018e2:	e9c7 0100 	strd	r0, r1, [r7]
				sensor_data_t_battle.gyroscope_data[2],
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <battle+0x308>)
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
		sprintf(message_print,
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	4682      	mov	sl, r0
 80018f2:	468b      	mov	fp, r1
				sensor_data_t_battle.magnetometer_data[0],
 80018f4:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <battle+0x308>)
 80018f6:	69db      	ldr	r3, [r3, #28]
		sprintf(message_print,
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe25 	bl	8000548 <__aeabi_f2d>
 80018fe:	4680      	mov	r8, r0
 8001900:	4689      	mov	r9, r1
				sensor_data_t_battle.magnetometer_data[1],
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <battle+0x308>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
		sprintf(message_print,
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fe1e 	bl	8000548 <__aeabi_f2d>
 800190c:	4604      	mov	r4, r0
 800190e:	460d      	mov	r5, r1
				sensor_data_t_battle.magnetometer_data[2]);
 8001910:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <battle+0x308>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(message_print,
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe17 	bl	8000548 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001922:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8001926:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800192a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 800192e:	ed97 7b00 	vldr	d7, [r7]
 8001932:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001936:	ed97 7b02 	vldr	d7, [r7, #8]
 800193a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800193e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001942:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001946:	ed97 7b06 	vldr	d7, [r7, #24]
 800194a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800194e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001952:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001956:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800195a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800195e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001962:	ed8d 7b00 	vstr	d7, [sp]
 8001966:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800196a:	4925      	ldr	r1, [pc, #148]	; (8001a00 <battle+0x324>)
 800196c:	4823      	ldr	r0, [pc, #140]	; (80019fc <battle+0x320>)
 800196e:	f004 fb8f 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001972:	4822      	ldr	r0, [pc, #136]	; (80019fc <battle+0x320>)
 8001974:	f7fe fc2c 	bl	80001d0 <strlen>
 8001978:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 800197a:	b29a      	uxth	r2, r3
 800197c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001980:	491e      	ldr	r1, [pc, #120]	; (80019fc <battle+0x320>)
 8001982:	4820      	ldr	r0, [pc, #128]	; (8001a04 <battle+0x328>)
 8001984:	f002 fe5a 	bl	800463c <HAL_UART_Transmit>

		time_BATTLE_SENSOR = HAL_GetTick();
 8001988:	f001 fbd4 	bl	8003134 <HAL_GetTick>
 800198c:	4603      	mov	r3, r0
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <battle+0x304>)
 8001990:	6013      	str	r3, [r2, #0]
	}

	// Toggle WARNING LED every 1 second.
	if ((HAL_GetTick() - time_BATTLE_LED) > 1000) {
 8001992:	f001 fbcf 	bl	8003134 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <battle+0x32c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019a2:	d909      	bls.n	80019b8 <battle+0x2dc>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80019a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a8:	4818      	ldr	r0, [pc, #96]	; (8001a0c <battle+0x330>)
 80019aa:	f001 ffaf 	bl	800390c <HAL_GPIO_TogglePin>
		time_BATTLE_LED = HAL_GetTick(); // reset time_EXPLORATION_WARNING_LED
 80019ae:	f001 fbc1 	bl	8003134 <HAL_GetTick>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <battle+0x32c>)
 80019b6:	6013      	str	r3, [r2, #0]
	}

	// Used for testing BATTLE_WARNING_STATE
	int stateOfPushButton = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80019b8:	2104      	movs	r1, #4
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <battle+0x330>)
 80019bc:	f001 ff76 	bl	80038ac <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
	if (stateOfPushButton == 1) {
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d134      	bne.n	8001a34 <battle+0x358>
		memset(message_print, 0, strlen(message_print));
 80019ca:	480c      	ldr	r0, [pc, #48]	; (80019fc <battle+0x320>)
 80019cc:	f7fe fc00 	bl	80001d0 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	2100      	movs	r1, #0
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <battle+0x320>)
 80019d8:	f003 fe43 	bl	8005662 <memset>
 80019dc:	e018      	b.n	8001a10 <battle+0x334>
 80019de:	bf00      	nop
 80019e0:	20000484 	.word	0x20000484
 80019e4:	200004e4 	.word	0x200004e4
 80019e8:	42c80000 	.word	0x42c80000
 80019ec:	200004f8 	.word	0x200004f8
 80019f0:	447a0000 	.word	0x447a0000
 80019f4:	20000520 	.word	0x20000520
 80019f8:	2000050c 	.word	0x2000050c
 80019fc:	20000350 	.word	0x20000350
 8001a00:	080083a4 	.word	0x080083a4
 8001a04:	200002c8 	.word	0x200002c8
 8001a08:	20000488 	.word	0x20000488
 8001a0c:	48000400 	.word	0x48000400
		sprintf(message_print, "BATTLE_WARNING_STATE enabled \r\n");
 8001a10:	490b      	ldr	r1, [pc, #44]	; (8001a40 <battle+0x364>)
 8001a12:	480c      	ldr	r0, [pc, #48]	; (8001a44 <battle+0x368>)
 8001a14:	f004 fb3c 	bl	8006090 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
				strlen(message_print), 0xFFFF);
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <battle+0x368>)
 8001a1a:	f7fe fbd9 	bl	80001d0 <strlen>
 8001a1e:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) message_print,
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a26:	4907      	ldr	r1, [pc, #28]	; (8001a44 <battle+0x368>)
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <battle+0x36c>)
 8001a2a:	f002 fe07 	bl	800463c <HAL_UART_Transmit>
		BATTLE_WARNING_STATE = 1;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <battle+0x370>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
	}
}
 8001a34:	bf00      	nop
 8001a36:	3748      	adds	r7, #72	; 0x48
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3e:	bf00      	nop
 8001a40:	08008428 	.word	0x08008428
 8001a44:	20000350 	.word	0x20000350
 8001a48:	200002c8 	.word	0x200002c8
 8001a4c:	2000034c 	.word	0x2000034c

08001a50 <reset_sensor_warning_flags>:
/**
 * @brief  	Set the flags of various sensors to the default state
 * @note	For example, accflag = SAFE; gyroflag = SAFE; and so on ...
 * @retval	None
 */
static void reset_sensor_warning_flags(void) {
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	GYROSCOPE_Flag = SAFE;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <reset_sensor_warning_flags+0x28>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
	MAGNETOMETER_Flag = SAFE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <reset_sensor_warning_flags+0x2c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
	PRESSURE_Flag = SAFE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <reset_sensor_warning_flags+0x30>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
	HUMIDITY_Flag = SAFE;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <reset_sensor_warning_flags+0x34>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000048c 	.word	0x2000048c
 8001a7c:	2000048d 	.word	0x2000048d
 8001a80:	2000048e 	.word	0x2000048e
 8001a84:	2000048f 	.word	0x2000048f

08001a88 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) //For LED and PB
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]

	//GPIO Ports Clock Enable
	__HAL_RCC_GPIOA_CLK_ENABLE();// D8 Arduino Pinout
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE(); // For LED
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE(); // For Push Button
 8001ace:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

	//Configure GPIO pin Output Level // Pin Initialization
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aec:	4820      	ldr	r0, [pc, #128]	; (8001b70 <MX_GPIO_Init+0xe8>)
 8001aee:	f001 fef5 	bl	80038dc <HAL_GPIO_WritePin>

	//Configure GPIO pin LED2_Pin  // Pin Configuration
	GPIO_InitStruct.Pin = LED2_Pin;
 8001af2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001af6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <MX_GPIO_Init+0xe8>)
 8001b0c:	f001 fc30 	bl	8003370 <HAL_GPIO_Init>

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <MX_GPIO_Init+0xec>)
 8001b18:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	4814      	ldr	r0, [pc, #80]	; (8001b78 <MX_GPIO_Init+0xf0>)
 8001b26:	f001 fc23 	bl	8003370 <HAL_GPIO_Init>

	// Testing single press and double press
	// Configuration of D7 as input
	GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // Pull-down activation
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // PA4
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f001 fc16 	bl	8003370 <HAL_GPIO_Init>

	// Configuration of D8 as input
	GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001b44:	2304      	movs	r3, #4
 8001b46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // Pull-down activation
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); // PB2
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <MX_GPIO_Init+0xe8>)
 8001b58:	f001 fc0a 	bl	8003370 <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b5c:	2028      	movs	r0, #40	; 0x28
 8001b5e:	f001 fbec 	bl	800333a <HAL_NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	48000400 	.word	0x48000400
 8001b74:	10210000 	.word	0x10210000
 8001b78:	48000800 	.word	0x48000800

08001b7c <UART1_Init>:
 *
 * @note
 *
 * @retval	None
 */
static void UART1_Init(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <UART1_Init+0xa0>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <UART1_Init+0xa0>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <UART1_Init+0xa0>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8001bac:	23c0      	movs	r3, #192	; 0xc0
 8001bae:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4817      	ldr	r0, [pc, #92]	; (8001c20 <UART1_Init+0xa4>)
 8001bc2:	f001 fbd5 	bl	8003370 <HAL_GPIO_Init>

	/* Configuring UART1 */
	huart1.Instance = USART1;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <UART1_Init+0xa8>)
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <UART1_Init+0xac>)
 8001bca:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <UART1_Init+0xa8>)
 8001bce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd2:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <UART1_Init+0xa8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <UART1_Init+0xa8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <UART1_Init+0xa8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <UART1_Init+0xa8>)
 8001be8:	220c      	movs	r2, #12
 8001bea:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <UART1_Init+0xa8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <UART1_Init+0xa8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <UART1_Init+0xa8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <UART1_Init+0xa8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <UART1_Init+0xa8>)
 8001c06:	f002 fccb 	bl	80045a0 <HAL_UART_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d000      	beq.n	8001c12 <UART1_Init+0x96>
		while (1)
 8001c10:	e7fe      	b.n	8001c10 <UART1_Init+0x94>
			;
	}
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	200002c8 	.word	0x200002c8
 8001c28:	40013800 	.word	0x40013800

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_MspInit+0x44>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_MspInit+0x44>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_MspInit+0x44>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_MspInit+0x44>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_MspInit+0x44>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_MspInit+0x44>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_I2C_MspInit+0x7c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d128      	bne.n	8001ce8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_I2C_MspInit+0x80>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_I2C_MspInit+0x80>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_I2C_MspInit+0x80>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001cae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb4:	2312      	movs	r3, #18
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <HAL_I2C_MspInit+0x84>)
 8001ccc:	f001 fb50 	bl	8003370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_I2C_MspInit+0x80>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_I2C_MspInit+0x80>)
 8001cd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cda:	6593      	str	r3, [r2, #88]	; 0x58
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_I2C_MspInit+0x80>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40005800 	.word	0x40005800
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48000400 	.word	0x48000400

08001cfc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_I2C_MspDeInit+0x30>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10a      	bne.n	8001d24 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_I2C_MspDeInit+0x34>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_I2C_MspDeInit+0x34>)
 8001d14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001d1a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_I2C_MspDeInit+0x38>)
 8001d20:	f001 fcd0 	bl	80036c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40005800 	.word	0x40005800
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000400 	.word	0x48000400

08001d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <HAL_UART_MspInit+0xd8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d128      	bne.n	8001dac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	4a2d      	ldr	r2, [pc, #180]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6613      	str	r3, [r2, #96]	; 0x60
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d8a:	23c0      	movs	r3, #192	; 0xc0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	481c      	ldr	r0, [pc, #112]	; (8001e18 <HAL_UART_MspInit+0xe0>)
 8001da6:	f001 fae3 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001daa:	e02d      	b.n	8001e08 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <HAL_UART_MspInit+0xe4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d128      	bne.n	8001e08 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_UART_MspInit+0xdc>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001df8:	2307      	movs	r3, #7
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <HAL_UART_MspInit+0xe8>)
 8001e04:	f001 fab4 	bl	8003370 <HAL_GPIO_Init>
}
 8001e08:	bf00      	nop
 8001e0a:	3730      	adds	r7, #48	; 0x30
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40013800 	.word	0x40013800
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	40004800 	.word	0x40004800
 8001e20:	48000c00 	.word	0x48000c00

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler+0x4>

08001e3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler+0x4>

08001e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <UsageFault_Handler+0x4>

08001e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f001 f94a 	bl	8003110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e84:	2020      	movs	r0, #32
 8001e86:	f001 fd5b 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e8a:	2040      	movs	r0, #64	; 0x40
 8001e8c:	f001 fd58 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001e90:	2080      	movs	r0, #128	; 0x80
 8001e92:	f001 fd55 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001e96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e9a:	f001 fd51 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ea6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001eaa:	f001 fd49 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001eae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001eb2:	f001 fd45 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001eb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001eba:	f001 fd41 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001ebe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ec2:	f001 fd3d 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001ec6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001eca:	f001 fd39 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <_sbrk+0x50>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <_sbrk+0x16>
		heap_end = &end;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <_sbrk+0x50>)
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <_sbrk+0x54>)
 8001ee8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <_sbrk+0x50>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <_sbrk+0x50>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	466a      	mov	r2, sp
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d907      	bls.n	8001f0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001efe:	f003 fa7f 	bl	8005400 <__errno>
 8001f02:	4603      	mov	r3, r0
 8001f04:	220c      	movs	r2, #12
 8001f06:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	e006      	b.n	8001f1c <_sbrk+0x48>
	}

	heap_end += incr;
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <_sbrk+0x50>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <_sbrk+0x50>)
 8001f18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000538 	.word	0x20000538
 8001f28:	20000658 	.word	0x20000658

08001f2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <SystemInit+0x64>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <SystemInit+0x64>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <SystemInit+0x68>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <SystemInit+0x68>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <SystemInit+0x68>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <SystemInit+0x68>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <SystemInit+0x68>)
 8001f58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <SystemInit+0x68>)
 8001f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <SystemInit+0x68>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <SystemInit+0x68>)
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <SystemInit+0x68>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SystemInit+0x64>)
 8001f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f82:	609a      	str	r2, [r3, #8]
#endif
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00
 8001f94:	40021000 	.word	0x40021000

08001f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f9e:	e003      	b.n	8001fa8 <LoopCopyDataInit>

08001fa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fa6:	3104      	adds	r1, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fb0:	d3f6      	bcc.n	8001fa0 <CopyDataInit>
	ldr	r2, =_sbss
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fb4:	e002      	b.n	8001fbc <LoopFillZerobss>

08001fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fb8:	f842 3b04 	str.w	r3, [r2], #4

08001fbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <LoopForever+0x16>)
	cmp	r2, r3
 8001fbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fc0:	d3f9      	bcc.n	8001fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fc2:	f7ff ffb3 	bl	8001f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f003 fb17 	bl	80055f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fca:	f7fe ffa7 	bl	8000f1c <main>

08001fce <LoopForever>:

LoopForever:
    b LoopForever
 8001fce:	e7fe      	b.n	8001fce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001fd4:	08008888 	.word	0x08008888
	ldr	r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fdc:	200002a4 	.word	0x200002a4
	ldr	r2, =_sbss
 8001fe0:	200002a4 	.word	0x200002a4
	ldr	r3, = _ebss
 8001fe4:	20000654 	.word	0x20000654

08001fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC1_2_IRQHandler>
	...

08001fec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <I2Cx_MspInit+0xa8>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <I2Cx_MspInit+0xa8>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <I2Cx_MspInit+0xa8>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800200c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002010:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002012:	2312      	movs	r3, #18
 8002014:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002016:	2301      	movs	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800201e:	2304      	movs	r3, #4
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	481b      	ldr	r0, [pc, #108]	; (8002098 <I2Cx_MspInit+0xac>)
 800202a:	f001 f9a1 	bl	8003370 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4818      	ldr	r0, [pc, #96]	; (8002098 <I2Cx_MspInit+0xac>)
 8002036:	f001 f99b 	bl	8003370 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <I2Cx_MspInit+0xa8>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a15      	ldr	r2, [pc, #84]	; (8002094 <I2Cx_MspInit+0xa8>)
 8002040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <I2Cx_MspInit+0xa8>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <I2Cx_MspInit+0xa8>)
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <I2Cx_MspInit+0xa8>)
 8002058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <I2Cx_MspInit+0xa8>)
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <I2Cx_MspInit+0xa8>)
 8002064:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002068:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	210f      	movs	r1, #15
 800206e:	2021      	movs	r0, #33	; 0x21
 8002070:	f001 f947 	bl	8003302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002074:	2021      	movs	r0, #33	; 0x21
 8002076:	f001 f960 	bl	800333a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	210f      	movs	r1, #15
 800207e:	2022      	movs	r0, #34	; 0x22
 8002080:	f001 f93f 	bl	8003302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002084:	2022      	movs	r0, #34	; 0x22
 8002086:	f001 f958 	bl	800333a <HAL_NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	48000400 	.word	0x48000400

0800209c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <I2Cx_Init+0x54>)
 80020a8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <I2Cx_Init+0x58>)
 80020ae:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff89 	bl	8001fec <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f001 fc48 	bl	8003970 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80020e0:	2100      	movs	r1, #0
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f002 f94c 	bl	8004380 <HAL_I2CEx_ConfigAnalogFilter>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40005800 	.word	0x40005800
 80020f4:	00702681 	.word	0x00702681

080020f8 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af04      	add	r7, sp, #16
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4603      	mov	r3, r0
 8002108:	72fb      	strb	r3, [r7, #11]
 800210a:	460b      	mov	r3, r1
 800210c:	813b      	strh	r3, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	b299      	uxth	r1, r3
 800211a:	88f8      	ldrh	r0, [r7, #6]
 800211c:	893a      	ldrh	r2, [r7, #8]
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	9302      	str	r3, [sp, #8]
 8002124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4603      	mov	r3, r0
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f001 fdf0 	bl	8003d14 <HAL_I2C_Mem_Read>
 8002134:	4603      	mov	r3, r0
 8002136:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	4619      	mov	r1, r3
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f832 	bl	80021ac <I2Cx_Error>
  }
  return status;
 8002148:	7dfb      	ldrb	r3, [r7, #23]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b08a      	sub	sp, #40	; 0x28
 8002156:	af04      	add	r7, sp, #16
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	4608      	mov	r0, r1
 800215c:	4611      	mov	r1, r2
 800215e:	461a      	mov	r2, r3
 8002160:	4603      	mov	r3, r0
 8002162:	72fb      	strb	r3, [r7, #11]
 8002164:	460b      	mov	r3, r1
 8002166:	813b      	strh	r3, [r7, #8]
 8002168:	4613      	mov	r3, r2
 800216a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	b299      	uxth	r1, r3
 8002174:	88f8      	ldrh	r0, [r7, #6]
 8002176:	893a      	ldrh	r2, [r7, #8]
 8002178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	4603      	mov	r3, r0
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f001 fcaf 	bl	8003aec <HAL_I2C_Mem_Write>
 800218e:	4603      	mov	r3, r0
 8002190:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	4619      	mov	r1, r3
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f805 	bl	80021ac <I2Cx_Error>
  }
  return status;
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f001 fc68 	bl	8003a8e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ff6c 	bl	800209c <I2Cx_Init>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <SENSOR_IO_Init+0x10>)
 80021d2:	f7ff ff63 	bl	800209c <I2Cx_Init>
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000053c 	.word	0x2000053c

080021e0 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	460b      	mov	r3, r1
 80021ec:	71bb      	strb	r3, [r7, #6]
 80021ee:	4613      	mov	r3, r2
 80021f0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	79f9      	ldrb	r1, [r7, #7]
 80021f8:	2301      	movs	r3, #1
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	1d7b      	adds	r3, r7, #5
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2301      	movs	r3, #1
 8002202:	4803      	ldr	r0, [pc, #12]	; (8002210 <SENSOR_IO_Write+0x30>)
 8002204:	f7ff ffa5 	bl	8002152 <I2Cx_WriteMultiple>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000053c 	.word	0x2000053c

08002214 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af02      	add	r7, sp, #8
 800221a:	4603      	mov	r3, r0
 800221c:	460a      	mov	r2, r1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	b29a      	uxth	r2, r3
 800222c:	79f9      	ldrb	r1, [r7, #7]
 800222e:	2301      	movs	r3, #1
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	f107 030f 	add.w	r3, r7, #15
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2301      	movs	r3, #1
 800223a:	4804      	ldr	r0, [pc, #16]	; (800224c <SENSOR_IO_Read+0x38>)
 800223c:	f7ff ff5c 	bl	80020f8 <I2Cx_ReadMultiple>

  return read_value;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000053c 	.word	0x2000053c

08002250 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af02      	add	r7, sp, #8
 8002256:	603a      	str	r2, [r7, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
 800225e:	460b      	mov	r3, r1
 8002260:	71bb      	strb	r3, [r7, #6]
 8002262:	4613      	mov	r3, r2
 8002264:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002266:	79bb      	ldrb	r3, [r7, #6]
 8002268:	b29a      	uxth	r2, r3
 800226a:	79f9      	ldrb	r1, [r7, #7]
 800226c:	88bb      	ldrh	r3, [r7, #4]
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2301      	movs	r3, #1
 8002276:	4804      	ldr	r0, [pc, #16]	; (8002288 <SENSOR_IO_ReadMultiple+0x38>)
 8002278:	f7ff ff3e 	bl	80020f8 <I2Cx_ReadMultiple>
 800227c:	4603      	mov	r3, r0
 800227e:	b29b      	uxth	r3, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000053c 	.word	0x2000053c

0800228c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002296:	2300      	movs	r3, #0
 8002298:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <BSP_ACCELERO_Init+0x74>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4798      	blx	r3
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b6a      	cmp	r3, #106	; 0x6a
 80022a4:	d002      	beq.n	80022ac <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e024      	b.n	80022f6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <BSP_ACCELERO_Init+0x78>)
 80022ae:	4a14      	ldr	r2, [pc, #80]	; (8002300 <BSP_ACCELERO_Init+0x74>)
 80022b0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80022b2:	2330      	movs	r3, #48	; 0x30
 80022b4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80022ba:	2300      	movs	r3, #0
 80022bc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80022be:	2340      	movs	r3, #64	; 0x40
 80022c0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80022ca:	797a      	ldrb	r2, [r7, #5]
 80022cc:	7abb      	ldrb	r3, [r7, #10]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80022d4:	7a3b      	ldrb	r3, [r7, #8]
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21a      	sxth	r2, r3
 80022e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <BSP_ACCELERO_Init+0x78>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	89ba      	ldrh	r2, [r7, #12]
 80022f2:	4610      	mov	r0, r2
 80022f4:	4798      	blx	r3
  }  

  return ret;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000064 	.word	0x20000064
 8002304:	20000588 	.word	0x20000588

08002308 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
    }
  }
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000588 	.word	0x20000588

08002338 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002342:	2300      	movs	r3, #0
 8002344:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <BSP_GYRO_Init+0x7c>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4798      	blx	r3
 800234c:	4603      	mov	r3, r0
 800234e:	2b6a      	cmp	r3, #106	; 0x6a
 8002350:	d002      	beq.n	8002358 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e028      	b.n	80023aa <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <BSP_GYRO_Init+0x80>)
 800235a:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <BSP_GYRO_Init+0x7c>)
 800235c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002362:	2330      	movs	r3, #48	; 0x30
 8002364:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800236e:	2340      	movs	r3, #64	; 0x40
 8002370:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002376:	230c      	movs	r3, #12
 8002378:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800237a:	7aba      	ldrb	r2, [r7, #10]
 800237c:	797b      	ldrb	r3, [r7, #5]
 800237e:	4313      	orrs	r3, r2
 8002380:	b2db      	uxtb	r3, r3
 8002382:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002384:	7a3b      	ldrb	r3, [r7, #8]
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	b2db      	uxtb	r3, r3
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	b21a      	sxth	r2, r3
 8002390:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	b21b      	sxth	r3, r3
 8002398:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <BSP_GYRO_Init+0x80>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	89ba      	ldrh	r2, [r7, #12]
 80023a2:	4610      	mov	r0, r2
 80023a4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000098 	.word	0x20000098
 80023b8:	2000058c 	.word	0x2000058c

080023bc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <BSP_GYRO_GetXYZ+0x2c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <BSP_GYRO_GetXYZ+0x2c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <BSP_GYRO_GetXYZ+0x2c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	2000058c 	.word	0x2000058c

080023ec <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <BSP_HSENSOR_Init+0x38>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	20be      	movs	r0, #190	; 0xbe
 80023f8:	4798      	blx	r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	2bbc      	cmp	r3, #188	; 0xbc
 80023fe:	d002      	beq.n	8002406 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	e009      	b.n	800241a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <BSP_HSENSOR_Init+0x3c>)
 8002408:	4a06      	ldr	r2, [pc, #24]	; (8002424 <BSP_HSENSOR_Init+0x38>)
 800240a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <BSP_HSENSOR_Init+0x3c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	20be      	movs	r0, #190	; 0xbe
 8002414:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800241a:	687b      	ldr	r3, [r7, #4]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000008 	.word	0x20000008
 8002428:	20000590 	.word	0x20000590

0800242c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	20be      	movs	r0, #190	; 0xbe
 8002438:	4798      	blx	r3
 800243a:	eef0 7a40 	vmov.f32	s15, s0
}
 800243e:	eeb0 0a67 	vmov.f32	s0, s15
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000590 	.word	0x20000590

08002448 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <BSP_MAGNETO_Init+0x50>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4798      	blx	r3
 8002458:	4603      	mov	r3, r0
 800245a:	2b3d      	cmp	r3, #61	; 0x3d
 800245c:	d002      	beq.n	8002464 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	e013      	b.n	800248c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <BSP_MAGNETO_Init+0x54>)
 8002466:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <BSP_MAGNETO_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800246a:	2358      	movs	r3, #88	; 0x58
 800246c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800246e:	2300      	movs	r3, #0
 8002470:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002472:	2300      	movs	r3, #0
 8002474:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002476:	2308      	movs	r3, #8
 8002478:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800247a:	2340      	movs	r3, #64	; 0x40
 800247c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <BSP_MAGNETO_Init+0x54>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	463a      	mov	r2, r7
 8002486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800248a:	4798      	blx	r3
  } 

  return ret;  
 800248c:	79fb      	ldrb	r3, [r7, #7]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000024 	.word	0x20000024
 800249c:	20000594 	.word	0x20000594

080024a0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <BSP_MAGNETO_GetXYZ+0x2c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <BSP_MAGNETO_GetXYZ+0x2c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d004      	beq.n	80024c4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <BSP_MAGNETO_GetXYZ+0x2c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
    }
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000594 	.word	0x20000594

080024d0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <BSP_PSENSOR_Init+0x38>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	20ba      	movs	r0, #186	; 0xba
 80024dc:	4798      	blx	r3
 80024de:	4603      	mov	r3, r0
 80024e0:	2bb1      	cmp	r3, #177	; 0xb1
 80024e2:	d002      	beq.n	80024ea <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	e009      	b.n	80024fe <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <BSP_PSENSOR_Init+0x3c>)
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <BSP_PSENSOR_Init+0x38>)
 80024ee:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <BSP_PSENSOR_Init+0x3c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	20ba      	movs	r0, #186	; 0xba
 80024f8:	4798      	blx	r3
    ret = PSENSOR_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80024fe:	687b      	ldr	r3, [r7, #4]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000058 	.word	0x20000058
 800250c:	20000598 	.word	0x20000598

08002510 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <BSP_PSENSOR_ReadPressure+0x18>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	20ba      	movs	r0, #186	; 0xba
 800251c:	4798      	blx	r3
 800251e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002522:	eeb0 0a67 	vmov.f32	s0, s15
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000598 	.word	0x20000598

0800252c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <BSP_TSENSOR_Init+0x30>)
 8002538:	4a09      	ldr	r2, [pc, #36]	; (8002560 <BSP_TSENSOR_Init+0x34>)
 800253a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800253c:	f7ff fe46 	bl	80021cc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <BSP_TSENSOR_Init+0x30>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2100      	movs	r1, #0
 8002548:	20be      	movs	r0, #190	; 0xbe
 800254a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002550:	79fb      	ldrb	r3, [r7, #7]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000059c 	.word	0x2000059c
 8002560:	20000014 	.word	0x20000014

08002564 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <BSP_TSENSOR_ReadTemp+0x18>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	20be      	movs	r0, #190	; 0xbe
 8002570:	4798      	blx	r3
 8002572:	eef0 7a40 	vmov.f32	s15, s0
}
 8002576:	eeb0 0a67 	vmov.f32	s0, s15
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000059c 	.word	0x2000059c

08002580 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2120      	movs	r1, #32
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fe3f 	bl	8002214 <SENSOR_IO_Read>
 8002596:	4603      	mov	r3, r0
 8002598:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	f023 0303 	bic.w	r3, r3, #3
 80025b0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025c0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	2120      	movs	r1, #32
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fe08 	bl	80021e0 <SENSOR_IO_Write>
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80025e6:	f7ff fdf1 	bl	80021cc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	210f      	movs	r1, #15
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fe0f 	bl	8002214 <SENSOR_IO_Read>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	b2d8      	uxtb	r0, r3
 8002612:	f107 020c 	add.w	r2, r7, #12
 8002616:	2302      	movs	r3, #2
 8002618:	21b0      	movs	r1, #176	; 0xb0
 800261a:	f7ff fe19 	bl	8002250 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800261e:	7b3b      	ldrb	r3, [r7, #12]
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002626:	7b7b      	ldrb	r3, [r7, #13]
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	b2d8      	uxtb	r0, r3
 8002632:	f107 020c 	add.w	r2, r7, #12
 8002636:	2302      	movs	r3, #2
 8002638:	21b6      	movs	r1, #182	; 0xb6
 800263a:	f7ff fe09 	bl	8002250 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b21a      	sxth	r2, r3
 8002644:	7b3b      	ldrb	r3, [r7, #12]
 8002646:	b21b      	sxth	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	b2d8      	uxtb	r0, r3
 8002650:	f107 020c 	add.w	r2, r7, #12
 8002654:	2302      	movs	r3, #2
 8002656:	21ba      	movs	r1, #186	; 0xba
 8002658:	f7ff fdfa 	bl	8002250 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800265c:	7b7b      	ldrb	r3, [r7, #13]
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	b21a      	sxth	r2, r3
 8002662:	7b3b      	ldrb	r3, [r7, #12]
 8002664:	b21b      	sxth	r3, r3
 8002666:	4313      	orrs	r3, r2
 8002668:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	b2d8      	uxtb	r0, r3
 800266e:	f107 020c 	add.w	r2, r7, #12
 8002672:	2302      	movs	r3, #2
 8002674:	21a8      	movs	r1, #168	; 0xa8
 8002676:	f7ff fdeb 	bl	8002250 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800267a:	7b7b      	ldrb	r3, [r7, #13]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	b21a      	sxth	r2, r3
 8002680:	7b3b      	ldrb	r3, [r7, #12]
 8002682:	b21b      	sxth	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800268c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800269a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800269e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026b0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80026b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80026da:	edd7 7a04 	vldr	s15, [r7, #16]
 80026de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80026ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002734 <HTS221_H_ReadHumidity+0x130>
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	dd01      	ble.n	8002700 <HTS221_H_ReadHumidity+0xfc>
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <HTS221_H_ReadHumidity+0x134>)
 80026fe:	e00a      	b.n	8002716 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002700:	edd7 7a04 	vldr	s15, [r7, #16]
 8002704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	d502      	bpl.n	8002714 <HTS221_H_ReadHumidity+0x110>
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e000      	b.n	8002716 <HTS221_H_ReadHumidity+0x112>
 8002714:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002716:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002718:	edd7 7a04 	vldr	s15, [r7, #16]
 800271c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002720:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002724:	eef0 7a66 	vmov.f32	s15, s13
}
 8002728:	eeb0 0a67 	vmov.f32	s0, s15
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	447a0000 	.word	0x447a0000
 8002738:	447a0000 	.word	0x447a0000

0800273c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2120      	movs	r1, #32
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fd60 	bl	8002214 <SENSOR_IO_Read>
 8002754:	4603      	mov	r3, r0
 8002756:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	f023 0304 	bic.w	r3, r3, #4
 800275e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800277e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	2120      	movs	r1, #32
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fd29 	bl	80021e0 <SENSOR_IO_Write>
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b088      	sub	sp, #32
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	b2d8      	uxtb	r0, r3
 80027a4:	f107 0208 	add.w	r2, r7, #8
 80027a8:	2302      	movs	r3, #2
 80027aa:	21b2      	movs	r1, #178	; 0xb2
 80027ac:	f7ff fd50 	bl	8002250 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2135      	movs	r1, #53	; 0x35
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fd2c 	bl	8002214 <SENSOR_IO_Read>
 80027bc:	4603      	mov	r3, r0
 80027be:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80027c0:	7ffb      	ldrb	r3, [r7, #31]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	b21a      	sxth	r2, r3
 80027cc:	7a3b      	ldrb	r3, [r7, #8]
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
 80027d6:	019b      	lsls	r3, r3, #6
 80027d8:	b21b      	sxth	r3, r3
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	b21a      	sxth	r2, r3
 80027e0:	7a7b      	ldrb	r3, [r7, #9]
 80027e2:	b21b      	sxth	r3, r3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80027e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027ec:	10db      	asrs	r3, r3, #3
 80027ee:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80027f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027f4:	10db      	asrs	r3, r3, #3
 80027f6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	b2d8      	uxtb	r0, r3
 80027fc:	f107 0208 	add.w	r2, r7, #8
 8002800:	2304      	movs	r3, #4
 8002802:	21bc      	movs	r1, #188	; 0xbc
 8002804:	f7ff fd24 	bl	8002250 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002808:	7a7b      	ldrb	r3, [r7, #9]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	b21a      	sxth	r2, r3
 800280e:	7a3b      	ldrb	r3, [r7, #8]
 8002810:	b21b      	sxth	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002816:	7afb      	ldrb	r3, [r7, #11]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	b21a      	sxth	r2, r3
 800281c:	7abb      	ldrb	r3, [r7, #10]
 800281e:	b21b      	sxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	b2d8      	uxtb	r0, r3
 8002828:	f107 0208 	add.w	r2, r7, #8
 800282c:	2302      	movs	r3, #2
 800282e:	21aa      	movs	r1, #170	; 0xaa
 8002830:	f7ff fd0e 	bl	8002250 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002834:	7a7b      	ldrb	r3, [r7, #9]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b21a      	sxth	r2, r3
 800283a:	7a3b      	ldrb	r3, [r7, #8]
 800283c:	b21b      	sxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002842:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002846:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002854:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002858:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002866:	ee67 6a27 	vmul.f32	s13, s14, s15
 800286a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800286e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002880:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002890:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	ee07 3a90 	vmov	s15, r3
}
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	463b      	mov	r3, r7
 80028ac:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80028b0:	783b      	ldrb	r3, [r7, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	2120      	movs	r1, #32
 80028b6:	203c      	movs	r0, #60	; 0x3c
 80028b8:	f7ff fc92 	bl	80021e0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	461a      	mov	r2, r3
 80028c0:	2121      	movs	r1, #33	; 0x21
 80028c2:	203c      	movs	r0, #60	; 0x3c
 80028c4:	f7ff fc8c 	bl	80021e0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80028c8:	78bb      	ldrb	r3, [r7, #2]
 80028ca:	461a      	mov	r2, r3
 80028cc:	2122      	movs	r1, #34	; 0x22
 80028ce:	203c      	movs	r0, #60	; 0x3c
 80028d0:	f7ff fc86 	bl	80021e0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	461a      	mov	r2, r3
 80028d8:	2123      	movs	r1, #35	; 0x23
 80028da:	203c      	movs	r0, #60	; 0x3c
 80028dc:	f7ff fc80 	bl	80021e0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80028e0:	793b      	ldrb	r3, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	2124      	movs	r1, #36	; 0x24
 80028e6:	203c      	movs	r0, #60	; 0x3c
 80028e8:	f7ff fc7a 	bl	80021e0 <SENSOR_IO_Write>
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80028fa:	2300      	movs	r3, #0
 80028fc:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80028fe:	2122      	movs	r1, #34	; 0x22
 8002900:	203c      	movs	r0, #60	; 0x3c
 8002902:	f7ff fc87 	bl	8002214 <SENSOR_IO_Read>
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f023 0303 	bic.w	r3, r3, #3
 8002910:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f043 0303 	orr.w	r3, r3, #3
 8002918:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	461a      	mov	r2, r3
 800291e:	2122      	movs	r1, #34	; 0x22
 8002920:	203c      	movs	r0, #60	; 0x3c
 8002922:	f7ff fc5d 	bl	80021e0 <SENSOR_IO_Write>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002932:	f7ff fc4b 	bl	80021cc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002936:	210f      	movs	r1, #15
 8002938:	203c      	movs	r0, #60	; 0x3c
 800293a:	f7ff fc6b 	bl	8002214 <SENSOR_IO_Read>
 800293e:	4603      	mov	r3, r0
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}

08002944 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002952:	2122      	movs	r1, #34	; 0x22
 8002954:	203c      	movs	r0, #60	; 0x3c
 8002956:	f7ff fc5d 	bl	8002214 <SENSOR_IO_Read>
 800295a:	4603      	mov	r3, r0
 800295c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	f023 0320 	bic.w	r3, r3, #32
 8002964:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	461a      	mov	r2, r3
 8002978:	2122      	movs	r1, #34	; 0x22
 800297a:	203c      	movs	r0, #60	; 0x3c
 800297c:	f7ff fc30 	bl	80021e0 <SENSOR_IO_Write>
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002990:	2300      	movs	r3, #0
 8002992:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800299e:	2121      	movs	r1, #33	; 0x21
 80029a0:	203c      	movs	r0, #60	; 0x3c
 80029a2:	f7ff fc37 	bl	8002214 <SENSOR_IO_Read>
 80029a6:	4603      	mov	r3, r0
 80029a8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80029aa:	f107 0208 	add.w	r2, r7, #8
 80029ae:	2306      	movs	r3, #6
 80029b0:	21a8      	movs	r1, #168	; 0xa8
 80029b2:	203c      	movs	r0, #60	; 0x3c
 80029b4:	f7ff fc4c 	bl	8002250 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e01c      	b.n	80029f8 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	3301      	adds	r3, #1
 80029c4:	3320      	adds	r3, #32
 80029c6:	443b      	add	r3, r7
 80029c8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	7ffb      	ldrb	r3, [r7, #31]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	3320      	adds	r3, #32
 80029d8:	443b      	add	r3, r7
 80029da:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	7ffb      	ldrb	r3, [r7, #31]
 80029e6:	b212      	sxth	r2, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	3320      	adds	r3, #32
 80029ec:	443b      	add	r3, r7
 80029ee:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
 80029f4:	3301      	adds	r3, #1
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	7ffb      	ldrb	r3, [r7, #31]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d9df      	bls.n	80029be <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002a04:	2b60      	cmp	r3, #96	; 0x60
 8002a06:	d013      	beq.n	8002a30 <LIS3MDL_MagReadXYZ+0xa8>
 8002a08:	2b60      	cmp	r3, #96	; 0x60
 8002a0a:	dc14      	bgt.n	8002a36 <LIS3MDL_MagReadXYZ+0xae>
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d00c      	beq.n	8002a2a <LIS3MDL_MagReadXYZ+0xa2>
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	dc10      	bgt.n	8002a36 <LIS3MDL_MagReadXYZ+0xae>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <LIS3MDL_MagReadXYZ+0x96>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d003      	beq.n	8002a24 <LIS3MDL_MagReadXYZ+0x9c>
 8002a1c:	e00b      	b.n	8002a36 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <LIS3MDL_MagReadXYZ+0xfc>)
 8002a20:	61bb      	str	r3, [r7, #24]
    break;
 8002a22:	e008      	b.n	8002a36 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <LIS3MDL_MagReadXYZ+0x100>)
 8002a26:	61bb      	str	r3, [r7, #24]
    break;
 8002a28:	e005      	b.n	8002a36 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <LIS3MDL_MagReadXYZ+0x104>)
 8002a2c:	61bb      	str	r3, [r7, #24]
    break;
 8002a2e:	e002      	b.n	8002a36 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <LIS3MDL_MagReadXYZ+0x108>)
 8002a32:	61bb      	str	r3, [r7, #24]
    break;    
 8002a34:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	77fb      	strb	r3, [r7, #31]
 8002a3a:	e01a      	b.n	8002a72 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002a3c:	7ffb      	ldrb	r3, [r7, #31]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	3320      	adds	r3, #32
 8002a42:	443b      	add	r3, r7
 8002a44:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a50:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a64:	ee17 2a90 	vmov	r2, s15
 8002a68:	b212      	sxth	r2, r2
 8002a6a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002a6c:	7ffb      	ldrb	r3, [r7, #31]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	77fb      	strb	r3, [r7, #31]
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d9e1      	bls.n	8002a3c <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	3e0f5c29 	.word	0x3e0f5c29
 8002a88:	3e947ae1 	.word	0x3e947ae1
 8002a8c:	3edc28f6 	.word	0x3edc28f6
 8002a90:	3f147ae1 	.word	0x3f147ae1

08002a94 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f879 	bl	8002b98 <LPS22HB_Init>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002abc:	f7ff fb86 	bl	80021cc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fba4 	bl	8002214 <SENSOR_IO_Read>
 8002acc:	4603      	mov	r3, r0
 8002ace:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	74fb      	strb	r3, [r7, #19]
 8002aee:	e013      	b.n	8002b18 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	3328      	adds	r3, #40	; 0x28
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	7cfc      	ldrb	r4, [r7, #19]
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f7ff fb88 	bl	8002214 <SENSOR_IO_Read>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	f104 0318 	add.w	r3, r4, #24
 8002b0c:	443b      	add	r3, r7
 8002b0e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	3301      	adds	r3, #1
 8002b16:	74fb      	strb	r3, [r7, #19]
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d9e8      	bls.n	8002af0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	74fb      	strb	r3, [r7, #19]
 8002b22:	e00f      	b.n	8002b44 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	3318      	adds	r3, #24
 8002b28:	443b      	add	r3, r7
 8002b2a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	3301      	adds	r3, #1
 8002b42:	74fb      	strb	r3, [r7, #19]
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d9ec      	bls.n	8002b24 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b5a:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2264      	movs	r2, #100	; 0x64
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	da01      	bge.n	8002b70 <LPS22HB_P_ReadPressure+0x94>
 8002b6c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002b70:	131b      	asrs	r3, r3, #12
 8002b72:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b7e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b94 <LPS22HB_P_ReadPressure+0xb8>
 8002b82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b86:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}
 8002b94:	42c80000 	.word	0x42c80000

08002b98 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	211a      	movs	r1, #26
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fb33 	bl	8002214 <SENSOR_IO_Read>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	211a      	movs	r1, #26
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fb08 	bl	80021e0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2110      	movs	r1, #16
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fb1c 	bl	8002214 <SENSOR_IO_Read>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002bee:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	f023 0302 	bic.w	r3, r3, #2
 8002bf6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	2110      	movs	r1, #16
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fae9 	bl	80021e0 <SENSOR_IO_Write>
}  
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002c24:	2110      	movs	r1, #16
 8002c26:	20d4      	movs	r0, #212	; 0xd4
 8002c28:	f7ff faf4 	bl	8002214 <SENSOR_IO_Read>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002c34:	7bbb      	ldrb	r3, [r7, #14]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002c3c:	7bba      	ldrb	r2, [r7, #14]
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002c44:	7bbb      	ldrb	r3, [r7, #14]
 8002c46:	461a      	mov	r2, r3
 8002c48:	2110      	movs	r1, #16
 8002c4a:	20d4      	movs	r0, #212	; 0xd4
 8002c4c:	f7ff fac8 	bl	80021e0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002c50:	2112      	movs	r1, #18
 8002c52:	20d4      	movs	r0, #212	; 0xd4
 8002c54:	f7ff fade 	bl	8002214 <SENSOR_IO_Read>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002c64:	7bbb      	ldrb	r3, [r7, #14]
 8002c66:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002c6a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002c6c:	7bba      	ldrb	r2, [r7, #14]
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002c74:	7bbb      	ldrb	r3, [r7, #14]
 8002c76:	461a      	mov	r2, r3
 8002c78:	2112      	movs	r1, #18
 8002c7a:	20d4      	movs	r0, #212	; 0xd4
 8002c7c:	f7ff fab0 	bl	80021e0 <SENSOR_IO_Write>
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002c92:	2110      	movs	r1, #16
 8002c94:	20d4      	movs	r0, #212	; 0xd4
 8002c96:	f7ff fabd 	bl	8002214 <SENSOR_IO_Read>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2110      	movs	r1, #16
 8002cac:	20d4      	movs	r0, #212	; 0xd4
 8002cae:	f7ff fa97 	bl	80021e0 <SENSOR_IO_Write>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002cbe:	f7ff fa85 	bl	80021cc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	20d4      	movs	r0, #212	; 0xd4
 8002cc6:	f7ff faa5 	bl	8002214 <SENSOR_IO_Read>
 8002cca:	4603      	mov	r3, r0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002cde:	2115      	movs	r1, #21
 8002ce0:	20d4      	movs	r0, #212	; 0xd4
 8002ce2:	f7ff fa97 	bl	8002214 <SENSOR_IO_Read>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	f023 0310 	bic.w	r3, r3, #16
 8002cf0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	f043 0310 	orr.w	r3, r3, #16
 8002cfe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	461a      	mov	r2, r3
 8002d04:	2115      	movs	r1, #21
 8002d06:	20d4      	movs	r0, #212	; 0xd4
 8002d08:	f7ff fa6a 	bl	80021e0 <SENSOR_IO_Write>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	20d4      	movs	r0, #212	; 0xd4
 8002d2e:	f7ff fa71 	bl	8002214 <SENSOR_IO_Read>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002d36:	f107 0208 	add.w	r2, r7, #8
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	2128      	movs	r1, #40	; 0x28
 8002d3e:	20d4      	movs	r0, #212	; 0xd4
 8002d40:	f7ff fa86 	bl	8002250 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e01c      	b.n	8002d84 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	3301      	adds	r3, #1
 8002d50:	3320      	adds	r3, #32
 8002d52:	443b      	add	r3, r7
 8002d54:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	7ffb      	ldrb	r3, [r7, #31]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	3320      	adds	r3, #32
 8002d64:	443b      	add	r3, r7
 8002d66:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	b212      	sxth	r2, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	3320      	adds	r3, #32
 8002d78:	443b      	add	r3, r7
 8002d7a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002d7e:	7ffb      	ldrb	r3, [r7, #31]
 8002d80:	3301      	adds	r3, #1
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d9df      	bls.n	8002d4a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b0c      	cmp	r3, #12
 8002d92:	d829      	bhi.n	8002de8 <LSM6DSL_AccReadXYZ+0xd4>
 8002d94:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <LSM6DSL_AccReadXYZ+0x88>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002dd1 	.word	0x08002dd1
 8002da0:	08002de9 	.word	0x08002de9
 8002da4:	08002de9 	.word	0x08002de9
 8002da8:	08002de9 	.word	0x08002de9
 8002dac:	08002de3 	.word	0x08002de3
 8002db0:	08002de9 	.word	0x08002de9
 8002db4:	08002de9 	.word	0x08002de9
 8002db8:	08002de9 	.word	0x08002de9
 8002dbc:	08002dd7 	.word	0x08002dd7
 8002dc0:	08002de9 	.word	0x08002de9
 8002dc4:	08002de9 	.word	0x08002de9
 8002dc8:	08002de9 	.word	0x08002de9
 8002dcc:	08002ddd 	.word	0x08002ddd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <LSM6DSL_AccReadXYZ+0x120>)
 8002dd2:	61bb      	str	r3, [r7, #24]
    break;
 8002dd4:	e008      	b.n	8002de8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <LSM6DSL_AccReadXYZ+0x124>)
 8002dd8:	61bb      	str	r3, [r7, #24]
    break;
 8002dda:	e005      	b.n	8002de8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <LSM6DSL_AccReadXYZ+0x128>)
 8002dde:	61bb      	str	r3, [r7, #24]
    break;
 8002de0:	e002      	b.n	8002de8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <LSM6DSL_AccReadXYZ+0x12c>)
 8002de4:	61bb      	str	r3, [r7, #24]
    break;    
 8002de6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e01a      	b.n	8002e24 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	3320      	adds	r3, #32
 8002df4:	443b      	add	r3, r7
 8002df6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e02:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e16:	ee17 2a90 	vmov	r2, s15
 8002e1a:	b212      	sxth	r2, r2
 8002e1c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	3301      	adds	r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	7ffb      	ldrb	r3, [r7, #31]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d9e1      	bls.n	8002dee <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	3d79db23 	.word	0x3d79db23
 8002e38:	3df9db23 	.word	0x3df9db23
 8002e3c:	3e79db23 	.word	0x3e79db23
 8002e40:	3ef9db23 	.word	0x3ef9db23

08002e44 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002e52:	2111      	movs	r1, #17
 8002e54:	20d4      	movs	r0, #212	; 0xd4
 8002e56:	f7ff f9dd 	bl	8002214 <SENSOR_IO_Read>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002e62:	7bbb      	ldrb	r3, [r7, #14]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002e6a:	7bba      	ldrb	r2, [r7, #14]
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002e72:	7bbb      	ldrb	r3, [r7, #14]
 8002e74:	461a      	mov	r2, r3
 8002e76:	2111      	movs	r1, #17
 8002e78:	20d4      	movs	r0, #212	; 0xd4
 8002e7a:	f7ff f9b1 	bl	80021e0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002e7e:	2112      	movs	r1, #18
 8002e80:	20d4      	movs	r0, #212	; 0xd4
 8002e82:	f7ff f9c7 	bl	8002214 <SENSOR_IO_Read>
 8002e86:	4603      	mov	r3, r0
 8002e88:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002e92:	7bbb      	ldrb	r3, [r7, #14]
 8002e94:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002e98:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002e9a:	7bba      	ldrb	r2, [r7, #14]
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2112      	movs	r1, #18
 8002ea8:	20d4      	movs	r0, #212	; 0xd4
 8002eaa:	f7ff f999 	bl	80021e0 <SENSOR_IO_Write>
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002ec0:	2111      	movs	r1, #17
 8002ec2:	20d4      	movs	r0, #212	; 0xd4
 8002ec4:	f7ff f9a6 	bl	8002214 <SENSOR_IO_Read>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2111      	movs	r1, #17
 8002eda:	20d4      	movs	r0, #212	; 0xd4
 8002edc:	f7ff f980 	bl	80021e0 <SENSOR_IO_Write>
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002eec:	f7ff f96e 	bl	80021cc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	20d4      	movs	r0, #212	; 0xd4
 8002ef4:	f7ff f98e 	bl	8002214 <SENSOR_IO_Read>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	bd80      	pop	{r7, pc}

08002efe <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002f0c:	2116      	movs	r1, #22
 8002f0e:	20d4      	movs	r0, #212	; 0xd4
 8002f10:	f7ff f980 	bl	8002214 <SENSOR_IO_Read>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f1e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f2c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	461a      	mov	r2, r3
 8002f32:	2116      	movs	r1, #22
 8002f34:	20d4      	movs	r0, #212	; 0xd4
 8002f36:	f7ff f953 	bl	80021e0 <SENSOR_IO_Write>
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002f5a:	2111      	movs	r1, #17
 8002f5c:	20d4      	movs	r0, #212	; 0xd4
 8002f5e:	f7ff f959 	bl	8002214 <SENSOR_IO_Read>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002f66:	f107 0208 	add.w	r2, r7, #8
 8002f6a:	2306      	movs	r3, #6
 8002f6c:	2122      	movs	r1, #34	; 0x22
 8002f6e:	20d4      	movs	r0, #212	; 0xd4
 8002f70:	f7ff f96e 	bl	8002250 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e01c      	b.n	8002fb4 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002f7a:	7ffb      	ldrb	r3, [r7, #31]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	3301      	adds	r3, #1
 8002f80:	3320      	adds	r3, #32
 8002f82:	443b      	add	r3, r7
 8002f84:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	3320      	adds	r3, #32
 8002f94:	443b      	add	r3, r7
 8002f96:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
 8002fa2:	b212      	sxth	r2, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	3320      	adds	r3, #32
 8002fa8:	443b      	add	r3, r7
 8002faa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002fae:	7ffb      	ldrb	r3, [r7, #31]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d9df      	bls.n	8002f7a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d829      	bhi.n	8003018 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003019 	.word	0x08003019
 8002fd4:	08003019 	.word	0x08003019
 8002fd8:	08003019 	.word	0x08003019
 8002fdc:	08003007 	.word	0x08003007
 8002fe0:	08003019 	.word	0x08003019
 8002fe4:	08003019 	.word	0x08003019
 8002fe8:	08003019 	.word	0x08003019
 8002fec:	0800300d 	.word	0x0800300d
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	08003019 	.word	0x08003019
 8002ff8:	08003019 	.word	0x08003019
 8002ffc:	08003013 	.word	0x08003013
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003000:	4b16      	ldr	r3, [pc, #88]	; (800305c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003002:	61bb      	str	r3, [r7, #24]
    break;
 8003004:	e008      	b.n	8003018 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003008:	61bb      	str	r3, [r7, #24]
    break;
 800300a:	e005      	b.n	8003018 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800300e:	61bb      	str	r3, [r7, #24]
    break;
 8003010:	e002      	b.n	8003018 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8003014:	61bb      	str	r3, [r7, #24]
    break;    
 8003016:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003018:	2300      	movs	r3, #0
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e016      	b.n	800304c <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800301e:	7ffb      	ldrb	r3, [r7, #31]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	3320      	adds	r3, #32
 8003024:	443b      	add	r3, r7
 8003026:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003032:	7ffb      	ldrb	r3, [r7, #31]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	edd7 7a06 	vldr	s15, [r7, #24]
 800303e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003042:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003046:	7ffb      	ldrb	r3, [r7, #31]
 8003048:	3301      	adds	r3, #1
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	7ffb      	ldrb	r3, [r7, #31]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d9e5      	bls.n	800301e <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	410c0000 	.word	0x410c0000
 8003060:	418c0000 	.word	0x418c0000
 8003064:	420c0000 	.word	0x420c0000
 8003068:	428c0000 	.word	0x428c0000

0800306c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003076:	2003      	movs	r0, #3
 8003078:	f000 f938 	bl	80032ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307c:	2000      	movs	r0, #0
 800307e:	f000 f80d 	bl	800309c <HAL_InitTick>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	71fb      	strb	r3, [r7, #7]
 800308c:	e001      	b.n	8003092 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800308e:	f7fe fdcd 	bl	8001c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003092:	79fb      	ldrb	r3, [r7, #7]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_InitTick+0x68>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d022      	beq.n	80030f6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_InitTick+0x6c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_InitTick+0x68>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f946 	bl	8003356 <HAL_SYSTICK_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10f      	bne.n	80030f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d809      	bhi.n	80030ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d6:	2200      	movs	r2, #0
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	f04f 30ff 	mov.w	r0, #4294967295
 80030de:	f000 f910 	bl	8003302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <HAL_InitTick+0x70>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e007      	b.n	80030fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	e004      	b.n	80030fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e001      	b.n	80030fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200000d0 	.word	0x200000d0
 8003108:	20000004 	.word	0x20000004
 800310c:	200000cc 	.word	0x200000cc

08003110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_IncTick+0x1c>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_IncTick+0x20>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4413      	add	r3, r2
 800311e:	4a03      	ldr	r2, [pc, #12]	; (800312c <HAL_IncTick+0x1c>)
 8003120:	6013      	str	r3, [r2, #0]
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	200005a0 	.word	0x200005a0
 8003130:	200000d0 	.word	0x200000d0

08003134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return uwTick;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_GetTick+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	200005a0 	.word	0x200005a0

0800314c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <__NVIC_GetPriorityGrouping+0x18>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 0307 	and.w	r3, r3, #7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db0b      	blt.n	80031da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	4907      	ldr	r1, [pc, #28]	; (80031e8 <__NVIC_EnableIRQ+0x38>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2001      	movs	r0, #1
 80031d2:	fa00 f202 	lsl.w	r2, r0, r2
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000e100 	.word	0xe000e100

080031ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db0a      	blt.n	8003216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	490c      	ldr	r1, [pc, #48]	; (8003238 <__NVIC_SetPriority+0x4c>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	0112      	lsls	r2, r2, #4
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	440b      	add	r3, r1
 8003210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003214:	e00a      	b.n	800322c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4908      	ldr	r1, [pc, #32]	; (800323c <__NVIC_SetPriority+0x50>)
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	3b04      	subs	r3, #4
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	440b      	add	r3, r1
 800322a:	761a      	strb	r2, [r3, #24]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000e100 	.word	0xe000e100
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f1c3 0307 	rsb	r3, r3, #7
 800325a:	2b04      	cmp	r3, #4
 800325c:	bf28      	it	cs
 800325e:	2304      	movcs	r3, #4
 8003260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3304      	adds	r3, #4
 8003266:	2b06      	cmp	r3, #6
 8003268:	d902      	bls.n	8003270 <NVIC_EncodePriority+0x30>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3b03      	subs	r3, #3
 800326e:	e000      	b.n	8003272 <NVIC_EncodePriority+0x32>
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	f04f 32ff 	mov.w	r2, #4294967295
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	401a      	ands	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003288:	f04f 31ff 	mov.w	r1, #4294967295
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	43d9      	mvns	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	4313      	orrs	r3, r2
         );
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	; 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b8:	d301      	bcc.n	80032be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00f      	b.n	80032de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <SysTick_Config+0x40>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032c6:	210f      	movs	r1, #15
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f7ff ff8e 	bl	80031ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <SysTick_Config+0x40>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032d6:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <SysTick_Config+0x40>)
 80032d8:	2207      	movs	r2, #7
 80032da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	e000e010 	.word	0xe000e010

080032ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff29 	bl	800314c <__NVIC_SetPriorityGrouping>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003314:	f7ff ff3e 	bl	8003194 <__NVIC_GetPriorityGrouping>
 8003318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff ff8e 	bl	8003240 <NVIC_EncodePriority>
 8003324:	4602      	mov	r2, r0
 8003326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff5d 	bl	80031ec <__NVIC_SetPriority>
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff31 	bl	80031b0 <__NVIC_EnableIRQ>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffa2 	bl	80032a8 <SysTick_Config>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800337e:	e17f      	b.n	8003680 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	4013      	ands	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8171 	beq.w	800367a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d00b      	beq.n	80033b8 <HAL_GPIO_Init+0x48>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d007      	beq.n	80033b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ac:	2b11      	cmp	r3, #17
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b12      	cmp	r3, #18
 80033b6:	d130      	bne.n	800341a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ee:	2201      	movs	r2, #1
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 0201 	and.w	r2, r3, #1
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b03      	cmp	r3, #3
 8003424:	d118      	bne.n	8003458 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800342c:	2201      	movs	r2, #1
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	f003 0201 	and.w	r2, r3, #1
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x128>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b12      	cmp	r3, #18
 8003496:	d123      	bne.n	80034e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	220f      	movs	r2, #15
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	6939      	ldr	r1, [r7, #16]
 80034dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80ac 	beq.w	800367a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	4b5f      	ldr	r3, [pc, #380]	; (80036a0 <HAL_GPIO_Init+0x330>)
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	4a5e      	ldr	r2, [pc, #376]	; (80036a0 <HAL_GPIO_Init+0x330>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6613      	str	r3, [r2, #96]	; 0x60
 800352e:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_GPIO_Init+0x330>)
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800353a:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <HAL_GPIO_Init+0x334>)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003564:	d025      	beq.n	80035b2 <HAL_GPIO_Init+0x242>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4f      	ldr	r2, [pc, #316]	; (80036a8 <HAL_GPIO_Init+0x338>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <HAL_GPIO_Init+0x23e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4e      	ldr	r2, [pc, #312]	; (80036ac <HAL_GPIO_Init+0x33c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x23a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4d      	ldr	r2, [pc, #308]	; (80036b0 <HAL_GPIO_Init+0x340>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x236>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_GPIO_Init+0x344>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x232>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4b      	ldr	r2, [pc, #300]	; (80036b8 <HAL_GPIO_Init+0x348>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x22e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4a      	ldr	r2, [pc, #296]	; (80036bc <HAL_GPIO_Init+0x34c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x22a>
 8003596:	2306      	movs	r3, #6
 8003598:	e00c      	b.n	80035b4 <HAL_GPIO_Init+0x244>
 800359a:	2307      	movs	r3, #7
 800359c:	e00a      	b.n	80035b4 <HAL_GPIO_Init+0x244>
 800359e:	2305      	movs	r3, #5
 80035a0:	e008      	b.n	80035b4 <HAL_GPIO_Init+0x244>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_Init+0x244>
 80035a6:	2303      	movs	r3, #3
 80035a8:	e004      	b.n	80035b4 <HAL_GPIO_Init+0x244>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_Init+0x244>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_Init+0x244>
 80035b2:	2300      	movs	r3, #0
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	f002 0203 	and.w	r2, r2, #3
 80035ba:	0092      	lsls	r2, r2, #2
 80035bc:	4093      	lsls	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035c4:	4937      	ldr	r1, [pc, #220]	; (80036a4 <HAL_GPIO_Init+0x334>)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	3302      	adds	r3, #2
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_GPIO_Init+0x350>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035f6:	4a32      	ldr	r2, [pc, #200]	; (80036c0 <HAL_GPIO_Init+0x350>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035fc:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_GPIO_Init+0x350>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003620:	4a27      	ldr	r2, [pc, #156]	; (80036c0 <HAL_GPIO_Init+0x350>)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003626:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <HAL_GPIO_Init+0x350>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800364a:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <HAL_GPIO_Init+0x350>)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_GPIO_Init+0x350>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	43db      	mvns	r3, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003674:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <HAL_GPIO_Init+0x350>)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3301      	adds	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	f47f ae78 	bne.w	8003380 <HAL_GPIO_Init+0x10>
  }
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40010000 	.word	0x40010000
 80036a8:	48000400 	.word	0x48000400
 80036ac:	48000800 	.word	0x48000800
 80036b0:	48000c00 	.word	0x48000c00
 80036b4:	48001000 	.word	0x48001000
 80036b8:	48001400 	.word	0x48001400
 80036bc:	48001800 	.word	0x48001800
 80036c0:	40010400 	.word	0x40010400

080036c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80036d2:	e0cd      	b.n	8003870 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80036d4:	2201      	movs	r2, #1
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80c0 	beq.w	800386a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80036ea:	4a68      	ldr	r2, [pc, #416]	; (800388c <HAL_GPIO_DeInit+0x1c8>)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	3302      	adds	r3, #2
 80036f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	220f      	movs	r2, #15
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003712:	d025      	beq.n	8003760 <HAL_GPIO_DeInit+0x9c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a5e      	ldr	r2, [pc, #376]	; (8003890 <HAL_GPIO_DeInit+0x1cc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01f      	beq.n	800375c <HAL_GPIO_DeInit+0x98>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a5d      	ldr	r2, [pc, #372]	; (8003894 <HAL_GPIO_DeInit+0x1d0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d019      	beq.n	8003758 <HAL_GPIO_DeInit+0x94>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a5c      	ldr	r2, [pc, #368]	; (8003898 <HAL_GPIO_DeInit+0x1d4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_GPIO_DeInit+0x90>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a5b      	ldr	r2, [pc, #364]	; (800389c <HAL_GPIO_DeInit+0x1d8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00d      	beq.n	8003750 <HAL_GPIO_DeInit+0x8c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a5a      	ldr	r2, [pc, #360]	; (80038a0 <HAL_GPIO_DeInit+0x1dc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_DeInit+0x88>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a59      	ldr	r2, [pc, #356]	; (80038a4 <HAL_GPIO_DeInit+0x1e0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_GPIO_DeInit+0x84>
 8003744:	2306      	movs	r3, #6
 8003746:	e00c      	b.n	8003762 <HAL_GPIO_DeInit+0x9e>
 8003748:	2307      	movs	r3, #7
 800374a:	e00a      	b.n	8003762 <HAL_GPIO_DeInit+0x9e>
 800374c:	2305      	movs	r3, #5
 800374e:	e008      	b.n	8003762 <HAL_GPIO_DeInit+0x9e>
 8003750:	2304      	movs	r3, #4
 8003752:	e006      	b.n	8003762 <HAL_GPIO_DeInit+0x9e>
 8003754:	2303      	movs	r3, #3
 8003756:	e004      	b.n	8003762 <HAL_GPIO_DeInit+0x9e>
 8003758:	2302      	movs	r3, #2
 800375a:	e002      	b.n	8003762 <HAL_GPIO_DeInit+0x9e>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <HAL_GPIO_DeInit+0x9e>
 8003760:	2300      	movs	r3, #0
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	f002 0203 	and.w	r2, r2, #3
 8003768:	0092      	lsls	r2, r2, #2
 800376a:	4093      	lsls	r3, r2
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	429a      	cmp	r2, r3
 8003770:	d132      	bne.n	80037d8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003772:	4b4d      	ldr	r3, [pc, #308]	; (80038a8 <HAL_GPIO_DeInit+0x1e4>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	494b      	ldr	r1, [pc, #300]	; (80038a8 <HAL_GPIO_DeInit+0x1e4>)
 800377c:	4013      	ands	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003780:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <HAL_GPIO_DeInit+0x1e4>)
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	43db      	mvns	r3, r3
 8003788:	4947      	ldr	r1, [pc, #284]	; (80038a8 <HAL_GPIO_DeInit+0x1e4>)
 800378a:	4013      	ands	r3, r2
 800378c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800378e:	4b46      	ldr	r3, [pc, #280]	; (80038a8 <HAL_GPIO_DeInit+0x1e4>)
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	4944      	ldr	r1, [pc, #272]	; (80038a8 <HAL_GPIO_DeInit+0x1e4>)
 8003798:	4013      	ands	r3, r2
 800379a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_GPIO_DeInit+0x1e4>)
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	4940      	ldr	r1, [pc, #256]	; (80038a8 <HAL_GPIO_DeInit+0x1e4>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	220f      	movs	r2, #15
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80037ba:	4a34      	ldr	r2, [pc, #208]	; (800388c <HAL_GPIO_DeInit+0x1c8>)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	4830      	ldr	r0, [pc, #192]	; (800388c <HAL_GPIO_DeInit+0x1c8>)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	400a      	ands	r2, r1
 80037d2:	3302      	adds	r3, #2
 80037d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2103      	movs	r1, #3
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	08da      	lsrs	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3208      	adds	r2, #8
 80037f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	220f      	movs	r2, #15
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	08d2      	lsrs	r2, r2, #3
 800380c:	4019      	ands	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2103      	movs	r1, #3
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	401a      	ands	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	2101      	movs	r1, #1
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2103      	movs	r1, #3
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	401a      	ands	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385a:	2101      	movs	r1, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	401a      	ands	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3301      	adds	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	f47f af2b 	bne.w	80036d4 <HAL_GPIO_DeInit+0x10>
  }
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40010000 	.word	0x40010000
 8003890:	48000400 	.word	0x48000400
 8003894:	48000800 	.word	0x48000800
 8003898:	48000c00 	.word	0x48000c00
 800389c:	48001000 	.word	0x48001000
 80038a0:	48001400 	.word	0x48001400
 80038a4:	48001800 	.word	0x48001800
 80038a8:	40010400 	.word	0x40010400

080038ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e001      	b.n	80038ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	807b      	strh	r3, [r7, #2]
 80038e8:	4613      	mov	r3, r2
 80038ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038ec:	787b      	ldrb	r3, [r7, #1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038f2:	887a      	ldrh	r2, [r7, #2]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038fa:	887a      	ldrh	r2, [r7, #2]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003924:	887a      	ldrh	r2, [r7, #2]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800392a:	e002      	b.n	8003932 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800392c:	887a      	ldrh	r2, [r7, #2]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	619a      	str	r2, [r3, #24]
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003956:	4a05      	ldr	r2, [pc, #20]	; (800396c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd faa4 	bl	8000eac <HAL_GPIO_EXTI_Callback>
  }
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40010400 	.word	0x40010400

08003970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e081      	b.n	8003a86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fe f96c 	bl	8001c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	; 0x24
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d107      	bne.n	80039ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e006      	b.n	80039f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d104      	bne.n	8003a0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	ea42 0103 	orr.w	r1, r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	021a      	lsls	r2, r3, #8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69d9      	ldr	r1, [r3, #28]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e021      	b.n	8003ae4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	; 0x24
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fe f91f 	bl	8001cfc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	460b      	mov	r3, r1
 8003b00:	813b      	strh	r3, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	f040 80f9 	bne.w	8003d06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x34>
 8003b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0ed      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_I2C_Mem_Write+0x4e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e0e6      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b42:	f7ff faf7 	bl	8003134 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2319      	movs	r3, #25
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fac3 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0d1      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2221      	movs	r2, #33	; 0x21
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b8c:	88f8      	ldrh	r0, [r7, #6]
 8003b8e:	893a      	ldrh	r2, [r7, #8]
 8003b90:	8979      	ldrh	r1, [r7, #10]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f9d3 	bl	8003f48 <I2C_RequestMemoryWrite>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0a9      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2bff      	cmp	r3, #255	; 0xff
 8003bbc:	d90e      	bls.n	8003bdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	22ff      	movs	r2, #255	; 0xff
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	8979      	ldrh	r1, [r7, #10]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fba5 	bl	8004324 <I2C_TransferConfig>
 8003bda:	e00f      	b.n	8003bfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	8979      	ldrh	r1, [r7, #10]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb94 	bl	8004324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 faad 	bl	8004160 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e07b      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d034      	beq.n	8003cb4 <HAL_I2C_Mem_Write+0x1c8>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d130      	bne.n	8003cb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fa3f 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e04d      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2bff      	cmp	r3, #255	; 0xff
 8003c74:	d90e      	bls.n	8003c94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	8979      	ldrh	r1, [r7, #10]
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fb49 	bl	8004324 <I2C_TransferConfig>
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fb38 	bl	8004324 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d19e      	bne.n	8003bfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fa8c 	bl	80041e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e01a      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_I2C_Mem_Write+0x224>)
 8003ce6:	400b      	ands	r3, r1
 8003ce8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e000      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
  }
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	fe00e800 	.word	0xfe00e800

08003d14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	817b      	strh	r3, [r7, #10]
 8003d26:	460b      	mov	r3, r1
 8003d28:	813b      	strh	r3, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	f040 80fd 	bne.w	8003f36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_I2C_Mem_Read+0x34>
 8003d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0f1      	b.n	8003f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2C_Mem_Read+0x4e>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e0ea      	b.n	8003f38 <HAL_I2C_Mem_Read+0x224>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d6a:	f7ff f9e3 	bl	8003134 <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2319      	movs	r3, #25
 8003d76:	2201      	movs	r2, #1
 8003d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f9af 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0d5      	b.n	8003f38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2222      	movs	r2, #34	; 0x22
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003db4:	88f8      	ldrh	r0, [r7, #6]
 8003db6:	893a      	ldrh	r2, [r7, #8]
 8003db8:	8979      	ldrh	r1, [r7, #10]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f913 	bl	8003ff0 <I2C_RequestMemoryRead>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0ad      	b.n	8003f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2bff      	cmp	r3, #255	; 0xff
 8003de4:	d90e      	bls.n	8003e04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	22ff      	movs	r2, #255	; 0xff
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	8979      	ldrh	r1, [r7, #10]
 8003df4:	4b52      	ldr	r3, [pc, #328]	; (8003f40 <HAL_I2C_Mem_Read+0x22c>)
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fa91 	bl	8004324 <I2C_TransferConfig>
 8003e02:	e00f      	b.n	8003e24 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	8979      	ldrh	r1, [r7, #10]
 8003e16:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_I2C_Mem_Read+0x22c>)
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fa80 	bl	8004324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f956 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e07c      	b.n	8003f38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d034      	beq.n	8003ee4 <HAL_I2C_Mem_Read+0x1d0>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d130      	bne.n	8003ee4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f927 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e04d      	b.n	8003f38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2bff      	cmp	r3, #255	; 0xff
 8003ea4:	d90e      	bls.n	8003ec4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	22ff      	movs	r2, #255	; 0xff
 8003eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	8979      	ldrh	r1, [r7, #10]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fa31 	bl	8004324 <I2C_TransferConfig>
 8003ec2:	e00f      	b.n	8003ee4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	8979      	ldrh	r1, [r7, #10]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fa20 	bl	8004324 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d19a      	bne.n	8003e24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f974 	bl	80041e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e01a      	b.n	8003f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2220      	movs	r2, #32
 8003f08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_I2C_Mem_Read+0x230>)
 8003f16:	400b      	ands	r3, r1
 8003f18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	80002400 	.word	0x80002400
 8003f44:	fe00e800 	.word	0xfe00e800

08003f48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	4608      	mov	r0, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	461a      	mov	r2, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	817b      	strh	r3, [r7, #10]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	813b      	strh	r3, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	8979      	ldrh	r1, [r7, #10]
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <I2C_RequestMemoryWrite+0xa4>)
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f9d7 	bl	8004324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	69b9      	ldr	r1, [r7, #24]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f8f0 	bl	8004160 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e02c      	b.n	8003fe4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f90:	893b      	ldrh	r3, [r7, #8]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
 8003f9a:	e015      	b.n	8003fc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f9c:	893b      	ldrh	r3, [r7, #8]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	69b9      	ldr	r1, [r7, #24]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f8d6 	bl	8004160 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e012      	b.n	8003fe4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fbe:	893b      	ldrh	r3, [r7, #8]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f884 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	80002000 	.word	0x80002000

08003ff0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	817b      	strh	r3, [r7, #10]
 8004002:	460b      	mov	r3, r1
 8004004:	813b      	strh	r3, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	4b20      	ldr	r3, [pc, #128]	; (8004094 <I2C_RequestMemoryRead+0xa4>)
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	2300      	movs	r3, #0
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f984 	bl	8004324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	69b9      	ldr	r1, [r7, #24]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f89d 	bl	8004160 <I2C_WaitOnTXISFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e02c      	b.n	800408a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004036:	893b      	ldrh	r3, [r7, #8]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
 8004040:	e015      	b.n	800406e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004042:	893b      	ldrh	r3, [r7, #8]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	b29b      	uxth	r3, r3
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	69b9      	ldr	r1, [r7, #24]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f883 	bl	8004160 <I2C_WaitOnTXISFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e012      	b.n	800408a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004064:	893b      	ldrh	r3, [r7, #8]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2200      	movs	r2, #0
 8004076:	2140      	movs	r1, #64	; 0x40
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f831 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	80002000 	.word	0x80002000

08004098 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d103      	bne.n	80040b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2200      	movs	r2, #0
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d007      	beq.n	80040d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	619a      	str	r2, [r3, #24]
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f0:	e022      	b.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d01e      	beq.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7ff f81b 	bl	8003134 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d113      	bne.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e00f      	b.n	8004158 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	429a      	cmp	r2, r3
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	429a      	cmp	r2, r3
 8004154:	d0cd      	beq.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800416c:	e02c      	b.n	80041c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f870 	bl	8004258 <I2C_IsAcknowledgeFailed>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e02a      	b.n	80041d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d01e      	beq.n	80041c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe ffd3 	bl	8003134 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d113      	bne.n	80041c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e007      	b.n	80041d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d1cb      	bne.n	800416e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ec:	e028      	b.n	8004240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f830 	bl	8004258 <I2C_IsAcknowledgeFailed>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e026      	b.n	8004250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fe ff97 	bl	8003134 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d113      	bne.n	8004240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e007      	b.n	8004250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b20      	cmp	r3, #32
 800424c:	d1cf      	bne.n	80041ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b10      	cmp	r3, #16
 8004270:	d151      	bne.n	8004316 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004272:	e022      	b.n	80042ba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427a:	d01e      	beq.n	80042ba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427c:	f7fe ff5a 	bl	8003134 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <I2C_IsAcknowledgeFailed+0x3a>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d113      	bne.n	80042ba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e02e      	b.n	8004318 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d1d5      	bne.n	8004274 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2210      	movs	r2, #16
 80042ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2220      	movs	r2, #32
 80042d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff fedd 	bl	8004098 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <I2C_IsAcknowledgeFailed+0xc8>)
 80042ea:	400b      	ands	r3, r1
 80042ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f043 0204 	orr.w	r2, r3, #4
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	fe00e800 	.word	0xfe00e800

08004324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	4613      	mov	r3, r2
 8004334:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	0d5b      	lsrs	r3, r3, #21
 8004340:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <I2C_TransferConfig+0x58>)
 8004346:	430b      	orrs	r3, r1
 8004348:	43db      	mvns	r3, r3
 800434a:	ea02 0103 	and.w	r1, r2, r3
 800434e:	897b      	ldrh	r3, [r7, #10]
 8004350:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004354:	7a7b      	ldrb	r3, [r7, #9]
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	431a      	orrs	r2, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	431a      	orrs	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	03ff63ff 	.word	0x03ff63ff

08004380 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	d138      	bne.n	8004408 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e032      	b.n	800440a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	; 0x24
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6819      	ldr	r1, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004426:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004430:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x34>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d121      	bne.n	800448a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d11e      	bne.n	800448a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800444c:	4b34      	ldr	r3, [pc, #208]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004458:	4b31      	ldr	r3, [pc, #196]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	e005      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004468:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004474:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10d      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d102      	bne.n	8004496 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004490:	4b25      	ldr	r3, [pc, #148]	; (8004528 <HAL_RCC_GetSysClockFreq+0x110>)
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e004      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800449c:	4b23      	ldr	r3, [pc, #140]	; (800452c <HAL_RCC_GetSysClockFreq+0x114>)
 800449e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d134      	bne.n	8004510 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d003      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0xa6>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d003      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0xac>
 80044bc:	e005      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044be:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <HAL_RCC_GetSysClockFreq+0x110>)
 80044c0:	617b      	str	r3, [r7, #20]
      break;
 80044c2:	e005      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_GetSysClockFreq+0x114>)
 80044c6:	617b      	str	r3, [r7, #20]
      break;
 80044c8:	e002      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	617b      	str	r3, [r7, #20]
      break;
 80044ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d0:	4b13      	ldr	r3, [pc, #76]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	3301      	adds	r3, #1
 80044dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	fb03 f202 	mul.w	r2, r3, r2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	0e5b      	lsrs	r3, r3, #25
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	3301      	adds	r3, #1
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	fbb2 f3f3 	udiv	r3, r2, r3
 800450e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004510:	69bb      	ldr	r3, [r7, #24]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3724      	adds	r7, #36	; 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	0800846c 	.word	0x0800846c
 8004528:	00f42400 	.word	0x00f42400
 800452c:	007a1200 	.word	0x007a1200

08004530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <HAL_RCC_GetHCLKFreq+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000004 	.word	0x20000004

08004548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800454c:	f7ff fff0 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4904      	ldr	r1, [pc, #16]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40021000 	.word	0x40021000
 8004570:	08008464 	.word	0x08008464

08004574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004578:	f7ff ffda 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0adb      	lsrs	r3, r3, #11
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	4904      	ldr	r1, [pc, #16]	; (800459c <HAL_RCC_GetPCLK2Freq+0x28>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	08008464 	.word	0x08008464

080045a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e040      	b.n	8004634 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fbb8 	bl	8001d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	; 0x24
 80045cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8c0 	bl	8004764 <UART_SetConfig>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e022      	b.n	8004634 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fc54 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800460a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800461a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fcdb 	bl	8004fe8 <UART_CheckIdleState>
 8004632:	4603      	mov	r3, r0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004650:	2b20      	cmp	r3, #32
 8004652:	f040 8081 	bne.w	8004758 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_Transmit+0x26>
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e079      	b.n	800475a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_UART_Transmit+0x38>
 8004670:	2302      	movs	r3, #2
 8004672:	e072      	b.n	800475a <HAL_UART_Transmit+0x11e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2221      	movs	r2, #33	; 0x21
 8004686:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004688:	f7fe fd54 	bl	8003134 <HAL_GetTick>
 800468c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	88fa      	ldrh	r2, [r7, #6]
 8004692:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	d108      	bne.n	80046ba <HAL_UART_Transmit+0x7e>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	e003      	b.n	80046c2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80046ca:	e02d      	b.n	8004728 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2180      	movs	r1, #128	; 0x80
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fccb 	bl	8005072 <UART_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e039      	b.n	800475a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	881a      	ldrh	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f8:	b292      	uxth	r2, r2
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	3302      	adds	r3, #2
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	e008      	b.n	8004716 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	b292      	uxth	r2, r2
 800470e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	3301      	adds	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1cb      	bne.n	80046cc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fc97 	bl	8005072 <UART_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e005      	b.n	800475a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004768:	b0a0      	sub	sp, #128	; 0x80
 800476a:	af00      	add	r7, sp, #0
 800476c:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800476e:	2300      	movs	r3, #0
 8004770:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004778:	2300      	movs	r3, #0
 800477a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800477c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	431a      	orrs	r2, r3
 8004786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	431a      	orrs	r2, r3
 800478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	4313      	orrs	r3, r2
 8004792:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	49a4      	ldr	r1, [pc, #656]	; (8004a2c <UART_SetConfig+0x2c8>)
 800479c:	4019      	ands	r1, r3
 800479e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b4:	68d9      	ldr	r1, [r3, #12]
 80047b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	ea40 0301 	orr.w	r3, r0, r1
 80047be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b99      	ldr	r3, [pc, #612]	; (8004a30 <UART_SetConfig+0x2cc>)
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d004      	beq.n	80047da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047d6:	4313      	orrs	r3, r2
 80047d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047ea:	430b      	orrs	r3, r1
 80047ec:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b90      	ldr	r3, [pc, #576]	; (8004a34 <UART_SetConfig+0x2d0>)
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d125      	bne.n	8004844 <UART_SetConfig+0xe0>
 80047f8:	4b8f      	ldr	r3, [pc, #572]	; (8004a38 <UART_SetConfig+0x2d4>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b03      	cmp	r3, #3
 8004804:	d81a      	bhi.n	800483c <UART_SetConfig+0xd8>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <UART_SetConfig+0xa8>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	0800481d 	.word	0x0800481d
 8004810:	0800482d 	.word	0x0800482d
 8004814:	08004825 	.word	0x08004825
 8004818:	08004835 	.word	0x08004835
 800481c:	2301      	movs	r3, #1
 800481e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004822:	e116      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004824:	2302      	movs	r3, #2
 8004826:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800482a:	e112      	b.n	8004a52 <UART_SetConfig+0x2ee>
 800482c:	2304      	movs	r3, #4
 800482e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004832:	e10e      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004834:	2308      	movs	r3, #8
 8004836:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800483a:	e10a      	b.n	8004a52 <UART_SetConfig+0x2ee>
 800483c:	2310      	movs	r3, #16
 800483e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004842:	e106      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b7c      	ldr	r3, [pc, #496]	; (8004a3c <UART_SetConfig+0x2d8>)
 800484a:	429a      	cmp	r2, r3
 800484c:	d138      	bne.n	80048c0 <UART_SetConfig+0x15c>
 800484e:	4b7a      	ldr	r3, [pc, #488]	; (8004a38 <UART_SetConfig+0x2d4>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d82d      	bhi.n	80048b8 <UART_SetConfig+0x154>
 800485c:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0x100>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004899 	.word	0x08004899
 8004868:	080048b9 	.word	0x080048b9
 800486c:	080048b9 	.word	0x080048b9
 8004870:	080048b9 	.word	0x080048b9
 8004874:	080048a9 	.word	0x080048a9
 8004878:	080048b9 	.word	0x080048b9
 800487c:	080048b9 	.word	0x080048b9
 8004880:	080048b9 	.word	0x080048b9
 8004884:	080048a1 	.word	0x080048a1
 8004888:	080048b9 	.word	0x080048b9
 800488c:	080048b9 	.word	0x080048b9
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048b1 	.word	0x080048b1
 8004898:	2300      	movs	r3, #0
 800489a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800489e:	e0d8      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80048a0:	2302      	movs	r3, #2
 80048a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80048a6:	e0d4      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80048a8:	2304      	movs	r3, #4
 80048aa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80048ae:	e0d0      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80048b0:	2308      	movs	r3, #8
 80048b2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80048b6:	e0cc      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80048b8:	2310      	movs	r3, #16
 80048ba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80048be:	e0c8      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80048c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b5e      	ldr	r3, [pc, #376]	; (8004a40 <UART_SetConfig+0x2dc>)
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d125      	bne.n	8004916 <UART_SetConfig+0x1b2>
 80048ca:	4b5b      	ldr	r3, [pc, #364]	; (8004a38 <UART_SetConfig+0x2d4>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048d4:	2b30      	cmp	r3, #48	; 0x30
 80048d6:	d016      	beq.n	8004906 <UART_SetConfig+0x1a2>
 80048d8:	2b30      	cmp	r3, #48	; 0x30
 80048da:	d818      	bhi.n	800490e <UART_SetConfig+0x1aa>
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d00a      	beq.n	80048f6 <UART_SetConfig+0x192>
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d814      	bhi.n	800490e <UART_SetConfig+0x1aa>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <UART_SetConfig+0x18a>
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d008      	beq.n	80048fe <UART_SetConfig+0x19a>
 80048ec:	e00f      	b.n	800490e <UART_SetConfig+0x1aa>
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80048f4:	e0ad      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80048f6:	2302      	movs	r3, #2
 80048f8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80048fc:	e0a9      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80048fe:	2304      	movs	r3, #4
 8004900:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004904:	e0a5      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004906:	2308      	movs	r3, #8
 8004908:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800490c:	e0a1      	b.n	8004a52 <UART_SetConfig+0x2ee>
 800490e:	2310      	movs	r3, #16
 8004910:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004914:	e09d      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b4a      	ldr	r3, [pc, #296]	; (8004a44 <UART_SetConfig+0x2e0>)
 800491c:	429a      	cmp	r2, r3
 800491e:	d125      	bne.n	800496c <UART_SetConfig+0x208>
 8004920:	4b45      	ldr	r3, [pc, #276]	; (8004a38 <UART_SetConfig+0x2d4>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004926:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800492a:	2bc0      	cmp	r3, #192	; 0xc0
 800492c:	d016      	beq.n	800495c <UART_SetConfig+0x1f8>
 800492e:	2bc0      	cmp	r3, #192	; 0xc0
 8004930:	d818      	bhi.n	8004964 <UART_SetConfig+0x200>
 8004932:	2b80      	cmp	r3, #128	; 0x80
 8004934:	d00a      	beq.n	800494c <UART_SetConfig+0x1e8>
 8004936:	2b80      	cmp	r3, #128	; 0x80
 8004938:	d814      	bhi.n	8004964 <UART_SetConfig+0x200>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <UART_SetConfig+0x1e0>
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d008      	beq.n	8004954 <UART_SetConfig+0x1f0>
 8004942:	e00f      	b.n	8004964 <UART_SetConfig+0x200>
 8004944:	2300      	movs	r3, #0
 8004946:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800494a:	e082      	b.n	8004a52 <UART_SetConfig+0x2ee>
 800494c:	2302      	movs	r3, #2
 800494e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004952:	e07e      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004954:	2304      	movs	r3, #4
 8004956:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800495a:	e07a      	b.n	8004a52 <UART_SetConfig+0x2ee>
 800495c:	2308      	movs	r3, #8
 800495e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004962:	e076      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004964:	2310      	movs	r3, #16
 8004966:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800496a:	e072      	b.n	8004a52 <UART_SetConfig+0x2ee>
 800496c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b35      	ldr	r3, [pc, #212]	; (8004a48 <UART_SetConfig+0x2e4>)
 8004972:	429a      	cmp	r2, r3
 8004974:	d12a      	bne.n	80049cc <UART_SetConfig+0x268>
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <UART_SetConfig+0x2d4>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004984:	d01a      	beq.n	80049bc <UART_SetConfig+0x258>
 8004986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498a:	d81b      	bhi.n	80049c4 <UART_SetConfig+0x260>
 800498c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004990:	d00c      	beq.n	80049ac <UART_SetConfig+0x248>
 8004992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004996:	d815      	bhi.n	80049c4 <UART_SetConfig+0x260>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <UART_SetConfig+0x240>
 800499c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a0:	d008      	beq.n	80049b4 <UART_SetConfig+0x250>
 80049a2:	e00f      	b.n	80049c4 <UART_SetConfig+0x260>
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049aa:	e052      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80049ac:	2302      	movs	r3, #2
 80049ae:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049b2:	e04e      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80049b4:	2304      	movs	r3, #4
 80049b6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049ba:	e04a      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80049bc:	2308      	movs	r3, #8
 80049be:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049c2:	e046      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80049c4:	2310      	movs	r3, #16
 80049c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80049ca:	e042      	b.n	8004a52 <UART_SetConfig+0x2ee>
 80049cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <UART_SetConfig+0x2cc>)
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d13a      	bne.n	8004a4c <UART_SetConfig+0x2e8>
 80049d6:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <UART_SetConfig+0x2d4>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e4:	d01a      	beq.n	8004a1c <UART_SetConfig+0x2b8>
 80049e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ea:	d81b      	bhi.n	8004a24 <UART_SetConfig+0x2c0>
 80049ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f0:	d00c      	beq.n	8004a0c <UART_SetConfig+0x2a8>
 80049f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f6:	d815      	bhi.n	8004a24 <UART_SetConfig+0x2c0>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <UART_SetConfig+0x2a0>
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d008      	beq.n	8004a14 <UART_SetConfig+0x2b0>
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x2c0>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a0a:	e022      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a12:	e01e      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004a14:	2304      	movs	r3, #4
 8004a16:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a1a:	e01a      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a22:	e016      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004a2a:	e012      	b.n	8004a52 <UART_SetConfig+0x2ee>
 8004a2c:	efff69f3 	.word	0xefff69f3
 8004a30:	40008000 	.word	0x40008000
 8004a34:	40013800 	.word	0x40013800
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40004400 	.word	0x40004400
 8004a40:	40004800 	.word	0x40004800
 8004a44:	40004c00 	.word	0x40004c00
 8004a48:	40005000 	.word	0x40005000
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4bb6      	ldr	r3, [pc, #728]	; (8004d30 <UART_SetConfig+0x5cc>)
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	f040 810c 	bne.w	8004c76 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a5e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d823      	bhi.n	8004aae <UART_SetConfig+0x34a>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <UART_SetConfig+0x308>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004aaf 	.word	0x08004aaf
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004aaf 	.word	0x08004aaf
 8004a7c:	08004a9f 	.word	0x08004a9f
 8004a80:	08004aaf 	.word	0x08004aaf
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004aaf 	.word	0x08004aaf
 8004a8c:	08004aa7 	.word	0x08004aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004a90:	f7ff fd5a 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 8004a94:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a96:	e00e      	b.n	8004ab6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004a98:	4ba6      	ldr	r3, [pc, #664]	; (8004d34 <UART_SetConfig+0x5d0>)
 8004a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a9c:	e00b      	b.n	8004ab6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004a9e:	f7ff fcbb 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 8004aa2:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aa4:	e007      	b.n	8004ab6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aac:	e003      	b.n	8004ab6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004ab4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 81e5 	beq.w	8004e88 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	441a      	add	r2, r3
 8004ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d305      	bcc.n	8004ada <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d903      	bls.n	8004ae2 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004ae0:	e1d2      	b.n	8004e88 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8004ae2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	f200 80b0 	bhi.w	8004c4c <UART_SetConfig+0x4e8>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <UART_SetConfig+0x390>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004c4d 	.word	0x08004c4d
 8004afc:	08004b79 	.word	0x08004b79
 8004b00:	08004c4d 	.word	0x08004c4d
 8004b04:	08004bb9 	.word	0x08004bb9
 8004b08:	08004c4d 	.word	0x08004c4d
 8004b0c:	08004c4d 	.word	0x08004c4d
 8004b10:	08004c4d 	.word	0x08004c4d
 8004b14:	08004c15 	.word	0x08004c15
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004b18:	f7ff fd16 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 8004b1c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b20:	2200      	movs	r2, #0
 8004b22:	4698      	mov	r8, r3
 8004b24:	4691      	mov	r9, r2
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8004b32:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8004b36:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8004b3a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b3c:	6849      	ldr	r1, [r1, #4]
 8004b3e:	0849      	lsrs	r1, r1, #1
 8004b40:	2000      	movs	r0, #0
 8004b42:	6539      	str	r1, [r7, #80]	; 0x50
 8004b44:	6578      	str	r0, [r7, #84]	; 0x54
 8004b46:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	1851      	adds	r1, r2, r1
 8004b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b50:	4629      	mov	r1, r5
 8004b52:	eb43 0101 	adc.w	r1, r3, r1
 8004b56:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b60:	647a      	str	r2, [r7, #68]	; 0x44
 8004b62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b6a:	f7fc f81d 	bl	8000ba8 <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4613      	mov	r3, r2
 8004b74:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b76:	e06d      	b.n	8004c54 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	2200      	movs	r2, #0
 8004b80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b84:	4b6c      	ldr	r3, [pc, #432]	; (8004d38 <UART_SetConfig+0x5d4>)
 8004b86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	18d3      	adds	r3, r2, r3
 8004b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b90:	460b      	mov	r3, r1
 8004b92:	f143 0300 	adc.w	r3, r3, #0
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
 8004b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004baa:	f7fb fffd 	bl	8000ba8 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004bb6:	e04d      	b.n	8004c54 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004bb8:	f7ff fc2e 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 8004bbc:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	461c      	mov	r4, r3
 8004bc4:	4615      	mov	r5, r2
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	022b      	lsls	r3, r5, #8
 8004bd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bd4:	0222      	lsls	r2, r4, #8
 8004bd6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004bd8:	6849      	ldr	r1, [r1, #4]
 8004bda:	0849      	lsrs	r1, r1, #1
 8004bdc:	2000      	movs	r0, #0
 8004bde:	6239      	str	r1, [r7, #32]
 8004be0:	6278      	str	r0, [r7, #36]	; 0x24
 8004be2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004be6:	4621      	mov	r1, r4
 8004be8:	1851      	adds	r1, r2, r1
 8004bea:	61b9      	str	r1, [r7, #24]
 8004bec:	4629      	mov	r1, r5
 8004bee:	eb43 0101 	adc.w	r1, r3, r1
 8004bf2:	61f9      	str	r1, [r7, #28]
 8004bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	617a      	str	r2, [r7, #20]
 8004bfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c06:	f7fb ffcf 	bl	8000ba8 <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4613      	mov	r3, r2
 8004c10:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c12:	e01f      	b.n	8004c54 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	469a      	mov	sl, r3
 8004c1e:	4693      	mov	fp, r2
 8004c20:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	f14b 0300 	adc.w	r3, fp, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c3e:	f7fb ffb3 	bl	8000ba8 <__aeabi_uldivmod>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4613      	mov	r3, r2
 8004c48:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c4a:	e003      	b.n	8004c54 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8004c52:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5a:	d308      	bcc.n	8004c6e <UART_SetConfig+0x50a>
 8004c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c62:	d204      	bcs.n	8004c6e <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8004c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	e10c      	b.n	8004e88 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004c74:	e108      	b.n	8004e88 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7e:	f040 808f 	bne.w	8004da0 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8004c82:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d864      	bhi.n	8004d54 <UART_SetConfig+0x5f0>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x52c>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004cd5 	.word	0x08004cd5
 8004c98:	08004cf5 	.word	0x08004cf5
 8004c9c:	08004d55 	.word	0x08004d55
 8004ca0:	08004d11 	.word	0x08004d11
 8004ca4:	08004d55 	.word	0x08004d55
 8004ca8:	08004d55 	.word	0x08004d55
 8004cac:	08004d55 	.word	0x08004d55
 8004cb0:	08004d3d 	.word	0x08004d3d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7ff fc48 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 8004cb8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cbc:	005a      	lsls	r2, r3, #1
 8004cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	441a      	add	r2, r3
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cd2:	e043      	b.n	8004d5c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7ff fc4e 	bl	8004574 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cdc:	005a      	lsls	r2, r3, #1
 8004cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	441a      	add	r2, r3
 8004ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cf2:	e033      	b.n	8004d5c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	085b      	lsrs	r3, r3, #1
 8004cfa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004cfe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004d02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d04:	6852      	ldr	r2, [r2, #4]
 8004d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d0e:	e025      	b.n	8004d5c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d10:	f7ff fb82 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 8004d14:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d18:	005a      	lsls	r2, r3, #1
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	441a      	add	r2, r3
 8004d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d2e:	e015      	b.n	8004d5c <UART_SetConfig+0x5f8>
 8004d30:	40008000 	.word	0x40008000
 8004d34:	00f42400 	.word	0x00f42400
 8004d38:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d52:	e003      	b.n	8004d5c <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004d5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	d91a      	bls.n	8004d98 <UART_SetConfig+0x634>
 8004d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d68:	d216      	bcs.n	8004d98 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f023 030f 	bic.w	r3, r3, #15
 8004d72:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8004d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004d94:	60da      	str	r2, [r3, #12]
 8004d96:	e077      	b.n	8004e88 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004d9e:	e073      	b.n	8004e88 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8004da0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d85c      	bhi.n	8004e62 <UART_SetConfig+0x6fe>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0x64c>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004df3 	.word	0x08004df3
 8004db8:	08004e11 	.word	0x08004e11
 8004dbc:	08004e63 	.word	0x08004e63
 8004dc0:	08004e2d 	.word	0x08004e2d
 8004dc4:	08004e63 	.word	0x08004e63
 8004dc8:	08004e63 	.word	0x08004e63
 8004dcc:	08004e63 	.word	0x08004e63
 8004dd0:	08004e4b 	.word	0x08004e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7ff fbb8 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	085a      	lsrs	r2, r3, #1
 8004de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004de2:	441a      	add	r2, r3
 8004de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004df0:	e03b      	b.n	8004e6a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df2:	f7ff fbbf 	bl	8004574 <HAL_RCC_GetPCLK2Freq>
 8004df6:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	085a      	lsrs	r2, r3, #1
 8004dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e00:	441a      	add	r2, r3
 8004e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e0e:	e02c      	b.n	8004e6a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004e1a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004e1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e20:	6852      	ldr	r2, [r2, #4]
 8004e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e2a:	e01e      	b.n	8004e6a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2c:	f7ff faf4 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 8004e30:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	085a      	lsrs	r2, r3, #1
 8004e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e3a:	441a      	add	r2, r3
 8004e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e48:	e00f      	b.n	8004e6a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e60:	e003      	b.n	8004e6a <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8004e68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e6c:	2b0f      	cmp	r3, #15
 8004e6e:	d908      	bls.n	8004e82 <UART_SetConfig+0x71e>
 8004e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e76:	d204      	bcs.n	8004e82 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8004e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e7e:	60da      	str	r2, [r3, #12]
 8004e80:	e002      	b.n	8004e88 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e90:	2200      	movs	r2, #0
 8004e92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e94:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3780      	adds	r7, #128	; 0x80
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea2:	bf00      	nop

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa2:	d10a      	bne.n	8004fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ff6:	f7fe f89d 	bl	8003134 <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b08      	cmp	r3, #8
 8005008:	d10e      	bne.n	8005028 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f82a 	bl	8005072 <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e020      	b.n	800506a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b04      	cmp	r3, #4
 8005034:	d10e      	bne.n	8005054 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f814 	bl	8005072 <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e00a      	b.n	800506a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005082:	e05d      	b.n	8005140 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d059      	beq.n	8005140 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508c:	f7fe f852 	bl	8003134 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11b      	bne.n	80050da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e042      	b.n	8005160 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02b      	beq.n	8005140 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f6:	d123      	bne.n	8005140 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005100:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005110:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e00f      	b.n	8005160 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69da      	ldr	r2, [r3, #28]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4013      	ands	r3, r2
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	429a      	cmp	r2, r3
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	429a      	cmp	r2, r3
 800515c:	d092      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <findslot>:
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <findslot+0x2c>)
 800516a:	b510      	push	{r4, lr}
 800516c:	4604      	mov	r4, r0
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	b118      	cbz	r0, 800517a <findslot+0x12>
 8005172:	6983      	ldr	r3, [r0, #24]
 8005174:	b90b      	cbnz	r3, 800517a <findslot+0x12>
 8005176:	f000 f9a1 	bl	80054bc <__sinit>
 800517a:	2c13      	cmp	r4, #19
 800517c:	d807      	bhi.n	800518e <findslot+0x26>
 800517e:	4806      	ldr	r0, [pc, #24]	; (8005198 <findslot+0x30>)
 8005180:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005184:	3201      	adds	r2, #1
 8005186:	d002      	beq.n	800518e <findslot+0x26>
 8005188:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800518c:	bd10      	pop	{r4, pc}
 800518e:	2000      	movs	r0, #0
 8005190:	e7fc      	b.n	800518c <findslot+0x24>
 8005192:	bf00      	nop
 8005194:	200000d4 	.word	0x200000d4
 8005198:	200005a4 	.word	0x200005a4

0800519c <error>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	4604      	mov	r4, r0
 80051a0:	f000 f92e 	bl	8005400 <__errno>
 80051a4:	2613      	movs	r6, #19
 80051a6:	4605      	mov	r5, r0
 80051a8:	2700      	movs	r7, #0
 80051aa:	4630      	mov	r0, r6
 80051ac:	4639      	mov	r1, r7
 80051ae:	beab      	bkpt	0x00ab
 80051b0:	4606      	mov	r6, r0
 80051b2:	602e      	str	r6, [r5, #0]
 80051b4:	4620      	mov	r0, r4
 80051b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080051b8 <checkerror>:
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d101      	bne.n	80051c0 <checkerror+0x8>
 80051bc:	f7ff bfee 	b.w	800519c <error>
 80051c0:	4770      	bx	lr

080051c2 <_swiread>:
 80051c2:	b530      	push	{r4, r5, lr}
 80051c4:	b085      	sub	sp, #20
 80051c6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80051ca:	9203      	str	r2, [sp, #12]
 80051cc:	2406      	movs	r4, #6
 80051ce:	ad01      	add	r5, sp, #4
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	beab      	bkpt	0x00ab
 80051d6:	4604      	mov	r4, r0
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff ffed 	bl	80051b8 <checkerror>
 80051de:	b005      	add	sp, #20
 80051e0:	bd30      	pop	{r4, r5, pc}

080051e2 <_read>:
 80051e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051e4:	4615      	mov	r5, r2
 80051e6:	9101      	str	r1, [sp, #4]
 80051e8:	f7ff ffbe 	bl	8005168 <findslot>
 80051ec:	9901      	ldr	r1, [sp, #4]
 80051ee:	4604      	mov	r4, r0
 80051f0:	b938      	cbnz	r0, 8005202 <_read+0x20>
 80051f2:	f000 f905 	bl	8005400 <__errno>
 80051f6:	2309      	movs	r3, #9
 80051f8:	6003      	str	r3, [r0, #0]
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295
 80051fe:	b003      	add	sp, #12
 8005200:	bd30      	pop	{r4, r5, pc}
 8005202:	6800      	ldr	r0, [r0, #0]
 8005204:	462a      	mov	r2, r5
 8005206:	f7ff ffdc 	bl	80051c2 <_swiread>
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	d0f7      	beq.n	80051fe <_read+0x1c>
 800520e:	6863      	ldr	r3, [r4, #4]
 8005210:	1a2a      	subs	r2, r5, r0
 8005212:	4413      	add	r3, r2
 8005214:	6063      	str	r3, [r4, #4]
 8005216:	4610      	mov	r0, r2
 8005218:	e7f1      	b.n	80051fe <_read+0x1c>

0800521a <_swilseek>:
 800521a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800521c:	460c      	mov	r4, r1
 800521e:	4616      	mov	r6, r2
 8005220:	f7ff ffa2 	bl	8005168 <findslot>
 8005224:	4605      	mov	r5, r0
 8005226:	b940      	cbnz	r0, 800523a <_swilseek+0x20>
 8005228:	f000 f8ea 	bl	8005400 <__errno>
 800522c:	2309      	movs	r3, #9
 800522e:	6003      	str	r3, [r0, #0]
 8005230:	f04f 34ff 	mov.w	r4, #4294967295
 8005234:	4620      	mov	r0, r4
 8005236:	b003      	add	sp, #12
 8005238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800523a:	2e02      	cmp	r6, #2
 800523c:	d903      	bls.n	8005246 <_swilseek+0x2c>
 800523e:	f000 f8df 	bl	8005400 <__errno>
 8005242:	2316      	movs	r3, #22
 8005244:	e7f3      	b.n	800522e <_swilseek+0x14>
 8005246:	2e01      	cmp	r6, #1
 8005248:	d112      	bne.n	8005270 <_swilseek+0x56>
 800524a:	6843      	ldr	r3, [r0, #4]
 800524c:	18e4      	adds	r4, r4, r3
 800524e:	d4f6      	bmi.n	800523e <_swilseek+0x24>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	260a      	movs	r6, #10
 8005254:	e9cd 3400 	strd	r3, r4, [sp]
 8005258:	466f      	mov	r7, sp
 800525a:	4630      	mov	r0, r6
 800525c:	4639      	mov	r1, r7
 800525e:	beab      	bkpt	0x00ab
 8005260:	4606      	mov	r6, r0
 8005262:	4630      	mov	r0, r6
 8005264:	f7ff ffa8 	bl	80051b8 <checkerror>
 8005268:	2800      	cmp	r0, #0
 800526a:	dbe1      	blt.n	8005230 <_swilseek+0x16>
 800526c:	606c      	str	r4, [r5, #4]
 800526e:	e7e1      	b.n	8005234 <_swilseek+0x1a>
 8005270:	2e02      	cmp	r6, #2
 8005272:	d1ed      	bne.n	8005250 <_swilseek+0x36>
 8005274:	6803      	ldr	r3, [r0, #0]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	260c      	movs	r6, #12
 800527a:	466f      	mov	r7, sp
 800527c:	4630      	mov	r0, r6
 800527e:	4639      	mov	r1, r7
 8005280:	beab      	bkpt	0x00ab
 8005282:	4606      	mov	r6, r0
 8005284:	4630      	mov	r0, r6
 8005286:	f7ff ff97 	bl	80051b8 <checkerror>
 800528a:	1c43      	adds	r3, r0, #1
 800528c:	d0d0      	beq.n	8005230 <_swilseek+0x16>
 800528e:	4404      	add	r4, r0
 8005290:	e7de      	b.n	8005250 <_swilseek+0x36>

08005292 <_lseek>:
 8005292:	f7ff bfc2 	b.w	800521a <_swilseek>

08005296 <_swiwrite>:
 8005296:	b530      	push	{r4, r5, lr}
 8005298:	b085      	sub	sp, #20
 800529a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800529e:	9203      	str	r2, [sp, #12]
 80052a0:	2405      	movs	r4, #5
 80052a2:	ad01      	add	r5, sp, #4
 80052a4:	4620      	mov	r0, r4
 80052a6:	4629      	mov	r1, r5
 80052a8:	beab      	bkpt	0x00ab
 80052aa:	4604      	mov	r4, r0
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7ff ff83 	bl	80051b8 <checkerror>
 80052b2:	b005      	add	sp, #20
 80052b4:	bd30      	pop	{r4, r5, pc}

080052b6 <_write>:
 80052b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b8:	4615      	mov	r5, r2
 80052ba:	9101      	str	r1, [sp, #4]
 80052bc:	f7ff ff54 	bl	8005168 <findslot>
 80052c0:	9901      	ldr	r1, [sp, #4]
 80052c2:	4604      	mov	r4, r0
 80052c4:	b930      	cbnz	r0, 80052d4 <_write+0x1e>
 80052c6:	f000 f89b 	bl	8005400 <__errno>
 80052ca:	2309      	movs	r3, #9
 80052cc:	6003      	str	r3, [r0, #0]
 80052ce:	f04f 30ff 	mov.w	r0, #4294967295
 80052d2:	e012      	b.n	80052fa <_write+0x44>
 80052d4:	6800      	ldr	r0, [r0, #0]
 80052d6:	462a      	mov	r2, r5
 80052d8:	f7ff ffdd 	bl	8005296 <_swiwrite>
 80052dc:	2800      	cmp	r0, #0
 80052de:	dbf6      	blt.n	80052ce <_write+0x18>
 80052e0:	6862      	ldr	r2, [r4, #4]
 80052e2:	1a2b      	subs	r3, r5, r0
 80052e4:	441a      	add	r2, r3
 80052e6:	42a8      	cmp	r0, r5
 80052e8:	6062      	str	r2, [r4, #4]
 80052ea:	d105      	bne.n	80052f8 <_write+0x42>
 80052ec:	2000      	movs	r0, #0
 80052ee:	b003      	add	sp, #12
 80052f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052f4:	f7ff bf52 	b.w	800519c <error>
 80052f8:	4618      	mov	r0, r3
 80052fa:	b003      	add	sp, #12
 80052fc:	bd30      	pop	{r4, r5, pc}

080052fe <_swiclose>:
 80052fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005300:	2402      	movs	r4, #2
 8005302:	9001      	str	r0, [sp, #4]
 8005304:	ad01      	add	r5, sp, #4
 8005306:	4620      	mov	r0, r4
 8005308:	4629      	mov	r1, r5
 800530a:	beab      	bkpt	0x00ab
 800530c:	4604      	mov	r4, r0
 800530e:	4620      	mov	r0, r4
 8005310:	f7ff ff52 	bl	80051b8 <checkerror>
 8005314:	b003      	add	sp, #12
 8005316:	bd30      	pop	{r4, r5, pc}

08005318 <_close>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4605      	mov	r5, r0
 800531c:	f7ff ff24 	bl	8005168 <findslot>
 8005320:	4604      	mov	r4, r0
 8005322:	b930      	cbnz	r0, 8005332 <_close+0x1a>
 8005324:	f000 f86c 	bl	8005400 <__errno>
 8005328:	2309      	movs	r3, #9
 800532a:	6003      	str	r3, [r0, #0]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	bd38      	pop	{r3, r4, r5, pc}
 8005332:	3d01      	subs	r5, #1
 8005334:	2d01      	cmp	r5, #1
 8005336:	d809      	bhi.n	800534c <_close+0x34>
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <_close+0x48>)
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	429a      	cmp	r2, r3
 8005340:	d104      	bne.n	800534c <_close+0x34>
 8005342:	f04f 33ff 	mov.w	r3, #4294967295
 8005346:	6003      	str	r3, [r0, #0]
 8005348:	2000      	movs	r0, #0
 800534a:	e7f1      	b.n	8005330 <_close+0x18>
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	f7ff ffd6 	bl	80052fe <_swiclose>
 8005352:	2800      	cmp	r0, #0
 8005354:	d1ec      	bne.n	8005330 <_close+0x18>
 8005356:	f04f 33ff 	mov.w	r3, #4294967295
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	e7e8      	b.n	8005330 <_close+0x18>
 800535e:	bf00      	nop
 8005360:	200005a4 	.word	0x200005a4

08005364 <_getpid>:
 8005364:	2001      	movs	r0, #1
 8005366:	4770      	bx	lr

08005368 <_swistat>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	460c      	mov	r4, r1
 800536c:	f7ff fefc 	bl	8005168 <findslot>
 8005370:	4605      	mov	r5, r0
 8005372:	b930      	cbnz	r0, 8005382 <_swistat+0x1a>
 8005374:	f000 f844 	bl	8005400 <__errno>
 8005378:	2309      	movs	r3, #9
 800537a:	6003      	str	r3, [r0, #0]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	bd70      	pop	{r4, r5, r6, pc}
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005388:	6063      	str	r3, [r4, #4]
 800538a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005390:	260c      	movs	r6, #12
 8005392:	4630      	mov	r0, r6
 8005394:	4629      	mov	r1, r5
 8005396:	beab      	bkpt	0x00ab
 8005398:	4605      	mov	r5, r0
 800539a:	4628      	mov	r0, r5
 800539c:	f7ff ff0c 	bl	80051b8 <checkerror>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	bf1c      	itt	ne
 80053a4:	6120      	strne	r0, [r4, #16]
 80053a6:	2000      	movne	r0, #0
 80053a8:	e7ea      	b.n	8005380 <_swistat+0x18>

080053aa <_fstat>:
 80053aa:	460b      	mov	r3, r1
 80053ac:	b510      	push	{r4, lr}
 80053ae:	2100      	movs	r1, #0
 80053b0:	4604      	mov	r4, r0
 80053b2:	2258      	movs	r2, #88	; 0x58
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 f954 	bl	8005662 <memset>
 80053ba:	4601      	mov	r1, r0
 80053bc:	4620      	mov	r0, r4
 80053be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c2:	f7ff bfd1 	b.w	8005368 <_swistat>

080053c6 <_isatty>:
 80053c6:	b570      	push	{r4, r5, r6, lr}
 80053c8:	f7ff fece 	bl	8005168 <findslot>
 80053cc:	2509      	movs	r5, #9
 80053ce:	4604      	mov	r4, r0
 80053d0:	b920      	cbnz	r0, 80053dc <_isatty+0x16>
 80053d2:	f000 f815 	bl	8005400 <__errno>
 80053d6:	6005      	str	r5, [r0, #0]
 80053d8:	4620      	mov	r0, r4
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	4628      	mov	r0, r5
 80053de:	4621      	mov	r1, r4
 80053e0:	beab      	bkpt	0x00ab
 80053e2:	4604      	mov	r4, r0
 80053e4:	2c01      	cmp	r4, #1
 80053e6:	d0f7      	beq.n	80053d8 <_isatty+0x12>
 80053e8:	f000 f80a 	bl	8005400 <__errno>
 80053ec:	2400      	movs	r4, #0
 80053ee:	4605      	mov	r5, r0
 80053f0:	2613      	movs	r6, #19
 80053f2:	4630      	mov	r0, r6
 80053f4:	4621      	mov	r1, r4
 80053f6:	beab      	bkpt	0x00ab
 80053f8:	4606      	mov	r6, r0
 80053fa:	602e      	str	r6, [r5, #0]
 80053fc:	e7ec      	b.n	80053d8 <_isatty+0x12>
	...

08005400 <__errno>:
 8005400:	4b01      	ldr	r3, [pc, #4]	; (8005408 <__errno+0x8>)
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	200000d4 	.word	0x200000d4

0800540c <std>:
 800540c:	2300      	movs	r3, #0
 800540e:	b510      	push	{r4, lr}
 8005410:	4604      	mov	r4, r0
 8005412:	e9c0 3300 	strd	r3, r3, [r0]
 8005416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800541a:	6083      	str	r3, [r0, #8]
 800541c:	8181      	strh	r1, [r0, #12]
 800541e:	6643      	str	r3, [r0, #100]	; 0x64
 8005420:	81c2      	strh	r2, [r0, #14]
 8005422:	6183      	str	r3, [r0, #24]
 8005424:	4619      	mov	r1, r3
 8005426:	2208      	movs	r2, #8
 8005428:	305c      	adds	r0, #92	; 0x5c
 800542a:	f000 f91a 	bl	8005662 <memset>
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <std+0x38>)
 8005430:	6263      	str	r3, [r4, #36]	; 0x24
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <std+0x3c>)
 8005434:	62a3      	str	r3, [r4, #40]	; 0x28
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <std+0x40>)
 8005438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <std+0x44>)
 800543c:	6224      	str	r4, [r4, #32]
 800543e:	6323      	str	r3, [r4, #48]	; 0x30
 8005440:	bd10      	pop	{r4, pc}
 8005442:	bf00      	nop
 8005444:	080060d1 	.word	0x080060d1
 8005448:	080060f3 	.word	0x080060f3
 800544c:	0800612b 	.word	0x0800612b
 8005450:	0800614f 	.word	0x0800614f

08005454 <_cleanup_r>:
 8005454:	4901      	ldr	r1, [pc, #4]	; (800545c <_cleanup_r+0x8>)
 8005456:	f000 b8af 	b.w	80055b8 <_fwalk_reent>
 800545a:	bf00      	nop
 800545c:	08007159 	.word	0x08007159

08005460 <__sfmoreglue>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	2268      	movs	r2, #104	; 0x68
 8005464:	1e4d      	subs	r5, r1, #1
 8005466:	4355      	muls	r5, r2
 8005468:	460e      	mov	r6, r1
 800546a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800546e:	f000 f921 	bl	80056b4 <_malloc_r>
 8005472:	4604      	mov	r4, r0
 8005474:	b140      	cbz	r0, 8005488 <__sfmoreglue+0x28>
 8005476:	2100      	movs	r1, #0
 8005478:	e9c0 1600 	strd	r1, r6, [r0]
 800547c:	300c      	adds	r0, #12
 800547e:	60a0      	str	r0, [r4, #8]
 8005480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005484:	f000 f8ed 	bl	8005662 <memset>
 8005488:	4620      	mov	r0, r4
 800548a:	bd70      	pop	{r4, r5, r6, pc}

0800548c <__sfp_lock_acquire>:
 800548c:	4801      	ldr	r0, [pc, #4]	; (8005494 <__sfp_lock_acquire+0x8>)
 800548e:	f000 b8d8 	b.w	8005642 <__retarget_lock_acquire_recursive>
 8005492:	bf00      	nop
 8005494:	20000645 	.word	0x20000645

08005498 <__sfp_lock_release>:
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <__sfp_lock_release+0x8>)
 800549a:	f000 b8d3 	b.w	8005644 <__retarget_lock_release_recursive>
 800549e:	bf00      	nop
 80054a0:	20000645 	.word	0x20000645

080054a4 <__sinit_lock_acquire>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__sinit_lock_acquire+0x8>)
 80054a6:	f000 b8cc 	b.w	8005642 <__retarget_lock_acquire_recursive>
 80054aa:	bf00      	nop
 80054ac:	20000646 	.word	0x20000646

080054b0 <__sinit_lock_release>:
 80054b0:	4801      	ldr	r0, [pc, #4]	; (80054b8 <__sinit_lock_release+0x8>)
 80054b2:	f000 b8c7 	b.w	8005644 <__retarget_lock_release_recursive>
 80054b6:	bf00      	nop
 80054b8:	20000646 	.word	0x20000646

080054bc <__sinit>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	4604      	mov	r4, r0
 80054c0:	f7ff fff0 	bl	80054a4 <__sinit_lock_acquire>
 80054c4:	69a3      	ldr	r3, [r4, #24]
 80054c6:	b11b      	cbz	r3, 80054d0 <__sinit+0x14>
 80054c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054cc:	f7ff bff0 	b.w	80054b0 <__sinit_lock_release>
 80054d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054d4:	6523      	str	r3, [r4, #80]	; 0x50
 80054d6:	4b13      	ldr	r3, [pc, #76]	; (8005524 <__sinit+0x68>)
 80054d8:	4a13      	ldr	r2, [pc, #76]	; (8005528 <__sinit+0x6c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80054de:	42a3      	cmp	r3, r4
 80054e0:	bf04      	itt	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	61a3      	streq	r3, [r4, #24]
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 f820 	bl	800552c <__sfp>
 80054ec:	6060      	str	r0, [r4, #4]
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f81c 	bl	800552c <__sfp>
 80054f4:	60a0      	str	r0, [r4, #8]
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f818 	bl	800552c <__sfp>
 80054fc:	2200      	movs	r2, #0
 80054fe:	60e0      	str	r0, [r4, #12]
 8005500:	2104      	movs	r1, #4
 8005502:	6860      	ldr	r0, [r4, #4]
 8005504:	f7ff ff82 	bl	800540c <std>
 8005508:	68a0      	ldr	r0, [r4, #8]
 800550a:	2201      	movs	r2, #1
 800550c:	2109      	movs	r1, #9
 800550e:	f7ff ff7d 	bl	800540c <std>
 8005512:	68e0      	ldr	r0, [r4, #12]
 8005514:	2202      	movs	r2, #2
 8005516:	2112      	movs	r1, #18
 8005518:	f7ff ff78 	bl	800540c <std>
 800551c:	2301      	movs	r3, #1
 800551e:	61a3      	str	r3, [r4, #24]
 8005520:	e7d2      	b.n	80054c8 <__sinit+0xc>
 8005522:	bf00      	nop
 8005524:	080084fc 	.word	0x080084fc
 8005528:	08005455 	.word	0x08005455

0800552c <__sfp>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	4607      	mov	r7, r0
 8005530:	f7ff ffac 	bl	800548c <__sfp_lock_acquire>
 8005534:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <__sfp+0x84>)
 8005536:	681e      	ldr	r6, [r3, #0]
 8005538:	69b3      	ldr	r3, [r6, #24]
 800553a:	b913      	cbnz	r3, 8005542 <__sfp+0x16>
 800553c:	4630      	mov	r0, r6
 800553e:	f7ff ffbd 	bl	80054bc <__sinit>
 8005542:	3648      	adds	r6, #72	; 0x48
 8005544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005548:	3b01      	subs	r3, #1
 800554a:	d503      	bpl.n	8005554 <__sfp+0x28>
 800554c:	6833      	ldr	r3, [r6, #0]
 800554e:	b30b      	cbz	r3, 8005594 <__sfp+0x68>
 8005550:	6836      	ldr	r6, [r6, #0]
 8005552:	e7f7      	b.n	8005544 <__sfp+0x18>
 8005554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005558:	b9d5      	cbnz	r5, 8005590 <__sfp+0x64>
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <__sfp+0x88>)
 800555c:	60e3      	str	r3, [r4, #12]
 800555e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005562:	6665      	str	r5, [r4, #100]	; 0x64
 8005564:	f000 f86c 	bl	8005640 <__retarget_lock_init_recursive>
 8005568:	f7ff ff96 	bl	8005498 <__sfp_lock_release>
 800556c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005574:	6025      	str	r5, [r4, #0]
 8005576:	61a5      	str	r5, [r4, #24]
 8005578:	2208      	movs	r2, #8
 800557a:	4629      	mov	r1, r5
 800557c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005580:	f000 f86f 	bl	8005662 <memset>
 8005584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800558c:	4620      	mov	r0, r4
 800558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005590:	3468      	adds	r4, #104	; 0x68
 8005592:	e7d9      	b.n	8005548 <__sfp+0x1c>
 8005594:	2104      	movs	r1, #4
 8005596:	4638      	mov	r0, r7
 8005598:	f7ff ff62 	bl	8005460 <__sfmoreglue>
 800559c:	4604      	mov	r4, r0
 800559e:	6030      	str	r0, [r6, #0]
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d1d5      	bne.n	8005550 <__sfp+0x24>
 80055a4:	f7ff ff78 	bl	8005498 <__sfp_lock_release>
 80055a8:	230c      	movs	r3, #12
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	e7ee      	b.n	800558c <__sfp+0x60>
 80055ae:	bf00      	nop
 80055b0:	080084fc 	.word	0x080084fc
 80055b4:	ffff0001 	.word	0xffff0001

080055b8 <_fwalk_reent>:
 80055b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055bc:	4606      	mov	r6, r0
 80055be:	4688      	mov	r8, r1
 80055c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055c4:	2700      	movs	r7, #0
 80055c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055ca:	f1b9 0901 	subs.w	r9, r9, #1
 80055ce:	d505      	bpl.n	80055dc <_fwalk_reent+0x24>
 80055d0:	6824      	ldr	r4, [r4, #0]
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	d1f7      	bne.n	80055c6 <_fwalk_reent+0xe>
 80055d6:	4638      	mov	r0, r7
 80055d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055dc:	89ab      	ldrh	r3, [r5, #12]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d907      	bls.n	80055f2 <_fwalk_reent+0x3a>
 80055e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055e6:	3301      	adds	r3, #1
 80055e8:	d003      	beq.n	80055f2 <_fwalk_reent+0x3a>
 80055ea:	4629      	mov	r1, r5
 80055ec:	4630      	mov	r0, r6
 80055ee:	47c0      	blx	r8
 80055f0:	4307      	orrs	r7, r0
 80055f2:	3568      	adds	r5, #104	; 0x68
 80055f4:	e7e9      	b.n	80055ca <_fwalk_reent+0x12>
	...

080055f8 <__libc_init_array>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4d0d      	ldr	r5, [pc, #52]	; (8005630 <__libc_init_array+0x38>)
 80055fc:	4c0d      	ldr	r4, [pc, #52]	; (8005634 <__libc_init_array+0x3c>)
 80055fe:	1b64      	subs	r4, r4, r5
 8005600:	10a4      	asrs	r4, r4, #2
 8005602:	2600      	movs	r6, #0
 8005604:	42a6      	cmp	r6, r4
 8005606:	d109      	bne.n	800561c <__libc_init_array+0x24>
 8005608:	4d0b      	ldr	r5, [pc, #44]	; (8005638 <__libc_init_array+0x40>)
 800560a:	4c0c      	ldr	r4, [pc, #48]	; (800563c <__libc_init_array+0x44>)
 800560c:	f002 fe1a 	bl	8008244 <_init>
 8005610:	1b64      	subs	r4, r4, r5
 8005612:	10a4      	asrs	r4, r4, #2
 8005614:	2600      	movs	r6, #0
 8005616:	42a6      	cmp	r6, r4
 8005618:	d105      	bne.n	8005626 <__libc_init_array+0x2e>
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005620:	4798      	blx	r3
 8005622:	3601      	adds	r6, #1
 8005624:	e7ee      	b.n	8005604 <__libc_init_array+0xc>
 8005626:	f855 3b04 	ldr.w	r3, [r5], #4
 800562a:	4798      	blx	r3
 800562c:	3601      	adds	r6, #1
 800562e:	e7f2      	b.n	8005616 <__libc_init_array+0x1e>
 8005630:	08008880 	.word	0x08008880
 8005634:	08008880 	.word	0x08008880
 8005638:	08008880 	.word	0x08008880
 800563c:	08008884 	.word	0x08008884

08005640 <__retarget_lock_init_recursive>:
 8005640:	4770      	bx	lr

08005642 <__retarget_lock_acquire_recursive>:
 8005642:	4770      	bx	lr

08005644 <__retarget_lock_release_recursive>:
 8005644:	4770      	bx	lr

08005646 <memcpy>:
 8005646:	440a      	add	r2, r1
 8005648:	4291      	cmp	r1, r2
 800564a:	f100 33ff 	add.w	r3, r0, #4294967295
 800564e:	d100      	bne.n	8005652 <memcpy+0xc>
 8005650:	4770      	bx	lr
 8005652:	b510      	push	{r4, lr}
 8005654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800565c:	4291      	cmp	r1, r2
 800565e:	d1f9      	bne.n	8005654 <memcpy+0xe>
 8005660:	bd10      	pop	{r4, pc}

08005662 <memset>:
 8005662:	4402      	add	r2, r0
 8005664:	4603      	mov	r3, r0
 8005666:	4293      	cmp	r3, r2
 8005668:	d100      	bne.n	800566c <memset+0xa>
 800566a:	4770      	bx	lr
 800566c:	f803 1b01 	strb.w	r1, [r3], #1
 8005670:	e7f9      	b.n	8005666 <memset+0x4>
	...

08005674 <sbrk_aligned>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4e0e      	ldr	r6, [pc, #56]	; (80056b0 <sbrk_aligned+0x3c>)
 8005678:	460c      	mov	r4, r1
 800567a:	6831      	ldr	r1, [r6, #0]
 800567c:	4605      	mov	r5, r0
 800567e:	b911      	cbnz	r1, 8005686 <sbrk_aligned+0x12>
 8005680:	f000 fcf6 	bl	8006070 <_sbrk_r>
 8005684:	6030      	str	r0, [r6, #0]
 8005686:	4621      	mov	r1, r4
 8005688:	4628      	mov	r0, r5
 800568a:	f000 fcf1 	bl	8006070 <_sbrk_r>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	d00a      	beq.n	80056a8 <sbrk_aligned+0x34>
 8005692:	1cc4      	adds	r4, r0, #3
 8005694:	f024 0403 	bic.w	r4, r4, #3
 8005698:	42a0      	cmp	r0, r4
 800569a:	d007      	beq.n	80056ac <sbrk_aligned+0x38>
 800569c:	1a21      	subs	r1, r4, r0
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 fce6 	bl	8006070 <_sbrk_r>
 80056a4:	3001      	adds	r0, #1
 80056a6:	d101      	bne.n	80056ac <sbrk_aligned+0x38>
 80056a8:	f04f 34ff 	mov.w	r4, #4294967295
 80056ac:	4620      	mov	r0, r4
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	2000064c 	.word	0x2000064c

080056b4 <_malloc_r>:
 80056b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b8:	1ccd      	adds	r5, r1, #3
 80056ba:	f025 0503 	bic.w	r5, r5, #3
 80056be:	3508      	adds	r5, #8
 80056c0:	2d0c      	cmp	r5, #12
 80056c2:	bf38      	it	cc
 80056c4:	250c      	movcc	r5, #12
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	4607      	mov	r7, r0
 80056ca:	db01      	blt.n	80056d0 <_malloc_r+0x1c>
 80056cc:	42a9      	cmp	r1, r5
 80056ce:	d905      	bls.n	80056dc <_malloc_r+0x28>
 80056d0:	230c      	movs	r3, #12
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	2600      	movs	r6, #0
 80056d6:	4630      	mov	r0, r6
 80056d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056dc:	4e2e      	ldr	r6, [pc, #184]	; (8005798 <_malloc_r+0xe4>)
 80056de:	f001 fe0d 	bl	80072fc <__malloc_lock>
 80056e2:	6833      	ldr	r3, [r6, #0]
 80056e4:	461c      	mov	r4, r3
 80056e6:	bb34      	cbnz	r4, 8005736 <_malloc_r+0x82>
 80056e8:	4629      	mov	r1, r5
 80056ea:	4638      	mov	r0, r7
 80056ec:	f7ff ffc2 	bl	8005674 <sbrk_aligned>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	4604      	mov	r4, r0
 80056f4:	d14d      	bne.n	8005792 <_malloc_r+0xde>
 80056f6:	6834      	ldr	r4, [r6, #0]
 80056f8:	4626      	mov	r6, r4
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d140      	bne.n	8005780 <_malloc_r+0xcc>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	4631      	mov	r1, r6
 8005702:	4638      	mov	r0, r7
 8005704:	eb04 0803 	add.w	r8, r4, r3
 8005708:	f000 fcb2 	bl	8006070 <_sbrk_r>
 800570c:	4580      	cmp	r8, r0
 800570e:	d13a      	bne.n	8005786 <_malloc_r+0xd2>
 8005710:	6821      	ldr	r1, [r4, #0]
 8005712:	3503      	adds	r5, #3
 8005714:	1a6d      	subs	r5, r5, r1
 8005716:	f025 0503 	bic.w	r5, r5, #3
 800571a:	3508      	adds	r5, #8
 800571c:	2d0c      	cmp	r5, #12
 800571e:	bf38      	it	cc
 8005720:	250c      	movcc	r5, #12
 8005722:	4629      	mov	r1, r5
 8005724:	4638      	mov	r0, r7
 8005726:	f7ff ffa5 	bl	8005674 <sbrk_aligned>
 800572a:	3001      	adds	r0, #1
 800572c:	d02b      	beq.n	8005786 <_malloc_r+0xd2>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	442b      	add	r3, r5
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	e00e      	b.n	8005754 <_malloc_r+0xa0>
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	1b52      	subs	r2, r2, r5
 800573a:	d41e      	bmi.n	800577a <_malloc_r+0xc6>
 800573c:	2a0b      	cmp	r2, #11
 800573e:	d916      	bls.n	800576e <_malloc_r+0xba>
 8005740:	1961      	adds	r1, r4, r5
 8005742:	42a3      	cmp	r3, r4
 8005744:	6025      	str	r5, [r4, #0]
 8005746:	bf18      	it	ne
 8005748:	6059      	strne	r1, [r3, #4]
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	bf08      	it	eq
 800574e:	6031      	streq	r1, [r6, #0]
 8005750:	5162      	str	r2, [r4, r5]
 8005752:	604b      	str	r3, [r1, #4]
 8005754:	4638      	mov	r0, r7
 8005756:	f104 060b 	add.w	r6, r4, #11
 800575a:	f001 fdd5 	bl	8007308 <__malloc_unlock>
 800575e:	f026 0607 	bic.w	r6, r6, #7
 8005762:	1d23      	adds	r3, r4, #4
 8005764:	1af2      	subs	r2, r6, r3
 8005766:	d0b6      	beq.n	80056d6 <_malloc_r+0x22>
 8005768:	1b9b      	subs	r3, r3, r6
 800576a:	50a3      	str	r3, [r4, r2]
 800576c:	e7b3      	b.n	80056d6 <_malloc_r+0x22>
 800576e:	6862      	ldr	r2, [r4, #4]
 8005770:	42a3      	cmp	r3, r4
 8005772:	bf0c      	ite	eq
 8005774:	6032      	streq	r2, [r6, #0]
 8005776:	605a      	strne	r2, [r3, #4]
 8005778:	e7ec      	b.n	8005754 <_malloc_r+0xa0>
 800577a:	4623      	mov	r3, r4
 800577c:	6864      	ldr	r4, [r4, #4]
 800577e:	e7b2      	b.n	80056e6 <_malloc_r+0x32>
 8005780:	4634      	mov	r4, r6
 8005782:	6876      	ldr	r6, [r6, #4]
 8005784:	e7b9      	b.n	80056fa <_malloc_r+0x46>
 8005786:	230c      	movs	r3, #12
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4638      	mov	r0, r7
 800578c:	f001 fdbc 	bl	8007308 <__malloc_unlock>
 8005790:	e7a1      	b.n	80056d6 <_malloc_r+0x22>
 8005792:	6025      	str	r5, [r4, #0]
 8005794:	e7de      	b.n	8005754 <_malloc_r+0xa0>
 8005796:	bf00      	nop
 8005798:	20000648 	.word	0x20000648

0800579c <__cvt>:
 800579c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	ec55 4b10 	vmov	r4, r5, d0
 80057a4:	2d00      	cmp	r5, #0
 80057a6:	460e      	mov	r6, r1
 80057a8:	4619      	mov	r1, r3
 80057aa:	462b      	mov	r3, r5
 80057ac:	bfbb      	ittet	lt
 80057ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057b2:	461d      	movlt	r5, r3
 80057b4:	2300      	movge	r3, #0
 80057b6:	232d      	movlt	r3, #45	; 0x2d
 80057b8:	700b      	strb	r3, [r1, #0]
 80057ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057c0:	4691      	mov	r9, r2
 80057c2:	f023 0820 	bic.w	r8, r3, #32
 80057c6:	bfbc      	itt	lt
 80057c8:	4622      	movlt	r2, r4
 80057ca:	4614      	movlt	r4, r2
 80057cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057d0:	d005      	beq.n	80057de <__cvt+0x42>
 80057d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057d6:	d100      	bne.n	80057da <__cvt+0x3e>
 80057d8:	3601      	adds	r6, #1
 80057da:	2102      	movs	r1, #2
 80057dc:	e000      	b.n	80057e0 <__cvt+0x44>
 80057de:	2103      	movs	r1, #3
 80057e0:	ab03      	add	r3, sp, #12
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	ab02      	add	r3, sp, #8
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	ec45 4b10 	vmov	d0, r4, r5
 80057ec:	4653      	mov	r3, sl
 80057ee:	4632      	mov	r2, r6
 80057f0:	f000 fe3e 	bl	8006470 <_dtoa_r>
 80057f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057f8:	4607      	mov	r7, r0
 80057fa:	d102      	bne.n	8005802 <__cvt+0x66>
 80057fc:	f019 0f01 	tst.w	r9, #1
 8005800:	d022      	beq.n	8005848 <__cvt+0xac>
 8005802:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005806:	eb07 0906 	add.w	r9, r7, r6
 800580a:	d110      	bne.n	800582e <__cvt+0x92>
 800580c:	783b      	ldrb	r3, [r7, #0]
 800580e:	2b30      	cmp	r3, #48	; 0x30
 8005810:	d10a      	bne.n	8005828 <__cvt+0x8c>
 8005812:	2200      	movs	r2, #0
 8005814:	2300      	movs	r3, #0
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fb f955 	bl	8000ac8 <__aeabi_dcmpeq>
 800581e:	b918      	cbnz	r0, 8005828 <__cvt+0x8c>
 8005820:	f1c6 0601 	rsb	r6, r6, #1
 8005824:	f8ca 6000 	str.w	r6, [sl]
 8005828:	f8da 3000 	ldr.w	r3, [sl]
 800582c:	4499      	add	r9, r3
 800582e:	2200      	movs	r2, #0
 8005830:	2300      	movs	r3, #0
 8005832:	4620      	mov	r0, r4
 8005834:	4629      	mov	r1, r5
 8005836:	f7fb f947 	bl	8000ac8 <__aeabi_dcmpeq>
 800583a:	b108      	cbz	r0, 8005840 <__cvt+0xa4>
 800583c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005840:	2230      	movs	r2, #48	; 0x30
 8005842:	9b03      	ldr	r3, [sp, #12]
 8005844:	454b      	cmp	r3, r9
 8005846:	d307      	bcc.n	8005858 <__cvt+0xbc>
 8005848:	9b03      	ldr	r3, [sp, #12]
 800584a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800584c:	1bdb      	subs	r3, r3, r7
 800584e:	4638      	mov	r0, r7
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	b004      	add	sp, #16
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	1c59      	adds	r1, r3, #1
 800585a:	9103      	str	r1, [sp, #12]
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	e7f0      	b.n	8005842 <__cvt+0xa6>

08005860 <__exponent>:
 8005860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005862:	4603      	mov	r3, r0
 8005864:	2900      	cmp	r1, #0
 8005866:	bfb8      	it	lt
 8005868:	4249      	neglt	r1, r1
 800586a:	f803 2b02 	strb.w	r2, [r3], #2
 800586e:	bfb4      	ite	lt
 8005870:	222d      	movlt	r2, #45	; 0x2d
 8005872:	222b      	movge	r2, #43	; 0x2b
 8005874:	2909      	cmp	r1, #9
 8005876:	7042      	strb	r2, [r0, #1]
 8005878:	dd2a      	ble.n	80058d0 <__exponent+0x70>
 800587a:	f10d 0407 	add.w	r4, sp, #7
 800587e:	46a4      	mov	ip, r4
 8005880:	270a      	movs	r7, #10
 8005882:	46a6      	mov	lr, r4
 8005884:	460a      	mov	r2, r1
 8005886:	fb91 f6f7 	sdiv	r6, r1, r7
 800588a:	fb07 1516 	mls	r5, r7, r6, r1
 800588e:	3530      	adds	r5, #48	; 0x30
 8005890:	2a63      	cmp	r2, #99	; 0x63
 8005892:	f104 34ff 	add.w	r4, r4, #4294967295
 8005896:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800589a:	4631      	mov	r1, r6
 800589c:	dcf1      	bgt.n	8005882 <__exponent+0x22>
 800589e:	3130      	adds	r1, #48	; 0x30
 80058a0:	f1ae 0502 	sub.w	r5, lr, #2
 80058a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058a8:	1c44      	adds	r4, r0, #1
 80058aa:	4629      	mov	r1, r5
 80058ac:	4561      	cmp	r1, ip
 80058ae:	d30a      	bcc.n	80058c6 <__exponent+0x66>
 80058b0:	f10d 0209 	add.w	r2, sp, #9
 80058b4:	eba2 020e 	sub.w	r2, r2, lr
 80058b8:	4565      	cmp	r5, ip
 80058ba:	bf88      	it	hi
 80058bc:	2200      	movhi	r2, #0
 80058be:	4413      	add	r3, r2
 80058c0:	1a18      	subs	r0, r3, r0
 80058c2:	b003      	add	sp, #12
 80058c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058ce:	e7ed      	b.n	80058ac <__exponent+0x4c>
 80058d0:	2330      	movs	r3, #48	; 0x30
 80058d2:	3130      	adds	r1, #48	; 0x30
 80058d4:	7083      	strb	r3, [r0, #2]
 80058d6:	70c1      	strb	r1, [r0, #3]
 80058d8:	1d03      	adds	r3, r0, #4
 80058da:	e7f1      	b.n	80058c0 <__exponent+0x60>

080058dc <_printf_float>:
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	ed2d 8b02 	vpush	{d8}
 80058e4:	b08d      	sub	sp, #52	; 0x34
 80058e6:	460c      	mov	r4, r1
 80058e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058ec:	4616      	mov	r6, r2
 80058ee:	461f      	mov	r7, r3
 80058f0:	4605      	mov	r5, r0
 80058f2:	f001 fc7f 	bl	80071f4 <_localeconv_r>
 80058f6:	f8d0 a000 	ldr.w	sl, [r0]
 80058fa:	4650      	mov	r0, sl
 80058fc:	f7fa fc68 	bl	80001d0 <strlen>
 8005900:	2300      	movs	r3, #0
 8005902:	930a      	str	r3, [sp, #40]	; 0x28
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	9305      	str	r3, [sp, #20]
 8005908:	f8d8 3000 	ldr.w	r3, [r8]
 800590c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005910:	3307      	adds	r3, #7
 8005912:	f023 0307 	bic.w	r3, r3, #7
 8005916:	f103 0208 	add.w	r2, r3, #8
 800591a:	f8c8 2000 	str.w	r2, [r8]
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005926:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800592a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	f8cd 8018 	str.w	r8, [sp, #24]
 8005934:	ee08 0a10 	vmov	s16, r0
 8005938:	4b9f      	ldr	r3, [pc, #636]	; (8005bb8 <_printf_float+0x2dc>)
 800593a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800593e:	f04f 32ff 	mov.w	r2, #4294967295
 8005942:	f7fb f8f3 	bl	8000b2c <__aeabi_dcmpun>
 8005946:	bb88      	cbnz	r0, 80059ac <_printf_float+0xd0>
 8005948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800594c:	4b9a      	ldr	r3, [pc, #616]	; (8005bb8 <_printf_float+0x2dc>)
 800594e:	f04f 32ff 	mov.w	r2, #4294967295
 8005952:	f7fb f8cd 	bl	8000af0 <__aeabi_dcmple>
 8005956:	bb48      	cbnz	r0, 80059ac <_printf_float+0xd0>
 8005958:	2200      	movs	r2, #0
 800595a:	2300      	movs	r3, #0
 800595c:	4640      	mov	r0, r8
 800595e:	4649      	mov	r1, r9
 8005960:	f7fb f8bc 	bl	8000adc <__aeabi_dcmplt>
 8005964:	b110      	cbz	r0, 800596c <_printf_float+0x90>
 8005966:	232d      	movs	r3, #45	; 0x2d
 8005968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800596c:	4b93      	ldr	r3, [pc, #588]	; (8005bbc <_printf_float+0x2e0>)
 800596e:	4894      	ldr	r0, [pc, #592]	; (8005bc0 <_printf_float+0x2e4>)
 8005970:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005974:	bf94      	ite	ls
 8005976:	4698      	movls	r8, r3
 8005978:	4680      	movhi	r8, r0
 800597a:	2303      	movs	r3, #3
 800597c:	6123      	str	r3, [r4, #16]
 800597e:	9b05      	ldr	r3, [sp, #20]
 8005980:	f023 0204 	bic.w	r2, r3, #4
 8005984:	6022      	str	r2, [r4, #0]
 8005986:	f04f 0900 	mov.w	r9, #0
 800598a:	9700      	str	r7, [sp, #0]
 800598c:	4633      	mov	r3, r6
 800598e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005990:	4621      	mov	r1, r4
 8005992:	4628      	mov	r0, r5
 8005994:	f000 f9d8 	bl	8005d48 <_printf_common>
 8005998:	3001      	adds	r0, #1
 800599a:	f040 8090 	bne.w	8005abe <_printf_float+0x1e2>
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	b00d      	add	sp, #52	; 0x34
 80059a4:	ecbd 8b02 	vpop	{d8}
 80059a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	4649      	mov	r1, r9
 80059b4:	f7fb f8ba 	bl	8000b2c <__aeabi_dcmpun>
 80059b8:	b140      	cbz	r0, 80059cc <_printf_float+0xf0>
 80059ba:	464b      	mov	r3, r9
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bfbc      	itt	lt
 80059c0:	232d      	movlt	r3, #45	; 0x2d
 80059c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059c6:	487f      	ldr	r0, [pc, #508]	; (8005bc4 <_printf_float+0x2e8>)
 80059c8:	4b7f      	ldr	r3, [pc, #508]	; (8005bc8 <_printf_float+0x2ec>)
 80059ca:	e7d1      	b.n	8005970 <_printf_float+0x94>
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059d2:	9206      	str	r2, [sp, #24]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	d13f      	bne.n	8005a58 <_printf_float+0x17c>
 80059d8:	2306      	movs	r3, #6
 80059da:	6063      	str	r3, [r4, #4]
 80059dc:	9b05      	ldr	r3, [sp, #20]
 80059de:	6861      	ldr	r1, [r4, #4]
 80059e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059e4:	2300      	movs	r3, #0
 80059e6:	9303      	str	r3, [sp, #12]
 80059e8:	ab0a      	add	r3, sp, #40	; 0x28
 80059ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059ee:	ab09      	add	r3, sp, #36	; 0x24
 80059f0:	ec49 8b10 	vmov	d0, r8, r9
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6022      	str	r2, [r4, #0]
 80059f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059fc:	4628      	mov	r0, r5
 80059fe:	f7ff fecd 	bl	800579c <__cvt>
 8005a02:	9b06      	ldr	r3, [sp, #24]
 8005a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a06:	2b47      	cmp	r3, #71	; 0x47
 8005a08:	4680      	mov	r8, r0
 8005a0a:	d108      	bne.n	8005a1e <_printf_float+0x142>
 8005a0c:	1cc8      	adds	r0, r1, #3
 8005a0e:	db02      	blt.n	8005a16 <_printf_float+0x13a>
 8005a10:	6863      	ldr	r3, [r4, #4]
 8005a12:	4299      	cmp	r1, r3
 8005a14:	dd41      	ble.n	8005a9a <_printf_float+0x1be>
 8005a16:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a1a:	fa5f fb8b 	uxtb.w	fp, fp
 8005a1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a22:	d820      	bhi.n	8005a66 <_printf_float+0x18a>
 8005a24:	3901      	subs	r1, #1
 8005a26:	465a      	mov	r2, fp
 8005a28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a2c:	9109      	str	r1, [sp, #36]	; 0x24
 8005a2e:	f7ff ff17 	bl	8005860 <__exponent>
 8005a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a34:	1813      	adds	r3, r2, r0
 8005a36:	2a01      	cmp	r2, #1
 8005a38:	4681      	mov	r9, r0
 8005a3a:	6123      	str	r3, [r4, #16]
 8005a3c:	dc02      	bgt.n	8005a44 <_printf_float+0x168>
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	07d2      	lsls	r2, r2, #31
 8005a42:	d501      	bpl.n	8005a48 <_printf_float+0x16c>
 8005a44:	3301      	adds	r3, #1
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d09c      	beq.n	800598a <_printf_float+0xae>
 8005a50:	232d      	movs	r3, #45	; 0x2d
 8005a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a56:	e798      	b.n	800598a <_printf_float+0xae>
 8005a58:	9a06      	ldr	r2, [sp, #24]
 8005a5a:	2a47      	cmp	r2, #71	; 0x47
 8005a5c:	d1be      	bne.n	80059dc <_printf_float+0x100>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1bc      	bne.n	80059dc <_printf_float+0x100>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7b9      	b.n	80059da <_printf_float+0xfe>
 8005a66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a6a:	d118      	bne.n	8005a9e <_printf_float+0x1c2>
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	dd0b      	ble.n	8005a8a <_printf_float+0x1ae>
 8005a72:	6121      	str	r1, [r4, #16]
 8005a74:	b913      	cbnz	r3, 8005a7c <_printf_float+0x1a0>
 8005a76:	6822      	ldr	r2, [r4, #0]
 8005a78:	07d0      	lsls	r0, r2, #31
 8005a7a:	d502      	bpl.n	8005a82 <_printf_float+0x1a6>
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	440b      	add	r3, r1
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a84:	f04f 0900 	mov.w	r9, #0
 8005a88:	e7de      	b.n	8005a48 <_printf_float+0x16c>
 8005a8a:	b913      	cbnz	r3, 8005a92 <_printf_float+0x1b6>
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	07d2      	lsls	r2, r2, #31
 8005a90:	d501      	bpl.n	8005a96 <_printf_float+0x1ba>
 8005a92:	3302      	adds	r3, #2
 8005a94:	e7f4      	b.n	8005a80 <_printf_float+0x1a4>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e7f2      	b.n	8005a80 <_printf_float+0x1a4>
 8005a9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa0:	4299      	cmp	r1, r3
 8005aa2:	db05      	blt.n	8005ab0 <_printf_float+0x1d4>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	6121      	str	r1, [r4, #16]
 8005aa8:	07d8      	lsls	r0, r3, #31
 8005aaa:	d5ea      	bpl.n	8005a82 <_printf_float+0x1a6>
 8005aac:	1c4b      	adds	r3, r1, #1
 8005aae:	e7e7      	b.n	8005a80 <_printf_float+0x1a4>
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	bfd4      	ite	le
 8005ab4:	f1c1 0202 	rsble	r2, r1, #2
 8005ab8:	2201      	movgt	r2, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	e7e0      	b.n	8005a80 <_printf_float+0x1a4>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	055a      	lsls	r2, r3, #21
 8005ac2:	d407      	bmi.n	8005ad4 <_printf_float+0x1f8>
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d12c      	bne.n	8005b2c <_printf_float+0x250>
 8005ad2:	e764      	b.n	800599e <_printf_float+0xc2>
 8005ad4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ad8:	f240 80e0 	bls.w	8005c9c <_printf_float+0x3c0>
 8005adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f7fa fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d034      	beq.n	8005b56 <_printf_float+0x27a>
 8005aec:	4a37      	ldr	r2, [pc, #220]	; (8005bcc <_printf_float+0x2f0>)
 8005aee:	2301      	movs	r3, #1
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f43f af51 	beq.w	800599e <_printf_float+0xc2>
 8005afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b00:	429a      	cmp	r2, r3
 8005b02:	db02      	blt.n	8005b0a <_printf_float+0x22e>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	07d8      	lsls	r0, r3, #31
 8005b08:	d510      	bpl.n	8005b2c <_printf_float+0x250>
 8005b0a:	ee18 3a10 	vmov	r3, s16
 8005b0e:	4652      	mov	r2, sl
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f af41 	beq.w	800599e <_printf_float+0xc2>
 8005b1c:	f04f 0800 	mov.w	r8, #0
 8005b20:	f104 091a 	add.w	r9, r4, #26
 8005b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b26:	3b01      	subs	r3, #1
 8005b28:	4543      	cmp	r3, r8
 8005b2a:	dc09      	bgt.n	8005b40 <_printf_float+0x264>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	079b      	lsls	r3, r3, #30
 8005b30:	f100 8105 	bmi.w	8005d3e <_printf_float+0x462>
 8005b34:	68e0      	ldr	r0, [r4, #12]
 8005b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b38:	4298      	cmp	r0, r3
 8005b3a:	bfb8      	it	lt
 8005b3c:	4618      	movlt	r0, r3
 8005b3e:	e730      	b.n	80059a2 <_printf_float+0xc6>
 8005b40:	2301      	movs	r3, #1
 8005b42:	464a      	mov	r2, r9
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f43f af27 	beq.w	800599e <_printf_float+0xc2>
 8005b50:	f108 0801 	add.w	r8, r8, #1
 8005b54:	e7e6      	b.n	8005b24 <_printf_float+0x248>
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dc39      	bgt.n	8005bd0 <_printf_float+0x2f4>
 8005b5c:	4a1b      	ldr	r2, [pc, #108]	; (8005bcc <_printf_float+0x2f0>)
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f af19 	beq.w	800599e <_printf_float+0xc2>
 8005b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b70:	4313      	orrs	r3, r2
 8005b72:	d102      	bne.n	8005b7a <_printf_float+0x29e>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	07d9      	lsls	r1, r3, #31
 8005b78:	d5d8      	bpl.n	8005b2c <_printf_float+0x250>
 8005b7a:	ee18 3a10 	vmov	r3, s16
 8005b7e:	4652      	mov	r2, sl
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f af09 	beq.w	800599e <_printf_float+0xc2>
 8005b8c:	f04f 0900 	mov.w	r9, #0
 8005b90:	f104 0a1a 	add.w	sl, r4, #26
 8005b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b96:	425b      	negs	r3, r3
 8005b98:	454b      	cmp	r3, r9
 8005b9a:	dc01      	bgt.n	8005ba0 <_printf_float+0x2c4>
 8005b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b9e:	e792      	b.n	8005ac6 <_printf_float+0x1ea>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4652      	mov	r2, sl
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f aef7 	beq.w	800599e <_printf_float+0xc2>
 8005bb0:	f109 0901 	add.w	r9, r9, #1
 8005bb4:	e7ee      	b.n	8005b94 <_printf_float+0x2b8>
 8005bb6:	bf00      	nop
 8005bb8:	7fefffff 	.word	0x7fefffff
 8005bbc:	08008500 	.word	0x08008500
 8005bc0:	08008504 	.word	0x08008504
 8005bc4:	0800850c 	.word	0x0800850c
 8005bc8:	08008508 	.word	0x08008508
 8005bcc:	08008510 	.word	0x08008510
 8005bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	bfa8      	it	ge
 8005bd8:	461a      	movge	r2, r3
 8005bda:	2a00      	cmp	r2, #0
 8005bdc:	4691      	mov	r9, r2
 8005bde:	dc37      	bgt.n	8005c50 <_printf_float+0x374>
 8005be0:	f04f 0b00 	mov.w	fp, #0
 8005be4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005be8:	f104 021a 	add.w	r2, r4, #26
 8005bec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bee:	9305      	str	r3, [sp, #20]
 8005bf0:	eba3 0309 	sub.w	r3, r3, r9
 8005bf4:	455b      	cmp	r3, fp
 8005bf6:	dc33      	bgt.n	8005c60 <_printf_float+0x384>
 8005bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	db3b      	blt.n	8005c78 <_printf_float+0x39c>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	07da      	lsls	r2, r3, #31
 8005c04:	d438      	bmi.n	8005c78 <_printf_float+0x39c>
 8005c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c08:	9a05      	ldr	r2, [sp, #20]
 8005c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c0c:	1a9a      	subs	r2, r3, r2
 8005c0e:	eba3 0901 	sub.w	r9, r3, r1
 8005c12:	4591      	cmp	r9, r2
 8005c14:	bfa8      	it	ge
 8005c16:	4691      	movge	r9, r2
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	dc35      	bgt.n	8005c8a <_printf_float+0x3ae>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c26:	f104 0a1a 	add.w	sl, r4, #26
 8005c2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	eba3 0309 	sub.w	r3, r3, r9
 8005c34:	4543      	cmp	r3, r8
 8005c36:	f77f af79 	ble.w	8005b2c <_printf_float+0x250>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4652      	mov	r2, sl
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f aeaa 	beq.w	800599e <_printf_float+0xc2>
 8005c4a:	f108 0801 	add.w	r8, r8, #1
 8005c4e:	e7ec      	b.n	8005c2a <_printf_float+0x34e>
 8005c50:	4613      	mov	r3, r2
 8005c52:	4631      	mov	r1, r6
 8005c54:	4642      	mov	r2, r8
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b8      	blx	r7
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d1c0      	bne.n	8005be0 <_printf_float+0x304>
 8005c5e:	e69e      	b.n	800599e <_printf_float+0xc2>
 8005c60:	2301      	movs	r3, #1
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	9205      	str	r2, [sp, #20]
 8005c68:	47b8      	blx	r7
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	f43f ae97 	beq.w	800599e <_printf_float+0xc2>
 8005c70:	9a05      	ldr	r2, [sp, #20]
 8005c72:	f10b 0b01 	add.w	fp, fp, #1
 8005c76:	e7b9      	b.n	8005bec <_printf_float+0x310>
 8005c78:	ee18 3a10 	vmov	r3, s16
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b8      	blx	r7
 8005c84:	3001      	adds	r0, #1
 8005c86:	d1be      	bne.n	8005c06 <_printf_float+0x32a>
 8005c88:	e689      	b.n	800599e <_printf_float+0xc2>
 8005c8a:	9a05      	ldr	r2, [sp, #20]
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	4442      	add	r2, r8
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	d1c1      	bne.n	8005c1e <_printf_float+0x342>
 8005c9a:	e680      	b.n	800599e <_printf_float+0xc2>
 8005c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c9e:	2a01      	cmp	r2, #1
 8005ca0:	dc01      	bgt.n	8005ca6 <_printf_float+0x3ca>
 8005ca2:	07db      	lsls	r3, r3, #31
 8005ca4:	d538      	bpl.n	8005d18 <_printf_float+0x43c>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4642      	mov	r2, r8
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	f43f ae74 	beq.w	800599e <_printf_float+0xc2>
 8005cb6:	ee18 3a10 	vmov	r3, s16
 8005cba:	4652      	mov	r2, sl
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f43f ae6b 	beq.w	800599e <_printf_float+0xc2>
 8005cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f7fa fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cd4:	b9d8      	cbnz	r0, 8005d0e <_printf_float+0x432>
 8005cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd8:	f108 0201 	add.w	r2, r8, #1
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	47b8      	blx	r7
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d10e      	bne.n	8005d06 <_printf_float+0x42a>
 8005ce8:	e659      	b.n	800599e <_printf_float+0xc2>
 8005cea:	2301      	movs	r3, #1
 8005cec:	4652      	mov	r2, sl
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f ae52 	beq.w	800599e <_printf_float+0xc2>
 8005cfa:	f108 0801 	add.w	r8, r8, #1
 8005cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	4543      	cmp	r3, r8
 8005d04:	dcf1      	bgt.n	8005cea <_printf_float+0x40e>
 8005d06:	464b      	mov	r3, r9
 8005d08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d0c:	e6dc      	b.n	8005ac8 <_printf_float+0x1ec>
 8005d0e:	f04f 0800 	mov.w	r8, #0
 8005d12:	f104 0a1a 	add.w	sl, r4, #26
 8005d16:	e7f2      	b.n	8005cfe <_printf_float+0x422>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	4642      	mov	r2, r8
 8005d1c:	e7df      	b.n	8005cde <_printf_float+0x402>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	464a      	mov	r2, r9
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	f43f ae38 	beq.w	800599e <_printf_float+0xc2>
 8005d2e:	f108 0801 	add.w	r8, r8, #1
 8005d32:	68e3      	ldr	r3, [r4, #12]
 8005d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d36:	1a5b      	subs	r3, r3, r1
 8005d38:	4543      	cmp	r3, r8
 8005d3a:	dcf0      	bgt.n	8005d1e <_printf_float+0x442>
 8005d3c:	e6fa      	b.n	8005b34 <_printf_float+0x258>
 8005d3e:	f04f 0800 	mov.w	r8, #0
 8005d42:	f104 0919 	add.w	r9, r4, #25
 8005d46:	e7f4      	b.n	8005d32 <_printf_float+0x456>

08005d48 <_printf_common>:
 8005d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	4616      	mov	r6, r2
 8005d4e:	4699      	mov	r9, r3
 8005d50:	688a      	ldr	r2, [r1, #8]
 8005d52:	690b      	ldr	r3, [r1, #16]
 8005d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bfb8      	it	lt
 8005d5c:	4613      	movlt	r3, r2
 8005d5e:	6033      	str	r3, [r6, #0]
 8005d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d64:	4607      	mov	r7, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	b10a      	cbz	r2, 8005d6e <_printf_common+0x26>
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	6033      	str	r3, [r6, #0]
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	0699      	lsls	r1, r3, #26
 8005d72:	bf42      	ittt	mi
 8005d74:	6833      	ldrmi	r3, [r6, #0]
 8005d76:	3302      	addmi	r3, #2
 8005d78:	6033      	strmi	r3, [r6, #0]
 8005d7a:	6825      	ldr	r5, [r4, #0]
 8005d7c:	f015 0506 	ands.w	r5, r5, #6
 8005d80:	d106      	bne.n	8005d90 <_printf_common+0x48>
 8005d82:	f104 0a19 	add.w	sl, r4, #25
 8005d86:	68e3      	ldr	r3, [r4, #12]
 8005d88:	6832      	ldr	r2, [r6, #0]
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	42ab      	cmp	r3, r5
 8005d8e:	dc26      	bgt.n	8005dde <_printf_common+0x96>
 8005d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d94:	1e13      	subs	r3, r2, #0
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	bf18      	it	ne
 8005d9a:	2301      	movne	r3, #1
 8005d9c:	0692      	lsls	r2, r2, #26
 8005d9e:	d42b      	bmi.n	8005df8 <_printf_common+0xb0>
 8005da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005da4:	4649      	mov	r1, r9
 8005da6:	4638      	mov	r0, r7
 8005da8:	47c0      	blx	r8
 8005daa:	3001      	adds	r0, #1
 8005dac:	d01e      	beq.n	8005dec <_printf_common+0xa4>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	68e5      	ldr	r5, [r4, #12]
 8005db2:	6832      	ldr	r2, [r6, #0]
 8005db4:	f003 0306 	and.w	r3, r3, #6
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	bf08      	it	eq
 8005dbc:	1aad      	subeq	r5, r5, r2
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	6922      	ldr	r2, [r4, #16]
 8005dc2:	bf0c      	ite	eq
 8005dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dc8:	2500      	movne	r5, #0
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	bfc4      	itt	gt
 8005dce:	1a9b      	subgt	r3, r3, r2
 8005dd0:	18ed      	addgt	r5, r5, r3
 8005dd2:	2600      	movs	r6, #0
 8005dd4:	341a      	adds	r4, #26
 8005dd6:	42b5      	cmp	r5, r6
 8005dd8:	d11a      	bne.n	8005e10 <_printf_common+0xc8>
 8005dda:	2000      	movs	r0, #0
 8005ddc:	e008      	b.n	8005df0 <_printf_common+0xa8>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4652      	mov	r2, sl
 8005de2:	4649      	mov	r1, r9
 8005de4:	4638      	mov	r0, r7
 8005de6:	47c0      	blx	r8
 8005de8:	3001      	adds	r0, #1
 8005dea:	d103      	bne.n	8005df4 <_printf_common+0xac>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df4:	3501      	adds	r5, #1
 8005df6:	e7c6      	b.n	8005d86 <_printf_common+0x3e>
 8005df8:	18e1      	adds	r1, r4, r3
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	2030      	movs	r0, #48	; 0x30
 8005dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e02:	4422      	add	r2, r4
 8005e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	e7c7      	b.n	8005da0 <_printf_common+0x58>
 8005e10:	2301      	movs	r3, #1
 8005e12:	4622      	mov	r2, r4
 8005e14:	4649      	mov	r1, r9
 8005e16:	4638      	mov	r0, r7
 8005e18:	47c0      	blx	r8
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d0e6      	beq.n	8005dec <_printf_common+0xa4>
 8005e1e:	3601      	adds	r6, #1
 8005e20:	e7d9      	b.n	8005dd6 <_printf_common+0x8e>
	...

08005e24 <_printf_i>:
 8005e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e28:	7e0f      	ldrb	r7, [r1, #24]
 8005e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e2c:	2f78      	cmp	r7, #120	; 0x78
 8005e2e:	4691      	mov	r9, r2
 8005e30:	4680      	mov	r8, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	469a      	mov	sl, r3
 8005e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e3a:	d807      	bhi.n	8005e4c <_printf_i+0x28>
 8005e3c:	2f62      	cmp	r7, #98	; 0x62
 8005e3e:	d80a      	bhi.n	8005e56 <_printf_i+0x32>
 8005e40:	2f00      	cmp	r7, #0
 8005e42:	f000 80d8 	beq.w	8005ff6 <_printf_i+0x1d2>
 8005e46:	2f58      	cmp	r7, #88	; 0x58
 8005e48:	f000 80a3 	beq.w	8005f92 <_printf_i+0x16e>
 8005e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e54:	e03a      	b.n	8005ecc <_printf_i+0xa8>
 8005e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e5a:	2b15      	cmp	r3, #21
 8005e5c:	d8f6      	bhi.n	8005e4c <_printf_i+0x28>
 8005e5e:	a101      	add	r1, pc, #4	; (adr r1, 8005e64 <_printf_i+0x40>)
 8005e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e64:	08005ebd 	.word	0x08005ebd
 8005e68:	08005ed1 	.word	0x08005ed1
 8005e6c:	08005e4d 	.word	0x08005e4d
 8005e70:	08005e4d 	.word	0x08005e4d
 8005e74:	08005e4d 	.word	0x08005e4d
 8005e78:	08005e4d 	.word	0x08005e4d
 8005e7c:	08005ed1 	.word	0x08005ed1
 8005e80:	08005e4d 	.word	0x08005e4d
 8005e84:	08005e4d 	.word	0x08005e4d
 8005e88:	08005e4d 	.word	0x08005e4d
 8005e8c:	08005e4d 	.word	0x08005e4d
 8005e90:	08005fdd 	.word	0x08005fdd
 8005e94:	08005f01 	.word	0x08005f01
 8005e98:	08005fbf 	.word	0x08005fbf
 8005e9c:	08005e4d 	.word	0x08005e4d
 8005ea0:	08005e4d 	.word	0x08005e4d
 8005ea4:	08005fff 	.word	0x08005fff
 8005ea8:	08005e4d 	.word	0x08005e4d
 8005eac:	08005f01 	.word	0x08005f01
 8005eb0:	08005e4d 	.word	0x08005e4d
 8005eb4:	08005e4d 	.word	0x08005e4d
 8005eb8:	08005fc7 	.word	0x08005fc7
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	1d1a      	adds	r2, r3, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	602a      	str	r2, [r5, #0]
 8005ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0a3      	b.n	8006018 <_printf_i+0x1f4>
 8005ed0:	6820      	ldr	r0, [r4, #0]
 8005ed2:	6829      	ldr	r1, [r5, #0]
 8005ed4:	0606      	lsls	r6, r0, #24
 8005ed6:	f101 0304 	add.w	r3, r1, #4
 8005eda:	d50a      	bpl.n	8005ef2 <_printf_i+0xce>
 8005edc:	680e      	ldr	r6, [r1, #0]
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	2e00      	cmp	r6, #0
 8005ee2:	da03      	bge.n	8005eec <_printf_i+0xc8>
 8005ee4:	232d      	movs	r3, #45	; 0x2d
 8005ee6:	4276      	negs	r6, r6
 8005ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eec:	485e      	ldr	r0, [pc, #376]	; (8006068 <_printf_i+0x244>)
 8005eee:	230a      	movs	r3, #10
 8005ef0:	e019      	b.n	8005f26 <_printf_i+0x102>
 8005ef2:	680e      	ldr	r6, [r1, #0]
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005efa:	bf18      	it	ne
 8005efc:	b236      	sxthne	r6, r6
 8005efe:	e7ef      	b.n	8005ee0 <_printf_i+0xbc>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	1d19      	adds	r1, r3, #4
 8005f06:	6029      	str	r1, [r5, #0]
 8005f08:	0601      	lsls	r1, r0, #24
 8005f0a:	d501      	bpl.n	8005f10 <_printf_i+0xec>
 8005f0c:	681e      	ldr	r6, [r3, #0]
 8005f0e:	e002      	b.n	8005f16 <_printf_i+0xf2>
 8005f10:	0646      	lsls	r6, r0, #25
 8005f12:	d5fb      	bpl.n	8005f0c <_printf_i+0xe8>
 8005f14:	881e      	ldrh	r6, [r3, #0]
 8005f16:	4854      	ldr	r0, [pc, #336]	; (8006068 <_printf_i+0x244>)
 8005f18:	2f6f      	cmp	r7, #111	; 0x6f
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2308      	moveq	r3, #8
 8005f1e:	230a      	movne	r3, #10
 8005f20:	2100      	movs	r1, #0
 8005f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f26:	6865      	ldr	r5, [r4, #4]
 8005f28:	60a5      	str	r5, [r4, #8]
 8005f2a:	2d00      	cmp	r5, #0
 8005f2c:	bfa2      	ittt	ge
 8005f2e:	6821      	ldrge	r1, [r4, #0]
 8005f30:	f021 0104 	bicge.w	r1, r1, #4
 8005f34:	6021      	strge	r1, [r4, #0]
 8005f36:	b90e      	cbnz	r6, 8005f3c <_printf_i+0x118>
 8005f38:	2d00      	cmp	r5, #0
 8005f3a:	d04d      	beq.n	8005fd8 <_printf_i+0x1b4>
 8005f3c:	4615      	mov	r5, r2
 8005f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f42:	fb03 6711 	mls	r7, r3, r1, r6
 8005f46:	5dc7      	ldrb	r7, [r0, r7]
 8005f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f4c:	4637      	mov	r7, r6
 8005f4e:	42bb      	cmp	r3, r7
 8005f50:	460e      	mov	r6, r1
 8005f52:	d9f4      	bls.n	8005f3e <_printf_i+0x11a>
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d10b      	bne.n	8005f70 <_printf_i+0x14c>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	07de      	lsls	r6, r3, #31
 8005f5c:	d508      	bpl.n	8005f70 <_printf_i+0x14c>
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	6861      	ldr	r1, [r4, #4]
 8005f62:	4299      	cmp	r1, r3
 8005f64:	bfde      	ittt	le
 8005f66:	2330      	movle	r3, #48	; 0x30
 8005f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f70:	1b52      	subs	r2, r2, r5
 8005f72:	6122      	str	r2, [r4, #16]
 8005f74:	f8cd a000 	str.w	sl, [sp]
 8005f78:	464b      	mov	r3, r9
 8005f7a:	aa03      	add	r2, sp, #12
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f7ff fee2 	bl	8005d48 <_printf_common>
 8005f84:	3001      	adds	r0, #1
 8005f86:	d14c      	bne.n	8006022 <_printf_i+0x1fe>
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	b004      	add	sp, #16
 8005f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f92:	4835      	ldr	r0, [pc, #212]	; (8006068 <_printf_i+0x244>)
 8005f94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f98:	6829      	ldr	r1, [r5, #0]
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fa0:	6029      	str	r1, [r5, #0]
 8005fa2:	061d      	lsls	r5, r3, #24
 8005fa4:	d514      	bpl.n	8005fd0 <_printf_i+0x1ac>
 8005fa6:	07df      	lsls	r7, r3, #31
 8005fa8:	bf44      	itt	mi
 8005faa:	f043 0320 	orrmi.w	r3, r3, #32
 8005fae:	6023      	strmi	r3, [r4, #0]
 8005fb0:	b91e      	cbnz	r6, 8005fba <_printf_i+0x196>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	f023 0320 	bic.w	r3, r3, #32
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	2310      	movs	r3, #16
 8005fbc:	e7b0      	b.n	8005f20 <_printf_i+0xfc>
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	f043 0320 	orr.w	r3, r3, #32
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	2378      	movs	r3, #120	; 0x78
 8005fc8:	4828      	ldr	r0, [pc, #160]	; (800606c <_printf_i+0x248>)
 8005fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fce:	e7e3      	b.n	8005f98 <_printf_i+0x174>
 8005fd0:	0659      	lsls	r1, r3, #25
 8005fd2:	bf48      	it	mi
 8005fd4:	b2b6      	uxthmi	r6, r6
 8005fd6:	e7e6      	b.n	8005fa6 <_printf_i+0x182>
 8005fd8:	4615      	mov	r5, r2
 8005fda:	e7bb      	b.n	8005f54 <_printf_i+0x130>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	6826      	ldr	r6, [r4, #0]
 8005fe0:	6961      	ldr	r1, [r4, #20]
 8005fe2:	1d18      	adds	r0, r3, #4
 8005fe4:	6028      	str	r0, [r5, #0]
 8005fe6:	0635      	lsls	r5, r6, #24
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	d501      	bpl.n	8005ff0 <_printf_i+0x1cc>
 8005fec:	6019      	str	r1, [r3, #0]
 8005fee:	e002      	b.n	8005ff6 <_printf_i+0x1d2>
 8005ff0:	0670      	lsls	r0, r6, #25
 8005ff2:	d5fb      	bpl.n	8005fec <_printf_i+0x1c8>
 8005ff4:	8019      	strh	r1, [r3, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6123      	str	r3, [r4, #16]
 8005ffa:	4615      	mov	r5, r2
 8005ffc:	e7ba      	b.n	8005f74 <_printf_i+0x150>
 8005ffe:	682b      	ldr	r3, [r5, #0]
 8006000:	1d1a      	adds	r2, r3, #4
 8006002:	602a      	str	r2, [r5, #0]
 8006004:	681d      	ldr	r5, [r3, #0]
 8006006:	6862      	ldr	r2, [r4, #4]
 8006008:	2100      	movs	r1, #0
 800600a:	4628      	mov	r0, r5
 800600c:	f7fa f8e8 	bl	80001e0 <memchr>
 8006010:	b108      	cbz	r0, 8006016 <_printf_i+0x1f2>
 8006012:	1b40      	subs	r0, r0, r5
 8006014:	6060      	str	r0, [r4, #4]
 8006016:	6863      	ldr	r3, [r4, #4]
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	2300      	movs	r3, #0
 800601c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006020:	e7a8      	b.n	8005f74 <_printf_i+0x150>
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	462a      	mov	r2, r5
 8006026:	4649      	mov	r1, r9
 8006028:	4640      	mov	r0, r8
 800602a:	47d0      	blx	sl
 800602c:	3001      	adds	r0, #1
 800602e:	d0ab      	beq.n	8005f88 <_printf_i+0x164>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	079b      	lsls	r3, r3, #30
 8006034:	d413      	bmi.n	800605e <_printf_i+0x23a>
 8006036:	68e0      	ldr	r0, [r4, #12]
 8006038:	9b03      	ldr	r3, [sp, #12]
 800603a:	4298      	cmp	r0, r3
 800603c:	bfb8      	it	lt
 800603e:	4618      	movlt	r0, r3
 8006040:	e7a4      	b.n	8005f8c <_printf_i+0x168>
 8006042:	2301      	movs	r3, #1
 8006044:	4632      	mov	r2, r6
 8006046:	4649      	mov	r1, r9
 8006048:	4640      	mov	r0, r8
 800604a:	47d0      	blx	sl
 800604c:	3001      	adds	r0, #1
 800604e:	d09b      	beq.n	8005f88 <_printf_i+0x164>
 8006050:	3501      	adds	r5, #1
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	9903      	ldr	r1, [sp, #12]
 8006056:	1a5b      	subs	r3, r3, r1
 8006058:	42ab      	cmp	r3, r5
 800605a:	dcf2      	bgt.n	8006042 <_printf_i+0x21e>
 800605c:	e7eb      	b.n	8006036 <_printf_i+0x212>
 800605e:	2500      	movs	r5, #0
 8006060:	f104 0619 	add.w	r6, r4, #25
 8006064:	e7f5      	b.n	8006052 <_printf_i+0x22e>
 8006066:	bf00      	nop
 8006068:	08008512 	.word	0x08008512
 800606c:	08008523 	.word	0x08008523

08006070 <_sbrk_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d06      	ldr	r5, [pc, #24]	; (800608c <_sbrk_r+0x1c>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	f7fb ff2a 	bl	8001ed4 <_sbrk>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_sbrk_r+0x1a>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_sbrk_r+0x1a>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20000650 	.word	0x20000650

08006090 <siprintf>:
 8006090:	b40e      	push	{r1, r2, r3}
 8006092:	b500      	push	{lr}
 8006094:	b09c      	sub	sp, #112	; 0x70
 8006096:	ab1d      	add	r3, sp, #116	; 0x74
 8006098:	9002      	str	r0, [sp, #8]
 800609a:	9006      	str	r0, [sp, #24]
 800609c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060a0:	4809      	ldr	r0, [pc, #36]	; (80060c8 <siprintf+0x38>)
 80060a2:	9107      	str	r1, [sp, #28]
 80060a4:	9104      	str	r1, [sp, #16]
 80060a6:	4909      	ldr	r1, [pc, #36]	; (80060cc <siprintf+0x3c>)
 80060a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ac:	9105      	str	r1, [sp, #20]
 80060ae:	6800      	ldr	r0, [r0, #0]
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	a902      	add	r1, sp, #8
 80060b4:	f001 fd70 	bl	8007b98 <_svfiprintf_r>
 80060b8:	9b02      	ldr	r3, [sp, #8]
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	b01c      	add	sp, #112	; 0x70
 80060c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c4:	b003      	add	sp, #12
 80060c6:	4770      	bx	lr
 80060c8:	200000d4 	.word	0x200000d4
 80060cc:	ffff0208 	.word	0xffff0208

080060d0 <__sread>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	460c      	mov	r4, r1
 80060d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d8:	f001 ffb8 	bl	800804c <_read_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	bfab      	itete	ge
 80060e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060e2:	89a3      	ldrhlt	r3, [r4, #12]
 80060e4:	181b      	addge	r3, r3, r0
 80060e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ea:	bfac      	ite	ge
 80060ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ee:	81a3      	strhlt	r3, [r4, #12]
 80060f0:	bd10      	pop	{r4, pc}

080060f2 <__swrite>:
 80060f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f6:	461f      	mov	r7, r3
 80060f8:	898b      	ldrh	r3, [r1, #12]
 80060fa:	05db      	lsls	r3, r3, #23
 80060fc:	4605      	mov	r5, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	4616      	mov	r6, r2
 8006102:	d505      	bpl.n	8006110 <__swrite+0x1e>
 8006104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006108:	2302      	movs	r3, #2
 800610a:	2200      	movs	r2, #0
 800610c:	f001 f876 	bl	80071fc <_lseek_r>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	4632      	mov	r2, r6
 800611e:	463b      	mov	r3, r7
 8006120:	4628      	mov	r0, r5
 8006122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006126:	f000 b869 	b.w	80061fc <_write_r>

0800612a <__sseek>:
 800612a:	b510      	push	{r4, lr}
 800612c:	460c      	mov	r4, r1
 800612e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006132:	f001 f863 	bl	80071fc <_lseek_r>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	bf15      	itete	ne
 800613c:	6560      	strne	r0, [r4, #84]	; 0x54
 800613e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006146:	81a3      	strheq	r3, [r4, #12]
 8006148:	bf18      	it	ne
 800614a:	81a3      	strhne	r3, [r4, #12]
 800614c:	bd10      	pop	{r4, pc}

0800614e <__sclose>:
 800614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006152:	f000 b8f1 	b.w	8006338 <_close_r>
	...

08006158 <__swbuf_r>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	460e      	mov	r6, r1
 800615c:	4614      	mov	r4, r2
 800615e:	4605      	mov	r5, r0
 8006160:	b118      	cbz	r0, 800616a <__swbuf_r+0x12>
 8006162:	6983      	ldr	r3, [r0, #24]
 8006164:	b90b      	cbnz	r3, 800616a <__swbuf_r+0x12>
 8006166:	f7ff f9a9 	bl	80054bc <__sinit>
 800616a:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <__swbuf_r+0x98>)
 800616c:	429c      	cmp	r4, r3
 800616e:	d12b      	bne.n	80061c8 <__swbuf_r+0x70>
 8006170:	686c      	ldr	r4, [r5, #4]
 8006172:	69a3      	ldr	r3, [r4, #24]
 8006174:	60a3      	str	r3, [r4, #8]
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	071a      	lsls	r2, r3, #28
 800617a:	d52f      	bpl.n	80061dc <__swbuf_r+0x84>
 800617c:	6923      	ldr	r3, [r4, #16]
 800617e:	b36b      	cbz	r3, 80061dc <__swbuf_r+0x84>
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1ac0      	subs	r0, r0, r3
 8006186:	6963      	ldr	r3, [r4, #20]
 8006188:	b2f6      	uxtb	r6, r6
 800618a:	4283      	cmp	r3, r0
 800618c:	4637      	mov	r7, r6
 800618e:	dc04      	bgt.n	800619a <__swbuf_r+0x42>
 8006190:	4621      	mov	r1, r4
 8006192:	4628      	mov	r0, r5
 8006194:	f000 ffe0 	bl	8007158 <_fflush_r>
 8006198:	bb30      	cbnz	r0, 80061e8 <__swbuf_r+0x90>
 800619a:	68a3      	ldr	r3, [r4, #8]
 800619c:	3b01      	subs	r3, #1
 800619e:	60a3      	str	r3, [r4, #8]
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	6022      	str	r2, [r4, #0]
 80061a6:	701e      	strb	r6, [r3, #0]
 80061a8:	6963      	ldr	r3, [r4, #20]
 80061aa:	3001      	adds	r0, #1
 80061ac:	4283      	cmp	r3, r0
 80061ae:	d004      	beq.n	80061ba <__swbuf_r+0x62>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	07db      	lsls	r3, r3, #31
 80061b4:	d506      	bpl.n	80061c4 <__swbuf_r+0x6c>
 80061b6:	2e0a      	cmp	r6, #10
 80061b8:	d104      	bne.n	80061c4 <__swbuf_r+0x6c>
 80061ba:	4621      	mov	r1, r4
 80061bc:	4628      	mov	r0, r5
 80061be:	f000 ffcb 	bl	8007158 <_fflush_r>
 80061c2:	b988      	cbnz	r0, 80061e8 <__swbuf_r+0x90>
 80061c4:	4638      	mov	r0, r7
 80061c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c8:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <__swbuf_r+0x9c>)
 80061ca:	429c      	cmp	r4, r3
 80061cc:	d101      	bne.n	80061d2 <__swbuf_r+0x7a>
 80061ce:	68ac      	ldr	r4, [r5, #8]
 80061d0:	e7cf      	b.n	8006172 <__swbuf_r+0x1a>
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <__swbuf_r+0xa0>)
 80061d4:	429c      	cmp	r4, r3
 80061d6:	bf08      	it	eq
 80061d8:	68ec      	ldreq	r4, [r5, #12]
 80061da:	e7ca      	b.n	8006172 <__swbuf_r+0x1a>
 80061dc:	4621      	mov	r1, r4
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 f81e 	bl	8006220 <__swsetup_r>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d0cb      	beq.n	8006180 <__swbuf_r+0x28>
 80061e8:	f04f 37ff 	mov.w	r7, #4294967295
 80061ec:	e7ea      	b.n	80061c4 <__swbuf_r+0x6c>
 80061ee:	bf00      	nop
 80061f0:	080084bc 	.word	0x080084bc
 80061f4:	080084dc 	.word	0x080084dc
 80061f8:	0800849c 	.word	0x0800849c

080061fc <_write_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d07      	ldr	r5, [pc, #28]	; (800621c <_write_r+0x20>)
 8006200:	4604      	mov	r4, r0
 8006202:	4608      	mov	r0, r1
 8006204:	4611      	mov	r1, r2
 8006206:	2200      	movs	r2, #0
 8006208:	602a      	str	r2, [r5, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	f7ff f853 	bl	80052b6 <_write>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_write_r+0x1e>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_write_r+0x1e>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	20000650 	.word	0x20000650

08006220 <__swsetup_r>:
 8006220:	4b32      	ldr	r3, [pc, #200]	; (80062ec <__swsetup_r+0xcc>)
 8006222:	b570      	push	{r4, r5, r6, lr}
 8006224:	681d      	ldr	r5, [r3, #0]
 8006226:	4606      	mov	r6, r0
 8006228:	460c      	mov	r4, r1
 800622a:	b125      	cbz	r5, 8006236 <__swsetup_r+0x16>
 800622c:	69ab      	ldr	r3, [r5, #24]
 800622e:	b913      	cbnz	r3, 8006236 <__swsetup_r+0x16>
 8006230:	4628      	mov	r0, r5
 8006232:	f7ff f943 	bl	80054bc <__sinit>
 8006236:	4b2e      	ldr	r3, [pc, #184]	; (80062f0 <__swsetup_r+0xd0>)
 8006238:	429c      	cmp	r4, r3
 800623a:	d10f      	bne.n	800625c <__swsetup_r+0x3c>
 800623c:	686c      	ldr	r4, [r5, #4]
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006244:	0719      	lsls	r1, r3, #28
 8006246:	d42c      	bmi.n	80062a2 <__swsetup_r+0x82>
 8006248:	06dd      	lsls	r5, r3, #27
 800624a:	d411      	bmi.n	8006270 <__swsetup_r+0x50>
 800624c:	2309      	movs	r3, #9
 800624e:	6033      	str	r3, [r6, #0]
 8006250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	f04f 30ff 	mov.w	r0, #4294967295
 800625a:	e03e      	b.n	80062da <__swsetup_r+0xba>
 800625c:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <__swsetup_r+0xd4>)
 800625e:	429c      	cmp	r4, r3
 8006260:	d101      	bne.n	8006266 <__swsetup_r+0x46>
 8006262:	68ac      	ldr	r4, [r5, #8]
 8006264:	e7eb      	b.n	800623e <__swsetup_r+0x1e>
 8006266:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <__swsetup_r+0xd8>)
 8006268:	429c      	cmp	r4, r3
 800626a:	bf08      	it	eq
 800626c:	68ec      	ldreq	r4, [r5, #12]
 800626e:	e7e6      	b.n	800623e <__swsetup_r+0x1e>
 8006270:	0758      	lsls	r0, r3, #29
 8006272:	d512      	bpl.n	800629a <__swsetup_r+0x7a>
 8006274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006276:	b141      	cbz	r1, 800628a <__swsetup_r+0x6a>
 8006278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800627c:	4299      	cmp	r1, r3
 800627e:	d002      	beq.n	8006286 <__swsetup_r+0x66>
 8006280:	4630      	mov	r0, r6
 8006282:	f001 fbe1 	bl	8007a48 <_free_r>
 8006286:	2300      	movs	r3, #0
 8006288:	6363      	str	r3, [r4, #52]	; 0x34
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006290:	81a3      	strh	r3, [r4, #12]
 8006292:	2300      	movs	r3, #0
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	f043 0308 	orr.w	r3, r3, #8
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	b94b      	cbnz	r3, 80062ba <__swsetup_r+0x9a>
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b0:	d003      	beq.n	80062ba <__swsetup_r+0x9a>
 80062b2:	4621      	mov	r1, r4
 80062b4:	4630      	mov	r0, r6
 80062b6:	f000 ffd9 	bl	800726c <__smakebuf_r>
 80062ba:	89a0      	ldrh	r0, [r4, #12]
 80062bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062c0:	f010 0301 	ands.w	r3, r0, #1
 80062c4:	d00a      	beq.n	80062dc <__swsetup_r+0xbc>
 80062c6:	2300      	movs	r3, #0
 80062c8:	60a3      	str	r3, [r4, #8]
 80062ca:	6963      	ldr	r3, [r4, #20]
 80062cc:	425b      	negs	r3, r3
 80062ce:	61a3      	str	r3, [r4, #24]
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	b943      	cbnz	r3, 80062e6 <__swsetup_r+0xc6>
 80062d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062d8:	d1ba      	bne.n	8006250 <__swsetup_r+0x30>
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	0781      	lsls	r1, r0, #30
 80062de:	bf58      	it	pl
 80062e0:	6963      	ldrpl	r3, [r4, #20]
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	e7f4      	b.n	80062d0 <__swsetup_r+0xb0>
 80062e6:	2000      	movs	r0, #0
 80062e8:	e7f7      	b.n	80062da <__swsetup_r+0xba>
 80062ea:	bf00      	nop
 80062ec:	200000d4 	.word	0x200000d4
 80062f0:	080084bc 	.word	0x080084bc
 80062f4:	080084dc 	.word	0x080084dc
 80062f8:	0800849c 	.word	0x0800849c

080062fc <__assert_func>:
 80062fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062fe:	4614      	mov	r4, r2
 8006300:	461a      	mov	r2, r3
 8006302:	4b09      	ldr	r3, [pc, #36]	; (8006328 <__assert_func+0x2c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4605      	mov	r5, r0
 8006308:	68d8      	ldr	r0, [r3, #12]
 800630a:	b14c      	cbz	r4, 8006320 <__assert_func+0x24>
 800630c:	4b07      	ldr	r3, [pc, #28]	; (800632c <__assert_func+0x30>)
 800630e:	9100      	str	r1, [sp, #0]
 8006310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006314:	4906      	ldr	r1, [pc, #24]	; (8006330 <__assert_func+0x34>)
 8006316:	462b      	mov	r3, r5
 8006318:	f000 ff5a 	bl	80071d0 <fiprintf>
 800631c:	f001 fea8 	bl	8008070 <abort>
 8006320:	4b04      	ldr	r3, [pc, #16]	; (8006334 <__assert_func+0x38>)
 8006322:	461c      	mov	r4, r3
 8006324:	e7f3      	b.n	800630e <__assert_func+0x12>
 8006326:	bf00      	nop
 8006328:	200000d4 	.word	0x200000d4
 800632c:	08008534 	.word	0x08008534
 8006330:	08008541 	.word	0x08008541
 8006334:	0800856f 	.word	0x0800856f

08006338 <_close_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4d06      	ldr	r5, [pc, #24]	; (8006354 <_close_r+0x1c>)
 800633c:	2300      	movs	r3, #0
 800633e:	4604      	mov	r4, r0
 8006340:	4608      	mov	r0, r1
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	f7fe ffe8 	bl	8005318 <_close>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_close_r+0x1a>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_close_r+0x1a>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	20000650 	.word	0x20000650

08006358 <quorem>:
 8006358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	6903      	ldr	r3, [r0, #16]
 800635e:	690c      	ldr	r4, [r1, #16]
 8006360:	42a3      	cmp	r3, r4
 8006362:	4607      	mov	r7, r0
 8006364:	f2c0 8081 	blt.w	800646a <quorem+0x112>
 8006368:	3c01      	subs	r4, #1
 800636a:	f101 0814 	add.w	r8, r1, #20
 800636e:	f100 0514 	add.w	r5, r0, #20
 8006372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800637c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006380:	3301      	adds	r3, #1
 8006382:	429a      	cmp	r2, r3
 8006384:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006388:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800638c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006390:	d331      	bcc.n	80063f6 <quorem+0x9e>
 8006392:	f04f 0e00 	mov.w	lr, #0
 8006396:	4640      	mov	r0, r8
 8006398:	46ac      	mov	ip, r5
 800639a:	46f2      	mov	sl, lr
 800639c:	f850 2b04 	ldr.w	r2, [r0], #4
 80063a0:	b293      	uxth	r3, r2
 80063a2:	fb06 e303 	mla	r3, r6, r3, lr
 80063a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	ebaa 0303 	sub.w	r3, sl, r3
 80063b0:	f8dc a000 	ldr.w	sl, [ip]
 80063b4:	0c12      	lsrs	r2, r2, #16
 80063b6:	fa13 f38a 	uxtah	r3, r3, sl
 80063ba:	fb06 e202 	mla	r2, r6, r2, lr
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	9b00      	ldr	r3, [sp, #0]
 80063c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063c6:	b292      	uxth	r2, r2
 80063c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80063d4:	4581      	cmp	r9, r0
 80063d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063da:	f84c 3b04 	str.w	r3, [ip], #4
 80063de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063e2:	d2db      	bcs.n	800639c <quorem+0x44>
 80063e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80063e8:	b92b      	cbnz	r3, 80063f6 <quorem+0x9e>
 80063ea:	9b01      	ldr	r3, [sp, #4]
 80063ec:	3b04      	subs	r3, #4
 80063ee:	429d      	cmp	r5, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	d32e      	bcc.n	8006452 <quorem+0xfa>
 80063f4:	613c      	str	r4, [r7, #16]
 80063f6:	4638      	mov	r0, r7
 80063f8:	f001 fa0e 	bl	8007818 <__mcmp>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	db24      	blt.n	800644a <quorem+0xf2>
 8006400:	3601      	adds	r6, #1
 8006402:	4628      	mov	r0, r5
 8006404:	f04f 0c00 	mov.w	ip, #0
 8006408:	f858 2b04 	ldr.w	r2, [r8], #4
 800640c:	f8d0 e000 	ldr.w	lr, [r0]
 8006410:	b293      	uxth	r3, r2
 8006412:	ebac 0303 	sub.w	r3, ip, r3
 8006416:	0c12      	lsrs	r2, r2, #16
 8006418:	fa13 f38e 	uxtah	r3, r3, lr
 800641c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006420:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006424:	b29b      	uxth	r3, r3
 8006426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800642a:	45c1      	cmp	r9, r8
 800642c:	f840 3b04 	str.w	r3, [r0], #4
 8006430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006434:	d2e8      	bcs.n	8006408 <quorem+0xb0>
 8006436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800643a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800643e:	b922      	cbnz	r2, 800644a <quorem+0xf2>
 8006440:	3b04      	subs	r3, #4
 8006442:	429d      	cmp	r5, r3
 8006444:	461a      	mov	r2, r3
 8006446:	d30a      	bcc.n	800645e <quorem+0x106>
 8006448:	613c      	str	r4, [r7, #16]
 800644a:	4630      	mov	r0, r6
 800644c:	b003      	add	sp, #12
 800644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	3b04      	subs	r3, #4
 8006456:	2a00      	cmp	r2, #0
 8006458:	d1cc      	bne.n	80063f4 <quorem+0x9c>
 800645a:	3c01      	subs	r4, #1
 800645c:	e7c7      	b.n	80063ee <quorem+0x96>
 800645e:	6812      	ldr	r2, [r2, #0]
 8006460:	3b04      	subs	r3, #4
 8006462:	2a00      	cmp	r2, #0
 8006464:	d1f0      	bne.n	8006448 <quorem+0xf0>
 8006466:	3c01      	subs	r4, #1
 8006468:	e7eb      	b.n	8006442 <quorem+0xea>
 800646a:	2000      	movs	r0, #0
 800646c:	e7ee      	b.n	800644c <quorem+0xf4>
	...

08006470 <_dtoa_r>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	ed2d 8b04 	vpush	{d8-d9}
 8006478:	ec57 6b10 	vmov	r6, r7, d0
 800647c:	b093      	sub	sp, #76	; 0x4c
 800647e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006480:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006484:	9106      	str	r1, [sp, #24]
 8006486:	ee10 aa10 	vmov	sl, s0
 800648a:	4604      	mov	r4, r0
 800648c:	9209      	str	r2, [sp, #36]	; 0x24
 800648e:	930c      	str	r3, [sp, #48]	; 0x30
 8006490:	46bb      	mov	fp, r7
 8006492:	b975      	cbnz	r5, 80064b2 <_dtoa_r+0x42>
 8006494:	2010      	movs	r0, #16
 8006496:	f000 ff29 	bl	80072ec <malloc>
 800649a:	4602      	mov	r2, r0
 800649c:	6260      	str	r0, [r4, #36]	; 0x24
 800649e:	b920      	cbnz	r0, 80064aa <_dtoa_r+0x3a>
 80064a0:	4ba7      	ldr	r3, [pc, #668]	; (8006740 <_dtoa_r+0x2d0>)
 80064a2:	21ea      	movs	r1, #234	; 0xea
 80064a4:	48a7      	ldr	r0, [pc, #668]	; (8006744 <_dtoa_r+0x2d4>)
 80064a6:	f7ff ff29 	bl	80062fc <__assert_func>
 80064aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ae:	6005      	str	r5, [r0, #0]
 80064b0:	60c5      	str	r5, [r0, #12]
 80064b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064b4:	6819      	ldr	r1, [r3, #0]
 80064b6:	b151      	cbz	r1, 80064ce <_dtoa_r+0x5e>
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	604a      	str	r2, [r1, #4]
 80064bc:	2301      	movs	r3, #1
 80064be:	4093      	lsls	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 ff66 	bl	8007394 <_Bfree>
 80064c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	1e3b      	subs	r3, r7, #0
 80064d0:	bfaa      	itet	ge
 80064d2:	2300      	movge	r3, #0
 80064d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064d8:	f8c8 3000 	strge.w	r3, [r8]
 80064dc:	4b9a      	ldr	r3, [pc, #616]	; (8006748 <_dtoa_r+0x2d8>)
 80064de:	bfbc      	itt	lt
 80064e0:	2201      	movlt	r2, #1
 80064e2:	f8c8 2000 	strlt.w	r2, [r8]
 80064e6:	ea33 030b 	bics.w	r3, r3, fp
 80064ea:	d11b      	bne.n	8006524 <_dtoa_r+0xb4>
 80064ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064f8:	4333      	orrs	r3, r6
 80064fa:	f000 8592 	beq.w	8007022 <_dtoa_r+0xbb2>
 80064fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006500:	b963      	cbnz	r3, 800651c <_dtoa_r+0xac>
 8006502:	4b92      	ldr	r3, [pc, #584]	; (800674c <_dtoa_r+0x2dc>)
 8006504:	e022      	b.n	800654c <_dtoa_r+0xdc>
 8006506:	4b92      	ldr	r3, [pc, #584]	; (8006750 <_dtoa_r+0x2e0>)
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	3308      	adds	r3, #8
 800650c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	9801      	ldr	r0, [sp, #4]
 8006512:	b013      	add	sp, #76	; 0x4c
 8006514:	ecbd 8b04 	vpop	{d8-d9}
 8006518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651c:	4b8b      	ldr	r3, [pc, #556]	; (800674c <_dtoa_r+0x2dc>)
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	3303      	adds	r3, #3
 8006522:	e7f3      	b.n	800650c <_dtoa_r+0x9c>
 8006524:	2200      	movs	r2, #0
 8006526:	2300      	movs	r3, #0
 8006528:	4650      	mov	r0, sl
 800652a:	4659      	mov	r1, fp
 800652c:	f7fa facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006530:	ec4b ab19 	vmov	d9, sl, fp
 8006534:	4680      	mov	r8, r0
 8006536:	b158      	cbz	r0, 8006550 <_dtoa_r+0xe0>
 8006538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800653a:	2301      	movs	r3, #1
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 856b 	beq.w	800701c <_dtoa_r+0xbac>
 8006546:	4883      	ldr	r0, [pc, #524]	; (8006754 <_dtoa_r+0x2e4>)
 8006548:	6018      	str	r0, [r3, #0]
 800654a:	1e43      	subs	r3, r0, #1
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	e7df      	b.n	8006510 <_dtoa_r+0xa0>
 8006550:	ec4b ab10 	vmov	d0, sl, fp
 8006554:	aa10      	add	r2, sp, #64	; 0x40
 8006556:	a911      	add	r1, sp, #68	; 0x44
 8006558:	4620      	mov	r0, r4
 800655a:	f001 fa03 	bl	8007964 <__d2b>
 800655e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006562:	ee08 0a10 	vmov	s16, r0
 8006566:	2d00      	cmp	r5, #0
 8006568:	f000 8084 	beq.w	8006674 <_dtoa_r+0x204>
 800656c:	ee19 3a90 	vmov	r3, s19
 8006570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006574:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006578:	4656      	mov	r6, sl
 800657a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800657e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006582:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006586:	4b74      	ldr	r3, [pc, #464]	; (8006758 <_dtoa_r+0x2e8>)
 8006588:	2200      	movs	r2, #0
 800658a:	4630      	mov	r0, r6
 800658c:	4639      	mov	r1, r7
 800658e:	f7f9 fe7b 	bl	8000288 <__aeabi_dsub>
 8006592:	a365      	add	r3, pc, #404	; (adr r3, 8006728 <_dtoa_r+0x2b8>)
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f7fa f82e 	bl	80005f8 <__aeabi_dmul>
 800659c:	a364      	add	r3, pc, #400	; (adr r3, 8006730 <_dtoa_r+0x2c0>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe73 	bl	800028c <__adddf3>
 80065a6:	4606      	mov	r6, r0
 80065a8:	4628      	mov	r0, r5
 80065aa:	460f      	mov	r7, r1
 80065ac:	f7f9 ffba 	bl	8000524 <__aeabi_i2d>
 80065b0:	a361      	add	r3, pc, #388	; (adr r3, 8006738 <_dtoa_r+0x2c8>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7fa f81f 	bl	80005f8 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4630      	mov	r0, r6
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7f9 fe63 	bl	800028c <__adddf3>
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	f7fa fac5 	bl	8000b58 <__aeabi_d2iz>
 80065ce:	2200      	movs	r2, #0
 80065d0:	9000      	str	r0, [sp, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	4630      	mov	r0, r6
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7fa fa80 	bl	8000adc <__aeabi_dcmplt>
 80065dc:	b150      	cbz	r0, 80065f4 <_dtoa_r+0x184>
 80065de:	9800      	ldr	r0, [sp, #0]
 80065e0:	f7f9 ffa0 	bl	8000524 <__aeabi_i2d>
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	f7fa fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ec:	b910      	cbnz	r0, 80065f4 <_dtoa_r+0x184>
 80065ee:	9b00      	ldr	r3, [sp, #0]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	9b00      	ldr	r3, [sp, #0]
 80065f6:	2b16      	cmp	r3, #22
 80065f8:	d85a      	bhi.n	80066b0 <_dtoa_r+0x240>
 80065fa:	9a00      	ldr	r2, [sp, #0]
 80065fc:	4b57      	ldr	r3, [pc, #348]	; (800675c <_dtoa_r+0x2ec>)
 80065fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	ec51 0b19 	vmov	r0, r1, d9
 800660a:	f7fa fa67 	bl	8000adc <__aeabi_dcmplt>
 800660e:	2800      	cmp	r0, #0
 8006610:	d050      	beq.n	80066b4 <_dtoa_r+0x244>
 8006612:	9b00      	ldr	r3, [sp, #0]
 8006614:	3b01      	subs	r3, #1
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2300      	movs	r3, #0
 800661a:	930b      	str	r3, [sp, #44]	; 0x2c
 800661c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800661e:	1b5d      	subs	r5, r3, r5
 8006620:	1e6b      	subs	r3, r5, #1
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	bf45      	ittet	mi
 8006626:	f1c5 0301 	rsbmi	r3, r5, #1
 800662a:	9304      	strmi	r3, [sp, #16]
 800662c:	2300      	movpl	r3, #0
 800662e:	2300      	movmi	r3, #0
 8006630:	bf4c      	ite	mi
 8006632:	9305      	strmi	r3, [sp, #20]
 8006634:	9304      	strpl	r3, [sp, #16]
 8006636:	9b00      	ldr	r3, [sp, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	db3d      	blt.n	80066b8 <_dtoa_r+0x248>
 800663c:	9b05      	ldr	r3, [sp, #20]
 800663e:	9a00      	ldr	r2, [sp, #0]
 8006640:	920a      	str	r2, [sp, #40]	; 0x28
 8006642:	4413      	add	r3, r2
 8006644:	9305      	str	r3, [sp, #20]
 8006646:	2300      	movs	r3, #0
 8006648:	9307      	str	r3, [sp, #28]
 800664a:	9b06      	ldr	r3, [sp, #24]
 800664c:	2b09      	cmp	r3, #9
 800664e:	f200 8089 	bhi.w	8006764 <_dtoa_r+0x2f4>
 8006652:	2b05      	cmp	r3, #5
 8006654:	bfc4      	itt	gt
 8006656:	3b04      	subgt	r3, #4
 8006658:	9306      	strgt	r3, [sp, #24]
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	f1a3 0302 	sub.w	r3, r3, #2
 8006660:	bfcc      	ite	gt
 8006662:	2500      	movgt	r5, #0
 8006664:	2501      	movle	r5, #1
 8006666:	2b03      	cmp	r3, #3
 8006668:	f200 8087 	bhi.w	800677a <_dtoa_r+0x30a>
 800666c:	e8df f003 	tbb	[pc, r3]
 8006670:	59383a2d 	.word	0x59383a2d
 8006674:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006678:	441d      	add	r5, r3
 800667a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800667e:	2b20      	cmp	r3, #32
 8006680:	bfc1      	itttt	gt
 8006682:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006686:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800668a:	fa0b f303 	lslgt.w	r3, fp, r3
 800668e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006692:	bfda      	itte	le
 8006694:	f1c3 0320 	rsble	r3, r3, #32
 8006698:	fa06 f003 	lslle.w	r0, r6, r3
 800669c:	4318      	orrgt	r0, r3
 800669e:	f7f9 ff31 	bl	8000504 <__aeabi_ui2d>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4606      	mov	r6, r0
 80066a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066aa:	3d01      	subs	r5, #1
 80066ac:	930e      	str	r3, [sp, #56]	; 0x38
 80066ae:	e76a      	b.n	8006586 <_dtoa_r+0x116>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e7b2      	b.n	800661a <_dtoa_r+0x1aa>
 80066b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80066b6:	e7b1      	b.n	800661c <_dtoa_r+0x1ac>
 80066b8:	9b04      	ldr	r3, [sp, #16]
 80066ba:	9a00      	ldr	r2, [sp, #0]
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	9304      	str	r3, [sp, #16]
 80066c0:	4253      	negs	r3, r2
 80066c2:	9307      	str	r3, [sp, #28]
 80066c4:	2300      	movs	r3, #0
 80066c6:	930a      	str	r3, [sp, #40]	; 0x28
 80066c8:	e7bf      	b.n	800664a <_dtoa_r+0x1da>
 80066ca:	2300      	movs	r3, #0
 80066cc:	9308      	str	r3, [sp, #32]
 80066ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dc55      	bgt.n	8006780 <_dtoa_r+0x310>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066da:	461a      	mov	r2, r3
 80066dc:	9209      	str	r2, [sp, #36]	; 0x24
 80066de:	e00c      	b.n	80066fa <_dtoa_r+0x28a>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e7f3      	b.n	80066cc <_dtoa_r+0x25c>
 80066e4:	2300      	movs	r3, #0
 80066e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	9b00      	ldr	r3, [sp, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	9302      	str	r3, [sp, #8]
 80066f0:	3301      	adds	r3, #1
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	9303      	str	r3, [sp, #12]
 80066f6:	bfb8      	it	lt
 80066f8:	2301      	movlt	r3, #1
 80066fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066fc:	2200      	movs	r2, #0
 80066fe:	6042      	str	r2, [r0, #4]
 8006700:	2204      	movs	r2, #4
 8006702:	f102 0614 	add.w	r6, r2, #20
 8006706:	429e      	cmp	r6, r3
 8006708:	6841      	ldr	r1, [r0, #4]
 800670a:	d93d      	bls.n	8006788 <_dtoa_r+0x318>
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fe01 	bl	8007314 <_Balloc>
 8006712:	9001      	str	r0, [sp, #4]
 8006714:	2800      	cmp	r0, #0
 8006716:	d13b      	bne.n	8006790 <_dtoa_r+0x320>
 8006718:	4b11      	ldr	r3, [pc, #68]	; (8006760 <_dtoa_r+0x2f0>)
 800671a:	4602      	mov	r2, r0
 800671c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006720:	e6c0      	b.n	80064a4 <_dtoa_r+0x34>
 8006722:	2301      	movs	r3, #1
 8006724:	e7df      	b.n	80066e6 <_dtoa_r+0x276>
 8006726:	bf00      	nop
 8006728:	636f4361 	.word	0x636f4361
 800672c:	3fd287a7 	.word	0x3fd287a7
 8006730:	8b60c8b3 	.word	0x8b60c8b3
 8006734:	3fc68a28 	.word	0x3fc68a28
 8006738:	509f79fb 	.word	0x509f79fb
 800673c:	3fd34413 	.word	0x3fd34413
 8006740:	0800857d 	.word	0x0800857d
 8006744:	08008594 	.word	0x08008594
 8006748:	7ff00000 	.word	0x7ff00000
 800674c:	08008579 	.word	0x08008579
 8006750:	08008570 	.word	0x08008570
 8006754:	08008511 	.word	0x08008511
 8006758:	3ff80000 	.word	0x3ff80000
 800675c:	08008688 	.word	0x08008688
 8006760:	080085ef 	.word	0x080085ef
 8006764:	2501      	movs	r5, #1
 8006766:	2300      	movs	r3, #0
 8006768:	9306      	str	r3, [sp, #24]
 800676a:	9508      	str	r5, [sp, #32]
 800676c:	f04f 33ff 	mov.w	r3, #4294967295
 8006770:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	2312      	movs	r3, #18
 8006778:	e7b0      	b.n	80066dc <_dtoa_r+0x26c>
 800677a:	2301      	movs	r3, #1
 800677c:	9308      	str	r3, [sp, #32]
 800677e:	e7f5      	b.n	800676c <_dtoa_r+0x2fc>
 8006780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006782:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006786:	e7b8      	b.n	80066fa <_dtoa_r+0x28a>
 8006788:	3101      	adds	r1, #1
 800678a:	6041      	str	r1, [r0, #4]
 800678c:	0052      	lsls	r2, r2, #1
 800678e:	e7b8      	b.n	8006702 <_dtoa_r+0x292>
 8006790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006792:	9a01      	ldr	r2, [sp, #4]
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	2b0e      	cmp	r3, #14
 800679a:	f200 809d 	bhi.w	80068d8 <_dtoa_r+0x468>
 800679e:	2d00      	cmp	r5, #0
 80067a0:	f000 809a 	beq.w	80068d8 <_dtoa_r+0x468>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	dd32      	ble.n	8006810 <_dtoa_r+0x3a0>
 80067aa:	4ab7      	ldr	r2, [pc, #732]	; (8006a88 <_dtoa_r+0x618>)
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067b8:	9b00      	ldr	r3, [sp, #0]
 80067ba:	05d8      	lsls	r0, r3, #23
 80067bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067c0:	d516      	bpl.n	80067f0 <_dtoa_r+0x380>
 80067c2:	4bb2      	ldr	r3, [pc, #712]	; (8006a8c <_dtoa_r+0x61c>)
 80067c4:	ec51 0b19 	vmov	r0, r1, d9
 80067c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067cc:	f7fa f83e 	bl	800084c <__aeabi_ddiv>
 80067d0:	f007 070f 	and.w	r7, r7, #15
 80067d4:	4682      	mov	sl, r0
 80067d6:	468b      	mov	fp, r1
 80067d8:	2503      	movs	r5, #3
 80067da:	4eac      	ldr	r6, [pc, #688]	; (8006a8c <_dtoa_r+0x61c>)
 80067dc:	b957      	cbnz	r7, 80067f4 <_dtoa_r+0x384>
 80067de:	4642      	mov	r2, r8
 80067e0:	464b      	mov	r3, r9
 80067e2:	4650      	mov	r0, sl
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7fa f831 	bl	800084c <__aeabi_ddiv>
 80067ea:	4682      	mov	sl, r0
 80067ec:	468b      	mov	fp, r1
 80067ee:	e028      	b.n	8006842 <_dtoa_r+0x3d2>
 80067f0:	2502      	movs	r5, #2
 80067f2:	e7f2      	b.n	80067da <_dtoa_r+0x36a>
 80067f4:	07f9      	lsls	r1, r7, #31
 80067f6:	d508      	bpl.n	800680a <_dtoa_r+0x39a>
 80067f8:	4640      	mov	r0, r8
 80067fa:	4649      	mov	r1, r9
 80067fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006800:	f7f9 fefa 	bl	80005f8 <__aeabi_dmul>
 8006804:	3501      	adds	r5, #1
 8006806:	4680      	mov	r8, r0
 8006808:	4689      	mov	r9, r1
 800680a:	107f      	asrs	r7, r7, #1
 800680c:	3608      	adds	r6, #8
 800680e:	e7e5      	b.n	80067dc <_dtoa_r+0x36c>
 8006810:	f000 809b 	beq.w	800694a <_dtoa_r+0x4da>
 8006814:	9b00      	ldr	r3, [sp, #0]
 8006816:	4f9d      	ldr	r7, [pc, #628]	; (8006a8c <_dtoa_r+0x61c>)
 8006818:	425e      	negs	r6, r3
 800681a:	4b9b      	ldr	r3, [pc, #620]	; (8006a88 <_dtoa_r+0x618>)
 800681c:	f006 020f 	and.w	r2, r6, #15
 8006820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	ec51 0b19 	vmov	r0, r1, d9
 800682c:	f7f9 fee4 	bl	80005f8 <__aeabi_dmul>
 8006830:	1136      	asrs	r6, r6, #4
 8006832:	4682      	mov	sl, r0
 8006834:	468b      	mov	fp, r1
 8006836:	2300      	movs	r3, #0
 8006838:	2502      	movs	r5, #2
 800683a:	2e00      	cmp	r6, #0
 800683c:	d17a      	bne.n	8006934 <_dtoa_r+0x4c4>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1d3      	bne.n	80067ea <_dtoa_r+0x37a>
 8006842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8082 	beq.w	800694e <_dtoa_r+0x4de>
 800684a:	4b91      	ldr	r3, [pc, #580]	; (8006a90 <_dtoa_r+0x620>)
 800684c:	2200      	movs	r2, #0
 800684e:	4650      	mov	r0, sl
 8006850:	4659      	mov	r1, fp
 8006852:	f7fa f943 	bl	8000adc <__aeabi_dcmplt>
 8006856:	2800      	cmp	r0, #0
 8006858:	d079      	beq.n	800694e <_dtoa_r+0x4de>
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d076      	beq.n	800694e <_dtoa_r+0x4de>
 8006860:	9b02      	ldr	r3, [sp, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd36      	ble.n	80068d4 <_dtoa_r+0x464>
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	4650      	mov	r0, sl
 800686a:	4659      	mov	r1, fp
 800686c:	1e5f      	subs	r7, r3, #1
 800686e:	2200      	movs	r2, #0
 8006870:	4b88      	ldr	r3, [pc, #544]	; (8006a94 <_dtoa_r+0x624>)
 8006872:	f7f9 fec1 	bl	80005f8 <__aeabi_dmul>
 8006876:	9e02      	ldr	r6, [sp, #8]
 8006878:	4682      	mov	sl, r0
 800687a:	468b      	mov	fp, r1
 800687c:	3501      	adds	r5, #1
 800687e:	4628      	mov	r0, r5
 8006880:	f7f9 fe50 	bl	8000524 <__aeabi_i2d>
 8006884:	4652      	mov	r2, sl
 8006886:	465b      	mov	r3, fp
 8006888:	f7f9 feb6 	bl	80005f8 <__aeabi_dmul>
 800688c:	4b82      	ldr	r3, [pc, #520]	; (8006a98 <_dtoa_r+0x628>)
 800688e:	2200      	movs	r2, #0
 8006890:	f7f9 fcfc 	bl	800028c <__adddf3>
 8006894:	46d0      	mov	r8, sl
 8006896:	46d9      	mov	r9, fp
 8006898:	4682      	mov	sl, r0
 800689a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800689e:	2e00      	cmp	r6, #0
 80068a0:	d158      	bne.n	8006954 <_dtoa_r+0x4e4>
 80068a2:	4b7e      	ldr	r3, [pc, #504]	; (8006a9c <_dtoa_r+0x62c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7f9 fced 	bl	8000288 <__aeabi_dsub>
 80068ae:	4652      	mov	r2, sl
 80068b0:	465b      	mov	r3, fp
 80068b2:	4680      	mov	r8, r0
 80068b4:	4689      	mov	r9, r1
 80068b6:	f7fa f92f 	bl	8000b18 <__aeabi_dcmpgt>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f040 8295 	bne.w	8006dea <_dtoa_r+0x97a>
 80068c0:	4652      	mov	r2, sl
 80068c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7fa f907 	bl	8000adc <__aeabi_dcmplt>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f040 8289 	bne.w	8006de6 <_dtoa_r+0x976>
 80068d4:	ec5b ab19 	vmov	sl, fp, d9
 80068d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f2c0 8148 	blt.w	8006b70 <_dtoa_r+0x700>
 80068e0:	9a00      	ldr	r2, [sp, #0]
 80068e2:	2a0e      	cmp	r2, #14
 80068e4:	f300 8144 	bgt.w	8006b70 <_dtoa_r+0x700>
 80068e8:	4b67      	ldr	r3, [pc, #412]	; (8006a88 <_dtoa_r+0x618>)
 80068ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f280 80d5 	bge.w	8006aa4 <_dtoa_r+0x634>
 80068fa:	9b03      	ldr	r3, [sp, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f300 80d1 	bgt.w	8006aa4 <_dtoa_r+0x634>
 8006902:	f040 826f 	bne.w	8006de4 <_dtoa_r+0x974>
 8006906:	4b65      	ldr	r3, [pc, #404]	; (8006a9c <_dtoa_r+0x62c>)
 8006908:	2200      	movs	r2, #0
 800690a:	4640      	mov	r0, r8
 800690c:	4649      	mov	r1, r9
 800690e:	f7f9 fe73 	bl	80005f8 <__aeabi_dmul>
 8006912:	4652      	mov	r2, sl
 8006914:	465b      	mov	r3, fp
 8006916:	f7fa f8f5 	bl	8000b04 <__aeabi_dcmpge>
 800691a:	9e03      	ldr	r6, [sp, #12]
 800691c:	4637      	mov	r7, r6
 800691e:	2800      	cmp	r0, #0
 8006920:	f040 8245 	bne.w	8006dae <_dtoa_r+0x93e>
 8006924:	9d01      	ldr	r5, [sp, #4]
 8006926:	2331      	movs	r3, #49	; 0x31
 8006928:	f805 3b01 	strb.w	r3, [r5], #1
 800692c:	9b00      	ldr	r3, [sp, #0]
 800692e:	3301      	adds	r3, #1
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	e240      	b.n	8006db6 <_dtoa_r+0x946>
 8006934:	07f2      	lsls	r2, r6, #31
 8006936:	d505      	bpl.n	8006944 <_dtoa_r+0x4d4>
 8006938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800693c:	f7f9 fe5c 	bl	80005f8 <__aeabi_dmul>
 8006940:	3501      	adds	r5, #1
 8006942:	2301      	movs	r3, #1
 8006944:	1076      	asrs	r6, r6, #1
 8006946:	3708      	adds	r7, #8
 8006948:	e777      	b.n	800683a <_dtoa_r+0x3ca>
 800694a:	2502      	movs	r5, #2
 800694c:	e779      	b.n	8006842 <_dtoa_r+0x3d2>
 800694e:	9f00      	ldr	r7, [sp, #0]
 8006950:	9e03      	ldr	r6, [sp, #12]
 8006952:	e794      	b.n	800687e <_dtoa_r+0x40e>
 8006954:	9901      	ldr	r1, [sp, #4]
 8006956:	4b4c      	ldr	r3, [pc, #304]	; (8006a88 <_dtoa_r+0x618>)
 8006958:	4431      	add	r1, r6
 800695a:	910d      	str	r1, [sp, #52]	; 0x34
 800695c:	9908      	ldr	r1, [sp, #32]
 800695e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006966:	2900      	cmp	r1, #0
 8006968:	d043      	beq.n	80069f2 <_dtoa_r+0x582>
 800696a:	494d      	ldr	r1, [pc, #308]	; (8006aa0 <_dtoa_r+0x630>)
 800696c:	2000      	movs	r0, #0
 800696e:	f7f9 ff6d 	bl	800084c <__aeabi_ddiv>
 8006972:	4652      	mov	r2, sl
 8006974:	465b      	mov	r3, fp
 8006976:	f7f9 fc87 	bl	8000288 <__aeabi_dsub>
 800697a:	9d01      	ldr	r5, [sp, #4]
 800697c:	4682      	mov	sl, r0
 800697e:	468b      	mov	fp, r1
 8006980:	4649      	mov	r1, r9
 8006982:	4640      	mov	r0, r8
 8006984:	f7fa f8e8 	bl	8000b58 <__aeabi_d2iz>
 8006988:	4606      	mov	r6, r0
 800698a:	f7f9 fdcb 	bl	8000524 <__aeabi_i2d>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	4640      	mov	r0, r8
 8006994:	4649      	mov	r1, r9
 8006996:	f7f9 fc77 	bl	8000288 <__aeabi_dsub>
 800699a:	3630      	adds	r6, #48	; 0x30
 800699c:	f805 6b01 	strb.w	r6, [r5], #1
 80069a0:	4652      	mov	r2, sl
 80069a2:	465b      	mov	r3, fp
 80069a4:	4680      	mov	r8, r0
 80069a6:	4689      	mov	r9, r1
 80069a8:	f7fa f898 	bl	8000adc <__aeabi_dcmplt>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d163      	bne.n	8006a78 <_dtoa_r+0x608>
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	4936      	ldr	r1, [pc, #216]	; (8006a90 <_dtoa_r+0x620>)
 80069b6:	2000      	movs	r0, #0
 80069b8:	f7f9 fc66 	bl	8000288 <__aeabi_dsub>
 80069bc:	4652      	mov	r2, sl
 80069be:	465b      	mov	r3, fp
 80069c0:	f7fa f88c 	bl	8000adc <__aeabi_dcmplt>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f040 80b5 	bne.w	8006b34 <_dtoa_r+0x6c4>
 80069ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069cc:	429d      	cmp	r5, r3
 80069ce:	d081      	beq.n	80068d4 <_dtoa_r+0x464>
 80069d0:	4b30      	ldr	r3, [pc, #192]	; (8006a94 <_dtoa_r+0x624>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	4650      	mov	r0, sl
 80069d6:	4659      	mov	r1, fp
 80069d8:	f7f9 fe0e 	bl	80005f8 <__aeabi_dmul>
 80069dc:	4b2d      	ldr	r3, [pc, #180]	; (8006a94 <_dtoa_r+0x624>)
 80069de:	4682      	mov	sl, r0
 80069e0:	468b      	mov	fp, r1
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	2200      	movs	r2, #0
 80069e8:	f7f9 fe06 	bl	80005f8 <__aeabi_dmul>
 80069ec:	4680      	mov	r8, r0
 80069ee:	4689      	mov	r9, r1
 80069f0:	e7c6      	b.n	8006980 <_dtoa_r+0x510>
 80069f2:	4650      	mov	r0, sl
 80069f4:	4659      	mov	r1, fp
 80069f6:	f7f9 fdff 	bl	80005f8 <__aeabi_dmul>
 80069fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069fc:	9d01      	ldr	r5, [sp, #4]
 80069fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a00:	4682      	mov	sl, r0
 8006a02:	468b      	mov	fp, r1
 8006a04:	4649      	mov	r1, r9
 8006a06:	4640      	mov	r0, r8
 8006a08:	f7fa f8a6 	bl	8000b58 <__aeabi_d2iz>
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	f7f9 fd89 	bl	8000524 <__aeabi_i2d>
 8006a12:	3630      	adds	r6, #48	; 0x30
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7f9 fc34 	bl	8000288 <__aeabi_dsub>
 8006a20:	f805 6b01 	strb.w	r6, [r5], #1
 8006a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a26:	429d      	cmp	r5, r3
 8006a28:	4680      	mov	r8, r0
 8006a2a:	4689      	mov	r9, r1
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	d124      	bne.n	8006a7c <_dtoa_r+0x60c>
 8006a32:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <_dtoa_r+0x630>)
 8006a34:	4650      	mov	r0, sl
 8006a36:	4659      	mov	r1, fp
 8006a38:	f7f9 fc28 	bl	800028c <__adddf3>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7fa f868 	bl	8000b18 <__aeabi_dcmpgt>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d173      	bne.n	8006b34 <_dtoa_r+0x6c4>
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	465b      	mov	r3, fp
 8006a50:	4913      	ldr	r1, [pc, #76]	; (8006aa0 <_dtoa_r+0x630>)
 8006a52:	2000      	movs	r0, #0
 8006a54:	f7f9 fc18 	bl	8000288 <__aeabi_dsub>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7fa f83c 	bl	8000adc <__aeabi_dcmplt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f43f af35 	beq.w	80068d4 <_dtoa_r+0x464>
 8006a6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a6c:	1e6b      	subs	r3, r5, #1
 8006a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a74:	2b30      	cmp	r3, #48	; 0x30
 8006a76:	d0f8      	beq.n	8006a6a <_dtoa_r+0x5fa>
 8006a78:	9700      	str	r7, [sp, #0]
 8006a7a:	e049      	b.n	8006b10 <_dtoa_r+0x6a0>
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <_dtoa_r+0x624>)
 8006a7e:	f7f9 fdbb 	bl	80005f8 <__aeabi_dmul>
 8006a82:	4680      	mov	r8, r0
 8006a84:	4689      	mov	r9, r1
 8006a86:	e7bd      	b.n	8006a04 <_dtoa_r+0x594>
 8006a88:	08008688 	.word	0x08008688
 8006a8c:	08008660 	.word	0x08008660
 8006a90:	3ff00000 	.word	0x3ff00000
 8006a94:	40240000 	.word	0x40240000
 8006a98:	401c0000 	.word	0x401c0000
 8006a9c:	40140000 	.word	0x40140000
 8006aa0:	3fe00000 	.word	0x3fe00000
 8006aa4:	9d01      	ldr	r5, [sp, #4]
 8006aa6:	4656      	mov	r6, sl
 8006aa8:	465f      	mov	r7, fp
 8006aaa:	4642      	mov	r2, r8
 8006aac:	464b      	mov	r3, r9
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7f9 fecb 	bl	800084c <__aeabi_ddiv>
 8006ab6:	f7fa f84f 	bl	8000b58 <__aeabi_d2iz>
 8006aba:	4682      	mov	sl, r0
 8006abc:	f7f9 fd32 	bl	8000524 <__aeabi_i2d>
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	f7f9 fd98 	bl	80005f8 <__aeabi_dmul>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4630      	mov	r0, r6
 8006ace:	4639      	mov	r1, r7
 8006ad0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ad4:	f7f9 fbd8 	bl	8000288 <__aeabi_dsub>
 8006ad8:	f805 6b01 	strb.w	r6, [r5], #1
 8006adc:	9e01      	ldr	r6, [sp, #4]
 8006ade:	9f03      	ldr	r7, [sp, #12]
 8006ae0:	1bae      	subs	r6, r5, r6
 8006ae2:	42b7      	cmp	r7, r6
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	d135      	bne.n	8006b56 <_dtoa_r+0x6e6>
 8006aea:	f7f9 fbcf 	bl	800028c <__adddf3>
 8006aee:	4642      	mov	r2, r8
 8006af0:	464b      	mov	r3, r9
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	f7fa f80f 	bl	8000b18 <__aeabi_dcmpgt>
 8006afa:	b9d0      	cbnz	r0, 8006b32 <_dtoa_r+0x6c2>
 8006afc:	4642      	mov	r2, r8
 8006afe:	464b      	mov	r3, r9
 8006b00:	4630      	mov	r0, r6
 8006b02:	4639      	mov	r1, r7
 8006b04:	f7f9 ffe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b08:	b110      	cbz	r0, 8006b10 <_dtoa_r+0x6a0>
 8006b0a:	f01a 0f01 	tst.w	sl, #1
 8006b0e:	d110      	bne.n	8006b32 <_dtoa_r+0x6c2>
 8006b10:	4620      	mov	r0, r4
 8006b12:	ee18 1a10 	vmov	r1, s16
 8006b16:	f000 fc3d 	bl	8007394 <_Bfree>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9800      	ldr	r0, [sp, #0]
 8006b1e:	702b      	strb	r3, [r5, #0]
 8006b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b22:	3001      	adds	r0, #1
 8006b24:	6018      	str	r0, [r3, #0]
 8006b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f43f acf1 	beq.w	8006510 <_dtoa_r+0xa0>
 8006b2e:	601d      	str	r5, [r3, #0]
 8006b30:	e4ee      	b.n	8006510 <_dtoa_r+0xa0>
 8006b32:	9f00      	ldr	r7, [sp, #0]
 8006b34:	462b      	mov	r3, r5
 8006b36:	461d      	mov	r5, r3
 8006b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b3c:	2a39      	cmp	r2, #57	; 0x39
 8006b3e:	d106      	bne.n	8006b4e <_dtoa_r+0x6de>
 8006b40:	9a01      	ldr	r2, [sp, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d1f7      	bne.n	8006b36 <_dtoa_r+0x6c6>
 8006b46:	9901      	ldr	r1, [sp, #4]
 8006b48:	2230      	movs	r2, #48	; 0x30
 8006b4a:	3701      	adds	r7, #1
 8006b4c:	700a      	strb	r2, [r1, #0]
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	3201      	adds	r2, #1
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	e790      	b.n	8006a78 <_dtoa_r+0x608>
 8006b56:	4ba6      	ldr	r3, [pc, #664]	; (8006df0 <_dtoa_r+0x980>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f7f9 fd4d 	bl	80005f8 <__aeabi_dmul>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2300      	movs	r3, #0
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	f7f9 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d09d      	beq.n	8006aaa <_dtoa_r+0x63a>
 8006b6e:	e7cf      	b.n	8006b10 <_dtoa_r+0x6a0>
 8006b70:	9a08      	ldr	r2, [sp, #32]
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	f000 80d7 	beq.w	8006d26 <_dtoa_r+0x8b6>
 8006b78:	9a06      	ldr	r2, [sp, #24]
 8006b7a:	2a01      	cmp	r2, #1
 8006b7c:	f300 80ba 	bgt.w	8006cf4 <_dtoa_r+0x884>
 8006b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	f000 80b2 	beq.w	8006cec <_dtoa_r+0x87c>
 8006b88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b8c:	9e07      	ldr	r6, [sp, #28]
 8006b8e:	9d04      	ldr	r5, [sp, #16]
 8006b90:	9a04      	ldr	r2, [sp, #16]
 8006b92:	441a      	add	r2, r3
 8006b94:	9204      	str	r2, [sp, #16]
 8006b96:	9a05      	ldr	r2, [sp, #20]
 8006b98:	2101      	movs	r1, #1
 8006b9a:	441a      	add	r2, r3
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	9205      	str	r2, [sp, #20]
 8006ba0:	f000 fcb0 	bl	8007504 <__i2b>
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	dd0c      	ble.n	8006bc4 <_dtoa_r+0x754>
 8006baa:	9b05      	ldr	r3, [sp, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dd09      	ble.n	8006bc4 <_dtoa_r+0x754>
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	9a04      	ldr	r2, [sp, #16]
 8006bb4:	bfa8      	it	ge
 8006bb6:	462b      	movge	r3, r5
 8006bb8:	1ad2      	subs	r2, r2, r3
 8006bba:	9204      	str	r2, [sp, #16]
 8006bbc:	9a05      	ldr	r2, [sp, #20]
 8006bbe:	1aed      	subs	r5, r5, r3
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	b31b      	cbz	r3, 8006c10 <_dtoa_r+0x7a0>
 8006bc8:	9b08      	ldr	r3, [sp, #32]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80af 	beq.w	8006d2e <_dtoa_r+0x8be>
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	dd13      	ble.n	8006bfc <_dtoa_r+0x78c>
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	4632      	mov	r2, r6
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fd53 	bl	8007684 <__pow5mult>
 8006bde:	ee18 2a10 	vmov	r2, s16
 8006be2:	4601      	mov	r1, r0
 8006be4:	4607      	mov	r7, r0
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 fca2 	bl	8007530 <__multiply>
 8006bec:	ee18 1a10 	vmov	r1, s16
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 fbce 	bl	8007394 <_Bfree>
 8006bf8:	ee08 8a10 	vmov	s16, r8
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	1b9a      	subs	r2, r3, r6
 8006c00:	d006      	beq.n	8006c10 <_dtoa_r+0x7a0>
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fd3c 	bl	8007684 <__pow5mult>
 8006c0c:	ee08 0a10 	vmov	s16, r0
 8006c10:	2101      	movs	r1, #1
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fc76 	bl	8007504 <__i2b>
 8006c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	f340 8088 	ble.w	8006d32 <_dtoa_r+0x8c2>
 8006c22:	461a      	mov	r2, r3
 8006c24:	4601      	mov	r1, r0
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fd2c 	bl	8007684 <__pow5mult>
 8006c2c:	9b06      	ldr	r3, [sp, #24]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	4606      	mov	r6, r0
 8006c32:	f340 8081 	ble.w	8006d38 <_dtoa_r+0x8c8>
 8006c36:	f04f 0800 	mov.w	r8, #0
 8006c3a:	6933      	ldr	r3, [r6, #16]
 8006c3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c40:	6918      	ldr	r0, [r3, #16]
 8006c42:	f000 fc0f 	bl	8007464 <__hi0bits>
 8006c46:	f1c0 0020 	rsb	r0, r0, #32
 8006c4a:	9b05      	ldr	r3, [sp, #20]
 8006c4c:	4418      	add	r0, r3
 8006c4e:	f010 001f 	ands.w	r0, r0, #31
 8006c52:	f000 8092 	beq.w	8006d7a <_dtoa_r+0x90a>
 8006c56:	f1c0 0320 	rsb	r3, r0, #32
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	f340 808a 	ble.w	8006d74 <_dtoa_r+0x904>
 8006c60:	f1c0 001c 	rsb	r0, r0, #28
 8006c64:	9b04      	ldr	r3, [sp, #16]
 8006c66:	4403      	add	r3, r0
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	4403      	add	r3, r0
 8006c6e:	4405      	add	r5, r0
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	9b04      	ldr	r3, [sp, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	dd07      	ble.n	8006c88 <_dtoa_r+0x818>
 8006c78:	ee18 1a10 	vmov	r1, s16
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 fd5a 	bl	8007738 <__lshift>
 8006c84:	ee08 0a10 	vmov	s16, r0
 8006c88:	9b05      	ldr	r3, [sp, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dd05      	ble.n	8006c9a <_dtoa_r+0x82a>
 8006c8e:	4631      	mov	r1, r6
 8006c90:	461a      	mov	r2, r3
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fd50 	bl	8007738 <__lshift>
 8006c98:	4606      	mov	r6, r0
 8006c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d06e      	beq.n	8006d7e <_dtoa_r+0x90e>
 8006ca0:	ee18 0a10 	vmov	r0, s16
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	f000 fdb7 	bl	8007818 <__mcmp>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	da67      	bge.n	8006d7e <_dtoa_r+0x90e>
 8006cae:	9b00      	ldr	r3, [sp, #0]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	ee18 1a10 	vmov	r1, s16
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	220a      	movs	r2, #10
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 fb8b 	bl	80073d8 <__multadd>
 8006cc2:	9b08      	ldr	r3, [sp, #32]
 8006cc4:	ee08 0a10 	vmov	s16, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 81b1 	beq.w	8007030 <_dtoa_r+0xbc0>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	220a      	movs	r2, #10
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f000 fb7f 	bl	80073d8 <__multadd>
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	4607      	mov	r7, r0
 8006ce0:	f300 808e 	bgt.w	8006e00 <_dtoa_r+0x990>
 8006ce4:	9b06      	ldr	r3, [sp, #24]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	dc51      	bgt.n	8006d8e <_dtoa_r+0x91e>
 8006cea:	e089      	b.n	8006e00 <_dtoa_r+0x990>
 8006cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cf2:	e74b      	b.n	8006b8c <_dtoa_r+0x71c>
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	1e5e      	subs	r6, r3, #1
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	42b3      	cmp	r3, r6
 8006cfc:	bfbf      	itttt	lt
 8006cfe:	9b07      	ldrlt	r3, [sp, #28]
 8006d00:	9607      	strlt	r6, [sp, #28]
 8006d02:	1af2      	sublt	r2, r6, r3
 8006d04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d06:	bfb6      	itet	lt
 8006d08:	189b      	addlt	r3, r3, r2
 8006d0a:	1b9e      	subge	r6, r3, r6
 8006d0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	bfb8      	it	lt
 8006d12:	2600      	movlt	r6, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bfb7      	itett	lt
 8006d18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d20:	1a9d      	sublt	r5, r3, r2
 8006d22:	2300      	movlt	r3, #0
 8006d24:	e734      	b.n	8006b90 <_dtoa_r+0x720>
 8006d26:	9e07      	ldr	r6, [sp, #28]
 8006d28:	9d04      	ldr	r5, [sp, #16]
 8006d2a:	9f08      	ldr	r7, [sp, #32]
 8006d2c:	e73b      	b.n	8006ba6 <_dtoa_r+0x736>
 8006d2e:	9a07      	ldr	r2, [sp, #28]
 8006d30:	e767      	b.n	8006c02 <_dtoa_r+0x792>
 8006d32:	9b06      	ldr	r3, [sp, #24]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	dc18      	bgt.n	8006d6a <_dtoa_r+0x8fa>
 8006d38:	f1ba 0f00 	cmp.w	sl, #0
 8006d3c:	d115      	bne.n	8006d6a <_dtoa_r+0x8fa>
 8006d3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d42:	b993      	cbnz	r3, 8006d6a <_dtoa_r+0x8fa>
 8006d44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d48:	0d1b      	lsrs	r3, r3, #20
 8006d4a:	051b      	lsls	r3, r3, #20
 8006d4c:	b183      	cbz	r3, 8006d70 <_dtoa_r+0x900>
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	3301      	adds	r3, #1
 8006d52:	9304      	str	r3, [sp, #16]
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	3301      	adds	r3, #1
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	f04f 0801 	mov.w	r8, #1
 8006d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f47f af6a 	bne.w	8006c3a <_dtoa_r+0x7ca>
 8006d66:	2001      	movs	r0, #1
 8006d68:	e76f      	b.n	8006c4a <_dtoa_r+0x7da>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	e7f6      	b.n	8006d5e <_dtoa_r+0x8ee>
 8006d70:	4698      	mov	r8, r3
 8006d72:	e7f4      	b.n	8006d5e <_dtoa_r+0x8ee>
 8006d74:	f43f af7d 	beq.w	8006c72 <_dtoa_r+0x802>
 8006d78:	4618      	mov	r0, r3
 8006d7a:	301c      	adds	r0, #28
 8006d7c:	e772      	b.n	8006c64 <_dtoa_r+0x7f4>
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dc37      	bgt.n	8006df4 <_dtoa_r+0x984>
 8006d84:	9b06      	ldr	r3, [sp, #24]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	dd34      	ble.n	8006df4 <_dtoa_r+0x984>
 8006d8a:	9b03      	ldr	r3, [sp, #12]
 8006d8c:	9302      	str	r3, [sp, #8]
 8006d8e:	9b02      	ldr	r3, [sp, #8]
 8006d90:	b96b      	cbnz	r3, 8006dae <_dtoa_r+0x93e>
 8006d92:	4631      	mov	r1, r6
 8006d94:	2205      	movs	r2, #5
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 fb1e 	bl	80073d8 <__multadd>
 8006d9c:	4601      	mov	r1, r0
 8006d9e:	4606      	mov	r6, r0
 8006da0:	ee18 0a10 	vmov	r0, s16
 8006da4:	f000 fd38 	bl	8007818 <__mcmp>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	f73f adbb 	bgt.w	8006924 <_dtoa_r+0x4b4>
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	9d01      	ldr	r5, [sp, #4]
 8006db2:	43db      	mvns	r3, r3
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	f04f 0800 	mov.w	r8, #0
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 fae9 	bl	8007394 <_Bfree>
 8006dc2:	2f00      	cmp	r7, #0
 8006dc4:	f43f aea4 	beq.w	8006b10 <_dtoa_r+0x6a0>
 8006dc8:	f1b8 0f00 	cmp.w	r8, #0
 8006dcc:	d005      	beq.n	8006dda <_dtoa_r+0x96a>
 8006dce:	45b8      	cmp	r8, r7
 8006dd0:	d003      	beq.n	8006dda <_dtoa_r+0x96a>
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fadd 	bl	8007394 <_Bfree>
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fad9 	bl	8007394 <_Bfree>
 8006de2:	e695      	b.n	8006b10 <_dtoa_r+0x6a0>
 8006de4:	2600      	movs	r6, #0
 8006de6:	4637      	mov	r7, r6
 8006de8:	e7e1      	b.n	8006dae <_dtoa_r+0x93e>
 8006dea:	9700      	str	r7, [sp, #0]
 8006dec:	4637      	mov	r7, r6
 8006dee:	e599      	b.n	8006924 <_dtoa_r+0x4b4>
 8006df0:	40240000 	.word	0x40240000
 8006df4:	9b08      	ldr	r3, [sp, #32]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 80ca 	beq.w	8006f90 <_dtoa_r+0xb20>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	9302      	str	r3, [sp, #8]
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	dd05      	ble.n	8006e10 <_dtoa_r+0x9a0>
 8006e04:	4639      	mov	r1, r7
 8006e06:	462a      	mov	r2, r5
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fc95 	bl	8007738 <__lshift>
 8006e0e:	4607      	mov	r7, r0
 8006e10:	f1b8 0f00 	cmp.w	r8, #0
 8006e14:	d05b      	beq.n	8006ece <_dtoa_r+0xa5e>
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 fa7b 	bl	8007314 <_Balloc>
 8006e1e:	4605      	mov	r5, r0
 8006e20:	b928      	cbnz	r0, 8006e2e <_dtoa_r+0x9be>
 8006e22:	4b87      	ldr	r3, [pc, #540]	; (8007040 <_dtoa_r+0xbd0>)
 8006e24:	4602      	mov	r2, r0
 8006e26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e2a:	f7ff bb3b 	b.w	80064a4 <_dtoa_r+0x34>
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	3202      	adds	r2, #2
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	f107 010c 	add.w	r1, r7, #12
 8006e38:	300c      	adds	r0, #12
 8006e3a:	f7fe fc04 	bl	8005646 <memcpy>
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4629      	mov	r1, r5
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fc78 	bl	8007738 <__lshift>
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	f103 0901 	add.w	r9, r3, #1
 8006e4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e52:	4413      	add	r3, r2
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	f00a 0301 	and.w	r3, sl, #1
 8006e5a:	46b8      	mov	r8, r7
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	4607      	mov	r7, r0
 8006e60:	4631      	mov	r1, r6
 8006e62:	ee18 0a10 	vmov	r0, s16
 8006e66:	f7ff fa77 	bl	8006358 <quorem>
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	9002      	str	r0, [sp, #8]
 8006e6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e72:	ee18 0a10 	vmov	r0, s16
 8006e76:	f000 fccf 	bl	8007818 <__mcmp>
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	9003      	str	r0, [sp, #12]
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 fce5 	bl	8007850 <__mdiff>
 8006e86:	68c2      	ldr	r2, [r0, #12]
 8006e88:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	bb02      	cbnz	r2, 8006ed2 <_dtoa_r+0xa62>
 8006e90:	4601      	mov	r1, r0
 8006e92:	ee18 0a10 	vmov	r0, s16
 8006e96:	f000 fcbf 	bl	8007818 <__mcmp>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	9207      	str	r2, [sp, #28]
 8006ea2:	f000 fa77 	bl	8007394 <_Bfree>
 8006ea6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006eaa:	ea43 0102 	orr.w	r1, r3, r2
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	464d      	mov	r5, r9
 8006eb4:	d10f      	bne.n	8006ed6 <_dtoa_r+0xa66>
 8006eb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006eba:	d02a      	beq.n	8006f12 <_dtoa_r+0xaa2>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dd02      	ble.n	8006ec8 <_dtoa_r+0xa58>
 8006ec2:	9b02      	ldr	r3, [sp, #8]
 8006ec4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ec8:	f88b a000 	strb.w	sl, [fp]
 8006ecc:	e775      	b.n	8006dba <_dtoa_r+0x94a>
 8006ece:	4638      	mov	r0, r7
 8006ed0:	e7ba      	b.n	8006e48 <_dtoa_r+0x9d8>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	e7e2      	b.n	8006e9c <_dtoa_r+0xa2c>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	db04      	blt.n	8006ee6 <_dtoa_r+0xa76>
 8006edc:	9906      	ldr	r1, [sp, #24]
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	9904      	ldr	r1, [sp, #16]
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	d122      	bne.n	8006f2c <_dtoa_r+0xabc>
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	ddee      	ble.n	8006ec8 <_dtoa_r+0xa58>
 8006eea:	ee18 1a10 	vmov	r1, s16
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 fc21 	bl	8007738 <__lshift>
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	ee08 0a10 	vmov	s16, r0
 8006efc:	f000 fc8c 	bl	8007818 <__mcmp>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	dc03      	bgt.n	8006f0c <_dtoa_r+0xa9c>
 8006f04:	d1e0      	bne.n	8006ec8 <_dtoa_r+0xa58>
 8006f06:	f01a 0f01 	tst.w	sl, #1
 8006f0a:	d0dd      	beq.n	8006ec8 <_dtoa_r+0xa58>
 8006f0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f10:	d1d7      	bne.n	8006ec2 <_dtoa_r+0xa52>
 8006f12:	2339      	movs	r3, #57	; 0x39
 8006f14:	f88b 3000 	strb.w	r3, [fp]
 8006f18:	462b      	mov	r3, r5
 8006f1a:	461d      	mov	r5, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f22:	2a39      	cmp	r2, #57	; 0x39
 8006f24:	d071      	beq.n	800700a <_dtoa_r+0xb9a>
 8006f26:	3201      	adds	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	e746      	b.n	8006dba <_dtoa_r+0x94a>
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	dd07      	ble.n	8006f40 <_dtoa_r+0xad0>
 8006f30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f34:	d0ed      	beq.n	8006f12 <_dtoa_r+0xaa2>
 8006f36:	f10a 0301 	add.w	r3, sl, #1
 8006f3a:	f88b 3000 	strb.w	r3, [fp]
 8006f3e:	e73c      	b.n	8006dba <_dtoa_r+0x94a>
 8006f40:	9b05      	ldr	r3, [sp, #20]
 8006f42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f46:	4599      	cmp	r9, r3
 8006f48:	d047      	beq.n	8006fda <_dtoa_r+0xb6a>
 8006f4a:	ee18 1a10 	vmov	r1, s16
 8006f4e:	2300      	movs	r3, #0
 8006f50:	220a      	movs	r2, #10
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 fa40 	bl	80073d8 <__multadd>
 8006f58:	45b8      	cmp	r8, r7
 8006f5a:	ee08 0a10 	vmov	s16, r0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	f04f 020a 	mov.w	r2, #10
 8006f66:	4641      	mov	r1, r8
 8006f68:	4620      	mov	r0, r4
 8006f6a:	d106      	bne.n	8006f7a <_dtoa_r+0xb0a>
 8006f6c:	f000 fa34 	bl	80073d8 <__multadd>
 8006f70:	4680      	mov	r8, r0
 8006f72:	4607      	mov	r7, r0
 8006f74:	f109 0901 	add.w	r9, r9, #1
 8006f78:	e772      	b.n	8006e60 <_dtoa_r+0x9f0>
 8006f7a:	f000 fa2d 	bl	80073d8 <__multadd>
 8006f7e:	4639      	mov	r1, r7
 8006f80:	4680      	mov	r8, r0
 8006f82:	2300      	movs	r3, #0
 8006f84:	220a      	movs	r2, #10
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fa26 	bl	80073d8 <__multadd>
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	e7f1      	b.n	8006f74 <_dtoa_r+0xb04>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	9d01      	ldr	r5, [sp, #4]
 8006f96:	ee18 0a10 	vmov	r0, s16
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	f7ff f9dc 	bl	8006358 <quorem>
 8006fa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	f805 ab01 	strb.w	sl, [r5], #1
 8006faa:	1aea      	subs	r2, r5, r3
 8006fac:	9b02      	ldr	r3, [sp, #8]
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	dd09      	ble.n	8006fc6 <_dtoa_r+0xb56>
 8006fb2:	ee18 1a10 	vmov	r1, s16
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	220a      	movs	r2, #10
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 fa0c 	bl	80073d8 <__multadd>
 8006fc0:	ee08 0a10 	vmov	s16, r0
 8006fc4:	e7e7      	b.n	8006f96 <_dtoa_r+0xb26>
 8006fc6:	9b02      	ldr	r3, [sp, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bfc8      	it	gt
 8006fcc:	461d      	movgt	r5, r3
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	bfd8      	it	le
 8006fd2:	2501      	movle	r5, #1
 8006fd4:	441d      	add	r5, r3
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	ee18 1a10 	vmov	r1, s16
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fba9 	bl	8007738 <__lshift>
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	ee08 0a10 	vmov	s16, r0
 8006fec:	f000 fc14 	bl	8007818 <__mcmp>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	dc91      	bgt.n	8006f18 <_dtoa_r+0xaa8>
 8006ff4:	d102      	bne.n	8006ffc <_dtoa_r+0xb8c>
 8006ff6:	f01a 0f01 	tst.w	sl, #1
 8006ffa:	d18d      	bne.n	8006f18 <_dtoa_r+0xaa8>
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	461d      	mov	r5, r3
 8007000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007004:	2a30      	cmp	r2, #48	; 0x30
 8007006:	d0fa      	beq.n	8006ffe <_dtoa_r+0xb8e>
 8007008:	e6d7      	b.n	8006dba <_dtoa_r+0x94a>
 800700a:	9a01      	ldr	r2, [sp, #4]
 800700c:	429a      	cmp	r2, r3
 800700e:	d184      	bne.n	8006f1a <_dtoa_r+0xaaa>
 8007010:	9b00      	ldr	r3, [sp, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	2331      	movs	r3, #49	; 0x31
 8007018:	7013      	strb	r3, [r2, #0]
 800701a:	e6ce      	b.n	8006dba <_dtoa_r+0x94a>
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <_dtoa_r+0xbd4>)
 800701e:	f7ff ba95 	b.w	800654c <_dtoa_r+0xdc>
 8007022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007024:	2b00      	cmp	r3, #0
 8007026:	f47f aa6e 	bne.w	8006506 <_dtoa_r+0x96>
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <_dtoa_r+0xbd8>)
 800702c:	f7ff ba8e 	b.w	800654c <_dtoa_r+0xdc>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	dcae      	bgt.n	8006f94 <_dtoa_r+0xb24>
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	2b02      	cmp	r3, #2
 800703a:	f73f aea8 	bgt.w	8006d8e <_dtoa_r+0x91e>
 800703e:	e7a9      	b.n	8006f94 <_dtoa_r+0xb24>
 8007040:	080085ef 	.word	0x080085ef
 8007044:	08008510 	.word	0x08008510
 8007048:	08008570 	.word	0x08008570

0800704c <__sflush_r>:
 800704c:	898a      	ldrh	r2, [r1, #12]
 800704e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	4605      	mov	r5, r0
 8007054:	0710      	lsls	r0, r2, #28
 8007056:	460c      	mov	r4, r1
 8007058:	d458      	bmi.n	800710c <__sflush_r+0xc0>
 800705a:	684b      	ldr	r3, [r1, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	dc05      	bgt.n	800706c <__sflush_r+0x20>
 8007060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	dc02      	bgt.n	800706c <__sflush_r+0x20>
 8007066:	2000      	movs	r0, #0
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800706c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800706e:	2e00      	cmp	r6, #0
 8007070:	d0f9      	beq.n	8007066 <__sflush_r+0x1a>
 8007072:	2300      	movs	r3, #0
 8007074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007078:	682f      	ldr	r7, [r5, #0]
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	d032      	beq.n	80070e4 <__sflush_r+0x98>
 800707e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	075a      	lsls	r2, r3, #29
 8007084:	d505      	bpl.n	8007092 <__sflush_r+0x46>
 8007086:	6863      	ldr	r3, [r4, #4]
 8007088:	1ac0      	subs	r0, r0, r3
 800708a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800708c:	b10b      	cbz	r3, 8007092 <__sflush_r+0x46>
 800708e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007090:	1ac0      	subs	r0, r0, r3
 8007092:	2300      	movs	r3, #0
 8007094:	4602      	mov	r2, r0
 8007096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007098:	6a21      	ldr	r1, [r4, #32]
 800709a:	4628      	mov	r0, r5
 800709c:	47b0      	blx	r6
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	d106      	bne.n	80070b2 <__sflush_r+0x66>
 80070a4:	6829      	ldr	r1, [r5, #0]
 80070a6:	291d      	cmp	r1, #29
 80070a8:	d82c      	bhi.n	8007104 <__sflush_r+0xb8>
 80070aa:	4a2a      	ldr	r2, [pc, #168]	; (8007154 <__sflush_r+0x108>)
 80070ac:	40ca      	lsrs	r2, r1
 80070ae:	07d6      	lsls	r6, r2, #31
 80070b0:	d528      	bpl.n	8007104 <__sflush_r+0xb8>
 80070b2:	2200      	movs	r2, #0
 80070b4:	6062      	str	r2, [r4, #4]
 80070b6:	04d9      	lsls	r1, r3, #19
 80070b8:	6922      	ldr	r2, [r4, #16]
 80070ba:	6022      	str	r2, [r4, #0]
 80070bc:	d504      	bpl.n	80070c8 <__sflush_r+0x7c>
 80070be:	1c42      	adds	r2, r0, #1
 80070c0:	d101      	bne.n	80070c6 <__sflush_r+0x7a>
 80070c2:	682b      	ldr	r3, [r5, #0]
 80070c4:	b903      	cbnz	r3, 80070c8 <__sflush_r+0x7c>
 80070c6:	6560      	str	r0, [r4, #84]	; 0x54
 80070c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ca:	602f      	str	r7, [r5, #0]
 80070cc:	2900      	cmp	r1, #0
 80070ce:	d0ca      	beq.n	8007066 <__sflush_r+0x1a>
 80070d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070d4:	4299      	cmp	r1, r3
 80070d6:	d002      	beq.n	80070de <__sflush_r+0x92>
 80070d8:	4628      	mov	r0, r5
 80070da:	f000 fcb5 	bl	8007a48 <_free_r>
 80070de:	2000      	movs	r0, #0
 80070e0:	6360      	str	r0, [r4, #52]	; 0x34
 80070e2:	e7c1      	b.n	8007068 <__sflush_r+0x1c>
 80070e4:	6a21      	ldr	r1, [r4, #32]
 80070e6:	2301      	movs	r3, #1
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b0      	blx	r6
 80070ec:	1c41      	adds	r1, r0, #1
 80070ee:	d1c7      	bne.n	8007080 <__sflush_r+0x34>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0c4      	beq.n	8007080 <__sflush_r+0x34>
 80070f6:	2b1d      	cmp	r3, #29
 80070f8:	d001      	beq.n	80070fe <__sflush_r+0xb2>
 80070fa:	2b16      	cmp	r3, #22
 80070fc:	d101      	bne.n	8007102 <__sflush_r+0xb6>
 80070fe:	602f      	str	r7, [r5, #0]
 8007100:	e7b1      	b.n	8007066 <__sflush_r+0x1a>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	e7ad      	b.n	8007068 <__sflush_r+0x1c>
 800710c:	690f      	ldr	r7, [r1, #16]
 800710e:	2f00      	cmp	r7, #0
 8007110:	d0a9      	beq.n	8007066 <__sflush_r+0x1a>
 8007112:	0793      	lsls	r3, r2, #30
 8007114:	680e      	ldr	r6, [r1, #0]
 8007116:	bf08      	it	eq
 8007118:	694b      	ldreq	r3, [r1, #20]
 800711a:	600f      	str	r7, [r1, #0]
 800711c:	bf18      	it	ne
 800711e:	2300      	movne	r3, #0
 8007120:	eba6 0807 	sub.w	r8, r6, r7
 8007124:	608b      	str	r3, [r1, #8]
 8007126:	f1b8 0f00 	cmp.w	r8, #0
 800712a:	dd9c      	ble.n	8007066 <__sflush_r+0x1a>
 800712c:	6a21      	ldr	r1, [r4, #32]
 800712e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007130:	4643      	mov	r3, r8
 8007132:	463a      	mov	r2, r7
 8007134:	4628      	mov	r0, r5
 8007136:	47b0      	blx	r6
 8007138:	2800      	cmp	r0, #0
 800713a:	dc06      	bgt.n	800714a <__sflush_r+0xfe>
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	e78e      	b.n	8007068 <__sflush_r+0x1c>
 800714a:	4407      	add	r7, r0
 800714c:	eba8 0800 	sub.w	r8, r8, r0
 8007150:	e7e9      	b.n	8007126 <__sflush_r+0xda>
 8007152:	bf00      	nop
 8007154:	20400001 	.word	0x20400001

08007158 <_fflush_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	690b      	ldr	r3, [r1, #16]
 800715c:	4605      	mov	r5, r0
 800715e:	460c      	mov	r4, r1
 8007160:	b913      	cbnz	r3, 8007168 <_fflush_r+0x10>
 8007162:	2500      	movs	r5, #0
 8007164:	4628      	mov	r0, r5
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	b118      	cbz	r0, 8007172 <_fflush_r+0x1a>
 800716a:	6983      	ldr	r3, [r0, #24]
 800716c:	b90b      	cbnz	r3, 8007172 <_fflush_r+0x1a>
 800716e:	f7fe f9a5 	bl	80054bc <__sinit>
 8007172:	4b14      	ldr	r3, [pc, #80]	; (80071c4 <_fflush_r+0x6c>)
 8007174:	429c      	cmp	r4, r3
 8007176:	d11b      	bne.n	80071b0 <_fflush_r+0x58>
 8007178:	686c      	ldr	r4, [r5, #4]
 800717a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0ef      	beq.n	8007162 <_fflush_r+0xa>
 8007182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007184:	07d0      	lsls	r0, r2, #31
 8007186:	d404      	bmi.n	8007192 <_fflush_r+0x3a>
 8007188:	0599      	lsls	r1, r3, #22
 800718a:	d402      	bmi.n	8007192 <_fflush_r+0x3a>
 800718c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718e:	f7fe fa58 	bl	8005642 <__retarget_lock_acquire_recursive>
 8007192:	4628      	mov	r0, r5
 8007194:	4621      	mov	r1, r4
 8007196:	f7ff ff59 	bl	800704c <__sflush_r>
 800719a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800719c:	07da      	lsls	r2, r3, #31
 800719e:	4605      	mov	r5, r0
 80071a0:	d4e0      	bmi.n	8007164 <_fflush_r+0xc>
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	059b      	lsls	r3, r3, #22
 80071a6:	d4dd      	bmi.n	8007164 <_fflush_r+0xc>
 80071a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071aa:	f7fe fa4b 	bl	8005644 <__retarget_lock_release_recursive>
 80071ae:	e7d9      	b.n	8007164 <_fflush_r+0xc>
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <_fflush_r+0x70>)
 80071b2:	429c      	cmp	r4, r3
 80071b4:	d101      	bne.n	80071ba <_fflush_r+0x62>
 80071b6:	68ac      	ldr	r4, [r5, #8]
 80071b8:	e7df      	b.n	800717a <_fflush_r+0x22>
 80071ba:	4b04      	ldr	r3, [pc, #16]	; (80071cc <_fflush_r+0x74>)
 80071bc:	429c      	cmp	r4, r3
 80071be:	bf08      	it	eq
 80071c0:	68ec      	ldreq	r4, [r5, #12]
 80071c2:	e7da      	b.n	800717a <_fflush_r+0x22>
 80071c4:	080084bc 	.word	0x080084bc
 80071c8:	080084dc 	.word	0x080084dc
 80071cc:	0800849c 	.word	0x0800849c

080071d0 <fiprintf>:
 80071d0:	b40e      	push	{r1, r2, r3}
 80071d2:	b503      	push	{r0, r1, lr}
 80071d4:	4601      	mov	r1, r0
 80071d6:	ab03      	add	r3, sp, #12
 80071d8:	4805      	ldr	r0, [pc, #20]	; (80071f0 <fiprintf+0x20>)
 80071da:	f853 2b04 	ldr.w	r2, [r3], #4
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	f000 fe03 	bl	8007dec <_vfiprintf_r>
 80071e6:	b002      	add	sp, #8
 80071e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071ec:	b003      	add	sp, #12
 80071ee:	4770      	bx	lr
 80071f0:	200000d4 	.word	0x200000d4

080071f4 <_localeconv_r>:
 80071f4:	4800      	ldr	r0, [pc, #0]	; (80071f8 <_localeconv_r+0x4>)
 80071f6:	4770      	bx	lr
 80071f8:	20000228 	.word	0x20000228

080071fc <_lseek_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	; (800721c <_lseek_r+0x20>)
 8007200:	4604      	mov	r4, r0
 8007202:	4608      	mov	r0, r1
 8007204:	4611      	mov	r1, r2
 8007206:	2200      	movs	r2, #0
 8007208:	602a      	str	r2, [r5, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	f7fe f841 	bl	8005292 <_lseek>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_lseek_r+0x1e>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_lseek_r+0x1e>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	20000650 	.word	0x20000650

08007220 <__swhatbuf_r>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	460e      	mov	r6, r1
 8007224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007228:	2900      	cmp	r1, #0
 800722a:	b096      	sub	sp, #88	; 0x58
 800722c:	4614      	mov	r4, r2
 800722e:	461d      	mov	r5, r3
 8007230:	da08      	bge.n	8007244 <__swhatbuf_r+0x24>
 8007232:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	602a      	str	r2, [r5, #0]
 800723a:	061a      	lsls	r2, r3, #24
 800723c:	d410      	bmi.n	8007260 <__swhatbuf_r+0x40>
 800723e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007242:	e00e      	b.n	8007262 <__swhatbuf_r+0x42>
 8007244:	466a      	mov	r2, sp
 8007246:	f000 ff1b 	bl	8008080 <_fstat_r>
 800724a:	2800      	cmp	r0, #0
 800724c:	dbf1      	blt.n	8007232 <__swhatbuf_r+0x12>
 800724e:	9a01      	ldr	r2, [sp, #4]
 8007250:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007254:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007258:	425a      	negs	r2, r3
 800725a:	415a      	adcs	r2, r3
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	e7ee      	b.n	800723e <__swhatbuf_r+0x1e>
 8007260:	2340      	movs	r3, #64	; 0x40
 8007262:	2000      	movs	r0, #0
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	b016      	add	sp, #88	; 0x58
 8007268:	bd70      	pop	{r4, r5, r6, pc}
	...

0800726c <__smakebuf_r>:
 800726c:	898b      	ldrh	r3, [r1, #12]
 800726e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007270:	079d      	lsls	r5, r3, #30
 8007272:	4606      	mov	r6, r0
 8007274:	460c      	mov	r4, r1
 8007276:	d507      	bpl.n	8007288 <__smakebuf_r+0x1c>
 8007278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	2301      	movs	r3, #1
 8007282:	6163      	str	r3, [r4, #20]
 8007284:	b002      	add	sp, #8
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	ab01      	add	r3, sp, #4
 800728a:	466a      	mov	r2, sp
 800728c:	f7ff ffc8 	bl	8007220 <__swhatbuf_r>
 8007290:	9900      	ldr	r1, [sp, #0]
 8007292:	4605      	mov	r5, r0
 8007294:	4630      	mov	r0, r6
 8007296:	f7fe fa0d 	bl	80056b4 <_malloc_r>
 800729a:	b948      	cbnz	r0, 80072b0 <__smakebuf_r+0x44>
 800729c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a0:	059a      	lsls	r2, r3, #22
 80072a2:	d4ef      	bmi.n	8007284 <__smakebuf_r+0x18>
 80072a4:	f023 0303 	bic.w	r3, r3, #3
 80072a8:	f043 0302 	orr.w	r3, r3, #2
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	e7e3      	b.n	8007278 <__smakebuf_r+0xc>
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <__smakebuf_r+0x7c>)
 80072b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	6020      	str	r0, [r4, #0]
 80072b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072bc:	81a3      	strh	r3, [r4, #12]
 80072be:	9b00      	ldr	r3, [sp, #0]
 80072c0:	6163      	str	r3, [r4, #20]
 80072c2:	9b01      	ldr	r3, [sp, #4]
 80072c4:	6120      	str	r0, [r4, #16]
 80072c6:	b15b      	cbz	r3, 80072e0 <__smakebuf_r+0x74>
 80072c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072cc:	4630      	mov	r0, r6
 80072ce:	f000 fee9 	bl	80080a4 <_isatty_r>
 80072d2:	b128      	cbz	r0, 80072e0 <__smakebuf_r+0x74>
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	f023 0303 	bic.w	r3, r3, #3
 80072da:	f043 0301 	orr.w	r3, r3, #1
 80072de:	81a3      	strh	r3, [r4, #12]
 80072e0:	89a0      	ldrh	r0, [r4, #12]
 80072e2:	4305      	orrs	r5, r0
 80072e4:	81a5      	strh	r5, [r4, #12]
 80072e6:	e7cd      	b.n	8007284 <__smakebuf_r+0x18>
 80072e8:	08005455 	.word	0x08005455

080072ec <malloc>:
 80072ec:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <malloc+0xc>)
 80072ee:	4601      	mov	r1, r0
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	f7fe b9df 	b.w	80056b4 <_malloc_r>
 80072f6:	bf00      	nop
 80072f8:	200000d4 	.word	0x200000d4

080072fc <__malloc_lock>:
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <__malloc_lock+0x8>)
 80072fe:	f7fe b9a0 	b.w	8005642 <__retarget_lock_acquire_recursive>
 8007302:	bf00      	nop
 8007304:	20000644 	.word	0x20000644

08007308 <__malloc_unlock>:
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <__malloc_unlock+0x8>)
 800730a:	f7fe b99b 	b.w	8005644 <__retarget_lock_release_recursive>
 800730e:	bf00      	nop
 8007310:	20000644 	.word	0x20000644

08007314 <_Balloc>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007318:	4604      	mov	r4, r0
 800731a:	460d      	mov	r5, r1
 800731c:	b976      	cbnz	r6, 800733c <_Balloc+0x28>
 800731e:	2010      	movs	r0, #16
 8007320:	f7ff ffe4 	bl	80072ec <malloc>
 8007324:	4602      	mov	r2, r0
 8007326:	6260      	str	r0, [r4, #36]	; 0x24
 8007328:	b920      	cbnz	r0, 8007334 <_Balloc+0x20>
 800732a:	4b18      	ldr	r3, [pc, #96]	; (800738c <_Balloc+0x78>)
 800732c:	4818      	ldr	r0, [pc, #96]	; (8007390 <_Balloc+0x7c>)
 800732e:	2166      	movs	r1, #102	; 0x66
 8007330:	f7fe ffe4 	bl	80062fc <__assert_func>
 8007334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007338:	6006      	str	r6, [r0, #0]
 800733a:	60c6      	str	r6, [r0, #12]
 800733c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800733e:	68f3      	ldr	r3, [r6, #12]
 8007340:	b183      	cbz	r3, 8007364 <_Balloc+0x50>
 8007342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800734a:	b9b8      	cbnz	r0, 800737c <_Balloc+0x68>
 800734c:	2101      	movs	r1, #1
 800734e:	fa01 f605 	lsl.w	r6, r1, r5
 8007352:	1d72      	adds	r2, r6, #5
 8007354:	0092      	lsls	r2, r2, #2
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fb60 	bl	8007a1c <_calloc_r>
 800735c:	b160      	cbz	r0, 8007378 <_Balloc+0x64>
 800735e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007362:	e00e      	b.n	8007382 <_Balloc+0x6e>
 8007364:	2221      	movs	r2, #33	; 0x21
 8007366:	2104      	movs	r1, #4
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fb57 	bl	8007a1c <_calloc_r>
 800736e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007370:	60f0      	str	r0, [r6, #12]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e4      	bne.n	8007342 <_Balloc+0x2e>
 8007378:	2000      	movs	r0, #0
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	6802      	ldr	r2, [r0, #0]
 800737e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007382:	2300      	movs	r3, #0
 8007384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007388:	e7f7      	b.n	800737a <_Balloc+0x66>
 800738a:	bf00      	nop
 800738c:	0800857d 	.word	0x0800857d
 8007390:	08008600 	.word	0x08008600

08007394 <_Bfree>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007398:	4605      	mov	r5, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b976      	cbnz	r6, 80073bc <_Bfree+0x28>
 800739e:	2010      	movs	r0, #16
 80073a0:	f7ff ffa4 	bl	80072ec <malloc>
 80073a4:	4602      	mov	r2, r0
 80073a6:	6268      	str	r0, [r5, #36]	; 0x24
 80073a8:	b920      	cbnz	r0, 80073b4 <_Bfree+0x20>
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <_Bfree+0x3c>)
 80073ac:	4809      	ldr	r0, [pc, #36]	; (80073d4 <_Bfree+0x40>)
 80073ae:	218a      	movs	r1, #138	; 0x8a
 80073b0:	f7fe ffa4 	bl	80062fc <__assert_func>
 80073b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073b8:	6006      	str	r6, [r0, #0]
 80073ba:	60c6      	str	r6, [r0, #12]
 80073bc:	b13c      	cbz	r4, 80073ce <_Bfree+0x3a>
 80073be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073c0:	6862      	ldr	r2, [r4, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073c8:	6021      	str	r1, [r4, #0]
 80073ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	0800857d 	.word	0x0800857d
 80073d4:	08008600 	.word	0x08008600

080073d8 <__multadd>:
 80073d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073dc:	690d      	ldr	r5, [r1, #16]
 80073de:	4607      	mov	r7, r0
 80073e0:	460c      	mov	r4, r1
 80073e2:	461e      	mov	r6, r3
 80073e4:	f101 0c14 	add.w	ip, r1, #20
 80073e8:	2000      	movs	r0, #0
 80073ea:	f8dc 3000 	ldr.w	r3, [ip]
 80073ee:	b299      	uxth	r1, r3
 80073f0:	fb02 6101 	mla	r1, r2, r1, r6
 80073f4:	0c1e      	lsrs	r6, r3, #16
 80073f6:	0c0b      	lsrs	r3, r1, #16
 80073f8:	fb02 3306 	mla	r3, r2, r6, r3
 80073fc:	b289      	uxth	r1, r1
 80073fe:	3001      	adds	r0, #1
 8007400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007404:	4285      	cmp	r5, r0
 8007406:	f84c 1b04 	str.w	r1, [ip], #4
 800740a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800740e:	dcec      	bgt.n	80073ea <__multadd+0x12>
 8007410:	b30e      	cbz	r6, 8007456 <__multadd+0x7e>
 8007412:	68a3      	ldr	r3, [r4, #8]
 8007414:	42ab      	cmp	r3, r5
 8007416:	dc19      	bgt.n	800744c <__multadd+0x74>
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	4638      	mov	r0, r7
 800741c:	3101      	adds	r1, #1
 800741e:	f7ff ff79 	bl	8007314 <_Balloc>
 8007422:	4680      	mov	r8, r0
 8007424:	b928      	cbnz	r0, 8007432 <__multadd+0x5a>
 8007426:	4602      	mov	r2, r0
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <__multadd+0x84>)
 800742a:	480d      	ldr	r0, [pc, #52]	; (8007460 <__multadd+0x88>)
 800742c:	21b5      	movs	r1, #181	; 0xb5
 800742e:	f7fe ff65 	bl	80062fc <__assert_func>
 8007432:	6922      	ldr	r2, [r4, #16]
 8007434:	3202      	adds	r2, #2
 8007436:	f104 010c 	add.w	r1, r4, #12
 800743a:	0092      	lsls	r2, r2, #2
 800743c:	300c      	adds	r0, #12
 800743e:	f7fe f902 	bl	8005646 <memcpy>
 8007442:	4621      	mov	r1, r4
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff ffa5 	bl	8007394 <_Bfree>
 800744a:	4644      	mov	r4, r8
 800744c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007450:	3501      	adds	r5, #1
 8007452:	615e      	str	r6, [r3, #20]
 8007454:	6125      	str	r5, [r4, #16]
 8007456:	4620      	mov	r0, r4
 8007458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745c:	080085ef 	.word	0x080085ef
 8007460:	08008600 	.word	0x08008600

08007464 <__hi0bits>:
 8007464:	0c03      	lsrs	r3, r0, #16
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	b9d3      	cbnz	r3, 80074a0 <__hi0bits+0x3c>
 800746a:	0400      	lsls	r0, r0, #16
 800746c:	2310      	movs	r3, #16
 800746e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007472:	bf04      	itt	eq
 8007474:	0200      	lsleq	r0, r0, #8
 8007476:	3308      	addeq	r3, #8
 8007478:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800747c:	bf04      	itt	eq
 800747e:	0100      	lsleq	r0, r0, #4
 8007480:	3304      	addeq	r3, #4
 8007482:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007486:	bf04      	itt	eq
 8007488:	0080      	lsleq	r0, r0, #2
 800748a:	3302      	addeq	r3, #2
 800748c:	2800      	cmp	r0, #0
 800748e:	db05      	blt.n	800749c <__hi0bits+0x38>
 8007490:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007494:	f103 0301 	add.w	r3, r3, #1
 8007498:	bf08      	it	eq
 800749a:	2320      	moveq	r3, #32
 800749c:	4618      	mov	r0, r3
 800749e:	4770      	bx	lr
 80074a0:	2300      	movs	r3, #0
 80074a2:	e7e4      	b.n	800746e <__hi0bits+0xa>

080074a4 <__lo0bits>:
 80074a4:	6803      	ldr	r3, [r0, #0]
 80074a6:	f013 0207 	ands.w	r2, r3, #7
 80074aa:	4601      	mov	r1, r0
 80074ac:	d00b      	beq.n	80074c6 <__lo0bits+0x22>
 80074ae:	07da      	lsls	r2, r3, #31
 80074b0:	d423      	bmi.n	80074fa <__lo0bits+0x56>
 80074b2:	0798      	lsls	r0, r3, #30
 80074b4:	bf49      	itett	mi
 80074b6:	085b      	lsrmi	r3, r3, #1
 80074b8:	089b      	lsrpl	r3, r3, #2
 80074ba:	2001      	movmi	r0, #1
 80074bc:	600b      	strmi	r3, [r1, #0]
 80074be:	bf5c      	itt	pl
 80074c0:	600b      	strpl	r3, [r1, #0]
 80074c2:	2002      	movpl	r0, #2
 80074c4:	4770      	bx	lr
 80074c6:	b298      	uxth	r0, r3
 80074c8:	b9a8      	cbnz	r0, 80074f6 <__lo0bits+0x52>
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	2010      	movs	r0, #16
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	b90a      	cbnz	r2, 80074d6 <__lo0bits+0x32>
 80074d2:	3008      	adds	r0, #8
 80074d4:	0a1b      	lsrs	r3, r3, #8
 80074d6:	071a      	lsls	r2, r3, #28
 80074d8:	bf04      	itt	eq
 80074da:	091b      	lsreq	r3, r3, #4
 80074dc:	3004      	addeq	r0, #4
 80074de:	079a      	lsls	r2, r3, #30
 80074e0:	bf04      	itt	eq
 80074e2:	089b      	lsreq	r3, r3, #2
 80074e4:	3002      	addeq	r0, #2
 80074e6:	07da      	lsls	r2, r3, #31
 80074e8:	d403      	bmi.n	80074f2 <__lo0bits+0x4e>
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	f100 0001 	add.w	r0, r0, #1
 80074f0:	d005      	beq.n	80074fe <__lo0bits+0x5a>
 80074f2:	600b      	str	r3, [r1, #0]
 80074f4:	4770      	bx	lr
 80074f6:	4610      	mov	r0, r2
 80074f8:	e7e9      	b.n	80074ce <__lo0bits+0x2a>
 80074fa:	2000      	movs	r0, #0
 80074fc:	4770      	bx	lr
 80074fe:	2020      	movs	r0, #32
 8007500:	4770      	bx	lr
	...

08007504 <__i2b>:
 8007504:	b510      	push	{r4, lr}
 8007506:	460c      	mov	r4, r1
 8007508:	2101      	movs	r1, #1
 800750a:	f7ff ff03 	bl	8007314 <_Balloc>
 800750e:	4602      	mov	r2, r0
 8007510:	b928      	cbnz	r0, 800751e <__i2b+0x1a>
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <__i2b+0x24>)
 8007514:	4805      	ldr	r0, [pc, #20]	; (800752c <__i2b+0x28>)
 8007516:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800751a:	f7fe feef 	bl	80062fc <__assert_func>
 800751e:	2301      	movs	r3, #1
 8007520:	6144      	str	r4, [r0, #20]
 8007522:	6103      	str	r3, [r0, #16]
 8007524:	bd10      	pop	{r4, pc}
 8007526:	bf00      	nop
 8007528:	080085ef 	.word	0x080085ef
 800752c:	08008600 	.word	0x08008600

08007530 <__multiply>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	4691      	mov	r9, r2
 8007536:	690a      	ldr	r2, [r1, #16]
 8007538:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800753c:	429a      	cmp	r2, r3
 800753e:	bfb8      	it	lt
 8007540:	460b      	movlt	r3, r1
 8007542:	460c      	mov	r4, r1
 8007544:	bfbc      	itt	lt
 8007546:	464c      	movlt	r4, r9
 8007548:	4699      	movlt	r9, r3
 800754a:	6927      	ldr	r7, [r4, #16]
 800754c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007550:	68a3      	ldr	r3, [r4, #8]
 8007552:	6861      	ldr	r1, [r4, #4]
 8007554:	eb07 060a 	add.w	r6, r7, sl
 8007558:	42b3      	cmp	r3, r6
 800755a:	b085      	sub	sp, #20
 800755c:	bfb8      	it	lt
 800755e:	3101      	addlt	r1, #1
 8007560:	f7ff fed8 	bl	8007314 <_Balloc>
 8007564:	b930      	cbnz	r0, 8007574 <__multiply+0x44>
 8007566:	4602      	mov	r2, r0
 8007568:	4b44      	ldr	r3, [pc, #272]	; (800767c <__multiply+0x14c>)
 800756a:	4845      	ldr	r0, [pc, #276]	; (8007680 <__multiply+0x150>)
 800756c:	f240 115d 	movw	r1, #349	; 0x15d
 8007570:	f7fe fec4 	bl	80062fc <__assert_func>
 8007574:	f100 0514 	add.w	r5, r0, #20
 8007578:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800757c:	462b      	mov	r3, r5
 800757e:	2200      	movs	r2, #0
 8007580:	4543      	cmp	r3, r8
 8007582:	d321      	bcc.n	80075c8 <__multiply+0x98>
 8007584:	f104 0314 	add.w	r3, r4, #20
 8007588:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800758c:	f109 0314 	add.w	r3, r9, #20
 8007590:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007594:	9202      	str	r2, [sp, #8]
 8007596:	1b3a      	subs	r2, r7, r4
 8007598:	3a15      	subs	r2, #21
 800759a:	f022 0203 	bic.w	r2, r2, #3
 800759e:	3204      	adds	r2, #4
 80075a0:	f104 0115 	add.w	r1, r4, #21
 80075a4:	428f      	cmp	r7, r1
 80075a6:	bf38      	it	cc
 80075a8:	2204      	movcc	r2, #4
 80075aa:	9201      	str	r2, [sp, #4]
 80075ac:	9a02      	ldr	r2, [sp, #8]
 80075ae:	9303      	str	r3, [sp, #12]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d80c      	bhi.n	80075ce <__multiply+0x9e>
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	dd03      	ble.n	80075c0 <__multiply+0x90>
 80075b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d05a      	beq.n	8007676 <__multiply+0x146>
 80075c0:	6106      	str	r6, [r0, #16]
 80075c2:	b005      	add	sp, #20
 80075c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c8:	f843 2b04 	str.w	r2, [r3], #4
 80075cc:	e7d8      	b.n	8007580 <__multiply+0x50>
 80075ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80075d2:	f1ba 0f00 	cmp.w	sl, #0
 80075d6:	d024      	beq.n	8007622 <__multiply+0xf2>
 80075d8:	f104 0e14 	add.w	lr, r4, #20
 80075dc:	46a9      	mov	r9, r5
 80075de:	f04f 0c00 	mov.w	ip, #0
 80075e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075e6:	f8d9 1000 	ldr.w	r1, [r9]
 80075ea:	fa1f fb82 	uxth.w	fp, r2
 80075ee:	b289      	uxth	r1, r1
 80075f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80075f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075f8:	f8d9 2000 	ldr.w	r2, [r9]
 80075fc:	4461      	add	r1, ip
 80075fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007602:	fb0a c20b 	mla	r2, sl, fp, ip
 8007606:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800760a:	b289      	uxth	r1, r1
 800760c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007610:	4577      	cmp	r7, lr
 8007612:	f849 1b04 	str.w	r1, [r9], #4
 8007616:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800761a:	d8e2      	bhi.n	80075e2 <__multiply+0xb2>
 800761c:	9a01      	ldr	r2, [sp, #4]
 800761e:	f845 c002 	str.w	ip, [r5, r2]
 8007622:	9a03      	ldr	r2, [sp, #12]
 8007624:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007628:	3304      	adds	r3, #4
 800762a:	f1b9 0f00 	cmp.w	r9, #0
 800762e:	d020      	beq.n	8007672 <__multiply+0x142>
 8007630:	6829      	ldr	r1, [r5, #0]
 8007632:	f104 0c14 	add.w	ip, r4, #20
 8007636:	46ae      	mov	lr, r5
 8007638:	f04f 0a00 	mov.w	sl, #0
 800763c:	f8bc b000 	ldrh.w	fp, [ip]
 8007640:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007644:	fb09 220b 	mla	r2, r9, fp, r2
 8007648:	4492      	add	sl, r2
 800764a:	b289      	uxth	r1, r1
 800764c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007650:	f84e 1b04 	str.w	r1, [lr], #4
 8007654:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007658:	f8be 1000 	ldrh.w	r1, [lr]
 800765c:	0c12      	lsrs	r2, r2, #16
 800765e:	fb09 1102 	mla	r1, r9, r2, r1
 8007662:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007666:	4567      	cmp	r7, ip
 8007668:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800766c:	d8e6      	bhi.n	800763c <__multiply+0x10c>
 800766e:	9a01      	ldr	r2, [sp, #4]
 8007670:	50a9      	str	r1, [r5, r2]
 8007672:	3504      	adds	r5, #4
 8007674:	e79a      	b.n	80075ac <__multiply+0x7c>
 8007676:	3e01      	subs	r6, #1
 8007678:	e79c      	b.n	80075b4 <__multiply+0x84>
 800767a:	bf00      	nop
 800767c:	080085ef 	.word	0x080085ef
 8007680:	08008600 	.word	0x08008600

08007684 <__pow5mult>:
 8007684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007688:	4615      	mov	r5, r2
 800768a:	f012 0203 	ands.w	r2, r2, #3
 800768e:	4606      	mov	r6, r0
 8007690:	460f      	mov	r7, r1
 8007692:	d007      	beq.n	80076a4 <__pow5mult+0x20>
 8007694:	4c25      	ldr	r4, [pc, #148]	; (800772c <__pow5mult+0xa8>)
 8007696:	3a01      	subs	r2, #1
 8007698:	2300      	movs	r3, #0
 800769a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800769e:	f7ff fe9b 	bl	80073d8 <__multadd>
 80076a2:	4607      	mov	r7, r0
 80076a4:	10ad      	asrs	r5, r5, #2
 80076a6:	d03d      	beq.n	8007724 <__pow5mult+0xa0>
 80076a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076aa:	b97c      	cbnz	r4, 80076cc <__pow5mult+0x48>
 80076ac:	2010      	movs	r0, #16
 80076ae:	f7ff fe1d 	bl	80072ec <malloc>
 80076b2:	4602      	mov	r2, r0
 80076b4:	6270      	str	r0, [r6, #36]	; 0x24
 80076b6:	b928      	cbnz	r0, 80076c4 <__pow5mult+0x40>
 80076b8:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <__pow5mult+0xac>)
 80076ba:	481e      	ldr	r0, [pc, #120]	; (8007734 <__pow5mult+0xb0>)
 80076bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076c0:	f7fe fe1c 	bl	80062fc <__assert_func>
 80076c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076c8:	6004      	str	r4, [r0, #0]
 80076ca:	60c4      	str	r4, [r0, #12]
 80076cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076d4:	b94c      	cbnz	r4, 80076ea <__pow5mult+0x66>
 80076d6:	f240 2171 	movw	r1, #625	; 0x271
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ff12 	bl	8007504 <__i2b>
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80076e6:	4604      	mov	r4, r0
 80076e8:	6003      	str	r3, [r0, #0]
 80076ea:	f04f 0900 	mov.w	r9, #0
 80076ee:	07eb      	lsls	r3, r5, #31
 80076f0:	d50a      	bpl.n	8007708 <__pow5mult+0x84>
 80076f2:	4639      	mov	r1, r7
 80076f4:	4622      	mov	r2, r4
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7ff ff1a 	bl	8007530 <__multiply>
 80076fc:	4639      	mov	r1, r7
 80076fe:	4680      	mov	r8, r0
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff fe47 	bl	8007394 <_Bfree>
 8007706:	4647      	mov	r7, r8
 8007708:	106d      	asrs	r5, r5, #1
 800770a:	d00b      	beq.n	8007724 <__pow5mult+0xa0>
 800770c:	6820      	ldr	r0, [r4, #0]
 800770e:	b938      	cbnz	r0, 8007720 <__pow5mult+0x9c>
 8007710:	4622      	mov	r2, r4
 8007712:	4621      	mov	r1, r4
 8007714:	4630      	mov	r0, r6
 8007716:	f7ff ff0b 	bl	8007530 <__multiply>
 800771a:	6020      	str	r0, [r4, #0]
 800771c:	f8c0 9000 	str.w	r9, [r0]
 8007720:	4604      	mov	r4, r0
 8007722:	e7e4      	b.n	80076ee <__pow5mult+0x6a>
 8007724:	4638      	mov	r0, r7
 8007726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772a:	bf00      	nop
 800772c:	08008750 	.word	0x08008750
 8007730:	0800857d 	.word	0x0800857d
 8007734:	08008600 	.word	0x08008600

08007738 <__lshift>:
 8007738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	460c      	mov	r4, r1
 800773e:	6849      	ldr	r1, [r1, #4]
 8007740:	6923      	ldr	r3, [r4, #16]
 8007742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	4607      	mov	r7, r0
 800774a:	4691      	mov	r9, r2
 800774c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007750:	f108 0601 	add.w	r6, r8, #1
 8007754:	42b3      	cmp	r3, r6
 8007756:	db0b      	blt.n	8007770 <__lshift+0x38>
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff fddb 	bl	8007314 <_Balloc>
 800775e:	4605      	mov	r5, r0
 8007760:	b948      	cbnz	r0, 8007776 <__lshift+0x3e>
 8007762:	4602      	mov	r2, r0
 8007764:	4b2a      	ldr	r3, [pc, #168]	; (8007810 <__lshift+0xd8>)
 8007766:	482b      	ldr	r0, [pc, #172]	; (8007814 <__lshift+0xdc>)
 8007768:	f240 11d9 	movw	r1, #473	; 0x1d9
 800776c:	f7fe fdc6 	bl	80062fc <__assert_func>
 8007770:	3101      	adds	r1, #1
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	e7ee      	b.n	8007754 <__lshift+0x1c>
 8007776:	2300      	movs	r3, #0
 8007778:	f100 0114 	add.w	r1, r0, #20
 800777c:	f100 0210 	add.w	r2, r0, #16
 8007780:	4618      	mov	r0, r3
 8007782:	4553      	cmp	r3, sl
 8007784:	db37      	blt.n	80077f6 <__lshift+0xbe>
 8007786:	6920      	ldr	r0, [r4, #16]
 8007788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800778c:	f104 0314 	add.w	r3, r4, #20
 8007790:	f019 091f 	ands.w	r9, r9, #31
 8007794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007798:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800779c:	d02f      	beq.n	80077fe <__lshift+0xc6>
 800779e:	f1c9 0e20 	rsb	lr, r9, #32
 80077a2:	468a      	mov	sl, r1
 80077a4:	f04f 0c00 	mov.w	ip, #0
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	fa02 f209 	lsl.w	r2, r2, r9
 80077ae:	ea42 020c 	orr.w	r2, r2, ip
 80077b2:	f84a 2b04 	str.w	r2, [sl], #4
 80077b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ba:	4298      	cmp	r0, r3
 80077bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80077c0:	d8f2      	bhi.n	80077a8 <__lshift+0x70>
 80077c2:	1b03      	subs	r3, r0, r4
 80077c4:	3b15      	subs	r3, #21
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	3304      	adds	r3, #4
 80077cc:	f104 0215 	add.w	r2, r4, #21
 80077d0:	4290      	cmp	r0, r2
 80077d2:	bf38      	it	cc
 80077d4:	2304      	movcc	r3, #4
 80077d6:	f841 c003 	str.w	ip, [r1, r3]
 80077da:	f1bc 0f00 	cmp.w	ip, #0
 80077de:	d001      	beq.n	80077e4 <__lshift+0xac>
 80077e0:	f108 0602 	add.w	r6, r8, #2
 80077e4:	3e01      	subs	r6, #1
 80077e6:	4638      	mov	r0, r7
 80077e8:	612e      	str	r6, [r5, #16]
 80077ea:	4621      	mov	r1, r4
 80077ec:	f7ff fdd2 	bl	8007394 <_Bfree>
 80077f0:	4628      	mov	r0, r5
 80077f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80077fa:	3301      	adds	r3, #1
 80077fc:	e7c1      	b.n	8007782 <__lshift+0x4a>
 80077fe:	3904      	subs	r1, #4
 8007800:	f853 2b04 	ldr.w	r2, [r3], #4
 8007804:	f841 2f04 	str.w	r2, [r1, #4]!
 8007808:	4298      	cmp	r0, r3
 800780a:	d8f9      	bhi.n	8007800 <__lshift+0xc8>
 800780c:	e7ea      	b.n	80077e4 <__lshift+0xac>
 800780e:	bf00      	nop
 8007810:	080085ef 	.word	0x080085ef
 8007814:	08008600 	.word	0x08008600

08007818 <__mcmp>:
 8007818:	b530      	push	{r4, r5, lr}
 800781a:	6902      	ldr	r2, [r0, #16]
 800781c:	690c      	ldr	r4, [r1, #16]
 800781e:	1b12      	subs	r2, r2, r4
 8007820:	d10e      	bne.n	8007840 <__mcmp+0x28>
 8007822:	f100 0314 	add.w	r3, r0, #20
 8007826:	3114      	adds	r1, #20
 8007828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800782c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007838:	42a5      	cmp	r5, r4
 800783a:	d003      	beq.n	8007844 <__mcmp+0x2c>
 800783c:	d305      	bcc.n	800784a <__mcmp+0x32>
 800783e:	2201      	movs	r2, #1
 8007840:	4610      	mov	r0, r2
 8007842:	bd30      	pop	{r4, r5, pc}
 8007844:	4283      	cmp	r3, r0
 8007846:	d3f3      	bcc.n	8007830 <__mcmp+0x18>
 8007848:	e7fa      	b.n	8007840 <__mcmp+0x28>
 800784a:	f04f 32ff 	mov.w	r2, #4294967295
 800784e:	e7f7      	b.n	8007840 <__mcmp+0x28>

08007850 <__mdiff>:
 8007850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	460c      	mov	r4, r1
 8007856:	4606      	mov	r6, r0
 8007858:	4611      	mov	r1, r2
 800785a:	4620      	mov	r0, r4
 800785c:	4690      	mov	r8, r2
 800785e:	f7ff ffdb 	bl	8007818 <__mcmp>
 8007862:	1e05      	subs	r5, r0, #0
 8007864:	d110      	bne.n	8007888 <__mdiff+0x38>
 8007866:	4629      	mov	r1, r5
 8007868:	4630      	mov	r0, r6
 800786a:	f7ff fd53 	bl	8007314 <_Balloc>
 800786e:	b930      	cbnz	r0, 800787e <__mdiff+0x2e>
 8007870:	4b3a      	ldr	r3, [pc, #232]	; (800795c <__mdiff+0x10c>)
 8007872:	4602      	mov	r2, r0
 8007874:	f240 2132 	movw	r1, #562	; 0x232
 8007878:	4839      	ldr	r0, [pc, #228]	; (8007960 <__mdiff+0x110>)
 800787a:	f7fe fd3f 	bl	80062fc <__assert_func>
 800787e:	2301      	movs	r3, #1
 8007880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007888:	bfa4      	itt	ge
 800788a:	4643      	movge	r3, r8
 800788c:	46a0      	movge	r8, r4
 800788e:	4630      	mov	r0, r6
 8007890:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007894:	bfa6      	itte	ge
 8007896:	461c      	movge	r4, r3
 8007898:	2500      	movge	r5, #0
 800789a:	2501      	movlt	r5, #1
 800789c:	f7ff fd3a 	bl	8007314 <_Balloc>
 80078a0:	b920      	cbnz	r0, 80078ac <__mdiff+0x5c>
 80078a2:	4b2e      	ldr	r3, [pc, #184]	; (800795c <__mdiff+0x10c>)
 80078a4:	4602      	mov	r2, r0
 80078a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078aa:	e7e5      	b.n	8007878 <__mdiff+0x28>
 80078ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078b0:	6926      	ldr	r6, [r4, #16]
 80078b2:	60c5      	str	r5, [r0, #12]
 80078b4:	f104 0914 	add.w	r9, r4, #20
 80078b8:	f108 0514 	add.w	r5, r8, #20
 80078bc:	f100 0e14 	add.w	lr, r0, #20
 80078c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80078c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078c8:	f108 0210 	add.w	r2, r8, #16
 80078cc:	46f2      	mov	sl, lr
 80078ce:	2100      	movs	r1, #0
 80078d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80078d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078d8:	fa1f f883 	uxth.w	r8, r3
 80078dc:	fa11 f18b 	uxtah	r1, r1, fp
 80078e0:	0c1b      	lsrs	r3, r3, #16
 80078e2:	eba1 0808 	sub.w	r8, r1, r8
 80078e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078ee:	fa1f f888 	uxth.w	r8, r8
 80078f2:	1419      	asrs	r1, r3, #16
 80078f4:	454e      	cmp	r6, r9
 80078f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078fa:	f84a 3b04 	str.w	r3, [sl], #4
 80078fe:	d8e7      	bhi.n	80078d0 <__mdiff+0x80>
 8007900:	1b33      	subs	r3, r6, r4
 8007902:	3b15      	subs	r3, #21
 8007904:	f023 0303 	bic.w	r3, r3, #3
 8007908:	3304      	adds	r3, #4
 800790a:	3415      	adds	r4, #21
 800790c:	42a6      	cmp	r6, r4
 800790e:	bf38      	it	cc
 8007910:	2304      	movcc	r3, #4
 8007912:	441d      	add	r5, r3
 8007914:	4473      	add	r3, lr
 8007916:	469e      	mov	lr, r3
 8007918:	462e      	mov	r6, r5
 800791a:	4566      	cmp	r6, ip
 800791c:	d30e      	bcc.n	800793c <__mdiff+0xec>
 800791e:	f10c 0203 	add.w	r2, ip, #3
 8007922:	1b52      	subs	r2, r2, r5
 8007924:	f022 0203 	bic.w	r2, r2, #3
 8007928:	3d03      	subs	r5, #3
 800792a:	45ac      	cmp	ip, r5
 800792c:	bf38      	it	cc
 800792e:	2200      	movcc	r2, #0
 8007930:	441a      	add	r2, r3
 8007932:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007936:	b17b      	cbz	r3, 8007958 <__mdiff+0x108>
 8007938:	6107      	str	r7, [r0, #16]
 800793a:	e7a3      	b.n	8007884 <__mdiff+0x34>
 800793c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007940:	fa11 f288 	uxtah	r2, r1, r8
 8007944:	1414      	asrs	r4, r2, #16
 8007946:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800794a:	b292      	uxth	r2, r2
 800794c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007950:	f84e 2b04 	str.w	r2, [lr], #4
 8007954:	1421      	asrs	r1, r4, #16
 8007956:	e7e0      	b.n	800791a <__mdiff+0xca>
 8007958:	3f01      	subs	r7, #1
 800795a:	e7ea      	b.n	8007932 <__mdiff+0xe2>
 800795c:	080085ef 	.word	0x080085ef
 8007960:	08008600 	.word	0x08008600

08007964 <__d2b>:
 8007964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007968:	4689      	mov	r9, r1
 800796a:	2101      	movs	r1, #1
 800796c:	ec57 6b10 	vmov	r6, r7, d0
 8007970:	4690      	mov	r8, r2
 8007972:	f7ff fccf 	bl	8007314 <_Balloc>
 8007976:	4604      	mov	r4, r0
 8007978:	b930      	cbnz	r0, 8007988 <__d2b+0x24>
 800797a:	4602      	mov	r2, r0
 800797c:	4b25      	ldr	r3, [pc, #148]	; (8007a14 <__d2b+0xb0>)
 800797e:	4826      	ldr	r0, [pc, #152]	; (8007a18 <__d2b+0xb4>)
 8007980:	f240 310a 	movw	r1, #778	; 0x30a
 8007984:	f7fe fcba 	bl	80062fc <__assert_func>
 8007988:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800798c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007990:	bb35      	cbnz	r5, 80079e0 <__d2b+0x7c>
 8007992:	2e00      	cmp	r6, #0
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	d028      	beq.n	80079ea <__d2b+0x86>
 8007998:	4668      	mov	r0, sp
 800799a:	9600      	str	r6, [sp, #0]
 800799c:	f7ff fd82 	bl	80074a4 <__lo0bits>
 80079a0:	9900      	ldr	r1, [sp, #0]
 80079a2:	b300      	cbz	r0, 80079e6 <__d2b+0x82>
 80079a4:	9a01      	ldr	r2, [sp, #4]
 80079a6:	f1c0 0320 	rsb	r3, r0, #32
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	430b      	orrs	r3, r1
 80079b0:	40c2      	lsrs	r2, r0
 80079b2:	6163      	str	r3, [r4, #20]
 80079b4:	9201      	str	r2, [sp, #4]
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	61a3      	str	r3, [r4, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bf14      	ite	ne
 80079be:	2202      	movne	r2, #2
 80079c0:	2201      	moveq	r2, #1
 80079c2:	6122      	str	r2, [r4, #16]
 80079c4:	b1d5      	cbz	r5, 80079fc <__d2b+0x98>
 80079c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079ca:	4405      	add	r5, r0
 80079cc:	f8c9 5000 	str.w	r5, [r9]
 80079d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079d4:	f8c8 0000 	str.w	r0, [r8]
 80079d8:	4620      	mov	r0, r4
 80079da:	b003      	add	sp, #12
 80079dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079e4:	e7d5      	b.n	8007992 <__d2b+0x2e>
 80079e6:	6161      	str	r1, [r4, #20]
 80079e8:	e7e5      	b.n	80079b6 <__d2b+0x52>
 80079ea:	a801      	add	r0, sp, #4
 80079ec:	f7ff fd5a 	bl	80074a4 <__lo0bits>
 80079f0:	9b01      	ldr	r3, [sp, #4]
 80079f2:	6163      	str	r3, [r4, #20]
 80079f4:	2201      	movs	r2, #1
 80079f6:	6122      	str	r2, [r4, #16]
 80079f8:	3020      	adds	r0, #32
 80079fa:	e7e3      	b.n	80079c4 <__d2b+0x60>
 80079fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a04:	f8c9 0000 	str.w	r0, [r9]
 8007a08:	6918      	ldr	r0, [r3, #16]
 8007a0a:	f7ff fd2b 	bl	8007464 <__hi0bits>
 8007a0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a12:	e7df      	b.n	80079d4 <__d2b+0x70>
 8007a14:	080085ef 	.word	0x080085ef
 8007a18:	08008600 	.word	0x08008600

08007a1c <_calloc_r>:
 8007a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a1e:	fba1 2402 	umull	r2, r4, r1, r2
 8007a22:	b94c      	cbnz	r4, 8007a38 <_calloc_r+0x1c>
 8007a24:	4611      	mov	r1, r2
 8007a26:	9201      	str	r2, [sp, #4]
 8007a28:	f7fd fe44 	bl	80056b4 <_malloc_r>
 8007a2c:	9a01      	ldr	r2, [sp, #4]
 8007a2e:	4605      	mov	r5, r0
 8007a30:	b930      	cbnz	r0, 8007a40 <_calloc_r+0x24>
 8007a32:	4628      	mov	r0, r5
 8007a34:	b003      	add	sp, #12
 8007a36:	bd30      	pop	{r4, r5, pc}
 8007a38:	220c      	movs	r2, #12
 8007a3a:	6002      	str	r2, [r0, #0]
 8007a3c:	2500      	movs	r5, #0
 8007a3e:	e7f8      	b.n	8007a32 <_calloc_r+0x16>
 8007a40:	4621      	mov	r1, r4
 8007a42:	f7fd fe0e 	bl	8005662 <memset>
 8007a46:	e7f4      	b.n	8007a32 <_calloc_r+0x16>

08007a48 <_free_r>:
 8007a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a4a:	2900      	cmp	r1, #0
 8007a4c:	d044      	beq.n	8007ad8 <_free_r+0x90>
 8007a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a52:	9001      	str	r0, [sp, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f1a1 0404 	sub.w	r4, r1, #4
 8007a5a:	bfb8      	it	lt
 8007a5c:	18e4      	addlt	r4, r4, r3
 8007a5e:	f7ff fc4d 	bl	80072fc <__malloc_lock>
 8007a62:	4a1e      	ldr	r2, [pc, #120]	; (8007adc <_free_r+0x94>)
 8007a64:	9801      	ldr	r0, [sp, #4]
 8007a66:	6813      	ldr	r3, [r2, #0]
 8007a68:	b933      	cbnz	r3, 8007a78 <_free_r+0x30>
 8007a6a:	6063      	str	r3, [r4, #4]
 8007a6c:	6014      	str	r4, [r2, #0]
 8007a6e:	b003      	add	sp, #12
 8007a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a74:	f7ff bc48 	b.w	8007308 <__malloc_unlock>
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d908      	bls.n	8007a8e <_free_r+0x46>
 8007a7c:	6825      	ldr	r5, [r4, #0]
 8007a7e:	1961      	adds	r1, r4, r5
 8007a80:	428b      	cmp	r3, r1
 8007a82:	bf01      	itttt	eq
 8007a84:	6819      	ldreq	r1, [r3, #0]
 8007a86:	685b      	ldreq	r3, [r3, #4]
 8007a88:	1949      	addeq	r1, r1, r5
 8007a8a:	6021      	streq	r1, [r4, #0]
 8007a8c:	e7ed      	b.n	8007a6a <_free_r+0x22>
 8007a8e:	461a      	mov	r2, r3
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	b10b      	cbz	r3, 8007a98 <_free_r+0x50>
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	d9fa      	bls.n	8007a8e <_free_r+0x46>
 8007a98:	6811      	ldr	r1, [r2, #0]
 8007a9a:	1855      	adds	r5, r2, r1
 8007a9c:	42a5      	cmp	r5, r4
 8007a9e:	d10b      	bne.n	8007ab8 <_free_r+0x70>
 8007aa0:	6824      	ldr	r4, [r4, #0]
 8007aa2:	4421      	add	r1, r4
 8007aa4:	1854      	adds	r4, r2, r1
 8007aa6:	42a3      	cmp	r3, r4
 8007aa8:	6011      	str	r1, [r2, #0]
 8007aaa:	d1e0      	bne.n	8007a6e <_free_r+0x26>
 8007aac:	681c      	ldr	r4, [r3, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	6053      	str	r3, [r2, #4]
 8007ab2:	4421      	add	r1, r4
 8007ab4:	6011      	str	r1, [r2, #0]
 8007ab6:	e7da      	b.n	8007a6e <_free_r+0x26>
 8007ab8:	d902      	bls.n	8007ac0 <_free_r+0x78>
 8007aba:	230c      	movs	r3, #12
 8007abc:	6003      	str	r3, [r0, #0]
 8007abe:	e7d6      	b.n	8007a6e <_free_r+0x26>
 8007ac0:	6825      	ldr	r5, [r4, #0]
 8007ac2:	1961      	adds	r1, r4, r5
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	bf04      	itt	eq
 8007ac8:	6819      	ldreq	r1, [r3, #0]
 8007aca:	685b      	ldreq	r3, [r3, #4]
 8007acc:	6063      	str	r3, [r4, #4]
 8007ace:	bf04      	itt	eq
 8007ad0:	1949      	addeq	r1, r1, r5
 8007ad2:	6021      	streq	r1, [r4, #0]
 8007ad4:	6054      	str	r4, [r2, #4]
 8007ad6:	e7ca      	b.n	8007a6e <_free_r+0x26>
 8007ad8:	b003      	add	sp, #12
 8007ada:	bd30      	pop	{r4, r5, pc}
 8007adc:	20000648 	.word	0x20000648

08007ae0 <__ssputs_r>:
 8007ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	688e      	ldr	r6, [r1, #8]
 8007ae6:	429e      	cmp	r6, r3
 8007ae8:	4682      	mov	sl, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	4690      	mov	r8, r2
 8007aee:	461f      	mov	r7, r3
 8007af0:	d838      	bhi.n	8007b64 <__ssputs_r+0x84>
 8007af2:	898a      	ldrh	r2, [r1, #12]
 8007af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007af8:	d032      	beq.n	8007b60 <__ssputs_r+0x80>
 8007afa:	6825      	ldr	r5, [r4, #0]
 8007afc:	6909      	ldr	r1, [r1, #16]
 8007afe:	eba5 0901 	sub.w	r9, r5, r1
 8007b02:	6965      	ldr	r5, [r4, #20]
 8007b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	444b      	add	r3, r9
 8007b10:	106d      	asrs	r5, r5, #1
 8007b12:	429d      	cmp	r5, r3
 8007b14:	bf38      	it	cc
 8007b16:	461d      	movcc	r5, r3
 8007b18:	0553      	lsls	r3, r2, #21
 8007b1a:	d531      	bpl.n	8007b80 <__ssputs_r+0xa0>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7fd fdc9 	bl	80056b4 <_malloc_r>
 8007b22:	4606      	mov	r6, r0
 8007b24:	b950      	cbnz	r0, 8007b3c <__ssputs_r+0x5c>
 8007b26:	230c      	movs	r3, #12
 8007b28:	f8ca 3000 	str.w	r3, [sl]
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b32:	81a3      	strh	r3, [r4, #12]
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3c:	6921      	ldr	r1, [r4, #16]
 8007b3e:	464a      	mov	r2, r9
 8007b40:	f7fd fd81 	bl	8005646 <memcpy>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	6126      	str	r6, [r4, #16]
 8007b52:	6165      	str	r5, [r4, #20]
 8007b54:	444e      	add	r6, r9
 8007b56:	eba5 0509 	sub.w	r5, r5, r9
 8007b5a:	6026      	str	r6, [r4, #0]
 8007b5c:	60a5      	str	r5, [r4, #8]
 8007b5e:	463e      	mov	r6, r7
 8007b60:	42be      	cmp	r6, r7
 8007b62:	d900      	bls.n	8007b66 <__ssputs_r+0x86>
 8007b64:	463e      	mov	r6, r7
 8007b66:	6820      	ldr	r0, [r4, #0]
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4641      	mov	r1, r8
 8007b6c:	f000 fabc 	bl	80080e8 <memmove>
 8007b70:	68a3      	ldr	r3, [r4, #8]
 8007b72:	1b9b      	subs	r3, r3, r6
 8007b74:	60a3      	str	r3, [r4, #8]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	4433      	add	r3, r6
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7db      	b.n	8007b38 <__ssputs_r+0x58>
 8007b80:	462a      	mov	r2, r5
 8007b82:	f000 facb 	bl	800811c <_realloc_r>
 8007b86:	4606      	mov	r6, r0
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d1e1      	bne.n	8007b50 <__ssputs_r+0x70>
 8007b8c:	6921      	ldr	r1, [r4, #16]
 8007b8e:	4650      	mov	r0, sl
 8007b90:	f7ff ff5a 	bl	8007a48 <_free_r>
 8007b94:	e7c7      	b.n	8007b26 <__ssputs_r+0x46>
	...

08007b98 <_svfiprintf_r>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	4698      	mov	r8, r3
 8007b9e:	898b      	ldrh	r3, [r1, #12]
 8007ba0:	061b      	lsls	r3, r3, #24
 8007ba2:	b09d      	sub	sp, #116	; 0x74
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	4614      	mov	r4, r2
 8007baa:	d50e      	bpl.n	8007bca <_svfiprintf_r+0x32>
 8007bac:	690b      	ldr	r3, [r1, #16]
 8007bae:	b963      	cbnz	r3, 8007bca <_svfiprintf_r+0x32>
 8007bb0:	2140      	movs	r1, #64	; 0x40
 8007bb2:	f7fd fd7f 	bl	80056b4 <_malloc_r>
 8007bb6:	6028      	str	r0, [r5, #0]
 8007bb8:	6128      	str	r0, [r5, #16]
 8007bba:	b920      	cbnz	r0, 8007bc6 <_svfiprintf_r+0x2e>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	e0d1      	b.n	8007d6a <_svfiprintf_r+0x1d2>
 8007bc6:	2340      	movs	r3, #64	; 0x40
 8007bc8:	616b      	str	r3, [r5, #20]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bce:	2320      	movs	r3, #32
 8007bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bd8:	2330      	movs	r3, #48	; 0x30
 8007bda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d84 <_svfiprintf_r+0x1ec>
 8007bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007be2:	f04f 0901 	mov.w	r9, #1
 8007be6:	4623      	mov	r3, r4
 8007be8:	469a      	mov	sl, r3
 8007bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bee:	b10a      	cbz	r2, 8007bf4 <_svfiprintf_r+0x5c>
 8007bf0:	2a25      	cmp	r2, #37	; 0x25
 8007bf2:	d1f9      	bne.n	8007be8 <_svfiprintf_r+0x50>
 8007bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bf8:	d00b      	beq.n	8007c12 <_svfiprintf_r+0x7a>
 8007bfa:	465b      	mov	r3, fp
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7ff ff6d 	bl	8007ae0 <__ssputs_r>
 8007c06:	3001      	adds	r0, #1
 8007c08:	f000 80aa 	beq.w	8007d60 <_svfiprintf_r+0x1c8>
 8007c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c0e:	445a      	add	r2, fp
 8007c10:	9209      	str	r2, [sp, #36]	; 0x24
 8007c12:	f89a 3000 	ldrb.w	r3, [sl]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 80a2 	beq.w	8007d60 <_svfiprintf_r+0x1c8>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c26:	f10a 0a01 	add.w	sl, sl, #1
 8007c2a:	9304      	str	r3, [sp, #16]
 8007c2c:	9307      	str	r3, [sp, #28]
 8007c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c32:	931a      	str	r3, [sp, #104]	; 0x68
 8007c34:	4654      	mov	r4, sl
 8007c36:	2205      	movs	r2, #5
 8007c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3c:	4851      	ldr	r0, [pc, #324]	; (8007d84 <_svfiprintf_r+0x1ec>)
 8007c3e:	f7f8 facf 	bl	80001e0 <memchr>
 8007c42:	9a04      	ldr	r2, [sp, #16]
 8007c44:	b9d8      	cbnz	r0, 8007c7e <_svfiprintf_r+0xe6>
 8007c46:	06d0      	lsls	r0, r2, #27
 8007c48:	bf44      	itt	mi
 8007c4a:	2320      	movmi	r3, #32
 8007c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c50:	0711      	lsls	r1, r2, #28
 8007c52:	bf44      	itt	mi
 8007c54:	232b      	movmi	r3, #43	; 0x2b
 8007c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c60:	d015      	beq.n	8007c8e <_svfiprintf_r+0xf6>
 8007c62:	9a07      	ldr	r2, [sp, #28]
 8007c64:	4654      	mov	r4, sl
 8007c66:	2000      	movs	r0, #0
 8007c68:	f04f 0c0a 	mov.w	ip, #10
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c72:	3b30      	subs	r3, #48	; 0x30
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d94e      	bls.n	8007d16 <_svfiprintf_r+0x17e>
 8007c78:	b1b0      	cbz	r0, 8007ca8 <_svfiprintf_r+0x110>
 8007c7a:	9207      	str	r2, [sp, #28]
 8007c7c:	e014      	b.n	8007ca8 <_svfiprintf_r+0x110>
 8007c7e:	eba0 0308 	sub.w	r3, r0, r8
 8007c82:	fa09 f303 	lsl.w	r3, r9, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	9304      	str	r3, [sp, #16]
 8007c8a:	46a2      	mov	sl, r4
 8007c8c:	e7d2      	b.n	8007c34 <_svfiprintf_r+0x9c>
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	1d19      	adds	r1, r3, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	9103      	str	r1, [sp, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bfbb      	ittet	lt
 8007c9a:	425b      	neglt	r3, r3
 8007c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ca0:	9307      	strge	r3, [sp, #28]
 8007ca2:	9307      	strlt	r3, [sp, #28]
 8007ca4:	bfb8      	it	lt
 8007ca6:	9204      	strlt	r2, [sp, #16]
 8007ca8:	7823      	ldrb	r3, [r4, #0]
 8007caa:	2b2e      	cmp	r3, #46	; 0x2e
 8007cac:	d10c      	bne.n	8007cc8 <_svfiprintf_r+0x130>
 8007cae:	7863      	ldrb	r3, [r4, #1]
 8007cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb2:	d135      	bne.n	8007d20 <_svfiprintf_r+0x188>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	1d1a      	adds	r2, r3, #4
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	9203      	str	r2, [sp, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bfb8      	it	lt
 8007cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cc4:	3402      	adds	r4, #2
 8007cc6:	9305      	str	r3, [sp, #20]
 8007cc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d94 <_svfiprintf_r+0x1fc>
 8007ccc:	7821      	ldrb	r1, [r4, #0]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	f7f8 fa85 	bl	80001e0 <memchr>
 8007cd6:	b140      	cbz	r0, 8007cea <_svfiprintf_r+0x152>
 8007cd8:	2340      	movs	r3, #64	; 0x40
 8007cda:	eba0 000a 	sub.w	r0, r0, sl
 8007cde:	fa03 f000 	lsl.w	r0, r3, r0
 8007ce2:	9b04      	ldr	r3, [sp, #16]
 8007ce4:	4303      	orrs	r3, r0
 8007ce6:	3401      	adds	r4, #1
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cee:	4826      	ldr	r0, [pc, #152]	; (8007d88 <_svfiprintf_r+0x1f0>)
 8007cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cf4:	2206      	movs	r2, #6
 8007cf6:	f7f8 fa73 	bl	80001e0 <memchr>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d038      	beq.n	8007d70 <_svfiprintf_r+0x1d8>
 8007cfe:	4b23      	ldr	r3, [pc, #140]	; (8007d8c <_svfiprintf_r+0x1f4>)
 8007d00:	bb1b      	cbnz	r3, 8007d4a <_svfiprintf_r+0x1b2>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	3307      	adds	r3, #7
 8007d06:	f023 0307 	bic.w	r3, r3, #7
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	9303      	str	r3, [sp, #12]
 8007d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d10:	4433      	add	r3, r6
 8007d12:	9309      	str	r3, [sp, #36]	; 0x24
 8007d14:	e767      	b.n	8007be6 <_svfiprintf_r+0x4e>
 8007d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	e7a5      	b.n	8007c6c <_svfiprintf_r+0xd4>
 8007d20:	2300      	movs	r3, #0
 8007d22:	3401      	adds	r4, #1
 8007d24:	9305      	str	r3, [sp, #20]
 8007d26:	4619      	mov	r1, r3
 8007d28:	f04f 0c0a 	mov.w	ip, #10
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d32:	3a30      	subs	r2, #48	; 0x30
 8007d34:	2a09      	cmp	r2, #9
 8007d36:	d903      	bls.n	8007d40 <_svfiprintf_r+0x1a8>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0c5      	beq.n	8007cc8 <_svfiprintf_r+0x130>
 8007d3c:	9105      	str	r1, [sp, #20]
 8007d3e:	e7c3      	b.n	8007cc8 <_svfiprintf_r+0x130>
 8007d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d44:	4604      	mov	r4, r0
 8007d46:	2301      	movs	r3, #1
 8007d48:	e7f0      	b.n	8007d2c <_svfiprintf_r+0x194>
 8007d4a:	ab03      	add	r3, sp, #12
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	462a      	mov	r2, r5
 8007d50:	4b0f      	ldr	r3, [pc, #60]	; (8007d90 <_svfiprintf_r+0x1f8>)
 8007d52:	a904      	add	r1, sp, #16
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7fd fdc1 	bl	80058dc <_printf_float>
 8007d5a:	1c42      	adds	r2, r0, #1
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	d1d6      	bne.n	8007d0e <_svfiprintf_r+0x176>
 8007d60:	89ab      	ldrh	r3, [r5, #12]
 8007d62:	065b      	lsls	r3, r3, #25
 8007d64:	f53f af2c 	bmi.w	8007bc0 <_svfiprintf_r+0x28>
 8007d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d6a:	b01d      	add	sp, #116	; 0x74
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d70:	ab03      	add	r3, sp, #12
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	462a      	mov	r2, r5
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <_svfiprintf_r+0x1f8>)
 8007d78:	a904      	add	r1, sp, #16
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f7fe f852 	bl	8005e24 <_printf_i>
 8007d80:	e7eb      	b.n	8007d5a <_svfiprintf_r+0x1c2>
 8007d82:	bf00      	nop
 8007d84:	0800875c 	.word	0x0800875c
 8007d88:	08008766 	.word	0x08008766
 8007d8c:	080058dd 	.word	0x080058dd
 8007d90:	08007ae1 	.word	0x08007ae1
 8007d94:	08008762 	.word	0x08008762

08007d98 <__sfputc_r>:
 8007d98:	6893      	ldr	r3, [r2, #8]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	b410      	push	{r4}
 8007da0:	6093      	str	r3, [r2, #8]
 8007da2:	da08      	bge.n	8007db6 <__sfputc_r+0x1e>
 8007da4:	6994      	ldr	r4, [r2, #24]
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	db01      	blt.n	8007dae <__sfputc_r+0x16>
 8007daa:	290a      	cmp	r1, #10
 8007dac:	d103      	bne.n	8007db6 <__sfputc_r+0x1e>
 8007dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db2:	f7fe b9d1 	b.w	8006158 <__swbuf_r>
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	1c58      	adds	r0, r3, #1
 8007dba:	6010      	str	r0, [r2, #0]
 8007dbc:	7019      	strb	r1, [r3, #0]
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <__sfputs_r>:
 8007dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc8:	4606      	mov	r6, r0
 8007dca:	460f      	mov	r7, r1
 8007dcc:	4614      	mov	r4, r2
 8007dce:	18d5      	adds	r5, r2, r3
 8007dd0:	42ac      	cmp	r4, r5
 8007dd2:	d101      	bne.n	8007dd8 <__sfputs_r+0x12>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e007      	b.n	8007de8 <__sfputs_r+0x22>
 8007dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ddc:	463a      	mov	r2, r7
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff ffda 	bl	8007d98 <__sfputc_r>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d1f3      	bne.n	8007dd0 <__sfputs_r+0xa>
 8007de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dec <_vfiprintf_r>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	460d      	mov	r5, r1
 8007df2:	b09d      	sub	sp, #116	; 0x74
 8007df4:	4614      	mov	r4, r2
 8007df6:	4698      	mov	r8, r3
 8007df8:	4606      	mov	r6, r0
 8007dfa:	b118      	cbz	r0, 8007e04 <_vfiprintf_r+0x18>
 8007dfc:	6983      	ldr	r3, [r0, #24]
 8007dfe:	b90b      	cbnz	r3, 8007e04 <_vfiprintf_r+0x18>
 8007e00:	f7fd fb5c 	bl	80054bc <__sinit>
 8007e04:	4b89      	ldr	r3, [pc, #548]	; (800802c <_vfiprintf_r+0x240>)
 8007e06:	429d      	cmp	r5, r3
 8007e08:	d11b      	bne.n	8007e42 <_vfiprintf_r+0x56>
 8007e0a:	6875      	ldr	r5, [r6, #4]
 8007e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e0e:	07d9      	lsls	r1, r3, #31
 8007e10:	d405      	bmi.n	8007e1e <_vfiprintf_r+0x32>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	059a      	lsls	r2, r3, #22
 8007e16:	d402      	bmi.n	8007e1e <_vfiprintf_r+0x32>
 8007e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e1a:	f7fd fc12 	bl	8005642 <__retarget_lock_acquire_recursive>
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	071b      	lsls	r3, r3, #28
 8007e22:	d501      	bpl.n	8007e28 <_vfiprintf_r+0x3c>
 8007e24:	692b      	ldr	r3, [r5, #16]
 8007e26:	b9eb      	cbnz	r3, 8007e64 <_vfiprintf_r+0x78>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7fe f9f8 	bl	8006220 <__swsetup_r>
 8007e30:	b1c0      	cbz	r0, 8007e64 <_vfiprintf_r+0x78>
 8007e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e34:	07dc      	lsls	r4, r3, #31
 8007e36:	d50e      	bpl.n	8007e56 <_vfiprintf_r+0x6a>
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	b01d      	add	sp, #116	; 0x74
 8007e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e42:	4b7b      	ldr	r3, [pc, #492]	; (8008030 <_vfiprintf_r+0x244>)
 8007e44:	429d      	cmp	r5, r3
 8007e46:	d101      	bne.n	8007e4c <_vfiprintf_r+0x60>
 8007e48:	68b5      	ldr	r5, [r6, #8]
 8007e4a:	e7df      	b.n	8007e0c <_vfiprintf_r+0x20>
 8007e4c:	4b79      	ldr	r3, [pc, #484]	; (8008034 <_vfiprintf_r+0x248>)
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	bf08      	it	eq
 8007e52:	68f5      	ldreq	r5, [r6, #12]
 8007e54:	e7da      	b.n	8007e0c <_vfiprintf_r+0x20>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	0598      	lsls	r0, r3, #22
 8007e5a:	d4ed      	bmi.n	8007e38 <_vfiprintf_r+0x4c>
 8007e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e5e:	f7fd fbf1 	bl	8005644 <__retarget_lock_release_recursive>
 8007e62:	e7e9      	b.n	8007e38 <_vfiprintf_r+0x4c>
 8007e64:	2300      	movs	r3, #0
 8007e66:	9309      	str	r3, [sp, #36]	; 0x24
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e72:	2330      	movs	r3, #48	; 0x30
 8007e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008038 <_vfiprintf_r+0x24c>
 8007e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e7c:	f04f 0901 	mov.w	r9, #1
 8007e80:	4623      	mov	r3, r4
 8007e82:	469a      	mov	sl, r3
 8007e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e88:	b10a      	cbz	r2, 8007e8e <_vfiprintf_r+0xa2>
 8007e8a:	2a25      	cmp	r2, #37	; 0x25
 8007e8c:	d1f9      	bne.n	8007e82 <_vfiprintf_r+0x96>
 8007e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e92:	d00b      	beq.n	8007eac <_vfiprintf_r+0xc0>
 8007e94:	465b      	mov	r3, fp
 8007e96:	4622      	mov	r2, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff ff93 	bl	8007dc6 <__sfputs_r>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	f000 80aa 	beq.w	8007ffa <_vfiprintf_r+0x20e>
 8007ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea8:	445a      	add	r2, fp
 8007eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8007eac:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 80a2 	beq.w	8007ffa <_vfiprintf_r+0x20e>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec0:	f10a 0a01 	add.w	sl, sl, #1
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	9307      	str	r3, [sp, #28]
 8007ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8007ece:	4654      	mov	r4, sl
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed6:	4858      	ldr	r0, [pc, #352]	; (8008038 <_vfiprintf_r+0x24c>)
 8007ed8:	f7f8 f982 	bl	80001e0 <memchr>
 8007edc:	9a04      	ldr	r2, [sp, #16]
 8007ede:	b9d8      	cbnz	r0, 8007f18 <_vfiprintf_r+0x12c>
 8007ee0:	06d1      	lsls	r1, r2, #27
 8007ee2:	bf44      	itt	mi
 8007ee4:	2320      	movmi	r3, #32
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eea:	0713      	lsls	r3, r2, #28
 8007eec:	bf44      	itt	mi
 8007eee:	232b      	movmi	r3, #43	; 0x2b
 8007ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8007efa:	d015      	beq.n	8007f28 <_vfiprintf_r+0x13c>
 8007efc:	9a07      	ldr	r2, [sp, #28]
 8007efe:	4654      	mov	r4, sl
 8007f00:	2000      	movs	r0, #0
 8007f02:	f04f 0c0a 	mov.w	ip, #10
 8007f06:	4621      	mov	r1, r4
 8007f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f0c:	3b30      	subs	r3, #48	; 0x30
 8007f0e:	2b09      	cmp	r3, #9
 8007f10:	d94e      	bls.n	8007fb0 <_vfiprintf_r+0x1c4>
 8007f12:	b1b0      	cbz	r0, 8007f42 <_vfiprintf_r+0x156>
 8007f14:	9207      	str	r2, [sp, #28]
 8007f16:	e014      	b.n	8007f42 <_vfiprintf_r+0x156>
 8007f18:	eba0 0308 	sub.w	r3, r0, r8
 8007f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f20:	4313      	orrs	r3, r2
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	46a2      	mov	sl, r4
 8007f26:	e7d2      	b.n	8007ece <_vfiprintf_r+0xe2>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	1d19      	adds	r1, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9103      	str	r1, [sp, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bfbb      	ittet	lt
 8007f34:	425b      	neglt	r3, r3
 8007f36:	f042 0202 	orrlt.w	r2, r2, #2
 8007f3a:	9307      	strge	r3, [sp, #28]
 8007f3c:	9307      	strlt	r3, [sp, #28]
 8007f3e:	bfb8      	it	lt
 8007f40:	9204      	strlt	r2, [sp, #16]
 8007f42:	7823      	ldrb	r3, [r4, #0]
 8007f44:	2b2e      	cmp	r3, #46	; 0x2e
 8007f46:	d10c      	bne.n	8007f62 <_vfiprintf_r+0x176>
 8007f48:	7863      	ldrb	r3, [r4, #1]
 8007f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4c:	d135      	bne.n	8007fba <_vfiprintf_r+0x1ce>
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	9203      	str	r2, [sp, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfb8      	it	lt
 8007f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f5e:	3402      	adds	r4, #2
 8007f60:	9305      	str	r3, [sp, #20]
 8007f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008048 <_vfiprintf_r+0x25c>
 8007f66:	7821      	ldrb	r1, [r4, #0]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	f7f8 f938 	bl	80001e0 <memchr>
 8007f70:	b140      	cbz	r0, 8007f84 <_vfiprintf_r+0x198>
 8007f72:	2340      	movs	r3, #64	; 0x40
 8007f74:	eba0 000a 	sub.w	r0, r0, sl
 8007f78:	fa03 f000 	lsl.w	r0, r3, r0
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	4303      	orrs	r3, r0
 8007f80:	3401      	adds	r4, #1
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	482c      	ldr	r0, [pc, #176]	; (800803c <_vfiprintf_r+0x250>)
 8007f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f8e:	2206      	movs	r2, #6
 8007f90:	f7f8 f926 	bl	80001e0 <memchr>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d03f      	beq.n	8008018 <_vfiprintf_r+0x22c>
 8007f98:	4b29      	ldr	r3, [pc, #164]	; (8008040 <_vfiprintf_r+0x254>)
 8007f9a:	bb1b      	cbnz	r3, 8007fe4 <_vfiprintf_r+0x1f8>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	3307      	adds	r3, #7
 8007fa0:	f023 0307 	bic.w	r3, r3, #7
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007faa:	443b      	add	r3, r7
 8007fac:	9309      	str	r3, [sp, #36]	; 0x24
 8007fae:	e767      	b.n	8007e80 <_vfiprintf_r+0x94>
 8007fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7a5      	b.n	8007f06 <_vfiprintf_r+0x11a>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	3401      	adds	r4, #1
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 0c0a 	mov.w	ip, #10
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fcc:	3a30      	subs	r2, #48	; 0x30
 8007fce:	2a09      	cmp	r2, #9
 8007fd0:	d903      	bls.n	8007fda <_vfiprintf_r+0x1ee>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c5      	beq.n	8007f62 <_vfiprintf_r+0x176>
 8007fd6:	9105      	str	r1, [sp, #20]
 8007fd8:	e7c3      	b.n	8007f62 <_vfiprintf_r+0x176>
 8007fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fde:	4604      	mov	r4, r0
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7f0      	b.n	8007fc6 <_vfiprintf_r+0x1da>
 8007fe4:	ab03      	add	r3, sp, #12
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4b16      	ldr	r3, [pc, #88]	; (8008044 <_vfiprintf_r+0x258>)
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7fd fc74 	bl	80058dc <_printf_float>
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	1c78      	adds	r0, r7, #1
 8007ff8:	d1d6      	bne.n	8007fa8 <_vfiprintf_r+0x1bc>
 8007ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ffc:	07d9      	lsls	r1, r3, #31
 8007ffe:	d405      	bmi.n	800800c <_vfiprintf_r+0x220>
 8008000:	89ab      	ldrh	r3, [r5, #12]
 8008002:	059a      	lsls	r2, r3, #22
 8008004:	d402      	bmi.n	800800c <_vfiprintf_r+0x220>
 8008006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008008:	f7fd fb1c 	bl	8005644 <__retarget_lock_release_recursive>
 800800c:	89ab      	ldrh	r3, [r5, #12]
 800800e:	065b      	lsls	r3, r3, #25
 8008010:	f53f af12 	bmi.w	8007e38 <_vfiprintf_r+0x4c>
 8008014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008016:	e711      	b.n	8007e3c <_vfiprintf_r+0x50>
 8008018:	ab03      	add	r3, sp, #12
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	462a      	mov	r2, r5
 800801e:	4b09      	ldr	r3, [pc, #36]	; (8008044 <_vfiprintf_r+0x258>)
 8008020:	a904      	add	r1, sp, #16
 8008022:	4630      	mov	r0, r6
 8008024:	f7fd fefe 	bl	8005e24 <_printf_i>
 8008028:	e7e4      	b.n	8007ff4 <_vfiprintf_r+0x208>
 800802a:	bf00      	nop
 800802c:	080084bc 	.word	0x080084bc
 8008030:	080084dc 	.word	0x080084dc
 8008034:	0800849c 	.word	0x0800849c
 8008038:	0800875c 	.word	0x0800875c
 800803c:	08008766 	.word	0x08008766
 8008040:	080058dd 	.word	0x080058dd
 8008044:	08007dc7 	.word	0x08007dc7
 8008048:	08008762 	.word	0x08008762

0800804c <_read_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4d07      	ldr	r5, [pc, #28]	; (800806c <_read_r+0x20>)
 8008050:	4604      	mov	r4, r0
 8008052:	4608      	mov	r0, r1
 8008054:	4611      	mov	r1, r2
 8008056:	2200      	movs	r2, #0
 8008058:	602a      	str	r2, [r5, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	f7fd f8c1 	bl	80051e2 <_read>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_read_r+0x1e>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	b103      	cbz	r3, 800806a <_read_r+0x1e>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	20000650 	.word	0x20000650

08008070 <abort>:
 8008070:	b508      	push	{r3, lr}
 8008072:	2006      	movs	r0, #6
 8008074:	f000 f8aa 	bl	80081cc <raise>
 8008078:	2001      	movs	r0, #1
 800807a:	f000 f8e1 	bl	8008240 <_exit>
	...

08008080 <_fstat_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4d07      	ldr	r5, [pc, #28]	; (80080a0 <_fstat_r+0x20>)
 8008084:	2300      	movs	r3, #0
 8008086:	4604      	mov	r4, r0
 8008088:	4608      	mov	r0, r1
 800808a:	4611      	mov	r1, r2
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	f7fd f98c 	bl	80053aa <_fstat>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d102      	bne.n	800809c <_fstat_r+0x1c>
 8008096:	682b      	ldr	r3, [r5, #0]
 8008098:	b103      	cbz	r3, 800809c <_fstat_r+0x1c>
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	bd38      	pop	{r3, r4, r5, pc}
 800809e:	bf00      	nop
 80080a0:	20000650 	.word	0x20000650

080080a4 <_isatty_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d06      	ldr	r5, [pc, #24]	; (80080c0 <_isatty_r+0x1c>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	602b      	str	r3, [r5, #0]
 80080b0:	f7fd f989 	bl	80053c6 <_isatty>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_isatty_r+0x1a>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_isatty_r+0x1a>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	20000650 	.word	0x20000650

080080c4 <__ascii_mbtowc>:
 80080c4:	b082      	sub	sp, #8
 80080c6:	b901      	cbnz	r1, 80080ca <__ascii_mbtowc+0x6>
 80080c8:	a901      	add	r1, sp, #4
 80080ca:	b142      	cbz	r2, 80080de <__ascii_mbtowc+0x1a>
 80080cc:	b14b      	cbz	r3, 80080e2 <__ascii_mbtowc+0x1e>
 80080ce:	7813      	ldrb	r3, [r2, #0]
 80080d0:	600b      	str	r3, [r1, #0]
 80080d2:	7812      	ldrb	r2, [r2, #0]
 80080d4:	1e10      	subs	r0, r2, #0
 80080d6:	bf18      	it	ne
 80080d8:	2001      	movne	r0, #1
 80080da:	b002      	add	sp, #8
 80080dc:	4770      	bx	lr
 80080de:	4610      	mov	r0, r2
 80080e0:	e7fb      	b.n	80080da <__ascii_mbtowc+0x16>
 80080e2:	f06f 0001 	mvn.w	r0, #1
 80080e6:	e7f8      	b.n	80080da <__ascii_mbtowc+0x16>

080080e8 <memmove>:
 80080e8:	4288      	cmp	r0, r1
 80080ea:	b510      	push	{r4, lr}
 80080ec:	eb01 0402 	add.w	r4, r1, r2
 80080f0:	d902      	bls.n	80080f8 <memmove+0x10>
 80080f2:	4284      	cmp	r4, r0
 80080f4:	4623      	mov	r3, r4
 80080f6:	d807      	bhi.n	8008108 <memmove+0x20>
 80080f8:	1e43      	subs	r3, r0, #1
 80080fa:	42a1      	cmp	r1, r4
 80080fc:	d008      	beq.n	8008110 <memmove+0x28>
 80080fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008102:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008106:	e7f8      	b.n	80080fa <memmove+0x12>
 8008108:	4402      	add	r2, r0
 800810a:	4601      	mov	r1, r0
 800810c:	428a      	cmp	r2, r1
 800810e:	d100      	bne.n	8008112 <memmove+0x2a>
 8008110:	bd10      	pop	{r4, pc}
 8008112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800811a:	e7f7      	b.n	800810c <memmove+0x24>

0800811c <_realloc_r>:
 800811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	4680      	mov	r8, r0
 8008122:	4614      	mov	r4, r2
 8008124:	460e      	mov	r6, r1
 8008126:	b921      	cbnz	r1, 8008132 <_realloc_r+0x16>
 8008128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800812c:	4611      	mov	r1, r2
 800812e:	f7fd bac1 	b.w	80056b4 <_malloc_r>
 8008132:	b92a      	cbnz	r2, 8008140 <_realloc_r+0x24>
 8008134:	f7ff fc88 	bl	8007a48 <_free_r>
 8008138:	4625      	mov	r5, r4
 800813a:	4628      	mov	r0, r5
 800813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008140:	f000 f86d 	bl	800821e <_malloc_usable_size_r>
 8008144:	4284      	cmp	r4, r0
 8008146:	4607      	mov	r7, r0
 8008148:	d802      	bhi.n	8008150 <_realloc_r+0x34>
 800814a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800814e:	d812      	bhi.n	8008176 <_realloc_r+0x5a>
 8008150:	4621      	mov	r1, r4
 8008152:	4640      	mov	r0, r8
 8008154:	f7fd faae 	bl	80056b4 <_malloc_r>
 8008158:	4605      	mov	r5, r0
 800815a:	2800      	cmp	r0, #0
 800815c:	d0ed      	beq.n	800813a <_realloc_r+0x1e>
 800815e:	42bc      	cmp	r4, r7
 8008160:	4622      	mov	r2, r4
 8008162:	4631      	mov	r1, r6
 8008164:	bf28      	it	cs
 8008166:	463a      	movcs	r2, r7
 8008168:	f7fd fa6d 	bl	8005646 <memcpy>
 800816c:	4631      	mov	r1, r6
 800816e:	4640      	mov	r0, r8
 8008170:	f7ff fc6a 	bl	8007a48 <_free_r>
 8008174:	e7e1      	b.n	800813a <_realloc_r+0x1e>
 8008176:	4635      	mov	r5, r6
 8008178:	e7df      	b.n	800813a <_realloc_r+0x1e>

0800817a <_raise_r>:
 800817a:	291f      	cmp	r1, #31
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4604      	mov	r4, r0
 8008180:	460d      	mov	r5, r1
 8008182:	d904      	bls.n	800818e <_raise_r+0x14>
 8008184:	2316      	movs	r3, #22
 8008186:	6003      	str	r3, [r0, #0]
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008190:	b112      	cbz	r2, 8008198 <_raise_r+0x1e>
 8008192:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008196:	b94b      	cbnz	r3, 80081ac <_raise_r+0x32>
 8008198:	4620      	mov	r0, r4
 800819a:	f000 f831 	bl	8008200 <_getpid_r>
 800819e:	462a      	mov	r2, r5
 80081a0:	4601      	mov	r1, r0
 80081a2:	4620      	mov	r0, r4
 80081a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a8:	f000 b818 	b.w	80081dc <_kill_r>
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d00a      	beq.n	80081c6 <_raise_r+0x4c>
 80081b0:	1c59      	adds	r1, r3, #1
 80081b2:	d103      	bne.n	80081bc <_raise_r+0x42>
 80081b4:	2316      	movs	r3, #22
 80081b6:	6003      	str	r3, [r0, #0]
 80081b8:	2001      	movs	r0, #1
 80081ba:	e7e7      	b.n	800818c <_raise_r+0x12>
 80081bc:	2400      	movs	r4, #0
 80081be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081c2:	4628      	mov	r0, r5
 80081c4:	4798      	blx	r3
 80081c6:	2000      	movs	r0, #0
 80081c8:	e7e0      	b.n	800818c <_raise_r+0x12>
	...

080081cc <raise>:
 80081cc:	4b02      	ldr	r3, [pc, #8]	; (80081d8 <raise+0xc>)
 80081ce:	4601      	mov	r1, r0
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f7ff bfd2 	b.w	800817a <_raise_r>
 80081d6:	bf00      	nop
 80081d8:	200000d4 	.word	0x200000d4

080081dc <_kill_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	; (80081fc <_kill_r+0x20>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f000 f821 	bl	8008230 <_kill>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_kill_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_kill_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	20000650 	.word	0x20000650

08008200 <_getpid_r>:
 8008200:	f7fd b8b0 	b.w	8005364 <_getpid>

08008204 <__ascii_wctomb>:
 8008204:	b149      	cbz	r1, 800821a <__ascii_wctomb+0x16>
 8008206:	2aff      	cmp	r2, #255	; 0xff
 8008208:	bf85      	ittet	hi
 800820a:	238a      	movhi	r3, #138	; 0x8a
 800820c:	6003      	strhi	r3, [r0, #0]
 800820e:	700a      	strbls	r2, [r1, #0]
 8008210:	f04f 30ff 	movhi.w	r0, #4294967295
 8008214:	bf98      	it	ls
 8008216:	2001      	movls	r0, #1
 8008218:	4770      	bx	lr
 800821a:	4608      	mov	r0, r1
 800821c:	4770      	bx	lr

0800821e <_malloc_usable_size_r>:
 800821e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008222:	1f18      	subs	r0, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfbc      	itt	lt
 8008228:	580b      	ldrlt	r3, [r1, r0]
 800822a:	18c0      	addlt	r0, r0, r3
 800822c:	4770      	bx	lr
	...

08008230 <_kill>:
 8008230:	4b02      	ldr	r3, [pc, #8]	; (800823c <_kill+0xc>)
 8008232:	2258      	movs	r2, #88	; 0x58
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	4770      	bx	lr
 800823c:	20000650 	.word	0x20000650

08008240 <_exit>:
 8008240:	e7fe      	b.n	8008240 <_exit>
	...

08008244 <_init>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr

08008250 <_fini>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr
