
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08006070  08006070  00016070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a8  080064a8  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  080064a8  080064a8  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064a8  080064a8  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080064b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000238  080066e8  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080066e8  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab4a  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf0  00000000  00000000  0002adb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028505  00000000  00000000  0002dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c40a  00000000  00000000  000560c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4277  00000000  00000000  000624cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039bc  00000000  00000000  00156798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0015a154  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0015a178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006058 	.word	0x08006058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	08006058 	.word	0x08006058

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_GPIO_EXTI_Callback>:
// counting single and double press
uint32_t T1, T2;
uint8_t flag = 0, press = 0, EXPLORATION = 1, EXPLORATION_WARNING_STATE = 0,
		BATTLE = 0, BATTLE_WARNING_STATE = 0;

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag == 0)) {
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb8:	d10e      	bne.n	8000bd8 <HAL_GPIO_EXTI_Callback+0x30>
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10a      	bne.n	8000bd8 <HAL_GPIO_EXTI_Callback+0x30>
		flag++;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bcc:	701a      	strb	r2, [r3, #0]
		T1 = uwTick;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_GPIO_EXTI_Callback+0x64>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_GPIO_EXTI_Callback+0x68>)
 8000bd4:	6013      	str	r3, [r2, #0]
	} else if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag > 0)) {
		flag++;
		T2 = uwTick;
	}
}
 8000bd6:	e011      	b.n	8000bfc <HAL_GPIO_EXTI_Callback+0x54>
	} else if ((GPIO_Pin == BUTTON_EXTI13_Pin) && (flag > 0)) {
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bde:	d10d      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x54>
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d009      	beq.n	8000bfc <HAL_GPIO_EXTI_Callback+0x54>
		flag++;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x60>)
 8000bf2:	701a      	strb	r2, [r3, #0]
		T2 = uwTick;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_GPIO_EXTI_Callback+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	2000025c 	.word	0x2000025c
 8000c0c:	200002c0 	.word	0x200002c0
 8000c10:	20000254 	.word	0x20000254
 8000c14:	20000258 	.word	0x20000258

08000c18 <main>:

int main(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

	initialise_monitor_handles();
 8000c1c:	f002 fbbc 	bl	8003398 <initialise_monitor_handles>
	HAL_Init();
 8000c20:	f000 ffd4 	bl	8001bcc <HAL_Init>
	MX_GPIO_Init();
 8000c24:	f000 f8c6 	bl	8000db4 <MX_GPIO_Init>
	BSP_ACCELERO_Init();
 8000c28:	f000 fc86 	bl	8001538 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8000c2c:	f000 fcfa 	bl	8001624 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init(); //Humidity Sensor Test
 8000c30:	f000 fcd8 	bl	80015e4 <BSP_HSENSOR_Init>

	while (1) {
		if ((flag == 1) && (uwTick - T1 > 1000)) {
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <main+0x6c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d10d      	bne.n	8000c58 <main+0x40>
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <main+0x70>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <main+0x74>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c4a:	d905      	bls.n	8000c58 <main+0x40>
			// Detect a single press
			flag = 0;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <main+0x6c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
			press = 1;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <main+0x78>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		}

		if ((flag == 2) && (T2 - T1 < 1000)) {
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <main+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d10d      	bne.n	8000c7c <main+0x64>
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <main+0x7c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <main+0x74>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c6e:	d205      	bcs.n	8000c7c <main+0x64>
			// Detect double press
			press = 2;
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <main+0x78>)
 8000c72:	2202      	movs	r2, #2
 8000c74:	701a      	strb	r2, [r3, #0]
			flag = 0;
 8000c76:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <main+0x6c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
		}
		mode_selection();
 8000c7c:	f000 f80c 	bl	8000c98 <mode_selection>
		if ((flag == 1) && (uwTick - T1 > 1000)) {
 8000c80:	e7d8      	b.n	8000c34 <main+0x1c>
 8000c82:	bf00      	nop
 8000c84:	2000025c 	.word	0x2000025c
 8000c88:	200002c0 	.word	0x200002c0
 8000c8c:	20000254 	.word	0x20000254
 8000c90:	2000025d 	.word	0x2000025d
 8000c94:	20000258 	.word	0x20000258

08000c98 <mode_selection>:
	}
}

static void mode_selection() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	/* Exploration Mode */
	if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 0 && BATTLE == 0 && press == 0) {
 8000c9c:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <mode_selection+0x104>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d10e      	bne.n	8000cc2 <mode_selection+0x2a>
 8000ca4:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <mode_selection+0x108>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10a      	bne.n	8000cc2 <mode_selection+0x2a>
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <mode_selection+0x10c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d106      	bne.n	8000cc2 <mode_selection+0x2a>
 8000cb4:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <mode_selection+0x110>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <mode_selection+0x2a>
		// Normal state
		exploration();
 8000cbc:	f000 f8ce 	bl	8000e5c <exploration>
 8000cc0:	e02a      	b.n	8000d18 <mode_selection+0x80>
	} else if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 1) {
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <mode_selection+0x104>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d111      	bne.n	8000cee <mode_selection+0x56>
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <mode_selection+0x108>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d10d      	bne.n	8000cee <mode_selection+0x56>
		// Come to the Warning State through interrupts or polling
		// exploration_warning();
		if (press == 1) {
 8000cd2:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <mode_selection+0x110>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d11e      	bne.n	8000d18 <mode_selection+0x80>
			// Clear the warning and go back to Exploration mode
			EXPLORATION_WARNING_STATE = 0;
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <mode_selection+0x108>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
			EXPLORATION = 1;
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <mode_selection+0x104>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
			press = 0;
 8000ce6:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <mode_selection+0x110>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8000cec:	e014      	b.n	8000d18 <mode_selection+0x80>
		} else if (press == 2) {
			// Ignore it
		}
	} else if (EXPLORATION == 1 && EXPLORATION_WARNING_STATE == 0
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <mode_selection+0x104>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d110      	bne.n	8000d18 <mode_selection+0x80>
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <mode_selection+0x108>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10c      	bne.n	8000d18 <mode_selection+0x80>
			&& press == 2) {
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <mode_selection+0x110>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d108      	bne.n	8000d18 <mode_selection+0x80>
		// Change to Battle Mode
		EXPLORATION = 0;
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <mode_selection+0x104>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
		BATTLE = 1;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <mode_selection+0x10c>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
		press = 0;
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <mode_selection+0x110>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
	}

	/* Battle Mode */
	if (EXPLORATION == 0 && BATTLE_WARNING_STATE == 0 && BATTLE == 1 && press == 0) {
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <mode_selection+0x104>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10f      	bne.n	8000d40 <mode_selection+0xa8>
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <mode_selection+0x114>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10b      	bne.n	8000d40 <mode_selection+0xa8>
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <mode_selection+0x10c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d107      	bne.n	8000d40 <mode_selection+0xa8>
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <mode_selection+0x110>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d103      	bne.n	8000d40 <mode_selection+0xa8>
		// Battle state
		// battle();
		printf("Battle mode \n");
 8000d38:	481d      	ldr	r0, [pc, #116]	; (8000db0 <mode_selection+0x118>)
 8000d3a:	f003 fa67 	bl	800420c <puts>
 8000d3e:	e02b      	b.n	8000d98 <mode_selection+0x100>
	} else if (BATTLE == 1 && BATTLE_WARNING_STATE == 1) {
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <mode_selection+0x10c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d111      	bne.n	8000d6c <mode_selection+0xd4>
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <mode_selection+0x114>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10d      	bne.n	8000d6c <mode_selection+0xd4>
		if (press == 1) {
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <mode_selection+0x110>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d11f      	bne.n	8000d98 <mode_selection+0x100>
			// Clear the warning and go back to Exploration mode
			BATTLE_WARNING_STATE = 0;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <mode_selection+0x114>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
			BATTLE = 1;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <mode_selection+0x10c>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
			press = 0;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <mode_selection+0x110>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
		if (press == 1) {
 8000d6a:	e015      	b.n	8000d98 <mode_selection+0x100>
		} else if (press == 2) {
			// Ignore it
		}
	} else if (BATTLE == 1 && BATTLE_WARNING_STATE == 0 && press == 2) {
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <mode_selection+0x10c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d111      	bne.n	8000d98 <mode_selection+0x100>
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <mode_selection+0x114>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10d      	bne.n	8000d98 <mode_selection+0x100>
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <mode_selection+0x110>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d109      	bne.n	8000d98 <mode_selection+0x100>
		// Change to EXPLORATION Mode
		BATTLE = 0;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <mode_selection+0x10c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
		EXPLORATION = 1;
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <mode_selection+0x104>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
		press = 0;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <mode_selection+0x110>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
	}
}
 8000d96:	e7ff      	b.n	8000d98 <mode_selection+0x100>
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	2000025e 	.word	0x2000025e
 8000da4:	2000025f 	.word	0x2000025f
 8000da8:	2000025d 	.word	0x2000025d
 8000dac:	20000260 	.word	0x20000260
 8000db0:	08006070 	.word	0x08006070

08000db4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) //For LED and PB
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

	//GPIO Ports Clock Enable
	__HAL_RCC_GPIOB_CLK_ENABLE();// For LED
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <MX_GPIO_Init+0x98>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <MX_GPIO_Init+0x98>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_GPIO_Init+0x98>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE(); // For PB
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_GPIO_Init+0x98>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <MX_GPIO_Init+0x98>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <MX_GPIO_Init+0x98>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

	//Configure GPIO pin Output Level // Pin Initialization
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e00:	4813      	ldr	r0, [pc, #76]	; (8000e50 <MX_GPIO_Init+0x9c>)
 8000e02:	f001 fb03 	bl	800240c <HAL_GPIO_WritePin>

	//Configure GPIO pin LED2_Pin  // Pin Configuration
	GPIO_InitStruct.Pin = LED2_Pin;
 8000e06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; //Have to implement as part of GPIO initialization
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_GPIO_Init+0x9c>)
 8000e20:	f001 f856 	bl	8001ed0 <HAL_GPIO_Init>

	// Configuration of BUTTON_EXTI13_Pin (G{IO-C Pin-13)as AF
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e28:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_GPIO_Init+0xa0>)
 8000e2c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_GPIO_Init+0xa4>)
 8000e3a:	f001 f849 	bl	8001ed0 <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e3e:	2028      	movs	r0, #40	; 0x28
 8000e40:	f001 f82b 	bl	8001e9a <HAL_NVIC_EnableIRQ>
}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000400 	.word	0x48000400
 8000e54:	10210000 	.word	0x10210000
 8000e58:	48000800 	.word	0x48000800

08000e5c <exploration>:

static void exploration(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
	uint32_t Acc, Acc1, Temp, Temp1, LED, LED1;
	Acc = uwTick; //Initialize tick for Acc
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <exploration+0x88>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	617b      	str	r3, [r7, #20]
	Temp = uwTick; //Initialize tick for Temp
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <exploration+0x88>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	613b      	str	r3, [r7, #16]
	LED = uwTick; //Initialize tick for LED
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <exploration+0x88>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]

	do {
		Acc1 = uwTick;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <exploration+0x88>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60bb      	str	r3, [r7, #8]
		Temp1 = uwTick;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <exploration+0x88>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	607b      	str	r3, [r7, #4]
		LED1 = uwTick;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <exploration+0x88>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	603b      	str	r3, [r7, #0]

		if ((Acc1 - Acc) > 1000) {
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e90:	d904      	bls.n	8000e9c <exploration+0x40>
			showAcc();
 8000e92:	f000 f82d 	bl	8000ef0 <showAcc>
			Acc = uwTick;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <exploration+0x88>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	617b      	str	r3, [r7, #20]
		}

		if ((Temp1 - Temp) > 1500) {
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d904      	bls.n	8000eb4 <exploration+0x58>
			showTemp();
 8000eaa:	f000 f875 	bl	8000f98 <showTemp>
			Temp = uwTick;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <exploration+0x88>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	613b      	str	r3, [r7, #16]
		}

		if ((LED1 - LED) > 1000) {
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ebe:	d907      	bls.n	8000ed0 <exploration+0x74>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //Pin Read Write (Toggle 0 to 1)
 8000ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <exploration+0x8c>)
 8000ec6:	f001 fab9 	bl	800243c <HAL_GPIO_TogglePin>
			LED = uwTick;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <exploration+0x88>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	60fb      	str	r3, [r7, #12]
		}
	} while (flag == 0);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <exploration+0x90>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0cd      	beq.n	8000e74 <exploration+0x18>
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200002c0 	.word	0x200002c0
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	2000025c 	.word	0x2000025c

08000ef0 <showAcc>:

static void showAcc(void) {
 8000ef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ef4:	b08a      	sub	sp, #40	; 0x28
 8000ef6:	af04      	add	r7, sp, #16
	float accel_data[3];
	int16_t accel_data_i16[3] = { 0 }; // array to store the x, y and z readings.
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(accel_data_i16);  // read accelerometer
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fb56 	bl	80015b4 <BSP_ACCELERO_AccGetXYZ>
	// the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
	accel_data[0] = (float) accel_data_i16[0] / 100.0f;
 8000f08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f14:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000f90 <showAcc+0xa0>
 8000f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1c:	edc7 7a03 	vstr	s15, [r7, #12]
	accel_data[1] = (float) accel_data_i16[1] / 100.0f;
 8000f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000f90 <showAcc+0xa0>
 8000f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f34:	edc7 7a04 	vstr	s15, [r7, #16]
	accel_data[2] = (float) accel_data_i16[2] / 100.0f;
 8000f38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f44:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000f90 <showAcc+0xa0>
 8000f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4c:	edc7 7a05 	vstr	s15, [r7, #20]
	printf("\nAccel:\nX: %f; Y: %f; Z: %f", accel_data[0], accel_data[1],
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff faf8 	bl	8000548 <__aeabi_f2d>
 8000f58:	4680      	mov	r8, r0
 8000f5a:	4689      	mov	r9, r1
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff faf2 	bl	8000548 <__aeabi_f2d>
 8000f64:	4604      	mov	r4, r0
 8000f66:	460d      	mov	r5, r1
			accel_data[2]);
 8000f68:	697b      	ldr	r3, [r7, #20]
	printf("\nAccel:\nX: %f; Y: %f; Z: %f", accel_data[0], accel_data[1],
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff faec 	bl	8000548 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f78:	e9cd 4500 	strd	r4, r5, [sp]
 8000f7c:	4642      	mov	r2, r8
 8000f7e:	464b      	mov	r3, r9
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <showAcc+0xa4>)
 8000f82:	f003 f8bd 	bl	8004100 <iprintf>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f90:	42c80000 	.word	0x42c80000
 8000f94:	08006080 	.word	0x08006080

08000f98 <showTemp>:

static void showTemp(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	float temp_data;
	temp_data = BSP_TSENSOR_ReadTemp();   // read temperature sensor
 8000f9e:	f000 fb5d 	bl	800165c <BSP_TSENSOR_ReadTemp>
 8000fa2:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("\nTemperature : %f\n", temp_data);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff face 	bl	8000548 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <showTemp+0x28>)
 8000fb2:	f003 f8a5 	bl	8004100 <iprintf>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	0800609c 	.word	0x0800609c

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_MspInit+0x44>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_MspInit+0x44>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_MspInit+0x44>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_MspInit+0x44>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <HAL_MspInit+0x44>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_MspInit+0x44>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_I2C_MspInit+0x7c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d128      	bne.n	8001080 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_I2C_MspInit+0x80>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_I2C_MspInit+0x80>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_I2C_MspInit+0x80>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001046:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001058:	2304      	movs	r3, #4
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <HAL_I2C_MspInit+0x84>)
 8001064:	f000 ff34 	bl	8001ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_I2C_MspInit+0x80>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_I2C_MspInit+0x80>)
 800106e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001072:	6593      	str	r3, [r2, #88]	; 0x58
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_I2C_MspInit+0x80>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40005800 	.word	0x40005800
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400

08001094 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_I2C_MspDeInit+0x30>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10a      	bne.n	80010bc <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_I2C_MspDeInit+0x34>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_I2C_MspDeInit+0x34>)
 80010ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80010b0:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80010b2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_I2C_MspDeInit+0x38>)
 80010b8:	f001 f8b4 	bl	8002224 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40005800 	.word	0x40005800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000400 	.word	0x48000400

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 fda4 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001130:	2020      	movs	r0, #32
 8001132:	f001 f99d 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001136:	2040      	movs	r0, #64	; 0x40
 8001138:	f001 f99a 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800113c:	2080      	movs	r0, #128	; 0x80
 800113e:	f001 f997 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001146:	f001 f993 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001152:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001156:	f001 f98b 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800115a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800115e:	f001 f987 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001162:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001166:	f001 f983 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800116a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800116e:	f001 f97f 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001172:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001176:	f001 f97b 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x50>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x16>
		heap_end = &end;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <_sbrk+0x50>)
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <_sbrk+0x54>)
 8001194:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <_sbrk+0x50>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <_sbrk+0x50>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	466a      	mov	r2, sp
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d907      	bls.n	80011ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011aa:	f002 f971 	bl	8003490 <__errno>
 80011ae:	4603      	mov	r3, r0
 80011b0:	220c      	movs	r2, #12
 80011b2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	e006      	b.n	80011c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <_sbrk+0x50>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <_sbrk+0x50>)
 80011c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000264 	.word	0x20000264
 80011d4:	20000380 	.word	0x20000380

080011d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <SystemInit+0x64>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a16      	ldr	r2, [pc, #88]	; (800123c <SystemInit+0x64>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <SystemInit+0x68>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <SystemInit+0x68>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <SystemInit+0x68>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <SystemInit+0x68>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <SystemInit+0x68>)
 8001204:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001208:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800120c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <SystemInit+0x68>)
 8001210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001214:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <SystemInit+0x68>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <SystemInit+0x68>)
 800121c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <SystemInit+0x68>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <SystemInit+0x64>)
 800122a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800122e:	609a      	str	r2, [r3, #8]
#endif
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	40021000 	.word	0x40021000

08001244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001248:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800124a:	e003      	b.n	8001254 <LoopCopyDataInit>

0800124c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800124e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001250:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001252:	3104      	adds	r1, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001258:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800125a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800125c:	d3f6      	bcc.n	800124c <CopyDataInit>
	ldr	r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001260:	e002      	b.n	8001268 <LoopFillZerobss>

08001262 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001262:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001264:	f842 3b04 	str.w	r3, [r2], #4

08001268 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <LoopForever+0x16>)
	cmp	r2, r3
 800126a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800126c:	d3f9      	bcc.n	8001262 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800126e:	f7ff ffb3 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f002 fa09 	bl	8003688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001276:	f7ff fccf 	bl	8000c18 <main>

0800127a <LoopForever>:

LoopForever:
    b LoopForever
 800127a:	e7fe      	b.n	800127a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800127c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001280:	080064b0 	.word	0x080064b0
	ldr	r0, =_sdata
 8001284:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001288:	20000238 	.word	0x20000238
	ldr	r2, =_sbss
 800128c:	20000238 	.word	0x20000238
	ldr	r3, = _ebss
 8001290:	20000380 	.word	0x20000380

08001294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC1_2_IRQHandler>
	...

08001298 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80012b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80012ca:	2304      	movs	r3, #4
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	481b      	ldr	r0, [pc, #108]	; (8001344 <I2Cx_MspInit+0xac>)
 80012d6:	f000 fdfb 	bl	8001ed0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4818      	ldr	r0, [pc, #96]	; (8001344 <I2Cx_MspInit+0xac>)
 80012e2:	f000 fdf5 	bl	8001ed0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f0:	6593      	str	r3, [r2, #88]	; 0x58
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <I2Cx_MspInit+0xa8>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <I2Cx_MspInit+0xa8>)
 8001300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <I2Cx_MspInit+0xa8>)
 8001304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001308:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <I2Cx_MspInit+0xa8>)
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <I2Cx_MspInit+0xa8>)
 8001310:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001314:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	210f      	movs	r1, #15
 800131a:	2021      	movs	r0, #33	; 0x21
 800131c:	f000 fda1 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001320:	2021      	movs	r0, #33	; 0x21
 8001322:	f000 fdba 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	210f      	movs	r1, #15
 800132a:	2022      	movs	r0, #34	; 0x22
 800132c:	f000 fd99 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001330:	2022      	movs	r0, #34	; 0x22
 8001332:	f000 fdb2 	bl	8001e9a <HAL_NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	48000400 	.word	0x48000400

08001348 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <I2Cx_Init+0x54>)
 8001354:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <I2Cx_Init+0x58>)
 800135a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff89 	bl	8001298 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f001 f88a 	bl	80024a0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800138c:	2100      	movs	r1, #0
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f001 fd8e 	bl	8002eb0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005800 	.word	0x40005800
 80013a0:	00702681 	.word	0x00702681

080013a4 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	4608      	mov	r0, r1
 80013ae:	4611      	mov	r1, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	72fb      	strb	r3, [r7, #11]
 80013b6:	460b      	mov	r3, r1
 80013b8:	813b      	strh	r3, [r7, #8]
 80013ba:	4613      	mov	r3, r2
 80013bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	b299      	uxth	r1, r3
 80013c6:	88f8      	ldrh	r0, [r7, #6]
 80013c8:	893a      	ldrh	r2, [r7, #8]
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4603      	mov	r3, r0
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f001 fa32 	bl	8002844 <HAL_I2C_Mem_Read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f832 	bl	8001458 <I2Cx_Error>
  }
  return status;
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b08a      	sub	sp, #40	; 0x28
 8001402:	af04      	add	r7, sp, #16
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	4608      	mov	r0, r1
 8001408:	4611      	mov	r1, r2
 800140a:	461a      	mov	r2, r3
 800140c:	4603      	mov	r3, r0
 800140e:	72fb      	strb	r3, [r7, #11]
 8001410:	460b      	mov	r3, r1
 8001412:	813b      	strh	r3, [r7, #8]
 8001414:	4613      	mov	r3, r2
 8001416:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	b299      	uxth	r1, r3
 8001420:	88f8      	ldrh	r0, [r7, #6]
 8001422:	893a      	ldrh	r2, [r7, #8]
 8001424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4603      	mov	r3, r0
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f001 f8f1 	bl	800261c <HAL_I2C_Mem_Write>
 800143a:	4603      	mov	r3, r0
 800143c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	4619      	mov	r1, r3
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 f805 	bl	8001458 <I2Cx_Error>
  }
  return status;
 800144e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f001 f8aa 	bl	80025be <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff6c 	bl	8001348 <I2Cx_Init>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <SENSOR_IO_Init+0x10>)
 800147e:	f7ff ff63 	bl	8001348 <I2Cx_Init>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000268 	.word	0x20000268

0800148c <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	460b      	mov	r3, r1
 8001498:	71bb      	strb	r3, [r7, #6]
 800149a:	4613      	mov	r3, r2
 800149c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	79f9      	ldrb	r1, [r7, #7]
 80014a4:	2301      	movs	r3, #1
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	1d7b      	adds	r3, r7, #5
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <SENSOR_IO_Write+0x30>)
 80014b0:	f7ff ffa5 	bl	80013fe <I2Cx_WriteMultiple>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000268 	.word	0x20000268

080014c0 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	79f9      	ldrb	r1, [r7, #7]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f107 030f 	add.w	r3, r7, #15
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <SENSOR_IO_Read+0x38>)
 80014e8:	f7ff ff5c 	bl	80013a4 <I2Cx_ReadMultiple>

  return read_value;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000268 	.word	0x20000268

080014fc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af02      	add	r7, sp, #8
 8001502:	603a      	str	r2, [r7, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	460b      	mov	r3, r1
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	4613      	mov	r3, r2
 8001510:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	b29a      	uxth	r2, r3
 8001516:	79f9      	ldrb	r1, [r7, #7]
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <SENSOR_IO_ReadMultiple+0x38>)
 8001524:	f7ff ff3e 	bl	80013a4 <I2Cx_ReadMultiple>
 8001528:	4603      	mov	r3, r0
 800152a:	b29b      	uxth	r3, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000268 	.word	0x20000268

08001538 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001542:	2300      	movs	r3, #0
 8001544:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <BSP_ACCELERO_Init+0x74>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4798      	blx	r3
 800154c:	4603      	mov	r3, r0
 800154e:	2b6a      	cmp	r3, #106	; 0x6a
 8001550:	d002      	beq.n	8001558 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e024      	b.n	80015a2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <BSP_ACCELERO_Init+0x78>)
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <BSP_ACCELERO_Init+0x74>)
 800155c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800155e:	2330      	movs	r3, #48	; 0x30
 8001560:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001566:	2300      	movs	r3, #0
 8001568:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800156a:	2340      	movs	r3, #64	; 0x40
 800156c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001576:	797a      	ldrb	r2, [r7, #5]
 8001578:	7abb      	ldrb	r3, [r7, #10]
 800157a:	4313      	orrs	r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001580:	7a3b      	ldrb	r3, [r7, #8]
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	b2db      	uxtb	r3, r3
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	b21b      	sxth	r3, r3
 8001594:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <BSP_ACCELERO_Init+0x78>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	89ba      	ldrh	r2, [r7, #12]
 800159e:	4610      	mov	r0, r2
 80015a0:	4798      	blx	r3
  }  

  return ret;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000024 	.word	0x20000024
 80015b0:	200002b4 	.word	0x200002b4

080015b4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
    }
  }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200002b4 	.word	0x200002b4

080015e4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <BSP_HSENSOR_Init+0x38>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	20be      	movs	r0, #190	; 0xbe
 80015f0:	4798      	blx	r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	2bbc      	cmp	r3, #188	; 0xbc
 80015f6:	d002      	beq.n	80015fe <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	e009      	b.n	8001612 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <BSP_HSENSOR_Init+0x3c>)
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <BSP_HSENSOR_Init+0x38>)
 8001602:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <BSP_HSENSOR_Init+0x3c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	20be      	movs	r0, #190	; 0xbe
 800160c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000008 	.word	0x20000008
 8001620:	200002b8 	.word	0x200002b8

08001624 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <BSP_TSENSOR_Init+0x30>)
 8001630:	4a09      	ldr	r2, [pc, #36]	; (8001658 <BSP_TSENSOR_Init+0x34>)
 8001632:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001634:	f7ff ff20 	bl	8001478 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <BSP_TSENSOR_Init+0x30>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2100      	movs	r1, #0
 8001640:	20be      	movs	r0, #190	; 0xbe
 8001642:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001648:	79fb      	ldrb	r3, [r7, #7]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002bc 	.word	0x200002bc
 8001658:	20000014 	.word	0x20000014

0800165c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <BSP_TSENSOR_ReadTemp+0x18>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	20be      	movs	r0, #190	; 0xbe
 8001668:	4798      	blx	r3
 800166a:	eef0 7a40 	vmov.f32	s15, s0
}
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200002bc 	.word	0x200002bc

08001678 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2120      	movs	r1, #32
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff19 	bl	80014c0 <SENSOR_IO_Read>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	f023 0303 	bic.w	r3, r3, #3
 80016a8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016b8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	2120      	movs	r1, #32
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fee2 	bl	800148c <SENSOR_IO_Write>
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80016de:	f7ff fecb 	bl	8001478 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	210f      	movs	r1, #15
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fee9 	bl	80014c0 <SENSOR_IO_Read>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	b2d8      	uxtb	r0, r3
 800170a:	f107 020c 	add.w	r2, r7, #12
 800170e:	2302      	movs	r3, #2
 8001710:	21b0      	movs	r1, #176	; 0xb0
 8001712:	f7ff fef3 	bl	80014fc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001716:	7b3b      	ldrb	r3, [r7, #12]
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800171e:	7b7b      	ldrb	r3, [r7, #13]
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	b2d8      	uxtb	r0, r3
 800172a:	f107 020c 	add.w	r2, r7, #12
 800172e:	2302      	movs	r3, #2
 8001730:	21b6      	movs	r1, #182	; 0xb6
 8001732:	f7ff fee3 	bl	80014fc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	7b3b      	ldrb	r3, [r7, #12]
 800173e:	b21b      	sxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	b2d8      	uxtb	r0, r3
 8001748:	f107 020c 	add.w	r2, r7, #12
 800174c:	2302      	movs	r3, #2
 800174e:	21ba      	movs	r1, #186	; 0xba
 8001750:	f7ff fed4 	bl	80014fc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001754:	7b7b      	ldrb	r3, [r7, #13]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b21a      	sxth	r2, r3
 800175a:	7b3b      	ldrb	r3, [r7, #12]
 800175c:	b21b      	sxth	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	b2d8      	uxtb	r0, r3
 8001766:	f107 020c 	add.w	r2, r7, #12
 800176a:	2302      	movs	r3, #2
 800176c:	21a8      	movs	r1, #168	; 0xa8
 800176e:	f7ff fec5 	bl	80014fc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001772:	7b7b      	ldrb	r3, [r7, #13]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b21a      	sxth	r2, r3
 8001778:	7b3b      	ldrb	r3, [r7, #12]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001780:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001784:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001792:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001796:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017a8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ce:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80017d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017de:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80017e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800182c <HTS221_H_ReadHumidity+0x130>
 80017ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	dd01      	ble.n	80017f8 <HTS221_H_ReadHumidity+0xfc>
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HTS221_H_ReadHumidity+0x134>)
 80017f6:	e00a      	b.n	800180e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80017f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001804:	d502      	bpl.n	800180c <HTS221_H_ReadHumidity+0x110>
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e000      	b.n	800180e <HTS221_H_ReadHumidity+0x112>
 800180c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800180e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001810:	edd7 7a04 	vldr	s15, [r7, #16]
 8001814:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001818:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800181c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001820:	eeb0 0a67 	vmov.f32	s0, s15
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	447a0000 	.word	0x447a0000
 8001830:	447a0000 	.word	0x447a0000

08001834 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2120      	movs	r1, #32
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fe3a 	bl	80014c0 <SENSOR_IO_Read>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001876:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	2120      	movs	r1, #32
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe03 	bl	800148c <SENSOR_IO_Write>
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b088      	sub	sp, #32
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	b2d8      	uxtb	r0, r3
 800189c:	f107 0208 	add.w	r2, r7, #8
 80018a0:	2302      	movs	r3, #2
 80018a2:	21b2      	movs	r1, #178	; 0xb2
 80018a4:	f7ff fe2a 	bl	80014fc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2135      	movs	r1, #53	; 0x35
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fe06 	bl	80014c0 <SENSOR_IO_Read>
 80018b4:	4603      	mov	r3, r0
 80018b6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80018b8:	7ffb      	ldrb	r3, [r7, #31]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b21b      	sxth	r3, r3
 80018be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	7a3b      	ldrb	r3, [r7, #8]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80018cc:	7ffb      	ldrb	r3, [r7, #31]
 80018ce:	019b      	lsls	r3, r3, #6
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	7a7b      	ldrb	r3, [r7, #9]
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80018e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018e4:	10db      	asrs	r3, r3, #3
 80018e6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80018e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018ec:	10db      	asrs	r3, r3, #3
 80018ee:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	b2d8      	uxtb	r0, r3
 80018f4:	f107 0208 	add.w	r2, r7, #8
 80018f8:	2304      	movs	r3, #4
 80018fa:	21bc      	movs	r1, #188	; 0xbc
 80018fc:	f7ff fdfe 	bl	80014fc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001900:	7a7b      	ldrb	r3, [r7, #9]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b21a      	sxth	r2, r3
 8001906:	7a3b      	ldrb	r3, [r7, #8]
 8001908:	b21b      	sxth	r3, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21a      	sxth	r2, r3
 8001914:	7abb      	ldrb	r3, [r7, #10]
 8001916:	b21b      	sxth	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	b2d8      	uxtb	r0, r3
 8001920:	f107 0208 	add.w	r2, r7, #8
 8001924:	2302      	movs	r3, #2
 8001926:	21aa      	movs	r1, #170	; 0xaa
 8001928:	f7ff fde8 	bl	80014fc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800192c:	7a7b      	ldrb	r3, [r7, #9]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	b21a      	sxth	r2, r3
 8001932:	7a3b      	ldrb	r3, [r7, #8]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800193a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800193e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001950:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001962:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001966:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001978:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	ee07 3a90 	vmov	s15, r3
}
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80019aa:	2110      	movs	r1, #16
 80019ac:	20d4      	movs	r0, #212	; 0xd4
 80019ae:	f7ff fd87 	bl	80014c0 <SENSOR_IO_Read>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80019ba:	7bbb      	ldrb	r3, [r7, #14]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80019c2:	7bba      	ldrb	r2, [r7, #14]
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80019ca:	7bbb      	ldrb	r3, [r7, #14]
 80019cc:	461a      	mov	r2, r3
 80019ce:	2110      	movs	r1, #16
 80019d0:	20d4      	movs	r0, #212	; 0xd4
 80019d2:	f7ff fd5b 	bl	800148c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80019d6:	2112      	movs	r1, #18
 80019d8:	20d4      	movs	r0, #212	; 0xd4
 80019da:	f7ff fd71 	bl	80014c0 <SENSOR_IO_Read>
 80019de:	4603      	mov	r3, r0
 80019e0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80019ea:	7bbb      	ldrb	r3, [r7, #14]
 80019ec:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80019f0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80019f2:	7bba      	ldrb	r2, [r7, #14]
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	461a      	mov	r2, r3
 80019fe:	2112      	movs	r1, #18
 8001a00:	20d4      	movs	r0, #212	; 0xd4
 8001a02:	f7ff fd43 	bl	800148c <SENSOR_IO_Write>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001a14:	2300      	movs	r3, #0
 8001a16:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001a18:	2110      	movs	r1, #16
 8001a1a:	20d4      	movs	r0, #212	; 0xd4
 8001a1c:	f7ff fd50 	bl	80014c0 <SENSOR_IO_Read>
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2110      	movs	r1, #16
 8001a32:	20d4      	movs	r0, #212	; 0xd4
 8001a34:	f7ff fd2a 	bl	800148c <SENSOR_IO_Write>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001a44:	f7ff fd18 	bl	8001478 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001a48:	210f      	movs	r1, #15
 8001a4a:	20d4      	movs	r0, #212	; 0xd4
 8001a4c:	f7ff fd38 	bl	80014c0 <SENSOR_IO_Read>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001a64:	2115      	movs	r1, #21
 8001a66:	20d4      	movs	r0, #212	; 0xd4
 8001a68:	f7ff fd2a 	bl	80014c0 <SENSOR_IO_Read>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	f023 0310 	bic.w	r3, r3, #16
 8001a76:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	f043 0310 	orr.w	r3, r3, #16
 8001a84:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2115      	movs	r1, #21
 8001a8c:	20d4      	movs	r0, #212	; 0xd4
 8001a8e:	f7ff fcfd 	bl	800148c <SENSOR_IO_Write>
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	20d4      	movs	r0, #212	; 0xd4
 8001ab6:	f7ff fd03 	bl	80014c0 <SENSOR_IO_Read>
 8001aba:	4603      	mov	r3, r0
 8001abc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001abe:	f107 0208 	add.w	r2, r7, #8
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	2128      	movs	r1, #40	; 0x28
 8001ac6:	20d4      	movs	r0, #212	; 0xd4
 8001ac8:	f7ff fd18 	bl	80014fc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	77fb      	strb	r3, [r7, #31]
 8001ad0:	e01c      	b.n	8001b0c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001ad2:	7ffb      	ldrb	r3, [r7, #31]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	3320      	adds	r3, #32
 8001ada:	443b      	add	r3, r7
 8001adc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	3320      	adds	r3, #32
 8001aec:	443b      	add	r3, r7
 8001aee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	b212      	sxth	r2, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	3320      	adds	r3, #32
 8001b00:	443b      	add	r3, r7
 8001b02:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001b06:	7ffb      	ldrb	r3, [r7, #31]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	77fb      	strb	r3, [r7, #31]
 8001b0c:	7ffb      	ldrb	r3, [r7, #31]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d9df      	bls.n	8001ad2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d829      	bhi.n	8001b70 <LSM6DSL_AccReadXYZ+0xd4>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <LSM6DSL_AccReadXYZ+0x88>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b59 	.word	0x08001b59
 8001b28:	08001b71 	.word	0x08001b71
 8001b2c:	08001b71 	.word	0x08001b71
 8001b30:	08001b71 	.word	0x08001b71
 8001b34:	08001b6b 	.word	0x08001b6b
 8001b38:	08001b71 	.word	0x08001b71
 8001b3c:	08001b71 	.word	0x08001b71
 8001b40:	08001b71 	.word	0x08001b71
 8001b44:	08001b5f 	.word	0x08001b5f
 8001b48:	08001b71 	.word	0x08001b71
 8001b4c:	08001b71 	.word	0x08001b71
 8001b50:	08001b71 	.word	0x08001b71
 8001b54:	08001b65 	.word	0x08001b65
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <LSM6DSL_AccReadXYZ+0x120>)
 8001b5a:	61bb      	str	r3, [r7, #24]
    break;
 8001b5c:	e008      	b.n	8001b70 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <LSM6DSL_AccReadXYZ+0x124>)
 8001b60:	61bb      	str	r3, [r7, #24]
    break;
 8001b62:	e005      	b.n	8001b70 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <LSM6DSL_AccReadXYZ+0x128>)
 8001b66:	61bb      	str	r3, [r7, #24]
    break;
 8001b68:	e002      	b.n	8001b70 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <LSM6DSL_AccReadXYZ+0x12c>)
 8001b6c:	61bb      	str	r3, [r7, #24]
    break;    
 8001b6e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	77fb      	strb	r3, [r7, #31]
 8001b74:	e01a      	b.n	8001bac <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	3320      	adds	r3, #32
 8001b7c:	443b      	add	r3, r7
 8001b7e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9e:	ee17 2a90 	vmov	r2, s15
 8001ba2:	b212      	sxth	r2, r2
 8001ba4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
 8001bac:	7ffb      	ldrb	r3, [r7, #31]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d9e1      	bls.n	8001b76 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	3720      	adds	r7, #32
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	3d79db23 	.word	0x3d79db23
 8001bc0:	3df9db23 	.word	0x3df9db23
 8001bc4:	3e79db23 	.word	0x3e79db23
 8001bc8:	3ef9db23 	.word	0x3ef9db23

08001bcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	f000 f938 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f000 f80d 	bl	8001bfc <HAL_InitTick>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	e001      	b.n	8001bf2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bee:	f7ff f9e9 	bl	8000fc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_InitTick+0x68>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d022      	beq.n	8001c56 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_InitTick+0x6c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_InitTick+0x68>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f946 	bl	8001eb6 <HAL_SYSTICK_Config>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10f      	bne.n	8001c50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	d809      	bhi.n	8001c4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c36:	2200      	movs	r2, #0
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3e:	f000 f910 	bl	8001e62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_InitTick+0x70>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e007      	b.n	8001c5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e004      	b.n	8001c5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e001      	b.n	8001c5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000005c 	.word	0x2000005c
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	20000058 	.word	0x20000058

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_IncTick+0x1c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x20>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_IncTick+0x1c>)
 8001c80:	6013      	str	r3, [r2, #0]
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	200002c0 	.word	0x200002c0
 8001c90:	2000005c 	.word	0x2000005c

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	200002c0 	.word	0x200002c0

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff3e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff8e 	bl	8001da0 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff31 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffa2 	bl	8001e08 <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	e17f      	b.n	80021e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8171 	beq.w	80021da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d00b      	beq.n	8001f18 <HAL_GPIO_Init+0x48>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f0c:	2b11      	cmp	r3, #17
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b12      	cmp	r3, #18
 8001f16:	d130      	bne.n	8001f7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4e:	2201      	movs	r2, #1
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f003 0201 	and.w	r2, r3, #1
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d118      	bne.n	8001fb8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x128>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b12      	cmp	r3, #18
 8001ff6:	d123      	bne.n	8002040 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	6939      	ldr	r1, [r7, #16]
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80ac 	beq.w	80021da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_GPIO_Init+0x330>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002086:	4a5e      	ldr	r2, [pc, #376]	; (8002200 <HAL_GPIO_Init+0x330>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6613      	str	r3, [r2, #96]	; 0x60
 800208e:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <HAL_GPIO_Init+0x330>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800209a:	4a5a      	ldr	r2, [pc, #360]	; (8002204 <HAL_GPIO_Init+0x334>)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020c4:	d025      	beq.n	8002112 <HAL_GPIO_Init+0x242>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4f      	ldr	r2, [pc, #316]	; (8002208 <HAL_GPIO_Init+0x338>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01f      	beq.n	800210e <HAL_GPIO_Init+0x23e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_GPIO_Init+0x33c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d019      	beq.n	800210a <HAL_GPIO_Init+0x23a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4d      	ldr	r2, [pc, #308]	; (8002210 <HAL_GPIO_Init+0x340>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_GPIO_Init+0x236>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_GPIO_Init+0x344>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00d      	beq.n	8002102 <HAL_GPIO_Init+0x232>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <HAL_GPIO_Init+0x348>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <HAL_GPIO_Init+0x22e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4a      	ldr	r2, [pc, #296]	; (800221c <HAL_GPIO_Init+0x34c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_GPIO_Init+0x22a>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e00c      	b.n	8002114 <HAL_GPIO_Init+0x244>
 80020fa:	2307      	movs	r3, #7
 80020fc:	e00a      	b.n	8002114 <HAL_GPIO_Init+0x244>
 80020fe:	2305      	movs	r3, #5
 8002100:	e008      	b.n	8002114 <HAL_GPIO_Init+0x244>
 8002102:	2304      	movs	r3, #4
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x244>
 8002106:	2303      	movs	r3, #3
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x244>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x244>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x244>
 8002112:	2300      	movs	r3, #0
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002124:	4937      	ldr	r1, [pc, #220]	; (8002204 <HAL_GPIO_Init+0x334>)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_GPIO_Init+0x350>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002156:	4a32      	ldr	r2, [pc, #200]	; (8002220 <HAL_GPIO_Init+0x350>)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800215c:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_GPIO_Init+0x350>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <HAL_GPIO_Init+0x350>)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_GPIO_Init+0x350>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021aa:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_GPIO_Init+0x350>)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_GPIO_Init+0x350>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_GPIO_Init+0x350>)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f47f ae78 	bne.w	8001ee0 <HAL_GPIO_Init+0x10>
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000
 8002208:	48000400 	.word	0x48000400
 800220c:	48000800 	.word	0x48000800
 8002210:	48000c00 	.word	0x48000c00
 8002214:	48001000 	.word	0x48001000
 8002218:	48001400 	.word	0x48001400
 800221c:	48001800 	.word	0x48001800
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002232:	e0cd      	b.n	80023d0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002234:	2201      	movs	r2, #1
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80c0 	beq.w	80023ca <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800224a:	4a68      	ldr	r2, [pc, #416]	; (80023ec <HAL_GPIO_DeInit+0x1c8>)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002272:	d025      	beq.n	80022c0 <HAL_GPIO_DeInit+0x9c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a5e      	ldr	r2, [pc, #376]	; (80023f0 <HAL_GPIO_DeInit+0x1cc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d01f      	beq.n	80022bc <HAL_GPIO_DeInit+0x98>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_GPIO_DeInit+0x1d0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d019      	beq.n	80022b8 <HAL_GPIO_DeInit+0x94>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a5c      	ldr	r2, [pc, #368]	; (80023f8 <HAL_GPIO_DeInit+0x1d4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_GPIO_DeInit+0x90>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a5b      	ldr	r2, [pc, #364]	; (80023fc <HAL_GPIO_DeInit+0x1d8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00d      	beq.n	80022b0 <HAL_GPIO_DeInit+0x8c>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a5a      	ldr	r2, [pc, #360]	; (8002400 <HAL_GPIO_DeInit+0x1dc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <HAL_GPIO_DeInit+0x88>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_GPIO_DeInit+0x1e0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_GPIO_DeInit+0x84>
 80022a4:	2306      	movs	r3, #6
 80022a6:	e00c      	b.n	80022c2 <HAL_GPIO_DeInit+0x9e>
 80022a8:	2307      	movs	r3, #7
 80022aa:	e00a      	b.n	80022c2 <HAL_GPIO_DeInit+0x9e>
 80022ac:	2305      	movs	r3, #5
 80022ae:	e008      	b.n	80022c2 <HAL_GPIO_DeInit+0x9e>
 80022b0:	2304      	movs	r3, #4
 80022b2:	e006      	b.n	80022c2 <HAL_GPIO_DeInit+0x9e>
 80022b4:	2303      	movs	r3, #3
 80022b6:	e004      	b.n	80022c2 <HAL_GPIO_DeInit+0x9e>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e002      	b.n	80022c2 <HAL_GPIO_DeInit+0x9e>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_GPIO_DeInit+0x9e>
 80022c0:	2300      	movs	r3, #0
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	f002 0203 	and.w	r2, r2, #3
 80022c8:	0092      	lsls	r2, r2, #2
 80022ca:	4093      	lsls	r3, r2
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d132      	bne.n	8002338 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80022d2:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <HAL_GPIO_DeInit+0x1e4>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	494b      	ldr	r1, [pc, #300]	; (8002408 <HAL_GPIO_DeInit+0x1e4>)
 80022dc:	4013      	ands	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_GPIO_DeInit+0x1e4>)
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4947      	ldr	r1, [pc, #284]	; (8002408 <HAL_GPIO_DeInit+0x1e4>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_GPIO_DeInit+0x1e4>)
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4944      	ldr	r1, [pc, #272]	; (8002408 <HAL_GPIO_DeInit+0x1e4>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <HAL_GPIO_DeInit+0x1e4>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	4940      	ldr	r1, [pc, #256]	; (8002408 <HAL_GPIO_DeInit+0x1e4>)
 8002306:	4013      	ands	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800231a:	4a34      	ldr	r2, [pc, #208]	; (80023ec <HAL_GPIO_DeInit+0x1c8>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43da      	mvns	r2, r3
 800232a:	4830      	ldr	r0, [pc, #192]	; (80023ec <HAL_GPIO_DeInit+0x1c8>)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	400a      	ands	r2, r1
 8002332:	3302      	adds	r3, #2
 8002334:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2103      	movs	r1, #3
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	08d2      	lsrs	r2, r2, #3
 800236c:	4019      	ands	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2103      	movs	r1, #3
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	401a      	ands	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	2101      	movs	r1, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2103      	movs	r1, #3
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ba:	2101      	movs	r1, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f af2b 	bne.w	8002234 <HAL_GPIO_DeInit+0x10>
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	48001000 	.word	0x48001000
 8002400:	48001400 	.word	0x48001400
 8002404:	48001800 	.word	0x48001800
 8002408:	40010400 	.word	0x40010400

0800240c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
 8002418:	4613      	mov	r3, r2
 800241a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800241c:	787b      	ldrb	r3, [r7, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002428:	e002      	b.n	8002430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800245a:	e002      	b.n	8002462 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800245c:	887a      	ldrh	r2, [r7, #2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fb8a 	bl	8000ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40010400 	.word	0x40010400

080024a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e081      	b.n	80025b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe fda0 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2224      	movs	r2, #36	; 0x24
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e006      	b.n	8002528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d104      	bne.n	800253a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002538:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	ea42 0103 	orr.w	r1, r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	021a      	lsls	r2, r3, #8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69d9      	ldr	r1, [r3, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e021      	b.n	8002614 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	; 0x24
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7fe fd53 	bl	8001094 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	4608      	mov	r0, r1
 8002626:	4611      	mov	r1, r2
 8002628:	461a      	mov	r2, r3
 800262a:	4603      	mov	r3, r0
 800262c:	817b      	strh	r3, [r7, #10]
 800262e:	460b      	mov	r3, r1
 8002630:	813b      	strh	r3, [r7, #8]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b20      	cmp	r3, #32
 8002640:	f040 80f9 	bne.w	8002836 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_I2C_Mem_Write+0x34>
 800264a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0ed      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_I2C_Mem_Write+0x4e>
 8002666:	2302      	movs	r3, #2
 8002668:	e0e6      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002672:	f7ff fb0f 	bl	8001c94 <HAL_GetTick>
 8002676:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2319      	movs	r3, #25
 800267e:	2201      	movs	r2, #1
 8002680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fac3 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0d1      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2221      	movs	r2, #33	; 0x21
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2240      	movs	r2, #64	; 0x40
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a3a      	ldr	r2, [r7, #32]
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026bc:	88f8      	ldrh	r0, [r7, #6]
 80026be:	893a      	ldrh	r2, [r7, #8]
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4603      	mov	r3, r0
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f9d3 	bl	8002a78 <I2C_RequestMemoryWrite>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0a9      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	d90e      	bls.n	800270c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	22ff      	movs	r2, #255	; 0xff
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fba5 	bl	8002e54 <I2C_TransferConfig>
 800270a:	e00f      	b.n	800272c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	b2da      	uxtb	r2, r3
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fb94 	bl	8002e54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 faad 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e07b      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d034      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x1c8>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d130      	bne.n	80027e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	2200      	movs	r2, #0
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fa3f 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e04d      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2bff      	cmp	r3, #255	; 0xff
 80027a4:	d90e      	bls.n	80027c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	8979      	ldrh	r1, [r7, #10]
 80027b4:	2300      	movs	r3, #0
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fb49 	bl	8002e54 <I2C_TransferConfig>
 80027c2:	e00f      	b.n	80027e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	8979      	ldrh	r1, [r7, #10]
 80027d6:	2300      	movs	r3, #0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fb38 	bl	8002e54 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d19e      	bne.n	800272c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fa8c 	bl	8002d10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e01a      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2220      	movs	r2, #32
 8002808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_I2C_Mem_Write+0x224>)
 8002816:	400b      	ands	r3, r1
 8002818:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	fe00e800 	.word	0xfe00e800

08002844 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	461a      	mov	r2, r3
 8002852:	4603      	mov	r3, r0
 8002854:	817b      	strh	r3, [r7, #10]
 8002856:	460b      	mov	r3, r1
 8002858:	813b      	strh	r3, [r7, #8]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b20      	cmp	r3, #32
 8002868:	f040 80fd 	bne.w	8002a66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_I2C_Mem_Read+0x34>
 8002872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0f1      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_I2C_Mem_Read+0x4e>
 800288e:	2302      	movs	r3, #2
 8002890:	e0ea      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800289a:	f7ff f9fb 	bl	8001c94 <HAL_GetTick>
 800289e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2319      	movs	r3, #25
 80028a6:	2201      	movs	r2, #1
 80028a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f9af 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0d5      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2222      	movs	r2, #34	; 0x22
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a3a      	ldr	r2, [r7, #32]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e4:	88f8      	ldrh	r0, [r7, #6]
 80028e6:	893a      	ldrh	r2, [r7, #8]
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	4603      	mov	r3, r0
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f913 	bl	8002b20 <I2C_RequestMemoryRead>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0ad      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d90e      	bls.n	8002934 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	22ff      	movs	r2, #255	; 0xff
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	b2da      	uxtb	r2, r3
 8002922:	8979      	ldrh	r1, [r7, #10]
 8002924:	4b52      	ldr	r3, [pc, #328]	; (8002a70 <HAL_I2C_Mem_Read+0x22c>)
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fa91 	bl	8002e54 <I2C_TransferConfig>
 8002932:	e00f      	b.n	8002954 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	b2da      	uxtb	r2, r3
 8002944:	8979      	ldrh	r1, [r7, #10]
 8002946:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <HAL_I2C_Mem_Read+0x22c>)
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa80 	bl	8002e54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	2200      	movs	r2, #0
 800295c:	2104      	movs	r1, #4
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f956 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07c      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d034      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x1d0>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d130      	bne.n	8002a14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f927 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e04d      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2bff      	cmp	r3, #255	; 0xff
 80029d4:	d90e      	bls.n	80029f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	2300      	movs	r3, #0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fa31 	bl	8002e54 <I2C_TransferConfig>
 80029f2:	e00f      	b.n	8002a14 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	8979      	ldrh	r1, [r7, #10]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fa20 	bl	8002e54 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d19a      	bne.n	8002954 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f974 	bl	8002d10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e01a      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2220      	movs	r2, #32
 8002a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_I2C_Mem_Read+0x230>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	80002400 	.word	0x80002400
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <I2C_RequestMemoryWrite+0xa4>)
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f9d7 	bl	8002e54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	69b9      	ldr	r1, [r7, #24]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f8f0 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e02c      	b.n	8002b14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac0:	893b      	ldrh	r3, [r7, #8]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
 8002aca:	e015      	b.n	8002af8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002acc:	893b      	ldrh	r3, [r7, #8]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f8d6 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e012      	b.n	8002b14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aee:	893b      	ldrh	r3, [r7, #8]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2200      	movs	r2, #0
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f884 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	80002000 	.word	0x80002000

08002b20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	4608      	mov	r0, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	817b      	strh	r3, [r7, #10]
 8002b32:	460b      	mov	r3, r1
 8002b34:	813b      	strh	r3, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	8979      	ldrh	r1, [r7, #10]
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <I2C_RequestMemoryRead+0xa4>)
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f984 	bl	8002e54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f89d 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e02c      	b.n	8002bba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b66:	893b      	ldrh	r3, [r7, #8]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b70:	e015      	b.n	8002b9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f883 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e012      	b.n	8002bba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b94:	893b      	ldrh	r3, [r7, #8]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2140      	movs	r1, #64	; 0x40
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f831 	bl	8002c10 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	80002000 	.word	0x80002000

08002bc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d007      	beq.n	8002c04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	619a      	str	r2, [r3, #24]
  }
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c20:	e022      	b.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d01e      	beq.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2a:	f7ff f833 	bl	8001c94 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d302      	bcc.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d113      	bne.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e00f      	b.n	8002c88 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d0cd      	beq.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c9c:	e02c      	b.n	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f870 	bl	8002d88 <I2C_IsAcknowledgeFailed>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e02a      	b.n	8002d08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d01e      	beq.n	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe ffeb 	bl	8001c94 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d113      	bne.n	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e007      	b.n	8002d08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d1cb      	bne.n	8002c9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d1c:	e028      	b.n	8002d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f830 	bl	8002d88 <I2C_IsAcknowledgeFailed>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e026      	b.n	8002d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe ffaf 	bl	8001c94 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d113      	bne.n	8002d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e007      	b.n	8002d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d1cf      	bne.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d151      	bne.n	8002e46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da2:	e022      	b.n	8002dea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d01e      	beq.n	8002dea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7fe ff72 	bl	8001c94 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d302      	bcc.n	8002dc2 <I2C_IsAcknowledgeFailed+0x3a>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d113      	bne.n	8002dea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e02e      	b.n	8002e48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d1d5      	bne.n	8002da4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2220      	movs	r2, #32
 8002e06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7ff fedd 	bl	8002bc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <I2C_IsAcknowledgeFailed+0xc8>)
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	fe00e800 	.word	0xfe00e800

08002e54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	817b      	strh	r3, [r7, #10]
 8002e62:	4613      	mov	r3, r2
 8002e64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	0d5b      	lsrs	r3, r3, #21
 8002e70:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <I2C_TransferConfig+0x58>)
 8002e76:	430b      	orrs	r3, r1
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	ea02 0103 	and.w	r1, r2, r3
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e84:	7a7b      	ldrb	r3, [r7, #9]
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	03ff63ff 	.word	0x03ff63ff

08002eb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d138      	bne.n	8002f38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e032      	b.n	8002f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <findslot>:
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <findslot+0x2c>)
 8002f4a:	b510      	push	{r4, lr}
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	b118      	cbz	r0, 8002f5a <findslot+0x12>
 8002f52:	6983      	ldr	r3, [r0, #24]
 8002f54:	b90b      	cbnz	r3, 8002f5a <findslot+0x12>
 8002f56:	f000 faf9 	bl	800354c <__sinit>
 8002f5a:	2c13      	cmp	r4, #19
 8002f5c:	d807      	bhi.n	8002f6e <findslot+0x26>
 8002f5e:	4806      	ldr	r0, [pc, #24]	; (8002f78 <findslot+0x30>)
 8002f60:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002f64:	3201      	adds	r2, #1
 8002f66:	d002      	beq.n	8002f6e <findslot+0x26>
 8002f68:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	2000      	movs	r0, #0
 8002f70:	e7fc      	b.n	8002f6c <findslot+0x24>
 8002f72:	bf00      	nop
 8002f74:	20000068 	.word	0x20000068
 8002f78:	200002d0 	.word	0x200002d0

08002f7c <error>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	4604      	mov	r4, r0
 8002f80:	f000 fa86 	bl	8003490 <__errno>
 8002f84:	2613      	movs	r6, #19
 8002f86:	4605      	mov	r5, r0
 8002f88:	2700      	movs	r7, #0
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	beab      	bkpt	0x00ab
 8002f90:	4606      	mov	r6, r0
 8002f92:	602e      	str	r6, [r5, #0]
 8002f94:	4620      	mov	r0, r4
 8002f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f98 <checkerror>:
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	d101      	bne.n	8002fa0 <checkerror+0x8>
 8002f9c:	f7ff bfee 	b.w	8002f7c <error>
 8002fa0:	4770      	bx	lr

08002fa2 <_swiread>:
 8002fa2:	b530      	push	{r4, r5, lr}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002faa:	9203      	str	r2, [sp, #12]
 8002fac:	2406      	movs	r4, #6
 8002fae:	ad01      	add	r5, sp, #4
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	beab      	bkpt	0x00ab
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff ffed 	bl	8002f98 <checkerror>
 8002fbe:	b005      	add	sp, #20
 8002fc0:	bd30      	pop	{r4, r5, pc}

08002fc2 <_read>:
 8002fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fc4:	4615      	mov	r5, r2
 8002fc6:	9101      	str	r1, [sp, #4]
 8002fc8:	f7ff ffbe 	bl	8002f48 <findslot>
 8002fcc:	9901      	ldr	r1, [sp, #4]
 8002fce:	4604      	mov	r4, r0
 8002fd0:	b938      	cbnz	r0, 8002fe2 <_read+0x20>
 8002fd2:	f000 fa5d 	bl	8003490 <__errno>
 8002fd6:	2309      	movs	r3, #9
 8002fd8:	6003      	str	r3, [r0, #0]
 8002fda:	f04f 30ff 	mov.w	r0, #4294967295
 8002fde:	b003      	add	sp, #12
 8002fe0:	bd30      	pop	{r4, r5, pc}
 8002fe2:	6800      	ldr	r0, [r0, #0]
 8002fe4:	462a      	mov	r2, r5
 8002fe6:	f7ff ffdc 	bl	8002fa2 <_swiread>
 8002fea:	1c43      	adds	r3, r0, #1
 8002fec:	d0f7      	beq.n	8002fde <_read+0x1c>
 8002fee:	6863      	ldr	r3, [r4, #4]
 8002ff0:	1a2a      	subs	r2, r5, r0
 8002ff2:	4413      	add	r3, r2
 8002ff4:	6063      	str	r3, [r4, #4]
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	e7f1      	b.n	8002fde <_read+0x1c>

08002ffa <_swilseek>:
 8002ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	4616      	mov	r6, r2
 8003000:	f7ff ffa2 	bl	8002f48 <findslot>
 8003004:	4605      	mov	r5, r0
 8003006:	b940      	cbnz	r0, 800301a <_swilseek+0x20>
 8003008:	f000 fa42 	bl	8003490 <__errno>
 800300c:	2309      	movs	r3, #9
 800300e:	6003      	str	r3, [r0, #0]
 8003010:	f04f 34ff 	mov.w	r4, #4294967295
 8003014:	4620      	mov	r0, r4
 8003016:	b003      	add	sp, #12
 8003018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301a:	2e02      	cmp	r6, #2
 800301c:	d903      	bls.n	8003026 <_swilseek+0x2c>
 800301e:	f000 fa37 	bl	8003490 <__errno>
 8003022:	2316      	movs	r3, #22
 8003024:	e7f3      	b.n	800300e <_swilseek+0x14>
 8003026:	2e01      	cmp	r6, #1
 8003028:	d112      	bne.n	8003050 <_swilseek+0x56>
 800302a:	6843      	ldr	r3, [r0, #4]
 800302c:	18e4      	adds	r4, r4, r3
 800302e:	d4f6      	bmi.n	800301e <_swilseek+0x24>
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	260a      	movs	r6, #10
 8003034:	e9cd 3400 	strd	r3, r4, [sp]
 8003038:	466f      	mov	r7, sp
 800303a:	4630      	mov	r0, r6
 800303c:	4639      	mov	r1, r7
 800303e:	beab      	bkpt	0x00ab
 8003040:	4606      	mov	r6, r0
 8003042:	4630      	mov	r0, r6
 8003044:	f7ff ffa8 	bl	8002f98 <checkerror>
 8003048:	2800      	cmp	r0, #0
 800304a:	dbe1      	blt.n	8003010 <_swilseek+0x16>
 800304c:	606c      	str	r4, [r5, #4]
 800304e:	e7e1      	b.n	8003014 <_swilseek+0x1a>
 8003050:	2e02      	cmp	r6, #2
 8003052:	d1ed      	bne.n	8003030 <_swilseek+0x36>
 8003054:	6803      	ldr	r3, [r0, #0]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	260c      	movs	r6, #12
 800305a:	466f      	mov	r7, sp
 800305c:	4630      	mov	r0, r6
 800305e:	4639      	mov	r1, r7
 8003060:	beab      	bkpt	0x00ab
 8003062:	4606      	mov	r6, r0
 8003064:	4630      	mov	r0, r6
 8003066:	f7ff ff97 	bl	8002f98 <checkerror>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	d0d0      	beq.n	8003010 <_swilseek+0x16>
 800306e:	4404      	add	r4, r0
 8003070:	e7de      	b.n	8003030 <_swilseek+0x36>

08003072 <_lseek>:
 8003072:	f7ff bfc2 	b.w	8002ffa <_swilseek>

08003076 <_swiwrite>:
 8003076:	b530      	push	{r4, r5, lr}
 8003078:	b085      	sub	sp, #20
 800307a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800307e:	9203      	str	r2, [sp, #12]
 8003080:	2405      	movs	r4, #5
 8003082:	ad01      	add	r5, sp, #4
 8003084:	4620      	mov	r0, r4
 8003086:	4629      	mov	r1, r5
 8003088:	beab      	bkpt	0x00ab
 800308a:	4604      	mov	r4, r0
 800308c:	4620      	mov	r0, r4
 800308e:	f7ff ff83 	bl	8002f98 <checkerror>
 8003092:	b005      	add	sp, #20
 8003094:	bd30      	pop	{r4, r5, pc}

08003096 <_write>:
 8003096:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003098:	4615      	mov	r5, r2
 800309a:	9101      	str	r1, [sp, #4]
 800309c:	f7ff ff54 	bl	8002f48 <findslot>
 80030a0:	9901      	ldr	r1, [sp, #4]
 80030a2:	4604      	mov	r4, r0
 80030a4:	b930      	cbnz	r0, 80030b4 <_write+0x1e>
 80030a6:	f000 f9f3 	bl	8003490 <__errno>
 80030aa:	2309      	movs	r3, #9
 80030ac:	6003      	str	r3, [r0, #0]
 80030ae:	f04f 30ff 	mov.w	r0, #4294967295
 80030b2:	e012      	b.n	80030da <_write+0x44>
 80030b4:	6800      	ldr	r0, [r0, #0]
 80030b6:	462a      	mov	r2, r5
 80030b8:	f7ff ffdd 	bl	8003076 <_swiwrite>
 80030bc:	2800      	cmp	r0, #0
 80030be:	dbf6      	blt.n	80030ae <_write+0x18>
 80030c0:	6862      	ldr	r2, [r4, #4]
 80030c2:	1a2b      	subs	r3, r5, r0
 80030c4:	441a      	add	r2, r3
 80030c6:	42a8      	cmp	r0, r5
 80030c8:	6062      	str	r2, [r4, #4]
 80030ca:	d105      	bne.n	80030d8 <_write+0x42>
 80030cc:	2000      	movs	r0, #0
 80030ce:	b003      	add	sp, #12
 80030d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030d4:	f7ff bf52 	b.w	8002f7c <error>
 80030d8:	4618      	mov	r0, r3
 80030da:	b003      	add	sp, #12
 80030dc:	bd30      	pop	{r4, r5, pc}

080030de <_swiclose>:
 80030de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030e0:	2402      	movs	r4, #2
 80030e2:	9001      	str	r0, [sp, #4]
 80030e4:	ad01      	add	r5, sp, #4
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	beab      	bkpt	0x00ab
 80030ec:	4604      	mov	r4, r0
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7ff ff52 	bl	8002f98 <checkerror>
 80030f4:	b003      	add	sp, #12
 80030f6:	bd30      	pop	{r4, r5, pc}

080030f8 <_close>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4605      	mov	r5, r0
 80030fc:	f7ff ff24 	bl	8002f48 <findslot>
 8003100:	4604      	mov	r4, r0
 8003102:	b930      	cbnz	r0, 8003112 <_close+0x1a>
 8003104:	f000 f9c4 	bl	8003490 <__errno>
 8003108:	2309      	movs	r3, #9
 800310a:	6003      	str	r3, [r0, #0]
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	bd38      	pop	{r3, r4, r5, pc}
 8003112:	3d01      	subs	r5, #1
 8003114:	2d01      	cmp	r5, #1
 8003116:	d809      	bhi.n	800312c <_close+0x34>
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <_close+0x48>)
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	429a      	cmp	r2, r3
 8003120:	d104      	bne.n	800312c <_close+0x34>
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	6003      	str	r3, [r0, #0]
 8003128:	2000      	movs	r0, #0
 800312a:	e7f1      	b.n	8003110 <_close+0x18>
 800312c:	6820      	ldr	r0, [r4, #0]
 800312e:	f7ff ffd6 	bl	80030de <_swiclose>
 8003132:	2800      	cmp	r0, #0
 8003134:	d1ec      	bne.n	8003110 <_close+0x18>
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	e7e8      	b.n	8003110 <_close+0x18>
 800313e:	bf00      	nop
 8003140:	200002d0 	.word	0x200002d0

08003144 <_getpid>:
 8003144:	2001      	movs	r0, #1
 8003146:	4770      	bx	lr

08003148 <_swistat>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	460c      	mov	r4, r1
 800314c:	f7ff fefc 	bl	8002f48 <findslot>
 8003150:	4605      	mov	r5, r0
 8003152:	b930      	cbnz	r0, 8003162 <_swistat+0x1a>
 8003154:	f000 f99c 	bl	8003490 <__errno>
 8003158:	2309      	movs	r3, #9
 800315a:	6003      	str	r3, [r0, #0]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	6863      	ldr	r3, [r4, #4]
 8003164:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003168:	6063      	str	r3, [r4, #4]
 800316a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800316e:	64a3      	str	r3, [r4, #72]	; 0x48
 8003170:	260c      	movs	r6, #12
 8003172:	4630      	mov	r0, r6
 8003174:	4629      	mov	r1, r5
 8003176:	beab      	bkpt	0x00ab
 8003178:	4605      	mov	r5, r0
 800317a:	4628      	mov	r0, r5
 800317c:	f7ff ff0c 	bl	8002f98 <checkerror>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	bf1c      	itt	ne
 8003184:	6120      	strne	r0, [r4, #16]
 8003186:	2000      	movne	r0, #0
 8003188:	e7ea      	b.n	8003160 <_swistat+0x18>

0800318a <_fstat>:
 800318a:	460b      	mov	r3, r1
 800318c:	b510      	push	{r4, lr}
 800318e:	2100      	movs	r1, #0
 8003190:	4604      	mov	r4, r0
 8003192:	2258      	movs	r2, #88	; 0x58
 8003194:	4618      	mov	r0, r3
 8003196:	f000 faac 	bl	80036f2 <memset>
 800319a:	4601      	mov	r1, r0
 800319c:	4620      	mov	r0, r4
 800319e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a2:	f7ff bfd1 	b.w	8003148 <_swistat>

080031a6 <_stat>:
 80031a6:	b538      	push	{r3, r4, r5, lr}
 80031a8:	460d      	mov	r5, r1
 80031aa:	4604      	mov	r4, r0
 80031ac:	2258      	movs	r2, #88	; 0x58
 80031ae:	2100      	movs	r1, #0
 80031b0:	4628      	mov	r0, r5
 80031b2:	f000 fa9e 	bl	80036f2 <memset>
 80031b6:	4620      	mov	r0, r4
 80031b8:	2100      	movs	r1, #0
 80031ba:	f000 f811 	bl	80031e0 <_swiopen>
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	4604      	mov	r4, r0
 80031c2:	d00b      	beq.n	80031dc <_stat+0x36>
 80031c4:	686b      	ldr	r3, [r5, #4]
 80031c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80031ca:	606b      	str	r3, [r5, #4]
 80031cc:	4629      	mov	r1, r5
 80031ce:	f7ff ffbb 	bl	8003148 <_swistat>
 80031d2:	4605      	mov	r5, r0
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff ff8f 	bl	80030f8 <_close>
 80031da:	462c      	mov	r4, r5
 80031dc:	4620      	mov	r0, r4
 80031de:	bd38      	pop	{r3, r4, r5, pc}

080031e0 <_swiopen>:
 80031e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031e4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003290 <_swiopen+0xb0>
 80031e8:	b097      	sub	sp, #92	; 0x5c
 80031ea:	4607      	mov	r7, r0
 80031ec:	460e      	mov	r6, r1
 80031ee:	2500      	movs	r5, #0
 80031f0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80031f4:	1c61      	adds	r1, r4, #1
 80031f6:	d037      	beq.n	8003268 <_swiopen+0x88>
 80031f8:	3501      	adds	r5, #1
 80031fa:	2d14      	cmp	r5, #20
 80031fc:	d1f8      	bne.n	80031f0 <_swiopen+0x10>
 80031fe:	f000 f947 	bl	8003490 <__errno>
 8003202:	2318      	movs	r3, #24
 8003204:	6003      	str	r3, [r0, #0]
 8003206:	f04f 34ff 	mov.w	r4, #4294967295
 800320a:	e03d      	b.n	8003288 <_swiopen+0xa8>
 800320c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003210:	f240 6301 	movw	r3, #1537	; 0x601
 8003214:	07b2      	lsls	r2, r6, #30
 8003216:	bf48      	it	mi
 8003218:	f044 0402 	orrmi.w	r4, r4, #2
 800321c:	421e      	tst	r6, r3
 800321e:	bf18      	it	ne
 8003220:	f044 0404 	orrne.w	r4, r4, #4
 8003224:	0733      	lsls	r3, r6, #28
 8003226:	bf48      	it	mi
 8003228:	f024 0404 	bicmi.w	r4, r4, #4
 800322c:	4638      	mov	r0, r7
 800322e:	bf48      	it	mi
 8003230:	f044 0408 	orrmi.w	r4, r4, #8
 8003234:	9700      	str	r7, [sp, #0]
 8003236:	f7fc ffcb 	bl	80001d0 <strlen>
 800323a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800323e:	2401      	movs	r4, #1
 8003240:	4620      	mov	r0, r4
 8003242:	4649      	mov	r1, r9
 8003244:	beab      	bkpt	0x00ab
 8003246:	4604      	mov	r4, r0
 8003248:	2c00      	cmp	r4, #0
 800324a:	db08      	blt.n	800325e <_swiopen+0x7e>
 800324c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003250:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003254:	2300      	movs	r3, #0
 8003256:	f8c8 3004 	str.w	r3, [r8, #4]
 800325a:	462c      	mov	r4, r5
 800325c:	e014      	b.n	8003288 <_swiopen+0xa8>
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff fe8c 	bl	8002f7c <error>
 8003264:	4604      	mov	r4, r0
 8003266:	e00f      	b.n	8003288 <_swiopen+0xa8>
 8003268:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800326c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003270:	46e9      	mov	r9, sp
 8003272:	d1cb      	bne.n	800320c <_swiopen+0x2c>
 8003274:	4649      	mov	r1, r9
 8003276:	4638      	mov	r0, r7
 8003278:	f7ff ff95 	bl	80031a6 <_stat>
 800327c:	3001      	adds	r0, #1
 800327e:	d0c5      	beq.n	800320c <_swiopen+0x2c>
 8003280:	f000 f906 	bl	8003490 <__errno>
 8003284:	2311      	movs	r3, #17
 8003286:	6003      	str	r3, [r0, #0]
 8003288:	4620      	mov	r0, r4
 800328a:	b017      	add	sp, #92	; 0x5c
 800328c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003290:	200002d0 	.word	0x200002d0

08003294 <_get_semihosting_exts>:
 8003294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003298:	4606      	mov	r6, r0
 800329a:	460f      	mov	r7, r1
 800329c:	482a      	ldr	r0, [pc, #168]	; (8003348 <_get_semihosting_exts+0xb4>)
 800329e:	2100      	movs	r1, #0
 80032a0:	4615      	mov	r5, r2
 80032a2:	f7ff ff9d 	bl	80031e0 <_swiopen>
 80032a6:	462a      	mov	r2, r5
 80032a8:	4604      	mov	r4, r0
 80032aa:	2100      	movs	r1, #0
 80032ac:	4630      	mov	r0, r6
 80032ae:	f000 fa20 	bl	80036f2 <memset>
 80032b2:	1c63      	adds	r3, r4, #1
 80032b4:	d016      	beq.n	80032e4 <_get_semihosting_exts+0x50>
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff fe46 	bl	8002f48 <findslot>
 80032bc:	f04f 090c 	mov.w	r9, #12
 80032c0:	4680      	mov	r8, r0
 80032c2:	4648      	mov	r0, r9
 80032c4:	4641      	mov	r1, r8
 80032c6:	beab      	bkpt	0x00ab
 80032c8:	4680      	mov	r8, r0
 80032ca:	4640      	mov	r0, r8
 80032cc:	f7ff fe64 	bl	8002f98 <checkerror>
 80032d0:	2803      	cmp	r0, #3
 80032d2:	dd02      	ble.n	80032da <_get_semihosting_exts+0x46>
 80032d4:	1ec3      	subs	r3, r0, #3
 80032d6:	42ab      	cmp	r3, r5
 80032d8:	dc08      	bgt.n	80032ec <_get_semihosting_exts+0x58>
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff ff0c 	bl	80030f8 <_close>
 80032e0:	f04f 34ff 	mov.w	r4, #4294967295
 80032e4:	4620      	mov	r0, r4
 80032e6:	b003      	add	sp, #12
 80032e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032ec:	2204      	movs	r2, #4
 80032ee:	eb0d 0102 	add.w	r1, sp, r2
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff fe65 	bl	8002fc2 <_read>
 80032f8:	2803      	cmp	r0, #3
 80032fa:	ddee      	ble.n	80032da <_get_semihosting_exts+0x46>
 80032fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003300:	2b53      	cmp	r3, #83	; 0x53
 8003302:	d1ea      	bne.n	80032da <_get_semihosting_exts+0x46>
 8003304:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003308:	2b48      	cmp	r3, #72	; 0x48
 800330a:	d1e6      	bne.n	80032da <_get_semihosting_exts+0x46>
 800330c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003310:	2b46      	cmp	r3, #70	; 0x46
 8003312:	d1e2      	bne.n	80032da <_get_semihosting_exts+0x46>
 8003314:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003318:	2b42      	cmp	r3, #66	; 0x42
 800331a:	d1de      	bne.n	80032da <_get_semihosting_exts+0x46>
 800331c:	2201      	movs	r2, #1
 800331e:	4639      	mov	r1, r7
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff fe6a 	bl	8002ffa <_swilseek>
 8003326:	2800      	cmp	r0, #0
 8003328:	dbd7      	blt.n	80032da <_get_semihosting_exts+0x46>
 800332a:	462a      	mov	r2, r5
 800332c:	4631      	mov	r1, r6
 800332e:	4620      	mov	r0, r4
 8003330:	f7ff fe47 	bl	8002fc2 <_read>
 8003334:	4605      	mov	r5, r0
 8003336:	4620      	mov	r0, r4
 8003338:	f7ff fede 	bl	80030f8 <_close>
 800333c:	4628      	mov	r0, r5
 800333e:	f7ff fe2b 	bl	8002f98 <checkerror>
 8003342:	4604      	mov	r4, r0
 8003344:	e7ce      	b.n	80032e4 <_get_semihosting_exts+0x50>
 8003346:	bf00      	nop
 8003348:	080060af 	.word	0x080060af

0800334c <initialise_semihosting_exts>:
 800334c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800334e:	4d0a      	ldr	r5, [pc, #40]	; (8003378 <initialise_semihosting_exts+0x2c>)
 8003350:	4c0a      	ldr	r4, [pc, #40]	; (800337c <initialise_semihosting_exts+0x30>)
 8003352:	2100      	movs	r1, #0
 8003354:	2201      	movs	r2, #1
 8003356:	a801      	add	r0, sp, #4
 8003358:	6029      	str	r1, [r5, #0]
 800335a:	6022      	str	r2, [r4, #0]
 800335c:	f7ff ff9a 	bl	8003294 <_get_semihosting_exts>
 8003360:	2800      	cmp	r0, #0
 8003362:	dd07      	ble.n	8003374 <initialise_semihosting_exts+0x28>
 8003364:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003368:	f003 0201 	and.w	r2, r3, #1
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	602a      	str	r2, [r5, #0]
 8003372:	6023      	str	r3, [r4, #0]
 8003374:	b003      	add	sp, #12
 8003376:	bd30      	pop	{r4, r5, pc}
 8003378:	20000060 	.word	0x20000060
 800337c:	20000064 	.word	0x20000064

08003380 <_has_ext_stdout_stderr>:
 8003380:	b510      	push	{r4, lr}
 8003382:	4c04      	ldr	r4, [pc, #16]	; (8003394 <_has_ext_stdout_stderr+0x14>)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	da01      	bge.n	800338e <_has_ext_stdout_stderr+0xe>
 800338a:	f7ff ffdf 	bl	800334c <initialise_semihosting_exts>
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	bd10      	pop	{r4, pc}
 8003392:	bf00      	nop
 8003394:	20000064 	.word	0x20000064

08003398 <initialise_monitor_handles>:
 8003398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339c:	b085      	sub	sp, #20
 800339e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003450 <initialise_monitor_handles+0xb8>
 80033a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80033a6:	2303      	movs	r3, #3
 80033a8:	2400      	movs	r4, #0
 80033aa:	9303      	str	r3, [sp, #12]
 80033ac:	af01      	add	r7, sp, #4
 80033ae:	9402      	str	r4, [sp, #8]
 80033b0:	2501      	movs	r5, #1
 80033b2:	4628      	mov	r0, r5
 80033b4:	4639      	mov	r1, r7
 80033b6:	beab      	bkpt	0x00ab
 80033b8:	4605      	mov	r5, r0
 80033ba:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003454 <initialise_monitor_handles+0xbc>
 80033be:	4623      	mov	r3, r4
 80033c0:	4c20      	ldr	r4, [pc, #128]	; (8003444 <initialise_monitor_handles+0xac>)
 80033c2:	f8c8 5000 	str.w	r5, [r8]
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ca:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80033ce:	3301      	adds	r3, #1
 80033d0:	2b14      	cmp	r3, #20
 80033d2:	d1fa      	bne.n	80033ca <initialise_monitor_handles+0x32>
 80033d4:	f7ff ffd4 	bl	8003380 <_has_ext_stdout_stderr>
 80033d8:	4d1b      	ldr	r5, [pc, #108]	; (8003448 <initialise_monitor_handles+0xb0>)
 80033da:	b1d0      	cbz	r0, 8003412 <initialise_monitor_handles+0x7a>
 80033dc:	f04f 0a03 	mov.w	sl, #3
 80033e0:	2304      	movs	r3, #4
 80033e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80033e6:	2601      	movs	r6, #1
 80033e8:	f8cd a00c 	str.w	sl, [sp, #12]
 80033ec:	9302      	str	r3, [sp, #8]
 80033ee:	4630      	mov	r0, r6
 80033f0:	4639      	mov	r1, r7
 80033f2:	beab      	bkpt	0x00ab
 80033f4:	4683      	mov	fp, r0
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <initialise_monitor_handles+0xb4>)
 80033f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80033fc:	f8c3 b000 	str.w	fp, [r3]
 8003400:	2308      	movs	r3, #8
 8003402:	f8cd a00c 	str.w	sl, [sp, #12]
 8003406:	9302      	str	r3, [sp, #8]
 8003408:	4630      	mov	r0, r6
 800340a:	4639      	mov	r1, r7
 800340c:	beab      	bkpt	0x00ab
 800340e:	4606      	mov	r6, r0
 8003410:	602e      	str	r6, [r5, #0]
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	bf02      	ittt	eq
 8003418:	4b0c      	ldreq	r3, [pc, #48]	; (800344c <initialise_monitor_handles+0xb4>)
 800341a:	681b      	ldreq	r3, [r3, #0]
 800341c:	602b      	streq	r3, [r5, #0]
 800341e:	2600      	movs	r6, #0
 8003420:	f8d8 3000 	ldr.w	r3, [r8]
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	6066      	str	r6, [r4, #4]
 8003428:	f7ff ffaa 	bl	8003380 <_has_ext_stdout_stderr>
 800342c:	b130      	cbz	r0, 800343c <initialise_monitor_handles+0xa4>
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <initialise_monitor_handles+0xb4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003436:	682b      	ldr	r3, [r5, #0]
 8003438:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800343c:	b005      	add	sp, #20
 800343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003442:	bf00      	nop
 8003444:	200002d0 	.word	0x200002d0
 8003448:	200002c4 	.word	0x200002c4
 800344c:	200002cc 	.word	0x200002cc
 8003450:	080060c5 	.word	0x080060c5
 8003454:	200002c8 	.word	0x200002c8

08003458 <_isatty>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	f7ff fd75 	bl	8002f48 <findslot>
 800345e:	2509      	movs	r5, #9
 8003460:	4604      	mov	r4, r0
 8003462:	b920      	cbnz	r0, 800346e <_isatty+0x16>
 8003464:	f000 f814 	bl	8003490 <__errno>
 8003468:	6005      	str	r5, [r0, #0]
 800346a:	4620      	mov	r0, r4
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	4628      	mov	r0, r5
 8003470:	4621      	mov	r1, r4
 8003472:	beab      	bkpt	0x00ab
 8003474:	4604      	mov	r4, r0
 8003476:	2c01      	cmp	r4, #1
 8003478:	d0f7      	beq.n	800346a <_isatty+0x12>
 800347a:	f000 f809 	bl	8003490 <__errno>
 800347e:	2400      	movs	r4, #0
 8003480:	4605      	mov	r5, r0
 8003482:	2613      	movs	r6, #19
 8003484:	4630      	mov	r0, r6
 8003486:	4621      	mov	r1, r4
 8003488:	beab      	bkpt	0x00ab
 800348a:	4606      	mov	r6, r0
 800348c:	602e      	str	r6, [r5, #0]
 800348e:	e7ec      	b.n	800346a <_isatty+0x12>

08003490 <__errno>:
 8003490:	4b01      	ldr	r3, [pc, #4]	; (8003498 <__errno+0x8>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000068 	.word	0x20000068

0800349c <std>:
 800349c:	2300      	movs	r3, #0
 800349e:	b510      	push	{r4, lr}
 80034a0:	4604      	mov	r4, r0
 80034a2:	e9c0 3300 	strd	r3, r3, [r0]
 80034a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034aa:	6083      	str	r3, [r0, #8]
 80034ac:	8181      	strh	r1, [r0, #12]
 80034ae:	6643      	str	r3, [r0, #100]	; 0x64
 80034b0:	81c2      	strh	r2, [r0, #14]
 80034b2:	6183      	str	r3, [r0, #24]
 80034b4:	4619      	mov	r1, r3
 80034b6:	2208      	movs	r2, #8
 80034b8:	305c      	adds	r0, #92	; 0x5c
 80034ba:	f000 f91a 	bl	80036f2 <memset>
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <std+0x38>)
 80034c0:	6263      	str	r3, [r4, #36]	; 0x24
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <std+0x3c>)
 80034c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <std+0x40>)
 80034c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <std+0x44>)
 80034cc:	6224      	str	r4, [r4, #32]
 80034ce:	6323      	str	r3, [r4, #48]	; 0x30
 80034d0:	bd10      	pop	{r4, pc}
 80034d2:	bf00      	nop
 80034d4:	0800423d 	.word	0x0800423d
 80034d8:	0800425f 	.word	0x0800425f
 80034dc:	08004297 	.word	0x08004297
 80034e0:	080042bb 	.word	0x080042bb

080034e4 <_cleanup_r>:
 80034e4:	4901      	ldr	r1, [pc, #4]	; (80034ec <_cleanup_r+0x8>)
 80034e6:	f000 b8af 	b.w	8003648 <_fwalk_reent>
 80034ea:	bf00      	nop
 80034ec:	080052c9 	.word	0x080052c9

080034f0 <__sfmoreglue>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	2268      	movs	r2, #104	; 0x68
 80034f4:	1e4d      	subs	r5, r1, #1
 80034f6:	4355      	muls	r5, r2
 80034f8:	460e      	mov	r6, r1
 80034fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034fe:	f000 f921 	bl	8003744 <_malloc_r>
 8003502:	4604      	mov	r4, r0
 8003504:	b140      	cbz	r0, 8003518 <__sfmoreglue+0x28>
 8003506:	2100      	movs	r1, #0
 8003508:	e9c0 1600 	strd	r1, r6, [r0]
 800350c:	300c      	adds	r0, #12
 800350e:	60a0      	str	r0, [r4, #8]
 8003510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003514:	f000 f8ed 	bl	80036f2 <memset>
 8003518:	4620      	mov	r0, r4
 800351a:	bd70      	pop	{r4, r5, r6, pc}

0800351c <__sfp_lock_acquire>:
 800351c:	4801      	ldr	r0, [pc, #4]	; (8003524 <__sfp_lock_acquire+0x8>)
 800351e:	f000 b8d8 	b.w	80036d2 <__retarget_lock_acquire_recursive>
 8003522:	bf00      	nop
 8003524:	20000371 	.word	0x20000371

08003528 <__sfp_lock_release>:
 8003528:	4801      	ldr	r0, [pc, #4]	; (8003530 <__sfp_lock_release+0x8>)
 800352a:	f000 b8d3 	b.w	80036d4 <__retarget_lock_release_recursive>
 800352e:	bf00      	nop
 8003530:	20000371 	.word	0x20000371

08003534 <__sinit_lock_acquire>:
 8003534:	4801      	ldr	r0, [pc, #4]	; (800353c <__sinit_lock_acquire+0x8>)
 8003536:	f000 b8cc 	b.w	80036d2 <__retarget_lock_acquire_recursive>
 800353a:	bf00      	nop
 800353c:	20000372 	.word	0x20000372

08003540 <__sinit_lock_release>:
 8003540:	4801      	ldr	r0, [pc, #4]	; (8003548 <__sinit_lock_release+0x8>)
 8003542:	f000 b8c7 	b.w	80036d4 <__retarget_lock_release_recursive>
 8003546:	bf00      	nop
 8003548:	20000372 	.word	0x20000372

0800354c <__sinit>:
 800354c:	b510      	push	{r4, lr}
 800354e:	4604      	mov	r4, r0
 8003550:	f7ff fff0 	bl	8003534 <__sinit_lock_acquire>
 8003554:	69a3      	ldr	r3, [r4, #24]
 8003556:	b11b      	cbz	r3, 8003560 <__sinit+0x14>
 8003558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800355c:	f7ff bff0 	b.w	8003540 <__sinit_lock_release>
 8003560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003564:	6523      	str	r3, [r4, #80]	; 0x50
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <__sinit+0x68>)
 8003568:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <__sinit+0x6c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	62a2      	str	r2, [r4, #40]	; 0x28
 800356e:	42a3      	cmp	r3, r4
 8003570:	bf04      	itt	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	61a3      	streq	r3, [r4, #24]
 8003576:	4620      	mov	r0, r4
 8003578:	f000 f820 	bl	80035bc <__sfp>
 800357c:	6060      	str	r0, [r4, #4]
 800357e:	4620      	mov	r0, r4
 8003580:	f000 f81c 	bl	80035bc <__sfp>
 8003584:	60a0      	str	r0, [r4, #8]
 8003586:	4620      	mov	r0, r4
 8003588:	f000 f818 	bl	80035bc <__sfp>
 800358c:	2200      	movs	r2, #0
 800358e:	60e0      	str	r0, [r4, #12]
 8003590:	2104      	movs	r1, #4
 8003592:	6860      	ldr	r0, [r4, #4]
 8003594:	f7ff ff82 	bl	800349c <std>
 8003598:	68a0      	ldr	r0, [r4, #8]
 800359a:	2201      	movs	r2, #1
 800359c:	2109      	movs	r1, #9
 800359e:	f7ff ff7d 	bl	800349c <std>
 80035a2:	68e0      	ldr	r0, [r4, #12]
 80035a4:	2202      	movs	r2, #2
 80035a6:	2112      	movs	r1, #18
 80035a8:	f7ff ff78 	bl	800349c <std>
 80035ac:	2301      	movs	r3, #1
 80035ae:	61a3      	str	r3, [r4, #24]
 80035b0:	e7d2      	b.n	8003558 <__sinit+0xc>
 80035b2:	bf00      	nop
 80035b4:	0800612c 	.word	0x0800612c
 80035b8:	080034e5 	.word	0x080034e5

080035bc <__sfp>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	4607      	mov	r7, r0
 80035c0:	f7ff ffac 	bl	800351c <__sfp_lock_acquire>
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <__sfp+0x84>)
 80035c6:	681e      	ldr	r6, [r3, #0]
 80035c8:	69b3      	ldr	r3, [r6, #24]
 80035ca:	b913      	cbnz	r3, 80035d2 <__sfp+0x16>
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7ff ffbd 	bl	800354c <__sinit>
 80035d2:	3648      	adds	r6, #72	; 0x48
 80035d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035d8:	3b01      	subs	r3, #1
 80035da:	d503      	bpl.n	80035e4 <__sfp+0x28>
 80035dc:	6833      	ldr	r3, [r6, #0]
 80035de:	b30b      	cbz	r3, 8003624 <__sfp+0x68>
 80035e0:	6836      	ldr	r6, [r6, #0]
 80035e2:	e7f7      	b.n	80035d4 <__sfp+0x18>
 80035e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035e8:	b9d5      	cbnz	r5, 8003620 <__sfp+0x64>
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <__sfp+0x88>)
 80035ec:	60e3      	str	r3, [r4, #12]
 80035ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035f2:	6665      	str	r5, [r4, #100]	; 0x64
 80035f4:	f000 f86c 	bl	80036d0 <__retarget_lock_init_recursive>
 80035f8:	f7ff ff96 	bl	8003528 <__sfp_lock_release>
 80035fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003604:	6025      	str	r5, [r4, #0]
 8003606:	61a5      	str	r5, [r4, #24]
 8003608:	2208      	movs	r2, #8
 800360a:	4629      	mov	r1, r5
 800360c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003610:	f000 f86f 	bl	80036f2 <memset>
 8003614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800361c:	4620      	mov	r0, r4
 800361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003620:	3468      	adds	r4, #104	; 0x68
 8003622:	e7d9      	b.n	80035d8 <__sfp+0x1c>
 8003624:	2104      	movs	r1, #4
 8003626:	4638      	mov	r0, r7
 8003628:	f7ff ff62 	bl	80034f0 <__sfmoreglue>
 800362c:	4604      	mov	r4, r0
 800362e:	6030      	str	r0, [r6, #0]
 8003630:	2800      	cmp	r0, #0
 8003632:	d1d5      	bne.n	80035e0 <__sfp+0x24>
 8003634:	f7ff ff78 	bl	8003528 <__sfp_lock_release>
 8003638:	230c      	movs	r3, #12
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	e7ee      	b.n	800361c <__sfp+0x60>
 800363e:	bf00      	nop
 8003640:	0800612c 	.word	0x0800612c
 8003644:	ffff0001 	.word	0xffff0001

08003648 <_fwalk_reent>:
 8003648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800364c:	4606      	mov	r6, r0
 800364e:	4688      	mov	r8, r1
 8003650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003654:	2700      	movs	r7, #0
 8003656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800365a:	f1b9 0901 	subs.w	r9, r9, #1
 800365e:	d505      	bpl.n	800366c <_fwalk_reent+0x24>
 8003660:	6824      	ldr	r4, [r4, #0]
 8003662:	2c00      	cmp	r4, #0
 8003664:	d1f7      	bne.n	8003656 <_fwalk_reent+0xe>
 8003666:	4638      	mov	r0, r7
 8003668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800366c:	89ab      	ldrh	r3, [r5, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d907      	bls.n	8003682 <_fwalk_reent+0x3a>
 8003672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003676:	3301      	adds	r3, #1
 8003678:	d003      	beq.n	8003682 <_fwalk_reent+0x3a>
 800367a:	4629      	mov	r1, r5
 800367c:	4630      	mov	r0, r6
 800367e:	47c0      	blx	r8
 8003680:	4307      	orrs	r7, r0
 8003682:	3568      	adds	r5, #104	; 0x68
 8003684:	e7e9      	b.n	800365a <_fwalk_reent+0x12>
	...

08003688 <__libc_init_array>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	4d0d      	ldr	r5, [pc, #52]	; (80036c0 <__libc_init_array+0x38>)
 800368c:	4c0d      	ldr	r4, [pc, #52]	; (80036c4 <__libc_init_array+0x3c>)
 800368e:	1b64      	subs	r4, r4, r5
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	2600      	movs	r6, #0
 8003694:	42a6      	cmp	r6, r4
 8003696:	d109      	bne.n	80036ac <__libc_init_array+0x24>
 8003698:	4d0b      	ldr	r5, [pc, #44]	; (80036c8 <__libc_init_array+0x40>)
 800369a:	4c0c      	ldr	r4, [pc, #48]	; (80036cc <__libc_init_array+0x44>)
 800369c:	f002 fcdc 	bl	8006058 <_init>
 80036a0:	1b64      	subs	r4, r4, r5
 80036a2:	10a4      	asrs	r4, r4, #2
 80036a4:	2600      	movs	r6, #0
 80036a6:	42a6      	cmp	r6, r4
 80036a8:	d105      	bne.n	80036b6 <__libc_init_array+0x2e>
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
 80036ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b0:	4798      	blx	r3
 80036b2:	3601      	adds	r6, #1
 80036b4:	e7ee      	b.n	8003694 <__libc_init_array+0xc>
 80036b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ba:	4798      	blx	r3
 80036bc:	3601      	adds	r6, #1
 80036be:	e7f2      	b.n	80036a6 <__libc_init_array+0x1e>
 80036c0:	080064a8 	.word	0x080064a8
 80036c4:	080064a8 	.word	0x080064a8
 80036c8:	080064a8 	.word	0x080064a8
 80036cc:	080064ac 	.word	0x080064ac

080036d0 <__retarget_lock_init_recursive>:
 80036d0:	4770      	bx	lr

080036d2 <__retarget_lock_acquire_recursive>:
 80036d2:	4770      	bx	lr

080036d4 <__retarget_lock_release_recursive>:
 80036d4:	4770      	bx	lr

080036d6 <memcpy>:
 80036d6:	440a      	add	r2, r1
 80036d8:	4291      	cmp	r1, r2
 80036da:	f100 33ff 	add.w	r3, r0, #4294967295
 80036de:	d100      	bne.n	80036e2 <memcpy+0xc>
 80036e0:	4770      	bx	lr
 80036e2:	b510      	push	{r4, lr}
 80036e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ec:	4291      	cmp	r1, r2
 80036ee:	d1f9      	bne.n	80036e4 <memcpy+0xe>
 80036f0:	bd10      	pop	{r4, pc}

080036f2 <memset>:
 80036f2:	4402      	add	r2, r0
 80036f4:	4603      	mov	r3, r0
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d100      	bne.n	80036fc <memset+0xa>
 80036fa:	4770      	bx	lr
 80036fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003700:	e7f9      	b.n	80036f6 <memset+0x4>
	...

08003704 <sbrk_aligned>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4e0e      	ldr	r6, [pc, #56]	; (8003740 <sbrk_aligned+0x3c>)
 8003708:	460c      	mov	r4, r1
 800370a:	6831      	ldr	r1, [r6, #0]
 800370c:	4605      	mov	r5, r0
 800370e:	b911      	cbnz	r1, 8003716 <sbrk_aligned+0x12>
 8003710:	f000 fd84 	bl	800421c <_sbrk_r>
 8003714:	6030      	str	r0, [r6, #0]
 8003716:	4621      	mov	r1, r4
 8003718:	4628      	mov	r0, r5
 800371a:	f000 fd7f 	bl	800421c <_sbrk_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d00a      	beq.n	8003738 <sbrk_aligned+0x34>
 8003722:	1cc4      	adds	r4, r0, #3
 8003724:	f024 0403 	bic.w	r4, r4, #3
 8003728:	42a0      	cmp	r0, r4
 800372a:	d007      	beq.n	800373c <sbrk_aligned+0x38>
 800372c:	1a21      	subs	r1, r4, r0
 800372e:	4628      	mov	r0, r5
 8003730:	f000 fd74 	bl	800421c <_sbrk_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d101      	bne.n	800373c <sbrk_aligned+0x38>
 8003738:	f04f 34ff 	mov.w	r4, #4294967295
 800373c:	4620      	mov	r0, r4
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	20000378 	.word	0x20000378

08003744 <_malloc_r>:
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	1ccd      	adds	r5, r1, #3
 800374a:	f025 0503 	bic.w	r5, r5, #3
 800374e:	3508      	adds	r5, #8
 8003750:	2d0c      	cmp	r5, #12
 8003752:	bf38      	it	cc
 8003754:	250c      	movcc	r5, #12
 8003756:	2d00      	cmp	r5, #0
 8003758:	4607      	mov	r7, r0
 800375a:	db01      	blt.n	8003760 <_malloc_r+0x1c>
 800375c:	42a9      	cmp	r1, r5
 800375e:	d905      	bls.n	800376c <_malloc_r+0x28>
 8003760:	230c      	movs	r3, #12
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	2600      	movs	r6, #0
 8003766:	4630      	mov	r0, r6
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376c:	4e2e      	ldr	r6, [pc, #184]	; (8003828 <_malloc_r+0xe4>)
 800376e:	f001 fe7d 	bl	800546c <__malloc_lock>
 8003772:	6833      	ldr	r3, [r6, #0]
 8003774:	461c      	mov	r4, r3
 8003776:	bb34      	cbnz	r4, 80037c6 <_malloc_r+0x82>
 8003778:	4629      	mov	r1, r5
 800377a:	4638      	mov	r0, r7
 800377c:	f7ff ffc2 	bl	8003704 <sbrk_aligned>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	4604      	mov	r4, r0
 8003784:	d14d      	bne.n	8003822 <_malloc_r+0xde>
 8003786:	6834      	ldr	r4, [r6, #0]
 8003788:	4626      	mov	r6, r4
 800378a:	2e00      	cmp	r6, #0
 800378c:	d140      	bne.n	8003810 <_malloc_r+0xcc>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	4631      	mov	r1, r6
 8003792:	4638      	mov	r0, r7
 8003794:	eb04 0803 	add.w	r8, r4, r3
 8003798:	f000 fd40 	bl	800421c <_sbrk_r>
 800379c:	4580      	cmp	r8, r0
 800379e:	d13a      	bne.n	8003816 <_malloc_r+0xd2>
 80037a0:	6821      	ldr	r1, [r4, #0]
 80037a2:	3503      	adds	r5, #3
 80037a4:	1a6d      	subs	r5, r5, r1
 80037a6:	f025 0503 	bic.w	r5, r5, #3
 80037aa:	3508      	adds	r5, #8
 80037ac:	2d0c      	cmp	r5, #12
 80037ae:	bf38      	it	cc
 80037b0:	250c      	movcc	r5, #12
 80037b2:	4629      	mov	r1, r5
 80037b4:	4638      	mov	r0, r7
 80037b6:	f7ff ffa5 	bl	8003704 <sbrk_aligned>
 80037ba:	3001      	adds	r0, #1
 80037bc:	d02b      	beq.n	8003816 <_malloc_r+0xd2>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	442b      	add	r3, r5
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	e00e      	b.n	80037e4 <_malloc_r+0xa0>
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	1b52      	subs	r2, r2, r5
 80037ca:	d41e      	bmi.n	800380a <_malloc_r+0xc6>
 80037cc:	2a0b      	cmp	r2, #11
 80037ce:	d916      	bls.n	80037fe <_malloc_r+0xba>
 80037d0:	1961      	adds	r1, r4, r5
 80037d2:	42a3      	cmp	r3, r4
 80037d4:	6025      	str	r5, [r4, #0]
 80037d6:	bf18      	it	ne
 80037d8:	6059      	strne	r1, [r3, #4]
 80037da:	6863      	ldr	r3, [r4, #4]
 80037dc:	bf08      	it	eq
 80037de:	6031      	streq	r1, [r6, #0]
 80037e0:	5162      	str	r2, [r4, r5]
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	4638      	mov	r0, r7
 80037e6:	f104 060b 	add.w	r6, r4, #11
 80037ea:	f001 fe45 	bl	8005478 <__malloc_unlock>
 80037ee:	f026 0607 	bic.w	r6, r6, #7
 80037f2:	1d23      	adds	r3, r4, #4
 80037f4:	1af2      	subs	r2, r6, r3
 80037f6:	d0b6      	beq.n	8003766 <_malloc_r+0x22>
 80037f8:	1b9b      	subs	r3, r3, r6
 80037fa:	50a3      	str	r3, [r4, r2]
 80037fc:	e7b3      	b.n	8003766 <_malloc_r+0x22>
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	42a3      	cmp	r3, r4
 8003802:	bf0c      	ite	eq
 8003804:	6032      	streq	r2, [r6, #0]
 8003806:	605a      	strne	r2, [r3, #4]
 8003808:	e7ec      	b.n	80037e4 <_malloc_r+0xa0>
 800380a:	4623      	mov	r3, r4
 800380c:	6864      	ldr	r4, [r4, #4]
 800380e:	e7b2      	b.n	8003776 <_malloc_r+0x32>
 8003810:	4634      	mov	r4, r6
 8003812:	6876      	ldr	r6, [r6, #4]
 8003814:	e7b9      	b.n	800378a <_malloc_r+0x46>
 8003816:	230c      	movs	r3, #12
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	4638      	mov	r0, r7
 800381c:	f001 fe2c 	bl	8005478 <__malloc_unlock>
 8003820:	e7a1      	b.n	8003766 <_malloc_r+0x22>
 8003822:	6025      	str	r5, [r4, #0]
 8003824:	e7de      	b.n	80037e4 <_malloc_r+0xa0>
 8003826:	bf00      	nop
 8003828:	20000374 	.word	0x20000374

0800382c <__cvt>:
 800382c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	ec55 4b10 	vmov	r4, r5, d0
 8003834:	2d00      	cmp	r5, #0
 8003836:	460e      	mov	r6, r1
 8003838:	4619      	mov	r1, r3
 800383a:	462b      	mov	r3, r5
 800383c:	bfbb      	ittet	lt
 800383e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003842:	461d      	movlt	r5, r3
 8003844:	2300      	movge	r3, #0
 8003846:	232d      	movlt	r3, #45	; 0x2d
 8003848:	700b      	strb	r3, [r1, #0]
 800384a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800384c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003850:	4691      	mov	r9, r2
 8003852:	f023 0820 	bic.w	r8, r3, #32
 8003856:	bfbc      	itt	lt
 8003858:	4622      	movlt	r2, r4
 800385a:	4614      	movlt	r4, r2
 800385c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003860:	d005      	beq.n	800386e <__cvt+0x42>
 8003862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003866:	d100      	bne.n	800386a <__cvt+0x3e>
 8003868:	3601      	adds	r6, #1
 800386a:	2102      	movs	r1, #2
 800386c:	e000      	b.n	8003870 <__cvt+0x44>
 800386e:	2103      	movs	r1, #3
 8003870:	ab03      	add	r3, sp, #12
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	ab02      	add	r3, sp, #8
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	ec45 4b10 	vmov	d0, r4, r5
 800387c:	4653      	mov	r3, sl
 800387e:	4632      	mov	r2, r6
 8003880:	f000 feae 	bl	80045e0 <_dtoa_r>
 8003884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003888:	4607      	mov	r7, r0
 800388a:	d102      	bne.n	8003892 <__cvt+0x66>
 800388c:	f019 0f01 	tst.w	r9, #1
 8003890:	d022      	beq.n	80038d8 <__cvt+0xac>
 8003892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003896:	eb07 0906 	add.w	r9, r7, r6
 800389a:	d110      	bne.n	80038be <__cvt+0x92>
 800389c:	783b      	ldrb	r3, [r7, #0]
 800389e:	2b30      	cmp	r3, #48	; 0x30
 80038a0:	d10a      	bne.n	80038b8 <__cvt+0x8c>
 80038a2:	2200      	movs	r2, #0
 80038a4:	2300      	movs	r3, #0
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	f7fd f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80038ae:	b918      	cbnz	r0, 80038b8 <__cvt+0x8c>
 80038b0:	f1c6 0601 	rsb	r6, r6, #1
 80038b4:	f8ca 6000 	str.w	r6, [sl]
 80038b8:	f8da 3000 	ldr.w	r3, [sl]
 80038bc:	4499      	add	r9, r3
 80038be:	2200      	movs	r2, #0
 80038c0:	2300      	movs	r3, #0
 80038c2:	4620      	mov	r0, r4
 80038c4:	4629      	mov	r1, r5
 80038c6:	f7fd f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80038ca:	b108      	cbz	r0, 80038d0 <__cvt+0xa4>
 80038cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80038d0:	2230      	movs	r2, #48	; 0x30
 80038d2:	9b03      	ldr	r3, [sp, #12]
 80038d4:	454b      	cmp	r3, r9
 80038d6:	d307      	bcc.n	80038e8 <__cvt+0xbc>
 80038d8:	9b03      	ldr	r3, [sp, #12]
 80038da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038dc:	1bdb      	subs	r3, r3, r7
 80038de:	4638      	mov	r0, r7
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	b004      	add	sp, #16
 80038e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e8:	1c59      	adds	r1, r3, #1
 80038ea:	9103      	str	r1, [sp, #12]
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e7f0      	b.n	80038d2 <__cvt+0xa6>

080038f0 <__exponent>:
 80038f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038f2:	4603      	mov	r3, r0
 80038f4:	2900      	cmp	r1, #0
 80038f6:	bfb8      	it	lt
 80038f8:	4249      	neglt	r1, r1
 80038fa:	f803 2b02 	strb.w	r2, [r3], #2
 80038fe:	bfb4      	ite	lt
 8003900:	222d      	movlt	r2, #45	; 0x2d
 8003902:	222b      	movge	r2, #43	; 0x2b
 8003904:	2909      	cmp	r1, #9
 8003906:	7042      	strb	r2, [r0, #1]
 8003908:	dd2a      	ble.n	8003960 <__exponent+0x70>
 800390a:	f10d 0407 	add.w	r4, sp, #7
 800390e:	46a4      	mov	ip, r4
 8003910:	270a      	movs	r7, #10
 8003912:	46a6      	mov	lr, r4
 8003914:	460a      	mov	r2, r1
 8003916:	fb91 f6f7 	sdiv	r6, r1, r7
 800391a:	fb07 1516 	mls	r5, r7, r6, r1
 800391e:	3530      	adds	r5, #48	; 0x30
 8003920:	2a63      	cmp	r2, #99	; 0x63
 8003922:	f104 34ff 	add.w	r4, r4, #4294967295
 8003926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800392a:	4631      	mov	r1, r6
 800392c:	dcf1      	bgt.n	8003912 <__exponent+0x22>
 800392e:	3130      	adds	r1, #48	; 0x30
 8003930:	f1ae 0502 	sub.w	r5, lr, #2
 8003934:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003938:	1c44      	adds	r4, r0, #1
 800393a:	4629      	mov	r1, r5
 800393c:	4561      	cmp	r1, ip
 800393e:	d30a      	bcc.n	8003956 <__exponent+0x66>
 8003940:	f10d 0209 	add.w	r2, sp, #9
 8003944:	eba2 020e 	sub.w	r2, r2, lr
 8003948:	4565      	cmp	r5, ip
 800394a:	bf88      	it	hi
 800394c:	2200      	movhi	r2, #0
 800394e:	4413      	add	r3, r2
 8003950:	1a18      	subs	r0, r3, r0
 8003952:	b003      	add	sp, #12
 8003954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800395a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800395e:	e7ed      	b.n	800393c <__exponent+0x4c>
 8003960:	2330      	movs	r3, #48	; 0x30
 8003962:	3130      	adds	r1, #48	; 0x30
 8003964:	7083      	strb	r3, [r0, #2]
 8003966:	70c1      	strb	r1, [r0, #3]
 8003968:	1d03      	adds	r3, r0, #4
 800396a:	e7f1      	b.n	8003950 <__exponent+0x60>

0800396c <_printf_float>:
 800396c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003970:	ed2d 8b02 	vpush	{d8}
 8003974:	b08d      	sub	sp, #52	; 0x34
 8003976:	460c      	mov	r4, r1
 8003978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800397c:	4616      	mov	r6, r2
 800397e:	461f      	mov	r7, r3
 8003980:	4605      	mov	r5, r0
 8003982:	f001 fcef 	bl	8005364 <_localeconv_r>
 8003986:	f8d0 a000 	ldr.w	sl, [r0]
 800398a:	4650      	mov	r0, sl
 800398c:	f7fc fc20 	bl	80001d0 <strlen>
 8003990:	2300      	movs	r3, #0
 8003992:	930a      	str	r3, [sp, #40]	; 0x28
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	9305      	str	r3, [sp, #20]
 8003998:	f8d8 3000 	ldr.w	r3, [r8]
 800399c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80039a0:	3307      	adds	r3, #7
 80039a2:	f023 0307 	bic.w	r3, r3, #7
 80039a6:	f103 0208 	add.w	r2, r3, #8
 80039aa:	f8c8 2000 	str.w	r2, [r8]
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80039b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80039ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80039be:	9307      	str	r3, [sp, #28]
 80039c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80039c4:	ee08 0a10 	vmov	s16, r0
 80039c8:	4b9f      	ldr	r3, [pc, #636]	; (8003c48 <_printf_float+0x2dc>)
 80039ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039ce:	f04f 32ff 	mov.w	r2, #4294967295
 80039d2:	f7fd f8ab 	bl	8000b2c <__aeabi_dcmpun>
 80039d6:	bb88      	cbnz	r0, 8003a3c <_printf_float+0xd0>
 80039d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039dc:	4b9a      	ldr	r3, [pc, #616]	; (8003c48 <_printf_float+0x2dc>)
 80039de:	f04f 32ff 	mov.w	r2, #4294967295
 80039e2:	f7fd f885 	bl	8000af0 <__aeabi_dcmple>
 80039e6:	bb48      	cbnz	r0, 8003a3c <_printf_float+0xd0>
 80039e8:	2200      	movs	r2, #0
 80039ea:	2300      	movs	r3, #0
 80039ec:	4640      	mov	r0, r8
 80039ee:	4649      	mov	r1, r9
 80039f0:	f7fd f874 	bl	8000adc <__aeabi_dcmplt>
 80039f4:	b110      	cbz	r0, 80039fc <_printf_float+0x90>
 80039f6:	232d      	movs	r3, #45	; 0x2d
 80039f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fc:	4b93      	ldr	r3, [pc, #588]	; (8003c4c <_printf_float+0x2e0>)
 80039fe:	4894      	ldr	r0, [pc, #592]	; (8003c50 <_printf_float+0x2e4>)
 8003a00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003a04:	bf94      	ite	ls
 8003a06:	4698      	movls	r8, r3
 8003a08:	4680      	movhi	r8, r0
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	6123      	str	r3, [r4, #16]
 8003a0e:	9b05      	ldr	r3, [sp, #20]
 8003a10:	f023 0204 	bic.w	r2, r3, #4
 8003a14:	6022      	str	r2, [r4, #0]
 8003a16:	f04f 0900 	mov.w	r9, #0
 8003a1a:	9700      	str	r7, [sp, #0]
 8003a1c:	4633      	mov	r3, r6
 8003a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003a20:	4621      	mov	r1, r4
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 f9d8 	bl	8003dd8 <_printf_common>
 8003a28:	3001      	adds	r0, #1
 8003a2a:	f040 8090 	bne.w	8003b4e <_printf_float+0x1e2>
 8003a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a32:	b00d      	add	sp, #52	; 0x34
 8003a34:	ecbd 8b02 	vpop	{d8}
 8003a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	4640      	mov	r0, r8
 8003a42:	4649      	mov	r1, r9
 8003a44:	f7fd f872 	bl	8000b2c <__aeabi_dcmpun>
 8003a48:	b140      	cbz	r0, 8003a5c <_printf_float+0xf0>
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bfbc      	itt	lt
 8003a50:	232d      	movlt	r3, #45	; 0x2d
 8003a52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a56:	487f      	ldr	r0, [pc, #508]	; (8003c54 <_printf_float+0x2e8>)
 8003a58:	4b7f      	ldr	r3, [pc, #508]	; (8003c58 <_printf_float+0x2ec>)
 8003a5a:	e7d1      	b.n	8003a00 <_printf_float+0x94>
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003a62:	9206      	str	r2, [sp, #24]
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	d13f      	bne.n	8003ae8 <_printf_float+0x17c>
 8003a68:	2306      	movs	r3, #6
 8003a6a:	6063      	str	r3, [r4, #4]
 8003a6c:	9b05      	ldr	r3, [sp, #20]
 8003a6e:	6861      	ldr	r1, [r4, #4]
 8003a70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a74:	2300      	movs	r3, #0
 8003a76:	9303      	str	r3, [sp, #12]
 8003a78:	ab0a      	add	r3, sp, #40	; 0x28
 8003a7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a7e:	ab09      	add	r3, sp, #36	; 0x24
 8003a80:	ec49 8b10 	vmov	d0, r8, r9
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	6022      	str	r2, [r4, #0]
 8003a88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	f7ff fecd 	bl	800382c <__cvt>
 8003a92:	9b06      	ldr	r3, [sp, #24]
 8003a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a96:	2b47      	cmp	r3, #71	; 0x47
 8003a98:	4680      	mov	r8, r0
 8003a9a:	d108      	bne.n	8003aae <_printf_float+0x142>
 8003a9c:	1cc8      	adds	r0, r1, #3
 8003a9e:	db02      	blt.n	8003aa6 <_printf_float+0x13a>
 8003aa0:	6863      	ldr	r3, [r4, #4]
 8003aa2:	4299      	cmp	r1, r3
 8003aa4:	dd41      	ble.n	8003b2a <_printf_float+0x1be>
 8003aa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003aaa:	fa5f fb8b 	uxtb.w	fp, fp
 8003aae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ab2:	d820      	bhi.n	8003af6 <_printf_float+0x18a>
 8003ab4:	3901      	subs	r1, #1
 8003ab6:	465a      	mov	r2, fp
 8003ab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003abc:	9109      	str	r1, [sp, #36]	; 0x24
 8003abe:	f7ff ff17 	bl	80038f0 <__exponent>
 8003ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ac4:	1813      	adds	r3, r2, r0
 8003ac6:	2a01      	cmp	r2, #1
 8003ac8:	4681      	mov	r9, r0
 8003aca:	6123      	str	r3, [r4, #16]
 8003acc:	dc02      	bgt.n	8003ad4 <_printf_float+0x168>
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	07d2      	lsls	r2, r2, #31
 8003ad2:	d501      	bpl.n	8003ad8 <_printf_float+0x16c>
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d09c      	beq.n	8003a1a <_printf_float+0xae>
 8003ae0:	232d      	movs	r3, #45	; 0x2d
 8003ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ae6:	e798      	b.n	8003a1a <_printf_float+0xae>
 8003ae8:	9a06      	ldr	r2, [sp, #24]
 8003aea:	2a47      	cmp	r2, #71	; 0x47
 8003aec:	d1be      	bne.n	8003a6c <_printf_float+0x100>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1bc      	bne.n	8003a6c <_printf_float+0x100>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e7b9      	b.n	8003a6a <_printf_float+0xfe>
 8003af6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003afa:	d118      	bne.n	8003b2e <_printf_float+0x1c2>
 8003afc:	2900      	cmp	r1, #0
 8003afe:	6863      	ldr	r3, [r4, #4]
 8003b00:	dd0b      	ble.n	8003b1a <_printf_float+0x1ae>
 8003b02:	6121      	str	r1, [r4, #16]
 8003b04:	b913      	cbnz	r3, 8003b0c <_printf_float+0x1a0>
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	07d0      	lsls	r0, r2, #31
 8003b0a:	d502      	bpl.n	8003b12 <_printf_float+0x1a6>
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	440b      	add	r3, r1
 8003b10:	6123      	str	r3, [r4, #16]
 8003b12:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b14:	f04f 0900 	mov.w	r9, #0
 8003b18:	e7de      	b.n	8003ad8 <_printf_float+0x16c>
 8003b1a:	b913      	cbnz	r3, 8003b22 <_printf_float+0x1b6>
 8003b1c:	6822      	ldr	r2, [r4, #0]
 8003b1e:	07d2      	lsls	r2, r2, #31
 8003b20:	d501      	bpl.n	8003b26 <_printf_float+0x1ba>
 8003b22:	3302      	adds	r3, #2
 8003b24:	e7f4      	b.n	8003b10 <_printf_float+0x1a4>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e7f2      	b.n	8003b10 <_printf_float+0x1a4>
 8003b2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b30:	4299      	cmp	r1, r3
 8003b32:	db05      	blt.n	8003b40 <_printf_float+0x1d4>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	6121      	str	r1, [r4, #16]
 8003b38:	07d8      	lsls	r0, r3, #31
 8003b3a:	d5ea      	bpl.n	8003b12 <_printf_float+0x1a6>
 8003b3c:	1c4b      	adds	r3, r1, #1
 8003b3e:	e7e7      	b.n	8003b10 <_printf_float+0x1a4>
 8003b40:	2900      	cmp	r1, #0
 8003b42:	bfd4      	ite	le
 8003b44:	f1c1 0202 	rsble	r2, r1, #2
 8003b48:	2201      	movgt	r2, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	e7e0      	b.n	8003b10 <_printf_float+0x1a4>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	055a      	lsls	r2, r3, #21
 8003b52:	d407      	bmi.n	8003b64 <_printf_float+0x1f8>
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	4642      	mov	r2, r8
 8003b58:	4631      	mov	r1, r6
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	47b8      	blx	r7
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d12c      	bne.n	8003bbc <_printf_float+0x250>
 8003b62:	e764      	b.n	8003a2e <_printf_float+0xc2>
 8003b64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b68:	f240 80e0 	bls.w	8003d2c <_printf_float+0x3c0>
 8003b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b70:	2200      	movs	r2, #0
 8003b72:	2300      	movs	r3, #0
 8003b74:	f7fc ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d034      	beq.n	8003be6 <_printf_float+0x27a>
 8003b7c:	4a37      	ldr	r2, [pc, #220]	; (8003c5c <_printf_float+0x2f0>)
 8003b7e:	2301      	movs	r3, #1
 8003b80:	4631      	mov	r1, r6
 8003b82:	4628      	mov	r0, r5
 8003b84:	47b8      	blx	r7
 8003b86:	3001      	adds	r0, #1
 8003b88:	f43f af51 	beq.w	8003a2e <_printf_float+0xc2>
 8003b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b90:	429a      	cmp	r2, r3
 8003b92:	db02      	blt.n	8003b9a <_printf_float+0x22e>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	07d8      	lsls	r0, r3, #31
 8003b98:	d510      	bpl.n	8003bbc <_printf_float+0x250>
 8003b9a:	ee18 3a10 	vmov	r3, s16
 8003b9e:	4652      	mov	r2, sl
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	47b8      	blx	r7
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	f43f af41 	beq.w	8003a2e <_printf_float+0xc2>
 8003bac:	f04f 0800 	mov.w	r8, #0
 8003bb0:	f104 091a 	add.w	r9, r4, #26
 8003bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	4543      	cmp	r3, r8
 8003bba:	dc09      	bgt.n	8003bd0 <_printf_float+0x264>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	079b      	lsls	r3, r3, #30
 8003bc0:	f100 8105 	bmi.w	8003dce <_printf_float+0x462>
 8003bc4:	68e0      	ldr	r0, [r4, #12]
 8003bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bc8:	4298      	cmp	r0, r3
 8003bca:	bfb8      	it	lt
 8003bcc:	4618      	movlt	r0, r3
 8003bce:	e730      	b.n	8003a32 <_printf_float+0xc6>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	464a      	mov	r2, r9
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	47b8      	blx	r7
 8003bda:	3001      	adds	r0, #1
 8003bdc:	f43f af27 	beq.w	8003a2e <_printf_float+0xc2>
 8003be0:	f108 0801 	add.w	r8, r8, #1
 8003be4:	e7e6      	b.n	8003bb4 <_printf_float+0x248>
 8003be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	dc39      	bgt.n	8003c60 <_printf_float+0x2f4>
 8003bec:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <_printf_float+0x2f0>)
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	47b8      	blx	r7
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	f43f af19 	beq.w	8003a2e <_printf_float+0xc2>
 8003bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c00:	4313      	orrs	r3, r2
 8003c02:	d102      	bne.n	8003c0a <_printf_float+0x29e>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	07d9      	lsls	r1, r3, #31
 8003c08:	d5d8      	bpl.n	8003bbc <_printf_float+0x250>
 8003c0a:	ee18 3a10 	vmov	r3, s16
 8003c0e:	4652      	mov	r2, sl
 8003c10:	4631      	mov	r1, r6
 8003c12:	4628      	mov	r0, r5
 8003c14:	47b8      	blx	r7
 8003c16:	3001      	adds	r0, #1
 8003c18:	f43f af09 	beq.w	8003a2e <_printf_float+0xc2>
 8003c1c:	f04f 0900 	mov.w	r9, #0
 8003c20:	f104 0a1a 	add.w	sl, r4, #26
 8003c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c26:	425b      	negs	r3, r3
 8003c28:	454b      	cmp	r3, r9
 8003c2a:	dc01      	bgt.n	8003c30 <_printf_float+0x2c4>
 8003c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c2e:	e792      	b.n	8003b56 <_printf_float+0x1ea>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4652      	mov	r2, sl
 8003c34:	4631      	mov	r1, r6
 8003c36:	4628      	mov	r0, r5
 8003c38:	47b8      	blx	r7
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	f43f aef7 	beq.w	8003a2e <_printf_float+0xc2>
 8003c40:	f109 0901 	add.w	r9, r9, #1
 8003c44:	e7ee      	b.n	8003c24 <_printf_float+0x2b8>
 8003c46:	bf00      	nop
 8003c48:	7fefffff 	.word	0x7fefffff
 8003c4c:	08006130 	.word	0x08006130
 8003c50:	08006134 	.word	0x08006134
 8003c54:	0800613c 	.word	0x0800613c
 8003c58:	08006138 	.word	0x08006138
 8003c5c:	08006140 	.word	0x08006140
 8003c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c64:	429a      	cmp	r2, r3
 8003c66:	bfa8      	it	ge
 8003c68:	461a      	movge	r2, r3
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	4691      	mov	r9, r2
 8003c6e:	dc37      	bgt.n	8003ce0 <_printf_float+0x374>
 8003c70:	f04f 0b00 	mov.w	fp, #0
 8003c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c78:	f104 021a 	add.w	r2, r4, #26
 8003c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c7e:	9305      	str	r3, [sp, #20]
 8003c80:	eba3 0309 	sub.w	r3, r3, r9
 8003c84:	455b      	cmp	r3, fp
 8003c86:	dc33      	bgt.n	8003cf0 <_printf_float+0x384>
 8003c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	db3b      	blt.n	8003d08 <_printf_float+0x39c>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	07da      	lsls	r2, r3, #31
 8003c94:	d438      	bmi.n	8003d08 <_printf_float+0x39c>
 8003c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c98:	9a05      	ldr	r2, [sp, #20]
 8003c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c9c:	1a9a      	subs	r2, r3, r2
 8003c9e:	eba3 0901 	sub.w	r9, r3, r1
 8003ca2:	4591      	cmp	r9, r2
 8003ca4:	bfa8      	it	ge
 8003ca6:	4691      	movge	r9, r2
 8003ca8:	f1b9 0f00 	cmp.w	r9, #0
 8003cac:	dc35      	bgt.n	8003d1a <_printf_float+0x3ae>
 8003cae:	f04f 0800 	mov.w	r8, #0
 8003cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cb6:	f104 0a1a 	add.w	sl, r4, #26
 8003cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	eba3 0309 	sub.w	r3, r3, r9
 8003cc4:	4543      	cmp	r3, r8
 8003cc6:	f77f af79 	ble.w	8003bbc <_printf_float+0x250>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4652      	mov	r2, sl
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b8      	blx	r7
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	f43f aeaa 	beq.w	8003a2e <_printf_float+0xc2>
 8003cda:	f108 0801 	add.w	r8, r8, #1
 8003cde:	e7ec      	b.n	8003cba <_printf_float+0x34e>
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	47b8      	blx	r7
 8003cea:	3001      	adds	r0, #1
 8003cec:	d1c0      	bne.n	8003c70 <_printf_float+0x304>
 8003cee:	e69e      	b.n	8003a2e <_printf_float+0xc2>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	9205      	str	r2, [sp, #20]
 8003cf8:	47b8      	blx	r7
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f43f ae97 	beq.w	8003a2e <_printf_float+0xc2>
 8003d00:	9a05      	ldr	r2, [sp, #20]
 8003d02:	f10b 0b01 	add.w	fp, fp, #1
 8003d06:	e7b9      	b.n	8003c7c <_printf_float+0x310>
 8003d08:	ee18 3a10 	vmov	r3, s16
 8003d0c:	4652      	mov	r2, sl
 8003d0e:	4631      	mov	r1, r6
 8003d10:	4628      	mov	r0, r5
 8003d12:	47b8      	blx	r7
 8003d14:	3001      	adds	r0, #1
 8003d16:	d1be      	bne.n	8003c96 <_printf_float+0x32a>
 8003d18:	e689      	b.n	8003a2e <_printf_float+0xc2>
 8003d1a:	9a05      	ldr	r2, [sp, #20]
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	4442      	add	r2, r8
 8003d20:	4631      	mov	r1, r6
 8003d22:	4628      	mov	r0, r5
 8003d24:	47b8      	blx	r7
 8003d26:	3001      	adds	r0, #1
 8003d28:	d1c1      	bne.n	8003cae <_printf_float+0x342>
 8003d2a:	e680      	b.n	8003a2e <_printf_float+0xc2>
 8003d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d2e:	2a01      	cmp	r2, #1
 8003d30:	dc01      	bgt.n	8003d36 <_printf_float+0x3ca>
 8003d32:	07db      	lsls	r3, r3, #31
 8003d34:	d538      	bpl.n	8003da8 <_printf_float+0x43c>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4642      	mov	r2, r8
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	47b8      	blx	r7
 8003d40:	3001      	adds	r0, #1
 8003d42:	f43f ae74 	beq.w	8003a2e <_printf_float+0xc2>
 8003d46:	ee18 3a10 	vmov	r3, s16
 8003d4a:	4652      	mov	r2, sl
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4628      	mov	r0, r5
 8003d50:	47b8      	blx	r7
 8003d52:	3001      	adds	r0, #1
 8003d54:	f43f ae6b 	beq.w	8003a2e <_printf_float+0xc2>
 8003d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f7fc feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d64:	b9d8      	cbnz	r0, 8003d9e <_printf_float+0x432>
 8003d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d68:	f108 0201 	add.w	r2, r8, #1
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4628      	mov	r0, r5
 8003d72:	47b8      	blx	r7
 8003d74:	3001      	adds	r0, #1
 8003d76:	d10e      	bne.n	8003d96 <_printf_float+0x42a>
 8003d78:	e659      	b.n	8003a2e <_printf_float+0xc2>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4652      	mov	r2, sl
 8003d7e:	4631      	mov	r1, r6
 8003d80:	4628      	mov	r0, r5
 8003d82:	47b8      	blx	r7
 8003d84:	3001      	adds	r0, #1
 8003d86:	f43f ae52 	beq.w	8003a2e <_printf_float+0xc2>
 8003d8a:	f108 0801 	add.w	r8, r8, #1
 8003d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d90:	3b01      	subs	r3, #1
 8003d92:	4543      	cmp	r3, r8
 8003d94:	dcf1      	bgt.n	8003d7a <_printf_float+0x40e>
 8003d96:	464b      	mov	r3, r9
 8003d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d9c:	e6dc      	b.n	8003b58 <_printf_float+0x1ec>
 8003d9e:	f04f 0800 	mov.w	r8, #0
 8003da2:	f104 0a1a 	add.w	sl, r4, #26
 8003da6:	e7f2      	b.n	8003d8e <_printf_float+0x422>
 8003da8:	2301      	movs	r3, #1
 8003daa:	4642      	mov	r2, r8
 8003dac:	e7df      	b.n	8003d6e <_printf_float+0x402>
 8003dae:	2301      	movs	r3, #1
 8003db0:	464a      	mov	r2, r9
 8003db2:	4631      	mov	r1, r6
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b8      	blx	r7
 8003db8:	3001      	adds	r0, #1
 8003dba:	f43f ae38 	beq.w	8003a2e <_printf_float+0xc2>
 8003dbe:	f108 0801 	add.w	r8, r8, #1
 8003dc2:	68e3      	ldr	r3, [r4, #12]
 8003dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003dc6:	1a5b      	subs	r3, r3, r1
 8003dc8:	4543      	cmp	r3, r8
 8003dca:	dcf0      	bgt.n	8003dae <_printf_float+0x442>
 8003dcc:	e6fa      	b.n	8003bc4 <_printf_float+0x258>
 8003dce:	f04f 0800 	mov.w	r8, #0
 8003dd2:	f104 0919 	add.w	r9, r4, #25
 8003dd6:	e7f4      	b.n	8003dc2 <_printf_float+0x456>

08003dd8 <_printf_common>:
 8003dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ddc:	4616      	mov	r6, r2
 8003dde:	4699      	mov	r9, r3
 8003de0:	688a      	ldr	r2, [r1, #8]
 8003de2:	690b      	ldr	r3, [r1, #16]
 8003de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003de8:	4293      	cmp	r3, r2
 8003dea:	bfb8      	it	lt
 8003dec:	4613      	movlt	r3, r2
 8003dee:	6033      	str	r3, [r6, #0]
 8003df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003df4:	4607      	mov	r7, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	b10a      	cbz	r2, 8003dfe <_printf_common+0x26>
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	6033      	str	r3, [r6, #0]
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	0699      	lsls	r1, r3, #26
 8003e02:	bf42      	ittt	mi
 8003e04:	6833      	ldrmi	r3, [r6, #0]
 8003e06:	3302      	addmi	r3, #2
 8003e08:	6033      	strmi	r3, [r6, #0]
 8003e0a:	6825      	ldr	r5, [r4, #0]
 8003e0c:	f015 0506 	ands.w	r5, r5, #6
 8003e10:	d106      	bne.n	8003e20 <_printf_common+0x48>
 8003e12:	f104 0a19 	add.w	sl, r4, #25
 8003e16:	68e3      	ldr	r3, [r4, #12]
 8003e18:	6832      	ldr	r2, [r6, #0]
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	42ab      	cmp	r3, r5
 8003e1e:	dc26      	bgt.n	8003e6e <_printf_common+0x96>
 8003e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e24:	1e13      	subs	r3, r2, #0
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	bf18      	it	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	0692      	lsls	r2, r2, #26
 8003e2e:	d42b      	bmi.n	8003e88 <_printf_common+0xb0>
 8003e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e34:	4649      	mov	r1, r9
 8003e36:	4638      	mov	r0, r7
 8003e38:	47c0      	blx	r8
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d01e      	beq.n	8003e7c <_printf_common+0xa4>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	68e5      	ldr	r5, [r4, #12]
 8003e42:	6832      	ldr	r2, [r6, #0]
 8003e44:	f003 0306 	and.w	r3, r3, #6
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	bf08      	it	eq
 8003e4c:	1aad      	subeq	r5, r5, r2
 8003e4e:	68a3      	ldr	r3, [r4, #8]
 8003e50:	6922      	ldr	r2, [r4, #16]
 8003e52:	bf0c      	ite	eq
 8003e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e58:	2500      	movne	r5, #0
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	bfc4      	itt	gt
 8003e5e:	1a9b      	subgt	r3, r3, r2
 8003e60:	18ed      	addgt	r5, r5, r3
 8003e62:	2600      	movs	r6, #0
 8003e64:	341a      	adds	r4, #26
 8003e66:	42b5      	cmp	r5, r6
 8003e68:	d11a      	bne.n	8003ea0 <_printf_common+0xc8>
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	e008      	b.n	8003e80 <_printf_common+0xa8>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	4652      	mov	r2, sl
 8003e72:	4649      	mov	r1, r9
 8003e74:	4638      	mov	r0, r7
 8003e76:	47c0      	blx	r8
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d103      	bne.n	8003e84 <_printf_common+0xac>
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e84:	3501      	adds	r5, #1
 8003e86:	e7c6      	b.n	8003e16 <_printf_common+0x3e>
 8003e88:	18e1      	adds	r1, r4, r3
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	2030      	movs	r0, #48	; 0x30
 8003e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e92:	4422      	add	r2, r4
 8003e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e9c:	3302      	adds	r3, #2
 8003e9e:	e7c7      	b.n	8003e30 <_printf_common+0x58>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	47c0      	blx	r8
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d0e6      	beq.n	8003e7c <_printf_common+0xa4>
 8003eae:	3601      	adds	r6, #1
 8003eb0:	e7d9      	b.n	8003e66 <_printf_common+0x8e>
	...

08003eb4 <_printf_i>:
 8003eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb8:	7e0f      	ldrb	r7, [r1, #24]
 8003eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ebc:	2f78      	cmp	r7, #120	; 0x78
 8003ebe:	4691      	mov	r9, r2
 8003ec0:	4680      	mov	r8, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	469a      	mov	sl, r3
 8003ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003eca:	d807      	bhi.n	8003edc <_printf_i+0x28>
 8003ecc:	2f62      	cmp	r7, #98	; 0x62
 8003ece:	d80a      	bhi.n	8003ee6 <_printf_i+0x32>
 8003ed0:	2f00      	cmp	r7, #0
 8003ed2:	f000 80d8 	beq.w	8004086 <_printf_i+0x1d2>
 8003ed6:	2f58      	cmp	r7, #88	; 0x58
 8003ed8:	f000 80a3 	beq.w	8004022 <_printf_i+0x16e>
 8003edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ee4:	e03a      	b.n	8003f5c <_printf_i+0xa8>
 8003ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eea:	2b15      	cmp	r3, #21
 8003eec:	d8f6      	bhi.n	8003edc <_printf_i+0x28>
 8003eee:	a101      	add	r1, pc, #4	; (adr r1, 8003ef4 <_printf_i+0x40>)
 8003ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ef4:	08003f4d 	.word	0x08003f4d
 8003ef8:	08003f61 	.word	0x08003f61
 8003efc:	08003edd 	.word	0x08003edd
 8003f00:	08003edd 	.word	0x08003edd
 8003f04:	08003edd 	.word	0x08003edd
 8003f08:	08003edd 	.word	0x08003edd
 8003f0c:	08003f61 	.word	0x08003f61
 8003f10:	08003edd 	.word	0x08003edd
 8003f14:	08003edd 	.word	0x08003edd
 8003f18:	08003edd 	.word	0x08003edd
 8003f1c:	08003edd 	.word	0x08003edd
 8003f20:	0800406d 	.word	0x0800406d
 8003f24:	08003f91 	.word	0x08003f91
 8003f28:	0800404f 	.word	0x0800404f
 8003f2c:	08003edd 	.word	0x08003edd
 8003f30:	08003edd 	.word	0x08003edd
 8003f34:	0800408f 	.word	0x0800408f
 8003f38:	08003edd 	.word	0x08003edd
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003edd 	.word	0x08003edd
 8003f44:	08003edd 	.word	0x08003edd
 8003f48:	08004057 	.word	0x08004057
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	602a      	str	r2, [r5, #0]
 8003f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0a3      	b.n	80040a8 <_printf_i+0x1f4>
 8003f60:	6820      	ldr	r0, [r4, #0]
 8003f62:	6829      	ldr	r1, [r5, #0]
 8003f64:	0606      	lsls	r6, r0, #24
 8003f66:	f101 0304 	add.w	r3, r1, #4
 8003f6a:	d50a      	bpl.n	8003f82 <_printf_i+0xce>
 8003f6c:	680e      	ldr	r6, [r1, #0]
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	2e00      	cmp	r6, #0
 8003f72:	da03      	bge.n	8003f7c <_printf_i+0xc8>
 8003f74:	232d      	movs	r3, #45	; 0x2d
 8003f76:	4276      	negs	r6, r6
 8003f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f7c:	485e      	ldr	r0, [pc, #376]	; (80040f8 <_printf_i+0x244>)
 8003f7e:	230a      	movs	r3, #10
 8003f80:	e019      	b.n	8003fb6 <_printf_i+0x102>
 8003f82:	680e      	ldr	r6, [r1, #0]
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f8a:	bf18      	it	ne
 8003f8c:	b236      	sxthne	r6, r6
 8003f8e:	e7ef      	b.n	8003f70 <_printf_i+0xbc>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	6820      	ldr	r0, [r4, #0]
 8003f94:	1d19      	adds	r1, r3, #4
 8003f96:	6029      	str	r1, [r5, #0]
 8003f98:	0601      	lsls	r1, r0, #24
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_i+0xec>
 8003f9c:	681e      	ldr	r6, [r3, #0]
 8003f9e:	e002      	b.n	8003fa6 <_printf_i+0xf2>
 8003fa0:	0646      	lsls	r6, r0, #25
 8003fa2:	d5fb      	bpl.n	8003f9c <_printf_i+0xe8>
 8003fa4:	881e      	ldrh	r6, [r3, #0]
 8003fa6:	4854      	ldr	r0, [pc, #336]	; (80040f8 <_printf_i+0x244>)
 8003fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8003faa:	bf0c      	ite	eq
 8003fac:	2308      	moveq	r3, #8
 8003fae:	230a      	movne	r3, #10
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fb6:	6865      	ldr	r5, [r4, #4]
 8003fb8:	60a5      	str	r5, [r4, #8]
 8003fba:	2d00      	cmp	r5, #0
 8003fbc:	bfa2      	ittt	ge
 8003fbe:	6821      	ldrge	r1, [r4, #0]
 8003fc0:	f021 0104 	bicge.w	r1, r1, #4
 8003fc4:	6021      	strge	r1, [r4, #0]
 8003fc6:	b90e      	cbnz	r6, 8003fcc <_printf_i+0x118>
 8003fc8:	2d00      	cmp	r5, #0
 8003fca:	d04d      	beq.n	8004068 <_printf_i+0x1b4>
 8003fcc:	4615      	mov	r5, r2
 8003fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8003fd6:	5dc7      	ldrb	r7, [r0, r7]
 8003fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fdc:	4637      	mov	r7, r6
 8003fde:	42bb      	cmp	r3, r7
 8003fe0:	460e      	mov	r6, r1
 8003fe2:	d9f4      	bls.n	8003fce <_printf_i+0x11a>
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d10b      	bne.n	8004000 <_printf_i+0x14c>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	07de      	lsls	r6, r3, #31
 8003fec:	d508      	bpl.n	8004000 <_printf_i+0x14c>
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	6861      	ldr	r1, [r4, #4]
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	bfde      	ittt	le
 8003ff6:	2330      	movle	r3, #48	; 0x30
 8003ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004000:	1b52      	subs	r2, r2, r5
 8004002:	6122      	str	r2, [r4, #16]
 8004004:	f8cd a000 	str.w	sl, [sp]
 8004008:	464b      	mov	r3, r9
 800400a:	aa03      	add	r2, sp, #12
 800400c:	4621      	mov	r1, r4
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff fee2 	bl	8003dd8 <_printf_common>
 8004014:	3001      	adds	r0, #1
 8004016:	d14c      	bne.n	80040b2 <_printf_i+0x1fe>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	b004      	add	sp, #16
 800401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004022:	4835      	ldr	r0, [pc, #212]	; (80040f8 <_printf_i+0x244>)
 8004024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004028:	6829      	ldr	r1, [r5, #0]
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004030:	6029      	str	r1, [r5, #0]
 8004032:	061d      	lsls	r5, r3, #24
 8004034:	d514      	bpl.n	8004060 <_printf_i+0x1ac>
 8004036:	07df      	lsls	r7, r3, #31
 8004038:	bf44      	itt	mi
 800403a:	f043 0320 	orrmi.w	r3, r3, #32
 800403e:	6023      	strmi	r3, [r4, #0]
 8004040:	b91e      	cbnz	r6, 800404a <_printf_i+0x196>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	f023 0320 	bic.w	r3, r3, #32
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	2310      	movs	r3, #16
 800404c:	e7b0      	b.n	8003fb0 <_printf_i+0xfc>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	f043 0320 	orr.w	r3, r3, #32
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	2378      	movs	r3, #120	; 0x78
 8004058:	4828      	ldr	r0, [pc, #160]	; (80040fc <_printf_i+0x248>)
 800405a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800405e:	e7e3      	b.n	8004028 <_printf_i+0x174>
 8004060:	0659      	lsls	r1, r3, #25
 8004062:	bf48      	it	mi
 8004064:	b2b6      	uxthmi	r6, r6
 8004066:	e7e6      	b.n	8004036 <_printf_i+0x182>
 8004068:	4615      	mov	r5, r2
 800406a:	e7bb      	b.n	8003fe4 <_printf_i+0x130>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	6826      	ldr	r6, [r4, #0]
 8004070:	6961      	ldr	r1, [r4, #20]
 8004072:	1d18      	adds	r0, r3, #4
 8004074:	6028      	str	r0, [r5, #0]
 8004076:	0635      	lsls	r5, r6, #24
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	d501      	bpl.n	8004080 <_printf_i+0x1cc>
 800407c:	6019      	str	r1, [r3, #0]
 800407e:	e002      	b.n	8004086 <_printf_i+0x1d2>
 8004080:	0670      	lsls	r0, r6, #25
 8004082:	d5fb      	bpl.n	800407c <_printf_i+0x1c8>
 8004084:	8019      	strh	r1, [r3, #0]
 8004086:	2300      	movs	r3, #0
 8004088:	6123      	str	r3, [r4, #16]
 800408a:	4615      	mov	r5, r2
 800408c:	e7ba      	b.n	8004004 <_printf_i+0x150>
 800408e:	682b      	ldr	r3, [r5, #0]
 8004090:	1d1a      	adds	r2, r3, #4
 8004092:	602a      	str	r2, [r5, #0]
 8004094:	681d      	ldr	r5, [r3, #0]
 8004096:	6862      	ldr	r2, [r4, #4]
 8004098:	2100      	movs	r1, #0
 800409a:	4628      	mov	r0, r5
 800409c:	f7fc f8a0 	bl	80001e0 <memchr>
 80040a0:	b108      	cbz	r0, 80040a6 <_printf_i+0x1f2>
 80040a2:	1b40      	subs	r0, r0, r5
 80040a4:	6060      	str	r0, [r4, #4]
 80040a6:	6863      	ldr	r3, [r4, #4]
 80040a8:	6123      	str	r3, [r4, #16]
 80040aa:	2300      	movs	r3, #0
 80040ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b0:	e7a8      	b.n	8004004 <_printf_i+0x150>
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	462a      	mov	r2, r5
 80040b6:	4649      	mov	r1, r9
 80040b8:	4640      	mov	r0, r8
 80040ba:	47d0      	blx	sl
 80040bc:	3001      	adds	r0, #1
 80040be:	d0ab      	beq.n	8004018 <_printf_i+0x164>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	079b      	lsls	r3, r3, #30
 80040c4:	d413      	bmi.n	80040ee <_printf_i+0x23a>
 80040c6:	68e0      	ldr	r0, [r4, #12]
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	4298      	cmp	r0, r3
 80040cc:	bfb8      	it	lt
 80040ce:	4618      	movlt	r0, r3
 80040d0:	e7a4      	b.n	800401c <_printf_i+0x168>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4632      	mov	r2, r6
 80040d6:	4649      	mov	r1, r9
 80040d8:	4640      	mov	r0, r8
 80040da:	47d0      	blx	sl
 80040dc:	3001      	adds	r0, #1
 80040de:	d09b      	beq.n	8004018 <_printf_i+0x164>
 80040e0:	3501      	adds	r5, #1
 80040e2:	68e3      	ldr	r3, [r4, #12]
 80040e4:	9903      	ldr	r1, [sp, #12]
 80040e6:	1a5b      	subs	r3, r3, r1
 80040e8:	42ab      	cmp	r3, r5
 80040ea:	dcf2      	bgt.n	80040d2 <_printf_i+0x21e>
 80040ec:	e7eb      	b.n	80040c6 <_printf_i+0x212>
 80040ee:	2500      	movs	r5, #0
 80040f0:	f104 0619 	add.w	r6, r4, #25
 80040f4:	e7f5      	b.n	80040e2 <_printf_i+0x22e>
 80040f6:	bf00      	nop
 80040f8:	08006142 	.word	0x08006142
 80040fc:	08006153 	.word	0x08006153

08004100 <iprintf>:
 8004100:	b40f      	push	{r0, r1, r2, r3}
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <iprintf+0x2c>)
 8004104:	b513      	push	{r0, r1, r4, lr}
 8004106:	681c      	ldr	r4, [r3, #0]
 8004108:	b124      	cbz	r4, 8004114 <iprintf+0x14>
 800410a:	69a3      	ldr	r3, [r4, #24]
 800410c:	b913      	cbnz	r3, 8004114 <iprintf+0x14>
 800410e:	4620      	mov	r0, r4
 8004110:	f7ff fa1c 	bl	800354c <__sinit>
 8004114:	ab05      	add	r3, sp, #20
 8004116:	9a04      	ldr	r2, [sp, #16]
 8004118:	68a1      	ldr	r1, [r4, #8]
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	4620      	mov	r0, r4
 800411e:	f001 fdc1 	bl	8005ca4 <_vfiprintf_r>
 8004122:	b002      	add	sp, #8
 8004124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004128:	b004      	add	sp, #16
 800412a:	4770      	bx	lr
 800412c:	20000068 	.word	0x20000068

08004130 <_puts_r>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	460e      	mov	r6, r1
 8004134:	4605      	mov	r5, r0
 8004136:	b118      	cbz	r0, 8004140 <_puts_r+0x10>
 8004138:	6983      	ldr	r3, [r0, #24]
 800413a:	b90b      	cbnz	r3, 8004140 <_puts_r+0x10>
 800413c:	f7ff fa06 	bl	800354c <__sinit>
 8004140:	69ab      	ldr	r3, [r5, #24]
 8004142:	68ac      	ldr	r4, [r5, #8]
 8004144:	b913      	cbnz	r3, 800414c <_puts_r+0x1c>
 8004146:	4628      	mov	r0, r5
 8004148:	f7ff fa00 	bl	800354c <__sinit>
 800414c:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <_puts_r+0xd0>)
 800414e:	429c      	cmp	r4, r3
 8004150:	d120      	bne.n	8004194 <_puts_r+0x64>
 8004152:	686c      	ldr	r4, [r5, #4]
 8004154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004156:	07db      	lsls	r3, r3, #31
 8004158:	d405      	bmi.n	8004166 <_puts_r+0x36>
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	0598      	lsls	r0, r3, #22
 800415e:	d402      	bmi.n	8004166 <_puts_r+0x36>
 8004160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004162:	f7ff fab6 	bl	80036d2 <__retarget_lock_acquire_recursive>
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	0719      	lsls	r1, r3, #28
 800416a:	d51d      	bpl.n	80041a8 <_puts_r+0x78>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	b1db      	cbz	r3, 80041a8 <_puts_r+0x78>
 8004170:	3e01      	subs	r6, #1
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004178:	3b01      	subs	r3, #1
 800417a:	60a3      	str	r3, [r4, #8]
 800417c:	bb39      	cbnz	r1, 80041ce <_puts_r+0x9e>
 800417e:	2b00      	cmp	r3, #0
 8004180:	da38      	bge.n	80041f4 <_puts_r+0xc4>
 8004182:	4622      	mov	r2, r4
 8004184:	210a      	movs	r1, #10
 8004186:	4628      	mov	r0, r5
 8004188:	f000 f89c 	bl	80042c4 <__swbuf_r>
 800418c:	3001      	adds	r0, #1
 800418e:	d011      	beq.n	80041b4 <_puts_r+0x84>
 8004190:	250a      	movs	r5, #10
 8004192:	e011      	b.n	80041b8 <_puts_r+0x88>
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <_puts_r+0xd4>)
 8004196:	429c      	cmp	r4, r3
 8004198:	d101      	bne.n	800419e <_puts_r+0x6e>
 800419a:	68ac      	ldr	r4, [r5, #8]
 800419c:	e7da      	b.n	8004154 <_puts_r+0x24>
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <_puts_r+0xd8>)
 80041a0:	429c      	cmp	r4, r3
 80041a2:	bf08      	it	eq
 80041a4:	68ec      	ldreq	r4, [r5, #12]
 80041a6:	e7d5      	b.n	8004154 <_puts_r+0x24>
 80041a8:	4621      	mov	r1, r4
 80041aa:	4628      	mov	r0, r5
 80041ac:	f000 f8ee 	bl	800438c <__swsetup_r>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d0dd      	beq.n	8004170 <_puts_r+0x40>
 80041b4:	f04f 35ff 	mov.w	r5, #4294967295
 80041b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041ba:	07da      	lsls	r2, r3, #31
 80041bc:	d405      	bmi.n	80041ca <_puts_r+0x9a>
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	059b      	lsls	r3, r3, #22
 80041c2:	d402      	bmi.n	80041ca <_puts_r+0x9a>
 80041c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041c6:	f7ff fa85 	bl	80036d4 <__retarget_lock_release_recursive>
 80041ca:	4628      	mov	r0, r5
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da04      	bge.n	80041dc <_puts_r+0xac>
 80041d2:	69a2      	ldr	r2, [r4, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	dc06      	bgt.n	80041e6 <_puts_r+0xb6>
 80041d8:	290a      	cmp	r1, #10
 80041da:	d004      	beq.n	80041e6 <_puts_r+0xb6>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	6022      	str	r2, [r4, #0]
 80041e2:	7019      	strb	r1, [r3, #0]
 80041e4:	e7c5      	b.n	8004172 <_puts_r+0x42>
 80041e6:	4622      	mov	r2, r4
 80041e8:	4628      	mov	r0, r5
 80041ea:	f000 f86b 	bl	80042c4 <__swbuf_r>
 80041ee:	3001      	adds	r0, #1
 80041f0:	d1bf      	bne.n	8004172 <_puts_r+0x42>
 80041f2:	e7df      	b.n	80041b4 <_puts_r+0x84>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	250a      	movs	r5, #10
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	6022      	str	r2, [r4, #0]
 80041fc:	701d      	strb	r5, [r3, #0]
 80041fe:	e7db      	b.n	80041b8 <_puts_r+0x88>
 8004200:	080060ec 	.word	0x080060ec
 8004204:	0800610c 	.word	0x0800610c
 8004208:	080060cc 	.word	0x080060cc

0800420c <puts>:
 800420c:	4b02      	ldr	r3, [pc, #8]	; (8004218 <puts+0xc>)
 800420e:	4601      	mov	r1, r0
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	f7ff bf8d 	b.w	8004130 <_puts_r>
 8004216:	bf00      	nop
 8004218:	20000068 	.word	0x20000068

0800421c <_sbrk_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4d06      	ldr	r5, [pc, #24]	; (8004238 <_sbrk_r+0x1c>)
 8004220:	2300      	movs	r3, #0
 8004222:	4604      	mov	r4, r0
 8004224:	4608      	mov	r0, r1
 8004226:	602b      	str	r3, [r5, #0]
 8004228:	f7fc ffaa 	bl	8001180 <_sbrk>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_sbrk_r+0x1a>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b103      	cbz	r3, 8004236 <_sbrk_r+0x1a>
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	2000037c 	.word	0x2000037c

0800423c <__sread>:
 800423c:	b510      	push	{r4, lr}
 800423e:	460c      	mov	r4, r1
 8004240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004244:	f001 fe5e 	bl	8005f04 <_read_r>
 8004248:	2800      	cmp	r0, #0
 800424a:	bfab      	itete	ge
 800424c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800424e:	89a3      	ldrhlt	r3, [r4, #12]
 8004250:	181b      	addge	r3, r3, r0
 8004252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004256:	bfac      	ite	ge
 8004258:	6563      	strge	r3, [r4, #84]	; 0x54
 800425a:	81a3      	strhlt	r3, [r4, #12]
 800425c:	bd10      	pop	{r4, pc}

0800425e <__swrite>:
 800425e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004262:	461f      	mov	r7, r3
 8004264:	898b      	ldrh	r3, [r1, #12]
 8004266:	05db      	lsls	r3, r3, #23
 8004268:	4605      	mov	r5, r0
 800426a:	460c      	mov	r4, r1
 800426c:	4616      	mov	r6, r2
 800426e:	d505      	bpl.n	800427c <__swrite+0x1e>
 8004270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004274:	2302      	movs	r3, #2
 8004276:	2200      	movs	r2, #0
 8004278:	f001 f878 	bl	800536c <_lseek_r>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	4632      	mov	r2, r6
 800428a:	463b      	mov	r3, r7
 800428c:	4628      	mov	r0, r5
 800428e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004292:	f000 b869 	b.w	8004368 <_write_r>

08004296 <__sseek>:
 8004296:	b510      	push	{r4, lr}
 8004298:	460c      	mov	r4, r1
 800429a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429e:	f001 f865 	bl	800536c <_lseek_r>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	bf15      	itete	ne
 80042a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80042aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042b2:	81a3      	strheq	r3, [r4, #12]
 80042b4:	bf18      	it	ne
 80042b6:	81a3      	strhne	r3, [r4, #12]
 80042b8:	bd10      	pop	{r4, pc}

080042ba <__sclose>:
 80042ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042be:	f000 b8f1 	b.w	80044a4 <_close_r>
	...

080042c4 <__swbuf_r>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	460e      	mov	r6, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	4605      	mov	r5, r0
 80042cc:	b118      	cbz	r0, 80042d6 <__swbuf_r+0x12>
 80042ce:	6983      	ldr	r3, [r0, #24]
 80042d0:	b90b      	cbnz	r3, 80042d6 <__swbuf_r+0x12>
 80042d2:	f7ff f93b 	bl	800354c <__sinit>
 80042d6:	4b21      	ldr	r3, [pc, #132]	; (800435c <__swbuf_r+0x98>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d12b      	bne.n	8004334 <__swbuf_r+0x70>
 80042dc:	686c      	ldr	r4, [r5, #4]
 80042de:	69a3      	ldr	r3, [r4, #24]
 80042e0:	60a3      	str	r3, [r4, #8]
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	071a      	lsls	r2, r3, #28
 80042e6:	d52f      	bpl.n	8004348 <__swbuf_r+0x84>
 80042e8:	6923      	ldr	r3, [r4, #16]
 80042ea:	b36b      	cbz	r3, 8004348 <__swbuf_r+0x84>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	6820      	ldr	r0, [r4, #0]
 80042f0:	1ac0      	subs	r0, r0, r3
 80042f2:	6963      	ldr	r3, [r4, #20]
 80042f4:	b2f6      	uxtb	r6, r6
 80042f6:	4283      	cmp	r3, r0
 80042f8:	4637      	mov	r7, r6
 80042fa:	dc04      	bgt.n	8004306 <__swbuf_r+0x42>
 80042fc:	4621      	mov	r1, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 ffe2 	bl	80052c8 <_fflush_r>
 8004304:	bb30      	cbnz	r0, 8004354 <__swbuf_r+0x90>
 8004306:	68a3      	ldr	r3, [r4, #8]
 8004308:	3b01      	subs	r3, #1
 800430a:	60a3      	str	r3, [r4, #8]
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	6022      	str	r2, [r4, #0]
 8004312:	701e      	strb	r6, [r3, #0]
 8004314:	6963      	ldr	r3, [r4, #20]
 8004316:	3001      	adds	r0, #1
 8004318:	4283      	cmp	r3, r0
 800431a:	d004      	beq.n	8004326 <__swbuf_r+0x62>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	07db      	lsls	r3, r3, #31
 8004320:	d506      	bpl.n	8004330 <__swbuf_r+0x6c>
 8004322:	2e0a      	cmp	r6, #10
 8004324:	d104      	bne.n	8004330 <__swbuf_r+0x6c>
 8004326:	4621      	mov	r1, r4
 8004328:	4628      	mov	r0, r5
 800432a:	f000 ffcd 	bl	80052c8 <_fflush_r>
 800432e:	b988      	cbnz	r0, 8004354 <__swbuf_r+0x90>
 8004330:	4638      	mov	r0, r7
 8004332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <__swbuf_r+0x9c>)
 8004336:	429c      	cmp	r4, r3
 8004338:	d101      	bne.n	800433e <__swbuf_r+0x7a>
 800433a:	68ac      	ldr	r4, [r5, #8]
 800433c:	e7cf      	b.n	80042de <__swbuf_r+0x1a>
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <__swbuf_r+0xa0>)
 8004340:	429c      	cmp	r4, r3
 8004342:	bf08      	it	eq
 8004344:	68ec      	ldreq	r4, [r5, #12]
 8004346:	e7ca      	b.n	80042de <__swbuf_r+0x1a>
 8004348:	4621      	mov	r1, r4
 800434a:	4628      	mov	r0, r5
 800434c:	f000 f81e 	bl	800438c <__swsetup_r>
 8004350:	2800      	cmp	r0, #0
 8004352:	d0cb      	beq.n	80042ec <__swbuf_r+0x28>
 8004354:	f04f 37ff 	mov.w	r7, #4294967295
 8004358:	e7ea      	b.n	8004330 <__swbuf_r+0x6c>
 800435a:	bf00      	nop
 800435c:	080060ec 	.word	0x080060ec
 8004360:	0800610c 	.word	0x0800610c
 8004364:	080060cc 	.word	0x080060cc

08004368 <_write_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4d07      	ldr	r5, [pc, #28]	; (8004388 <_write_r+0x20>)
 800436c:	4604      	mov	r4, r0
 800436e:	4608      	mov	r0, r1
 8004370:	4611      	mov	r1, r2
 8004372:	2200      	movs	r2, #0
 8004374:	602a      	str	r2, [r5, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	f7fe fe8d 	bl	8003096 <_write>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_write_r+0x1e>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	b103      	cbz	r3, 8004386 <_write_r+0x1e>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	2000037c 	.word	0x2000037c

0800438c <__swsetup_r>:
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <__swsetup_r+0xcc>)
 800438e:	b570      	push	{r4, r5, r6, lr}
 8004390:	681d      	ldr	r5, [r3, #0]
 8004392:	4606      	mov	r6, r0
 8004394:	460c      	mov	r4, r1
 8004396:	b125      	cbz	r5, 80043a2 <__swsetup_r+0x16>
 8004398:	69ab      	ldr	r3, [r5, #24]
 800439a:	b913      	cbnz	r3, 80043a2 <__swsetup_r+0x16>
 800439c:	4628      	mov	r0, r5
 800439e:	f7ff f8d5 	bl	800354c <__sinit>
 80043a2:	4b2e      	ldr	r3, [pc, #184]	; (800445c <__swsetup_r+0xd0>)
 80043a4:	429c      	cmp	r4, r3
 80043a6:	d10f      	bne.n	80043c8 <__swsetup_r+0x3c>
 80043a8:	686c      	ldr	r4, [r5, #4]
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043b0:	0719      	lsls	r1, r3, #28
 80043b2:	d42c      	bmi.n	800440e <__swsetup_r+0x82>
 80043b4:	06dd      	lsls	r5, r3, #27
 80043b6:	d411      	bmi.n	80043dc <__swsetup_r+0x50>
 80043b8:	2309      	movs	r3, #9
 80043ba:	6033      	str	r3, [r6, #0]
 80043bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	f04f 30ff 	mov.w	r0, #4294967295
 80043c6:	e03e      	b.n	8004446 <__swsetup_r+0xba>
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <__swsetup_r+0xd4>)
 80043ca:	429c      	cmp	r4, r3
 80043cc:	d101      	bne.n	80043d2 <__swsetup_r+0x46>
 80043ce:	68ac      	ldr	r4, [r5, #8]
 80043d0:	e7eb      	b.n	80043aa <__swsetup_r+0x1e>
 80043d2:	4b24      	ldr	r3, [pc, #144]	; (8004464 <__swsetup_r+0xd8>)
 80043d4:	429c      	cmp	r4, r3
 80043d6:	bf08      	it	eq
 80043d8:	68ec      	ldreq	r4, [r5, #12]
 80043da:	e7e6      	b.n	80043aa <__swsetup_r+0x1e>
 80043dc:	0758      	lsls	r0, r3, #29
 80043de:	d512      	bpl.n	8004406 <__swsetup_r+0x7a>
 80043e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043e2:	b141      	cbz	r1, 80043f6 <__swsetup_r+0x6a>
 80043e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043e8:	4299      	cmp	r1, r3
 80043ea:	d002      	beq.n	80043f2 <__swsetup_r+0x66>
 80043ec:	4630      	mov	r0, r6
 80043ee:	f001 fbe3 	bl	8005bb8 <_free_r>
 80043f2:	2300      	movs	r3, #0
 80043f4:	6363      	str	r3, [r4, #52]	; 0x34
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	2300      	movs	r3, #0
 8004400:	6063      	str	r3, [r4, #4]
 8004402:	6923      	ldr	r3, [r4, #16]
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f043 0308 	orr.w	r3, r3, #8
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	6923      	ldr	r3, [r4, #16]
 8004410:	b94b      	cbnz	r3, 8004426 <__swsetup_r+0x9a>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441c:	d003      	beq.n	8004426 <__swsetup_r+0x9a>
 800441e:	4621      	mov	r1, r4
 8004420:	4630      	mov	r0, r6
 8004422:	f000 ffdb 	bl	80053dc <__smakebuf_r>
 8004426:	89a0      	ldrh	r0, [r4, #12]
 8004428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800442c:	f010 0301 	ands.w	r3, r0, #1
 8004430:	d00a      	beq.n	8004448 <__swsetup_r+0xbc>
 8004432:	2300      	movs	r3, #0
 8004434:	60a3      	str	r3, [r4, #8]
 8004436:	6963      	ldr	r3, [r4, #20]
 8004438:	425b      	negs	r3, r3
 800443a:	61a3      	str	r3, [r4, #24]
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	b943      	cbnz	r3, 8004452 <__swsetup_r+0xc6>
 8004440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004444:	d1ba      	bne.n	80043bc <__swsetup_r+0x30>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	0781      	lsls	r1, r0, #30
 800444a:	bf58      	it	pl
 800444c:	6963      	ldrpl	r3, [r4, #20]
 800444e:	60a3      	str	r3, [r4, #8]
 8004450:	e7f4      	b.n	800443c <__swsetup_r+0xb0>
 8004452:	2000      	movs	r0, #0
 8004454:	e7f7      	b.n	8004446 <__swsetup_r+0xba>
 8004456:	bf00      	nop
 8004458:	20000068 	.word	0x20000068
 800445c:	080060ec 	.word	0x080060ec
 8004460:	0800610c 	.word	0x0800610c
 8004464:	080060cc 	.word	0x080060cc

08004468 <__assert_func>:
 8004468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800446a:	4614      	mov	r4, r2
 800446c:	461a      	mov	r2, r3
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <__assert_func+0x2c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4605      	mov	r5, r0
 8004474:	68d8      	ldr	r0, [r3, #12]
 8004476:	b14c      	cbz	r4, 800448c <__assert_func+0x24>
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <__assert_func+0x30>)
 800447a:	9100      	str	r1, [sp, #0]
 800447c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004480:	4906      	ldr	r1, [pc, #24]	; (800449c <__assert_func+0x34>)
 8004482:	462b      	mov	r3, r5
 8004484:	f000 ff5c 	bl	8005340 <fiprintf>
 8004488:	f001 fd4e 	bl	8005f28 <abort>
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <__assert_func+0x38>)
 800448e:	461c      	mov	r4, r3
 8004490:	e7f3      	b.n	800447a <__assert_func+0x12>
 8004492:	bf00      	nop
 8004494:	20000068 	.word	0x20000068
 8004498:	08006164 	.word	0x08006164
 800449c:	08006171 	.word	0x08006171
 80044a0:	0800619f 	.word	0x0800619f

080044a4 <_close_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4d06      	ldr	r5, [pc, #24]	; (80044c0 <_close_r+0x1c>)
 80044a8:	2300      	movs	r3, #0
 80044aa:	4604      	mov	r4, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	f7fe fe22 	bl	80030f8 <_close>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_close_r+0x1a>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b103      	cbz	r3, 80044be <_close_r+0x1a>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	2000037c 	.word	0x2000037c

080044c4 <quorem>:
 80044c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	6903      	ldr	r3, [r0, #16]
 80044ca:	690c      	ldr	r4, [r1, #16]
 80044cc:	42a3      	cmp	r3, r4
 80044ce:	4607      	mov	r7, r0
 80044d0:	f2c0 8081 	blt.w	80045d6 <quorem+0x112>
 80044d4:	3c01      	subs	r4, #1
 80044d6:	f101 0814 	add.w	r8, r1, #20
 80044da:	f100 0514 	add.w	r5, r0, #20
 80044de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80044e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044ec:	3301      	adds	r3, #1
 80044ee:	429a      	cmp	r2, r3
 80044f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80044f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80044f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80044fc:	d331      	bcc.n	8004562 <quorem+0x9e>
 80044fe:	f04f 0e00 	mov.w	lr, #0
 8004502:	4640      	mov	r0, r8
 8004504:	46ac      	mov	ip, r5
 8004506:	46f2      	mov	sl, lr
 8004508:	f850 2b04 	ldr.w	r2, [r0], #4
 800450c:	b293      	uxth	r3, r2
 800450e:	fb06 e303 	mla	r3, r6, r3, lr
 8004512:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004516:	b29b      	uxth	r3, r3
 8004518:	ebaa 0303 	sub.w	r3, sl, r3
 800451c:	f8dc a000 	ldr.w	sl, [ip]
 8004520:	0c12      	lsrs	r2, r2, #16
 8004522:	fa13 f38a 	uxtah	r3, r3, sl
 8004526:	fb06 e202 	mla	r2, r6, r2, lr
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	9b00      	ldr	r3, [sp, #0]
 800452e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004532:	b292      	uxth	r2, r2
 8004534:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800453c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004540:	4581      	cmp	r9, r0
 8004542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004546:	f84c 3b04 	str.w	r3, [ip], #4
 800454a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800454e:	d2db      	bcs.n	8004508 <quorem+0x44>
 8004550:	f855 300b 	ldr.w	r3, [r5, fp]
 8004554:	b92b      	cbnz	r3, 8004562 <quorem+0x9e>
 8004556:	9b01      	ldr	r3, [sp, #4]
 8004558:	3b04      	subs	r3, #4
 800455a:	429d      	cmp	r5, r3
 800455c:	461a      	mov	r2, r3
 800455e:	d32e      	bcc.n	80045be <quorem+0xfa>
 8004560:	613c      	str	r4, [r7, #16]
 8004562:	4638      	mov	r0, r7
 8004564:	f001 fa10 	bl	8005988 <__mcmp>
 8004568:	2800      	cmp	r0, #0
 800456a:	db24      	blt.n	80045b6 <quorem+0xf2>
 800456c:	3601      	adds	r6, #1
 800456e:	4628      	mov	r0, r5
 8004570:	f04f 0c00 	mov.w	ip, #0
 8004574:	f858 2b04 	ldr.w	r2, [r8], #4
 8004578:	f8d0 e000 	ldr.w	lr, [r0]
 800457c:	b293      	uxth	r3, r2
 800457e:	ebac 0303 	sub.w	r3, ip, r3
 8004582:	0c12      	lsrs	r2, r2, #16
 8004584:	fa13 f38e 	uxtah	r3, r3, lr
 8004588:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800458c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004590:	b29b      	uxth	r3, r3
 8004592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004596:	45c1      	cmp	r9, r8
 8004598:	f840 3b04 	str.w	r3, [r0], #4
 800459c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80045a0:	d2e8      	bcs.n	8004574 <quorem+0xb0>
 80045a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045aa:	b922      	cbnz	r2, 80045b6 <quorem+0xf2>
 80045ac:	3b04      	subs	r3, #4
 80045ae:	429d      	cmp	r5, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	d30a      	bcc.n	80045ca <quorem+0x106>
 80045b4:	613c      	str	r4, [r7, #16]
 80045b6:	4630      	mov	r0, r6
 80045b8:	b003      	add	sp, #12
 80045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	3b04      	subs	r3, #4
 80045c2:	2a00      	cmp	r2, #0
 80045c4:	d1cc      	bne.n	8004560 <quorem+0x9c>
 80045c6:	3c01      	subs	r4, #1
 80045c8:	e7c7      	b.n	800455a <quorem+0x96>
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	3b04      	subs	r3, #4
 80045ce:	2a00      	cmp	r2, #0
 80045d0:	d1f0      	bne.n	80045b4 <quorem+0xf0>
 80045d2:	3c01      	subs	r4, #1
 80045d4:	e7eb      	b.n	80045ae <quorem+0xea>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e7ee      	b.n	80045b8 <quorem+0xf4>
 80045da:	0000      	movs	r0, r0
 80045dc:	0000      	movs	r0, r0
	...

080045e0 <_dtoa_r>:
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	ed2d 8b04 	vpush	{d8-d9}
 80045e8:	ec57 6b10 	vmov	r6, r7, d0
 80045ec:	b093      	sub	sp, #76	; 0x4c
 80045ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80045f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80045f4:	9106      	str	r1, [sp, #24]
 80045f6:	ee10 aa10 	vmov	sl, s0
 80045fa:	4604      	mov	r4, r0
 80045fc:	9209      	str	r2, [sp, #36]	; 0x24
 80045fe:	930c      	str	r3, [sp, #48]	; 0x30
 8004600:	46bb      	mov	fp, r7
 8004602:	b975      	cbnz	r5, 8004622 <_dtoa_r+0x42>
 8004604:	2010      	movs	r0, #16
 8004606:	f000 ff29 	bl	800545c <malloc>
 800460a:	4602      	mov	r2, r0
 800460c:	6260      	str	r0, [r4, #36]	; 0x24
 800460e:	b920      	cbnz	r0, 800461a <_dtoa_r+0x3a>
 8004610:	4ba7      	ldr	r3, [pc, #668]	; (80048b0 <_dtoa_r+0x2d0>)
 8004612:	21ea      	movs	r1, #234	; 0xea
 8004614:	48a7      	ldr	r0, [pc, #668]	; (80048b4 <_dtoa_r+0x2d4>)
 8004616:	f7ff ff27 	bl	8004468 <__assert_func>
 800461a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800461e:	6005      	str	r5, [r0, #0]
 8004620:	60c5      	str	r5, [r0, #12]
 8004622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004624:	6819      	ldr	r1, [r3, #0]
 8004626:	b151      	cbz	r1, 800463e <_dtoa_r+0x5e>
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	604a      	str	r2, [r1, #4]
 800462c:	2301      	movs	r3, #1
 800462e:	4093      	lsls	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
 8004632:	4620      	mov	r0, r4
 8004634:	f000 ff66 	bl	8005504 <_Bfree>
 8004638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	1e3b      	subs	r3, r7, #0
 8004640:	bfaa      	itet	ge
 8004642:	2300      	movge	r3, #0
 8004644:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004648:	f8c8 3000 	strge.w	r3, [r8]
 800464c:	4b9a      	ldr	r3, [pc, #616]	; (80048b8 <_dtoa_r+0x2d8>)
 800464e:	bfbc      	itt	lt
 8004650:	2201      	movlt	r2, #1
 8004652:	f8c8 2000 	strlt.w	r2, [r8]
 8004656:	ea33 030b 	bics.w	r3, r3, fp
 800465a:	d11b      	bne.n	8004694 <_dtoa_r+0xb4>
 800465c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800465e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004668:	4333      	orrs	r3, r6
 800466a:	f000 8592 	beq.w	8005192 <_dtoa_r+0xbb2>
 800466e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004670:	b963      	cbnz	r3, 800468c <_dtoa_r+0xac>
 8004672:	4b92      	ldr	r3, [pc, #584]	; (80048bc <_dtoa_r+0x2dc>)
 8004674:	e022      	b.n	80046bc <_dtoa_r+0xdc>
 8004676:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <_dtoa_r+0x2e0>)
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	3308      	adds	r3, #8
 800467c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	9801      	ldr	r0, [sp, #4]
 8004682:	b013      	add	sp, #76	; 0x4c
 8004684:	ecbd 8b04 	vpop	{d8-d9}
 8004688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468c:	4b8b      	ldr	r3, [pc, #556]	; (80048bc <_dtoa_r+0x2dc>)
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	3303      	adds	r3, #3
 8004692:	e7f3      	b.n	800467c <_dtoa_r+0x9c>
 8004694:	2200      	movs	r2, #0
 8004696:	2300      	movs	r3, #0
 8004698:	4650      	mov	r0, sl
 800469a:	4659      	mov	r1, fp
 800469c:	f7fc fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80046a0:	ec4b ab19 	vmov	d9, sl, fp
 80046a4:	4680      	mov	r8, r0
 80046a6:	b158      	cbz	r0, 80046c0 <_dtoa_r+0xe0>
 80046a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046aa:	2301      	movs	r3, #1
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 856b 	beq.w	800518c <_dtoa_r+0xbac>
 80046b6:	4883      	ldr	r0, [pc, #524]	; (80048c4 <_dtoa_r+0x2e4>)
 80046b8:	6018      	str	r0, [r3, #0]
 80046ba:	1e43      	subs	r3, r0, #1
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	e7df      	b.n	8004680 <_dtoa_r+0xa0>
 80046c0:	ec4b ab10 	vmov	d0, sl, fp
 80046c4:	aa10      	add	r2, sp, #64	; 0x40
 80046c6:	a911      	add	r1, sp, #68	; 0x44
 80046c8:	4620      	mov	r0, r4
 80046ca:	f001 fa03 	bl	8005ad4 <__d2b>
 80046ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80046d2:	ee08 0a10 	vmov	s16, r0
 80046d6:	2d00      	cmp	r5, #0
 80046d8:	f000 8084 	beq.w	80047e4 <_dtoa_r+0x204>
 80046dc:	ee19 3a90 	vmov	r3, s19
 80046e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80046e8:	4656      	mov	r6, sl
 80046ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80046ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80046f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80046f6:	4b74      	ldr	r3, [pc, #464]	; (80048c8 <_dtoa_r+0x2e8>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	4630      	mov	r0, r6
 80046fc:	4639      	mov	r1, r7
 80046fe:	f7fb fdc3 	bl	8000288 <__aeabi_dsub>
 8004702:	a365      	add	r3, pc, #404	; (adr r3, 8004898 <_dtoa_r+0x2b8>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb ff76 	bl	80005f8 <__aeabi_dmul>
 800470c:	a364      	add	r3, pc, #400	; (adr r3, 80048a0 <_dtoa_r+0x2c0>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f7fb fdbb 	bl	800028c <__adddf3>
 8004716:	4606      	mov	r6, r0
 8004718:	4628      	mov	r0, r5
 800471a:	460f      	mov	r7, r1
 800471c:	f7fb ff02 	bl	8000524 <__aeabi_i2d>
 8004720:	a361      	add	r3, pc, #388	; (adr r3, 80048a8 <_dtoa_r+0x2c8>)
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f7fb ff67 	bl	80005f8 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4630      	mov	r0, r6
 8004730:	4639      	mov	r1, r7
 8004732:	f7fb fdab 	bl	800028c <__adddf3>
 8004736:	4606      	mov	r6, r0
 8004738:	460f      	mov	r7, r1
 800473a:	f7fc fa0d 	bl	8000b58 <__aeabi_d2iz>
 800473e:	2200      	movs	r2, #0
 8004740:	9000      	str	r0, [sp, #0]
 8004742:	2300      	movs	r3, #0
 8004744:	4630      	mov	r0, r6
 8004746:	4639      	mov	r1, r7
 8004748:	f7fc f9c8 	bl	8000adc <__aeabi_dcmplt>
 800474c:	b150      	cbz	r0, 8004764 <_dtoa_r+0x184>
 800474e:	9800      	ldr	r0, [sp, #0]
 8004750:	f7fb fee8 	bl	8000524 <__aeabi_i2d>
 8004754:	4632      	mov	r2, r6
 8004756:	463b      	mov	r3, r7
 8004758:	f7fc f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800475c:	b910      	cbnz	r0, 8004764 <_dtoa_r+0x184>
 800475e:	9b00      	ldr	r3, [sp, #0]
 8004760:	3b01      	subs	r3, #1
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	9b00      	ldr	r3, [sp, #0]
 8004766:	2b16      	cmp	r3, #22
 8004768:	d85a      	bhi.n	8004820 <_dtoa_r+0x240>
 800476a:	9a00      	ldr	r2, [sp, #0]
 800476c:	4b57      	ldr	r3, [pc, #348]	; (80048cc <_dtoa_r+0x2ec>)
 800476e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	ec51 0b19 	vmov	r0, r1, d9
 800477a:	f7fc f9af 	bl	8000adc <__aeabi_dcmplt>
 800477e:	2800      	cmp	r0, #0
 8004780:	d050      	beq.n	8004824 <_dtoa_r+0x244>
 8004782:	9b00      	ldr	r3, [sp, #0]
 8004784:	3b01      	subs	r3, #1
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2300      	movs	r3, #0
 800478a:	930b      	str	r3, [sp, #44]	; 0x2c
 800478c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800478e:	1b5d      	subs	r5, r3, r5
 8004790:	1e6b      	subs	r3, r5, #1
 8004792:	9305      	str	r3, [sp, #20]
 8004794:	bf45      	ittet	mi
 8004796:	f1c5 0301 	rsbmi	r3, r5, #1
 800479a:	9304      	strmi	r3, [sp, #16]
 800479c:	2300      	movpl	r3, #0
 800479e:	2300      	movmi	r3, #0
 80047a0:	bf4c      	ite	mi
 80047a2:	9305      	strmi	r3, [sp, #20]
 80047a4:	9304      	strpl	r3, [sp, #16]
 80047a6:	9b00      	ldr	r3, [sp, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db3d      	blt.n	8004828 <_dtoa_r+0x248>
 80047ac:	9b05      	ldr	r3, [sp, #20]
 80047ae:	9a00      	ldr	r2, [sp, #0]
 80047b0:	920a      	str	r2, [sp, #40]	; 0x28
 80047b2:	4413      	add	r3, r2
 80047b4:	9305      	str	r3, [sp, #20]
 80047b6:	2300      	movs	r3, #0
 80047b8:	9307      	str	r3, [sp, #28]
 80047ba:	9b06      	ldr	r3, [sp, #24]
 80047bc:	2b09      	cmp	r3, #9
 80047be:	f200 8089 	bhi.w	80048d4 <_dtoa_r+0x2f4>
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	bfc4      	itt	gt
 80047c6:	3b04      	subgt	r3, #4
 80047c8:	9306      	strgt	r3, [sp, #24]
 80047ca:	9b06      	ldr	r3, [sp, #24]
 80047cc:	f1a3 0302 	sub.w	r3, r3, #2
 80047d0:	bfcc      	ite	gt
 80047d2:	2500      	movgt	r5, #0
 80047d4:	2501      	movle	r5, #1
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	f200 8087 	bhi.w	80048ea <_dtoa_r+0x30a>
 80047dc:	e8df f003 	tbb	[pc, r3]
 80047e0:	59383a2d 	.word	0x59383a2d
 80047e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80047e8:	441d      	add	r5, r3
 80047ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	bfc1      	itttt	gt
 80047f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80047f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80047fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80047fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004802:	bfda      	itte	le
 8004804:	f1c3 0320 	rsble	r3, r3, #32
 8004808:	fa06 f003 	lslle.w	r0, r6, r3
 800480c:	4318      	orrgt	r0, r3
 800480e:	f7fb fe79 	bl	8000504 <__aeabi_ui2d>
 8004812:	2301      	movs	r3, #1
 8004814:	4606      	mov	r6, r0
 8004816:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800481a:	3d01      	subs	r5, #1
 800481c:	930e      	str	r3, [sp, #56]	; 0x38
 800481e:	e76a      	b.n	80046f6 <_dtoa_r+0x116>
 8004820:	2301      	movs	r3, #1
 8004822:	e7b2      	b.n	800478a <_dtoa_r+0x1aa>
 8004824:	900b      	str	r0, [sp, #44]	; 0x2c
 8004826:	e7b1      	b.n	800478c <_dtoa_r+0x1ac>
 8004828:	9b04      	ldr	r3, [sp, #16]
 800482a:	9a00      	ldr	r2, [sp, #0]
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	9304      	str	r3, [sp, #16]
 8004830:	4253      	negs	r3, r2
 8004832:	9307      	str	r3, [sp, #28]
 8004834:	2300      	movs	r3, #0
 8004836:	930a      	str	r3, [sp, #40]	; 0x28
 8004838:	e7bf      	b.n	80047ba <_dtoa_r+0x1da>
 800483a:	2300      	movs	r3, #0
 800483c:	9308      	str	r3, [sp, #32]
 800483e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	dc55      	bgt.n	80048f0 <_dtoa_r+0x310>
 8004844:	2301      	movs	r3, #1
 8004846:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800484a:	461a      	mov	r2, r3
 800484c:	9209      	str	r2, [sp, #36]	; 0x24
 800484e:	e00c      	b.n	800486a <_dtoa_r+0x28a>
 8004850:	2301      	movs	r3, #1
 8004852:	e7f3      	b.n	800483c <_dtoa_r+0x25c>
 8004854:	2300      	movs	r3, #0
 8004856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004858:	9308      	str	r3, [sp, #32]
 800485a:	9b00      	ldr	r3, [sp, #0]
 800485c:	4413      	add	r3, r2
 800485e:	9302      	str	r3, [sp, #8]
 8004860:	3301      	adds	r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	9303      	str	r3, [sp, #12]
 8004866:	bfb8      	it	lt
 8004868:	2301      	movlt	r3, #1
 800486a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800486c:	2200      	movs	r2, #0
 800486e:	6042      	str	r2, [r0, #4]
 8004870:	2204      	movs	r2, #4
 8004872:	f102 0614 	add.w	r6, r2, #20
 8004876:	429e      	cmp	r6, r3
 8004878:	6841      	ldr	r1, [r0, #4]
 800487a:	d93d      	bls.n	80048f8 <_dtoa_r+0x318>
 800487c:	4620      	mov	r0, r4
 800487e:	f000 fe01 	bl	8005484 <_Balloc>
 8004882:	9001      	str	r0, [sp, #4]
 8004884:	2800      	cmp	r0, #0
 8004886:	d13b      	bne.n	8004900 <_dtoa_r+0x320>
 8004888:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <_dtoa_r+0x2f0>)
 800488a:	4602      	mov	r2, r0
 800488c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004890:	e6c0      	b.n	8004614 <_dtoa_r+0x34>
 8004892:	2301      	movs	r3, #1
 8004894:	e7df      	b.n	8004856 <_dtoa_r+0x276>
 8004896:	bf00      	nop
 8004898:	636f4361 	.word	0x636f4361
 800489c:	3fd287a7 	.word	0x3fd287a7
 80048a0:	8b60c8b3 	.word	0x8b60c8b3
 80048a4:	3fc68a28 	.word	0x3fc68a28
 80048a8:	509f79fb 	.word	0x509f79fb
 80048ac:	3fd34413 	.word	0x3fd34413
 80048b0:	080061ad 	.word	0x080061ad
 80048b4:	080061c4 	.word	0x080061c4
 80048b8:	7ff00000 	.word	0x7ff00000
 80048bc:	080061a9 	.word	0x080061a9
 80048c0:	080061a0 	.word	0x080061a0
 80048c4:	08006141 	.word	0x08006141
 80048c8:	3ff80000 	.word	0x3ff80000
 80048cc:	080062b8 	.word	0x080062b8
 80048d0:	0800621f 	.word	0x0800621f
 80048d4:	2501      	movs	r5, #1
 80048d6:	2300      	movs	r3, #0
 80048d8:	9306      	str	r3, [sp, #24]
 80048da:	9508      	str	r5, [sp, #32]
 80048dc:	f04f 33ff 	mov.w	r3, #4294967295
 80048e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2312      	movs	r3, #18
 80048e8:	e7b0      	b.n	800484c <_dtoa_r+0x26c>
 80048ea:	2301      	movs	r3, #1
 80048ec:	9308      	str	r3, [sp, #32]
 80048ee:	e7f5      	b.n	80048dc <_dtoa_r+0x2fc>
 80048f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80048f6:	e7b8      	b.n	800486a <_dtoa_r+0x28a>
 80048f8:	3101      	adds	r1, #1
 80048fa:	6041      	str	r1, [r0, #4]
 80048fc:	0052      	lsls	r2, r2, #1
 80048fe:	e7b8      	b.n	8004872 <_dtoa_r+0x292>
 8004900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004902:	9a01      	ldr	r2, [sp, #4]
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	9b03      	ldr	r3, [sp, #12]
 8004908:	2b0e      	cmp	r3, #14
 800490a:	f200 809d 	bhi.w	8004a48 <_dtoa_r+0x468>
 800490e:	2d00      	cmp	r5, #0
 8004910:	f000 809a 	beq.w	8004a48 <_dtoa_r+0x468>
 8004914:	9b00      	ldr	r3, [sp, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dd32      	ble.n	8004980 <_dtoa_r+0x3a0>
 800491a:	4ab7      	ldr	r2, [pc, #732]	; (8004bf8 <_dtoa_r+0x618>)
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004924:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004928:	9b00      	ldr	r3, [sp, #0]
 800492a:	05d8      	lsls	r0, r3, #23
 800492c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004930:	d516      	bpl.n	8004960 <_dtoa_r+0x380>
 8004932:	4bb2      	ldr	r3, [pc, #712]	; (8004bfc <_dtoa_r+0x61c>)
 8004934:	ec51 0b19 	vmov	r0, r1, d9
 8004938:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800493c:	f7fb ff86 	bl	800084c <__aeabi_ddiv>
 8004940:	f007 070f 	and.w	r7, r7, #15
 8004944:	4682      	mov	sl, r0
 8004946:	468b      	mov	fp, r1
 8004948:	2503      	movs	r5, #3
 800494a:	4eac      	ldr	r6, [pc, #688]	; (8004bfc <_dtoa_r+0x61c>)
 800494c:	b957      	cbnz	r7, 8004964 <_dtoa_r+0x384>
 800494e:	4642      	mov	r2, r8
 8004950:	464b      	mov	r3, r9
 8004952:	4650      	mov	r0, sl
 8004954:	4659      	mov	r1, fp
 8004956:	f7fb ff79 	bl	800084c <__aeabi_ddiv>
 800495a:	4682      	mov	sl, r0
 800495c:	468b      	mov	fp, r1
 800495e:	e028      	b.n	80049b2 <_dtoa_r+0x3d2>
 8004960:	2502      	movs	r5, #2
 8004962:	e7f2      	b.n	800494a <_dtoa_r+0x36a>
 8004964:	07f9      	lsls	r1, r7, #31
 8004966:	d508      	bpl.n	800497a <_dtoa_r+0x39a>
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004970:	f7fb fe42 	bl	80005f8 <__aeabi_dmul>
 8004974:	3501      	adds	r5, #1
 8004976:	4680      	mov	r8, r0
 8004978:	4689      	mov	r9, r1
 800497a:	107f      	asrs	r7, r7, #1
 800497c:	3608      	adds	r6, #8
 800497e:	e7e5      	b.n	800494c <_dtoa_r+0x36c>
 8004980:	f000 809b 	beq.w	8004aba <_dtoa_r+0x4da>
 8004984:	9b00      	ldr	r3, [sp, #0]
 8004986:	4f9d      	ldr	r7, [pc, #628]	; (8004bfc <_dtoa_r+0x61c>)
 8004988:	425e      	negs	r6, r3
 800498a:	4b9b      	ldr	r3, [pc, #620]	; (8004bf8 <_dtoa_r+0x618>)
 800498c:	f006 020f 	and.w	r2, r6, #15
 8004990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	ec51 0b19 	vmov	r0, r1, d9
 800499c:	f7fb fe2c 	bl	80005f8 <__aeabi_dmul>
 80049a0:	1136      	asrs	r6, r6, #4
 80049a2:	4682      	mov	sl, r0
 80049a4:	468b      	mov	fp, r1
 80049a6:	2300      	movs	r3, #0
 80049a8:	2502      	movs	r5, #2
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	d17a      	bne.n	8004aa4 <_dtoa_r+0x4c4>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1d3      	bne.n	800495a <_dtoa_r+0x37a>
 80049b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8082 	beq.w	8004abe <_dtoa_r+0x4de>
 80049ba:	4b91      	ldr	r3, [pc, #580]	; (8004c00 <_dtoa_r+0x620>)
 80049bc:	2200      	movs	r2, #0
 80049be:	4650      	mov	r0, sl
 80049c0:	4659      	mov	r1, fp
 80049c2:	f7fc f88b 	bl	8000adc <__aeabi_dcmplt>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d079      	beq.n	8004abe <_dtoa_r+0x4de>
 80049ca:	9b03      	ldr	r3, [sp, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d076      	beq.n	8004abe <_dtoa_r+0x4de>
 80049d0:	9b02      	ldr	r3, [sp, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dd36      	ble.n	8004a44 <_dtoa_r+0x464>
 80049d6:	9b00      	ldr	r3, [sp, #0]
 80049d8:	4650      	mov	r0, sl
 80049da:	4659      	mov	r1, fp
 80049dc:	1e5f      	subs	r7, r3, #1
 80049de:	2200      	movs	r2, #0
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <_dtoa_r+0x624>)
 80049e2:	f7fb fe09 	bl	80005f8 <__aeabi_dmul>
 80049e6:	9e02      	ldr	r6, [sp, #8]
 80049e8:	4682      	mov	sl, r0
 80049ea:	468b      	mov	fp, r1
 80049ec:	3501      	adds	r5, #1
 80049ee:	4628      	mov	r0, r5
 80049f0:	f7fb fd98 	bl	8000524 <__aeabi_i2d>
 80049f4:	4652      	mov	r2, sl
 80049f6:	465b      	mov	r3, fp
 80049f8:	f7fb fdfe 	bl	80005f8 <__aeabi_dmul>
 80049fc:	4b82      	ldr	r3, [pc, #520]	; (8004c08 <_dtoa_r+0x628>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	f7fb fc44 	bl	800028c <__adddf3>
 8004a04:	46d0      	mov	r8, sl
 8004a06:	46d9      	mov	r9, fp
 8004a08:	4682      	mov	sl, r0
 8004a0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	d158      	bne.n	8004ac4 <_dtoa_r+0x4e4>
 8004a12:	4b7e      	ldr	r3, [pc, #504]	; (8004c0c <_dtoa_r+0x62c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	4640      	mov	r0, r8
 8004a18:	4649      	mov	r1, r9
 8004a1a:	f7fb fc35 	bl	8000288 <__aeabi_dsub>
 8004a1e:	4652      	mov	r2, sl
 8004a20:	465b      	mov	r3, fp
 8004a22:	4680      	mov	r8, r0
 8004a24:	4689      	mov	r9, r1
 8004a26:	f7fc f877 	bl	8000b18 <__aeabi_dcmpgt>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	f040 8295 	bne.w	8004f5a <_dtoa_r+0x97a>
 8004a30:	4652      	mov	r2, sl
 8004a32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004a36:	4640      	mov	r0, r8
 8004a38:	4649      	mov	r1, r9
 8004a3a:	f7fc f84f 	bl	8000adc <__aeabi_dcmplt>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f040 8289 	bne.w	8004f56 <_dtoa_r+0x976>
 8004a44:	ec5b ab19 	vmov	sl, fp, d9
 8004a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f2c0 8148 	blt.w	8004ce0 <_dtoa_r+0x700>
 8004a50:	9a00      	ldr	r2, [sp, #0]
 8004a52:	2a0e      	cmp	r2, #14
 8004a54:	f300 8144 	bgt.w	8004ce0 <_dtoa_r+0x700>
 8004a58:	4b67      	ldr	r3, [pc, #412]	; (8004bf8 <_dtoa_r+0x618>)
 8004a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f280 80d5 	bge.w	8004c14 <_dtoa_r+0x634>
 8004a6a:	9b03      	ldr	r3, [sp, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f300 80d1 	bgt.w	8004c14 <_dtoa_r+0x634>
 8004a72:	f040 826f 	bne.w	8004f54 <_dtoa_r+0x974>
 8004a76:	4b65      	ldr	r3, [pc, #404]	; (8004c0c <_dtoa_r+0x62c>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	f7fb fdbb 	bl	80005f8 <__aeabi_dmul>
 8004a82:	4652      	mov	r2, sl
 8004a84:	465b      	mov	r3, fp
 8004a86:	f7fc f83d 	bl	8000b04 <__aeabi_dcmpge>
 8004a8a:	9e03      	ldr	r6, [sp, #12]
 8004a8c:	4637      	mov	r7, r6
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	f040 8245 	bne.w	8004f1e <_dtoa_r+0x93e>
 8004a94:	9d01      	ldr	r5, [sp, #4]
 8004a96:	2331      	movs	r3, #49	; 0x31
 8004a98:	f805 3b01 	strb.w	r3, [r5], #1
 8004a9c:	9b00      	ldr	r3, [sp, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	e240      	b.n	8004f26 <_dtoa_r+0x946>
 8004aa4:	07f2      	lsls	r2, r6, #31
 8004aa6:	d505      	bpl.n	8004ab4 <_dtoa_r+0x4d4>
 8004aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aac:	f7fb fda4 	bl	80005f8 <__aeabi_dmul>
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	1076      	asrs	r6, r6, #1
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	e777      	b.n	80049aa <_dtoa_r+0x3ca>
 8004aba:	2502      	movs	r5, #2
 8004abc:	e779      	b.n	80049b2 <_dtoa_r+0x3d2>
 8004abe:	9f00      	ldr	r7, [sp, #0]
 8004ac0:	9e03      	ldr	r6, [sp, #12]
 8004ac2:	e794      	b.n	80049ee <_dtoa_r+0x40e>
 8004ac4:	9901      	ldr	r1, [sp, #4]
 8004ac6:	4b4c      	ldr	r3, [pc, #304]	; (8004bf8 <_dtoa_r+0x618>)
 8004ac8:	4431      	add	r1, r6
 8004aca:	910d      	str	r1, [sp, #52]	; 0x34
 8004acc:	9908      	ldr	r1, [sp, #32]
 8004ace:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ad2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d043      	beq.n	8004b62 <_dtoa_r+0x582>
 8004ada:	494d      	ldr	r1, [pc, #308]	; (8004c10 <_dtoa_r+0x630>)
 8004adc:	2000      	movs	r0, #0
 8004ade:	f7fb feb5 	bl	800084c <__aeabi_ddiv>
 8004ae2:	4652      	mov	r2, sl
 8004ae4:	465b      	mov	r3, fp
 8004ae6:	f7fb fbcf 	bl	8000288 <__aeabi_dsub>
 8004aea:	9d01      	ldr	r5, [sp, #4]
 8004aec:	4682      	mov	sl, r0
 8004aee:	468b      	mov	fp, r1
 8004af0:	4649      	mov	r1, r9
 8004af2:	4640      	mov	r0, r8
 8004af4:	f7fc f830 	bl	8000b58 <__aeabi_d2iz>
 8004af8:	4606      	mov	r6, r0
 8004afa:	f7fb fd13 	bl	8000524 <__aeabi_i2d>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4640      	mov	r0, r8
 8004b04:	4649      	mov	r1, r9
 8004b06:	f7fb fbbf 	bl	8000288 <__aeabi_dsub>
 8004b0a:	3630      	adds	r6, #48	; 0x30
 8004b0c:	f805 6b01 	strb.w	r6, [r5], #1
 8004b10:	4652      	mov	r2, sl
 8004b12:	465b      	mov	r3, fp
 8004b14:	4680      	mov	r8, r0
 8004b16:	4689      	mov	r9, r1
 8004b18:	f7fb ffe0 	bl	8000adc <__aeabi_dcmplt>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d163      	bne.n	8004be8 <_dtoa_r+0x608>
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	4936      	ldr	r1, [pc, #216]	; (8004c00 <_dtoa_r+0x620>)
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7fb fbae 	bl	8000288 <__aeabi_dsub>
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	465b      	mov	r3, fp
 8004b30:	f7fb ffd4 	bl	8000adc <__aeabi_dcmplt>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	f040 80b5 	bne.w	8004ca4 <_dtoa_r+0x6c4>
 8004b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b3c:	429d      	cmp	r5, r3
 8004b3e:	d081      	beq.n	8004a44 <_dtoa_r+0x464>
 8004b40:	4b30      	ldr	r3, [pc, #192]	; (8004c04 <_dtoa_r+0x624>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	4650      	mov	r0, sl
 8004b46:	4659      	mov	r1, fp
 8004b48:	f7fb fd56 	bl	80005f8 <__aeabi_dmul>
 8004b4c:	4b2d      	ldr	r3, [pc, #180]	; (8004c04 <_dtoa_r+0x624>)
 8004b4e:	4682      	mov	sl, r0
 8004b50:	468b      	mov	fp, r1
 8004b52:	4640      	mov	r0, r8
 8004b54:	4649      	mov	r1, r9
 8004b56:	2200      	movs	r2, #0
 8004b58:	f7fb fd4e 	bl	80005f8 <__aeabi_dmul>
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	4689      	mov	r9, r1
 8004b60:	e7c6      	b.n	8004af0 <_dtoa_r+0x510>
 8004b62:	4650      	mov	r0, sl
 8004b64:	4659      	mov	r1, fp
 8004b66:	f7fb fd47 	bl	80005f8 <__aeabi_dmul>
 8004b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b6c:	9d01      	ldr	r5, [sp, #4]
 8004b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b70:	4682      	mov	sl, r0
 8004b72:	468b      	mov	fp, r1
 8004b74:	4649      	mov	r1, r9
 8004b76:	4640      	mov	r0, r8
 8004b78:	f7fb ffee 	bl	8000b58 <__aeabi_d2iz>
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	f7fb fcd1 	bl	8000524 <__aeabi_i2d>
 8004b82:	3630      	adds	r6, #48	; 0x30
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4640      	mov	r0, r8
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	f7fb fb7c 	bl	8000288 <__aeabi_dsub>
 8004b90:	f805 6b01 	strb.w	r6, [r5], #1
 8004b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b96:	429d      	cmp	r5, r3
 8004b98:	4680      	mov	r8, r0
 8004b9a:	4689      	mov	r9, r1
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	d124      	bne.n	8004bec <_dtoa_r+0x60c>
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <_dtoa_r+0x630>)
 8004ba4:	4650      	mov	r0, sl
 8004ba6:	4659      	mov	r1, fp
 8004ba8:	f7fb fb70 	bl	800028c <__adddf3>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	f7fb ffb0 	bl	8000b18 <__aeabi_dcmpgt>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d173      	bne.n	8004ca4 <_dtoa_r+0x6c4>
 8004bbc:	4652      	mov	r2, sl
 8004bbe:	465b      	mov	r3, fp
 8004bc0:	4913      	ldr	r1, [pc, #76]	; (8004c10 <_dtoa_r+0x630>)
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f7fb fb60 	bl	8000288 <__aeabi_dsub>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4640      	mov	r0, r8
 8004bce:	4649      	mov	r1, r9
 8004bd0:	f7fb ff84 	bl	8000adc <__aeabi_dcmplt>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	f43f af35 	beq.w	8004a44 <_dtoa_r+0x464>
 8004bda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004bdc:	1e6b      	subs	r3, r5, #1
 8004bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8004be0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d0f8      	beq.n	8004bda <_dtoa_r+0x5fa>
 8004be8:	9700      	str	r7, [sp, #0]
 8004bea:	e049      	b.n	8004c80 <_dtoa_r+0x6a0>
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <_dtoa_r+0x624>)
 8004bee:	f7fb fd03 	bl	80005f8 <__aeabi_dmul>
 8004bf2:	4680      	mov	r8, r0
 8004bf4:	4689      	mov	r9, r1
 8004bf6:	e7bd      	b.n	8004b74 <_dtoa_r+0x594>
 8004bf8:	080062b8 	.word	0x080062b8
 8004bfc:	08006290 	.word	0x08006290
 8004c00:	3ff00000 	.word	0x3ff00000
 8004c04:	40240000 	.word	0x40240000
 8004c08:	401c0000 	.word	0x401c0000
 8004c0c:	40140000 	.word	0x40140000
 8004c10:	3fe00000 	.word	0x3fe00000
 8004c14:	9d01      	ldr	r5, [sp, #4]
 8004c16:	4656      	mov	r6, sl
 8004c18:	465f      	mov	r7, fp
 8004c1a:	4642      	mov	r2, r8
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	4630      	mov	r0, r6
 8004c20:	4639      	mov	r1, r7
 8004c22:	f7fb fe13 	bl	800084c <__aeabi_ddiv>
 8004c26:	f7fb ff97 	bl	8000b58 <__aeabi_d2iz>
 8004c2a:	4682      	mov	sl, r0
 8004c2c:	f7fb fc7a 	bl	8000524 <__aeabi_i2d>
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	f7fb fce0 	bl	80005f8 <__aeabi_dmul>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	4639      	mov	r1, r7
 8004c40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004c44:	f7fb fb20 	bl	8000288 <__aeabi_dsub>
 8004c48:	f805 6b01 	strb.w	r6, [r5], #1
 8004c4c:	9e01      	ldr	r6, [sp, #4]
 8004c4e:	9f03      	ldr	r7, [sp, #12]
 8004c50:	1bae      	subs	r6, r5, r6
 8004c52:	42b7      	cmp	r7, r6
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	d135      	bne.n	8004cc6 <_dtoa_r+0x6e6>
 8004c5a:	f7fb fb17 	bl	800028c <__adddf3>
 8004c5e:	4642      	mov	r2, r8
 8004c60:	464b      	mov	r3, r9
 8004c62:	4606      	mov	r6, r0
 8004c64:	460f      	mov	r7, r1
 8004c66:	f7fb ff57 	bl	8000b18 <__aeabi_dcmpgt>
 8004c6a:	b9d0      	cbnz	r0, 8004ca2 <_dtoa_r+0x6c2>
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	4630      	mov	r0, r6
 8004c72:	4639      	mov	r1, r7
 8004c74:	f7fb ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c78:	b110      	cbz	r0, 8004c80 <_dtoa_r+0x6a0>
 8004c7a:	f01a 0f01 	tst.w	sl, #1
 8004c7e:	d110      	bne.n	8004ca2 <_dtoa_r+0x6c2>
 8004c80:	4620      	mov	r0, r4
 8004c82:	ee18 1a10 	vmov	r1, s16
 8004c86:	f000 fc3d 	bl	8005504 <_Bfree>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9800      	ldr	r0, [sp, #0]
 8004c8e:	702b      	strb	r3, [r5, #0]
 8004c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c92:	3001      	adds	r0, #1
 8004c94:	6018      	str	r0, [r3, #0]
 8004c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f43f acf1 	beq.w	8004680 <_dtoa_r+0xa0>
 8004c9e:	601d      	str	r5, [r3, #0]
 8004ca0:	e4ee      	b.n	8004680 <_dtoa_r+0xa0>
 8004ca2:	9f00      	ldr	r7, [sp, #0]
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	461d      	mov	r5, r3
 8004ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cac:	2a39      	cmp	r2, #57	; 0x39
 8004cae:	d106      	bne.n	8004cbe <_dtoa_r+0x6de>
 8004cb0:	9a01      	ldr	r2, [sp, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d1f7      	bne.n	8004ca6 <_dtoa_r+0x6c6>
 8004cb6:	9901      	ldr	r1, [sp, #4]
 8004cb8:	2230      	movs	r2, #48	; 0x30
 8004cba:	3701      	adds	r7, #1
 8004cbc:	700a      	strb	r2, [r1, #0]
 8004cbe:	781a      	ldrb	r2, [r3, #0]
 8004cc0:	3201      	adds	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e790      	b.n	8004be8 <_dtoa_r+0x608>
 8004cc6:	4ba6      	ldr	r3, [pc, #664]	; (8004f60 <_dtoa_r+0x980>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f7fb fc95 	bl	80005f8 <__aeabi_dmul>
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	460f      	mov	r7, r1
 8004cd6:	f7fb fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d09d      	beq.n	8004c1a <_dtoa_r+0x63a>
 8004cde:	e7cf      	b.n	8004c80 <_dtoa_r+0x6a0>
 8004ce0:	9a08      	ldr	r2, [sp, #32]
 8004ce2:	2a00      	cmp	r2, #0
 8004ce4:	f000 80d7 	beq.w	8004e96 <_dtoa_r+0x8b6>
 8004ce8:	9a06      	ldr	r2, [sp, #24]
 8004cea:	2a01      	cmp	r2, #1
 8004cec:	f300 80ba 	bgt.w	8004e64 <_dtoa_r+0x884>
 8004cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	f000 80b2 	beq.w	8004e5c <_dtoa_r+0x87c>
 8004cf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004cfc:	9e07      	ldr	r6, [sp, #28]
 8004cfe:	9d04      	ldr	r5, [sp, #16]
 8004d00:	9a04      	ldr	r2, [sp, #16]
 8004d02:	441a      	add	r2, r3
 8004d04:	9204      	str	r2, [sp, #16]
 8004d06:	9a05      	ldr	r2, [sp, #20]
 8004d08:	2101      	movs	r1, #1
 8004d0a:	441a      	add	r2, r3
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	9205      	str	r2, [sp, #20]
 8004d10:	f000 fcb0 	bl	8005674 <__i2b>
 8004d14:	4607      	mov	r7, r0
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	dd0c      	ble.n	8004d34 <_dtoa_r+0x754>
 8004d1a:	9b05      	ldr	r3, [sp, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dd09      	ble.n	8004d34 <_dtoa_r+0x754>
 8004d20:	42ab      	cmp	r3, r5
 8004d22:	9a04      	ldr	r2, [sp, #16]
 8004d24:	bfa8      	it	ge
 8004d26:	462b      	movge	r3, r5
 8004d28:	1ad2      	subs	r2, r2, r3
 8004d2a:	9204      	str	r2, [sp, #16]
 8004d2c:	9a05      	ldr	r2, [sp, #20]
 8004d2e:	1aed      	subs	r5, r5, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	9305      	str	r3, [sp, #20]
 8004d34:	9b07      	ldr	r3, [sp, #28]
 8004d36:	b31b      	cbz	r3, 8004d80 <_dtoa_r+0x7a0>
 8004d38:	9b08      	ldr	r3, [sp, #32]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80af 	beq.w	8004e9e <_dtoa_r+0x8be>
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	dd13      	ble.n	8004d6c <_dtoa_r+0x78c>
 8004d44:	4639      	mov	r1, r7
 8004d46:	4632      	mov	r2, r6
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 fd53 	bl	80057f4 <__pow5mult>
 8004d4e:	ee18 2a10 	vmov	r2, s16
 8004d52:	4601      	mov	r1, r0
 8004d54:	4607      	mov	r7, r0
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 fca2 	bl	80056a0 <__multiply>
 8004d5c:	ee18 1a10 	vmov	r1, s16
 8004d60:	4680      	mov	r8, r0
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fbce 	bl	8005504 <_Bfree>
 8004d68:	ee08 8a10 	vmov	s16, r8
 8004d6c:	9b07      	ldr	r3, [sp, #28]
 8004d6e:	1b9a      	subs	r2, r3, r6
 8004d70:	d006      	beq.n	8004d80 <_dtoa_r+0x7a0>
 8004d72:	ee18 1a10 	vmov	r1, s16
 8004d76:	4620      	mov	r0, r4
 8004d78:	f000 fd3c 	bl	80057f4 <__pow5mult>
 8004d7c:	ee08 0a10 	vmov	s16, r0
 8004d80:	2101      	movs	r1, #1
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 fc76 	bl	8005674 <__i2b>
 8004d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	f340 8088 	ble.w	8004ea2 <_dtoa_r+0x8c2>
 8004d92:	461a      	mov	r2, r3
 8004d94:	4601      	mov	r1, r0
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 fd2c 	bl	80057f4 <__pow5mult>
 8004d9c:	9b06      	ldr	r3, [sp, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	4606      	mov	r6, r0
 8004da2:	f340 8081 	ble.w	8004ea8 <_dtoa_r+0x8c8>
 8004da6:	f04f 0800 	mov.w	r8, #0
 8004daa:	6933      	ldr	r3, [r6, #16]
 8004dac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004db0:	6918      	ldr	r0, [r3, #16]
 8004db2:	f000 fc0f 	bl	80055d4 <__hi0bits>
 8004db6:	f1c0 0020 	rsb	r0, r0, #32
 8004dba:	9b05      	ldr	r3, [sp, #20]
 8004dbc:	4418      	add	r0, r3
 8004dbe:	f010 001f 	ands.w	r0, r0, #31
 8004dc2:	f000 8092 	beq.w	8004eea <_dtoa_r+0x90a>
 8004dc6:	f1c0 0320 	rsb	r3, r0, #32
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	f340 808a 	ble.w	8004ee4 <_dtoa_r+0x904>
 8004dd0:	f1c0 001c 	rsb	r0, r0, #28
 8004dd4:	9b04      	ldr	r3, [sp, #16]
 8004dd6:	4403      	add	r3, r0
 8004dd8:	9304      	str	r3, [sp, #16]
 8004dda:	9b05      	ldr	r3, [sp, #20]
 8004ddc:	4403      	add	r3, r0
 8004dde:	4405      	add	r5, r0
 8004de0:	9305      	str	r3, [sp, #20]
 8004de2:	9b04      	ldr	r3, [sp, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dd07      	ble.n	8004df8 <_dtoa_r+0x818>
 8004de8:	ee18 1a10 	vmov	r1, s16
 8004dec:	461a      	mov	r2, r3
 8004dee:	4620      	mov	r0, r4
 8004df0:	f000 fd5a 	bl	80058a8 <__lshift>
 8004df4:	ee08 0a10 	vmov	s16, r0
 8004df8:	9b05      	ldr	r3, [sp, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dd05      	ble.n	8004e0a <_dtoa_r+0x82a>
 8004dfe:	4631      	mov	r1, r6
 8004e00:	461a      	mov	r2, r3
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 fd50 	bl	80058a8 <__lshift>
 8004e08:	4606      	mov	r6, r0
 8004e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d06e      	beq.n	8004eee <_dtoa_r+0x90e>
 8004e10:	ee18 0a10 	vmov	r0, s16
 8004e14:	4631      	mov	r1, r6
 8004e16:	f000 fdb7 	bl	8005988 <__mcmp>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	da67      	bge.n	8004eee <_dtoa_r+0x90e>
 8004e1e:	9b00      	ldr	r3, [sp, #0]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	ee18 1a10 	vmov	r1, s16
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	220a      	movs	r2, #10
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f000 fb8b 	bl	8005548 <__multadd>
 8004e32:	9b08      	ldr	r3, [sp, #32]
 8004e34:	ee08 0a10 	vmov	s16, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 81b1 	beq.w	80051a0 <_dtoa_r+0xbc0>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	4639      	mov	r1, r7
 8004e42:	220a      	movs	r2, #10
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 fb7f 	bl	8005548 <__multadd>
 8004e4a:	9b02      	ldr	r3, [sp, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	4607      	mov	r7, r0
 8004e50:	f300 808e 	bgt.w	8004f70 <_dtoa_r+0x990>
 8004e54:	9b06      	ldr	r3, [sp, #24]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	dc51      	bgt.n	8004efe <_dtoa_r+0x91e>
 8004e5a:	e089      	b.n	8004f70 <_dtoa_r+0x990>
 8004e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e62:	e74b      	b.n	8004cfc <_dtoa_r+0x71c>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	1e5e      	subs	r6, r3, #1
 8004e68:	9b07      	ldr	r3, [sp, #28]
 8004e6a:	42b3      	cmp	r3, r6
 8004e6c:	bfbf      	itttt	lt
 8004e6e:	9b07      	ldrlt	r3, [sp, #28]
 8004e70:	9607      	strlt	r6, [sp, #28]
 8004e72:	1af2      	sublt	r2, r6, r3
 8004e74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004e76:	bfb6      	itet	lt
 8004e78:	189b      	addlt	r3, r3, r2
 8004e7a:	1b9e      	subge	r6, r3, r6
 8004e7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004e7e:	9b03      	ldr	r3, [sp, #12]
 8004e80:	bfb8      	it	lt
 8004e82:	2600      	movlt	r6, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bfb7      	itett	lt
 8004e88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004e8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004e90:	1a9d      	sublt	r5, r3, r2
 8004e92:	2300      	movlt	r3, #0
 8004e94:	e734      	b.n	8004d00 <_dtoa_r+0x720>
 8004e96:	9e07      	ldr	r6, [sp, #28]
 8004e98:	9d04      	ldr	r5, [sp, #16]
 8004e9a:	9f08      	ldr	r7, [sp, #32]
 8004e9c:	e73b      	b.n	8004d16 <_dtoa_r+0x736>
 8004e9e:	9a07      	ldr	r2, [sp, #28]
 8004ea0:	e767      	b.n	8004d72 <_dtoa_r+0x792>
 8004ea2:	9b06      	ldr	r3, [sp, #24]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	dc18      	bgt.n	8004eda <_dtoa_r+0x8fa>
 8004ea8:	f1ba 0f00 	cmp.w	sl, #0
 8004eac:	d115      	bne.n	8004eda <_dtoa_r+0x8fa>
 8004eae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004eb2:	b993      	cbnz	r3, 8004eda <_dtoa_r+0x8fa>
 8004eb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004eb8:	0d1b      	lsrs	r3, r3, #20
 8004eba:	051b      	lsls	r3, r3, #20
 8004ebc:	b183      	cbz	r3, 8004ee0 <_dtoa_r+0x900>
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	9304      	str	r3, [sp, #16]
 8004ec4:	9b05      	ldr	r3, [sp, #20]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	9305      	str	r3, [sp, #20]
 8004eca:	f04f 0801 	mov.w	r8, #1
 8004ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f47f af6a 	bne.w	8004daa <_dtoa_r+0x7ca>
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	e76f      	b.n	8004dba <_dtoa_r+0x7da>
 8004eda:	f04f 0800 	mov.w	r8, #0
 8004ede:	e7f6      	b.n	8004ece <_dtoa_r+0x8ee>
 8004ee0:	4698      	mov	r8, r3
 8004ee2:	e7f4      	b.n	8004ece <_dtoa_r+0x8ee>
 8004ee4:	f43f af7d 	beq.w	8004de2 <_dtoa_r+0x802>
 8004ee8:	4618      	mov	r0, r3
 8004eea:	301c      	adds	r0, #28
 8004eec:	e772      	b.n	8004dd4 <_dtoa_r+0x7f4>
 8004eee:	9b03      	ldr	r3, [sp, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc37      	bgt.n	8004f64 <_dtoa_r+0x984>
 8004ef4:	9b06      	ldr	r3, [sp, #24]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	dd34      	ble.n	8004f64 <_dtoa_r+0x984>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	9302      	str	r3, [sp, #8]
 8004efe:	9b02      	ldr	r3, [sp, #8]
 8004f00:	b96b      	cbnz	r3, 8004f1e <_dtoa_r+0x93e>
 8004f02:	4631      	mov	r1, r6
 8004f04:	2205      	movs	r2, #5
 8004f06:	4620      	mov	r0, r4
 8004f08:	f000 fb1e 	bl	8005548 <__multadd>
 8004f0c:	4601      	mov	r1, r0
 8004f0e:	4606      	mov	r6, r0
 8004f10:	ee18 0a10 	vmov	r0, s16
 8004f14:	f000 fd38 	bl	8005988 <__mcmp>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f73f adbb 	bgt.w	8004a94 <_dtoa_r+0x4b4>
 8004f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f20:	9d01      	ldr	r5, [sp, #4]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	f04f 0800 	mov.w	r8, #0
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 fae9 	bl	8005504 <_Bfree>
 8004f32:	2f00      	cmp	r7, #0
 8004f34:	f43f aea4 	beq.w	8004c80 <_dtoa_r+0x6a0>
 8004f38:	f1b8 0f00 	cmp.w	r8, #0
 8004f3c:	d005      	beq.n	8004f4a <_dtoa_r+0x96a>
 8004f3e:	45b8      	cmp	r8, r7
 8004f40:	d003      	beq.n	8004f4a <_dtoa_r+0x96a>
 8004f42:	4641      	mov	r1, r8
 8004f44:	4620      	mov	r0, r4
 8004f46:	f000 fadd 	bl	8005504 <_Bfree>
 8004f4a:	4639      	mov	r1, r7
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f000 fad9 	bl	8005504 <_Bfree>
 8004f52:	e695      	b.n	8004c80 <_dtoa_r+0x6a0>
 8004f54:	2600      	movs	r6, #0
 8004f56:	4637      	mov	r7, r6
 8004f58:	e7e1      	b.n	8004f1e <_dtoa_r+0x93e>
 8004f5a:	9700      	str	r7, [sp, #0]
 8004f5c:	4637      	mov	r7, r6
 8004f5e:	e599      	b.n	8004a94 <_dtoa_r+0x4b4>
 8004f60:	40240000 	.word	0x40240000
 8004f64:	9b08      	ldr	r3, [sp, #32]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80ca 	beq.w	8005100 <_dtoa_r+0xb20>
 8004f6c:	9b03      	ldr	r3, [sp, #12]
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	dd05      	ble.n	8004f80 <_dtoa_r+0x9a0>
 8004f74:	4639      	mov	r1, r7
 8004f76:	462a      	mov	r2, r5
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f000 fc95 	bl	80058a8 <__lshift>
 8004f7e:	4607      	mov	r7, r0
 8004f80:	f1b8 0f00 	cmp.w	r8, #0
 8004f84:	d05b      	beq.n	800503e <_dtoa_r+0xa5e>
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 fa7b 	bl	8005484 <_Balloc>
 8004f8e:	4605      	mov	r5, r0
 8004f90:	b928      	cbnz	r0, 8004f9e <_dtoa_r+0x9be>
 8004f92:	4b87      	ldr	r3, [pc, #540]	; (80051b0 <_dtoa_r+0xbd0>)
 8004f94:	4602      	mov	r2, r0
 8004f96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004f9a:	f7ff bb3b 	b.w	8004614 <_dtoa_r+0x34>
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	3202      	adds	r2, #2
 8004fa2:	0092      	lsls	r2, r2, #2
 8004fa4:	f107 010c 	add.w	r1, r7, #12
 8004fa8:	300c      	adds	r0, #12
 8004faa:	f7fe fb94 	bl	80036d6 <memcpy>
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f000 fc78 	bl	80058a8 <__lshift>
 8004fb8:	9b01      	ldr	r3, [sp, #4]
 8004fba:	f103 0901 	add.w	r9, r3, #1
 8004fbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	9305      	str	r3, [sp, #20]
 8004fc6:	f00a 0301 	and.w	r3, sl, #1
 8004fca:	46b8      	mov	r8, r7
 8004fcc:	9304      	str	r3, [sp, #16]
 8004fce:	4607      	mov	r7, r0
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	ee18 0a10 	vmov	r0, s16
 8004fd6:	f7ff fa75 	bl	80044c4 <quorem>
 8004fda:	4641      	mov	r1, r8
 8004fdc:	9002      	str	r0, [sp, #8]
 8004fde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004fe2:	ee18 0a10 	vmov	r0, s16
 8004fe6:	f000 fccf 	bl	8005988 <__mcmp>
 8004fea:	463a      	mov	r2, r7
 8004fec:	9003      	str	r0, [sp, #12]
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 fce5 	bl	80059c0 <__mdiff>
 8004ff6:	68c2      	ldr	r2, [r0, #12]
 8004ff8:	f109 3bff 	add.w	fp, r9, #4294967295
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	bb02      	cbnz	r2, 8005042 <_dtoa_r+0xa62>
 8005000:	4601      	mov	r1, r0
 8005002:	ee18 0a10 	vmov	r0, s16
 8005006:	f000 fcbf 	bl	8005988 <__mcmp>
 800500a:	4602      	mov	r2, r0
 800500c:	4629      	mov	r1, r5
 800500e:	4620      	mov	r0, r4
 8005010:	9207      	str	r2, [sp, #28]
 8005012:	f000 fa77 	bl	8005504 <_Bfree>
 8005016:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800501a:	ea43 0102 	orr.w	r1, r3, r2
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	430b      	orrs	r3, r1
 8005022:	464d      	mov	r5, r9
 8005024:	d10f      	bne.n	8005046 <_dtoa_r+0xa66>
 8005026:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800502a:	d02a      	beq.n	8005082 <_dtoa_r+0xaa2>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	dd02      	ble.n	8005038 <_dtoa_r+0xa58>
 8005032:	9b02      	ldr	r3, [sp, #8]
 8005034:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005038:	f88b a000 	strb.w	sl, [fp]
 800503c:	e775      	b.n	8004f2a <_dtoa_r+0x94a>
 800503e:	4638      	mov	r0, r7
 8005040:	e7ba      	b.n	8004fb8 <_dtoa_r+0x9d8>
 8005042:	2201      	movs	r2, #1
 8005044:	e7e2      	b.n	800500c <_dtoa_r+0xa2c>
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	db04      	blt.n	8005056 <_dtoa_r+0xa76>
 800504c:	9906      	ldr	r1, [sp, #24]
 800504e:	430b      	orrs	r3, r1
 8005050:	9904      	ldr	r1, [sp, #16]
 8005052:	430b      	orrs	r3, r1
 8005054:	d122      	bne.n	800509c <_dtoa_r+0xabc>
 8005056:	2a00      	cmp	r2, #0
 8005058:	ddee      	ble.n	8005038 <_dtoa_r+0xa58>
 800505a:	ee18 1a10 	vmov	r1, s16
 800505e:	2201      	movs	r2, #1
 8005060:	4620      	mov	r0, r4
 8005062:	f000 fc21 	bl	80058a8 <__lshift>
 8005066:	4631      	mov	r1, r6
 8005068:	ee08 0a10 	vmov	s16, r0
 800506c:	f000 fc8c 	bl	8005988 <__mcmp>
 8005070:	2800      	cmp	r0, #0
 8005072:	dc03      	bgt.n	800507c <_dtoa_r+0xa9c>
 8005074:	d1e0      	bne.n	8005038 <_dtoa_r+0xa58>
 8005076:	f01a 0f01 	tst.w	sl, #1
 800507a:	d0dd      	beq.n	8005038 <_dtoa_r+0xa58>
 800507c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005080:	d1d7      	bne.n	8005032 <_dtoa_r+0xa52>
 8005082:	2339      	movs	r3, #57	; 0x39
 8005084:	f88b 3000 	strb.w	r3, [fp]
 8005088:	462b      	mov	r3, r5
 800508a:	461d      	mov	r5, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005092:	2a39      	cmp	r2, #57	; 0x39
 8005094:	d071      	beq.n	800517a <_dtoa_r+0xb9a>
 8005096:	3201      	adds	r2, #1
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e746      	b.n	8004f2a <_dtoa_r+0x94a>
 800509c:	2a00      	cmp	r2, #0
 800509e:	dd07      	ble.n	80050b0 <_dtoa_r+0xad0>
 80050a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80050a4:	d0ed      	beq.n	8005082 <_dtoa_r+0xaa2>
 80050a6:	f10a 0301 	add.w	r3, sl, #1
 80050aa:	f88b 3000 	strb.w	r3, [fp]
 80050ae:	e73c      	b.n	8004f2a <_dtoa_r+0x94a>
 80050b0:	9b05      	ldr	r3, [sp, #20]
 80050b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80050b6:	4599      	cmp	r9, r3
 80050b8:	d047      	beq.n	800514a <_dtoa_r+0xb6a>
 80050ba:	ee18 1a10 	vmov	r1, s16
 80050be:	2300      	movs	r3, #0
 80050c0:	220a      	movs	r2, #10
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 fa40 	bl	8005548 <__multadd>
 80050c8:	45b8      	cmp	r8, r7
 80050ca:	ee08 0a10 	vmov	s16, r0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	f04f 020a 	mov.w	r2, #10
 80050d6:	4641      	mov	r1, r8
 80050d8:	4620      	mov	r0, r4
 80050da:	d106      	bne.n	80050ea <_dtoa_r+0xb0a>
 80050dc:	f000 fa34 	bl	8005548 <__multadd>
 80050e0:	4680      	mov	r8, r0
 80050e2:	4607      	mov	r7, r0
 80050e4:	f109 0901 	add.w	r9, r9, #1
 80050e8:	e772      	b.n	8004fd0 <_dtoa_r+0x9f0>
 80050ea:	f000 fa2d 	bl	8005548 <__multadd>
 80050ee:	4639      	mov	r1, r7
 80050f0:	4680      	mov	r8, r0
 80050f2:	2300      	movs	r3, #0
 80050f4:	220a      	movs	r2, #10
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 fa26 	bl	8005548 <__multadd>
 80050fc:	4607      	mov	r7, r0
 80050fe:	e7f1      	b.n	80050e4 <_dtoa_r+0xb04>
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	9302      	str	r3, [sp, #8]
 8005104:	9d01      	ldr	r5, [sp, #4]
 8005106:	ee18 0a10 	vmov	r0, s16
 800510a:	4631      	mov	r1, r6
 800510c:	f7ff f9da 	bl	80044c4 <quorem>
 8005110:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	f805 ab01 	strb.w	sl, [r5], #1
 800511a:	1aea      	subs	r2, r5, r3
 800511c:	9b02      	ldr	r3, [sp, #8]
 800511e:	4293      	cmp	r3, r2
 8005120:	dd09      	ble.n	8005136 <_dtoa_r+0xb56>
 8005122:	ee18 1a10 	vmov	r1, s16
 8005126:	2300      	movs	r3, #0
 8005128:	220a      	movs	r2, #10
 800512a:	4620      	mov	r0, r4
 800512c:	f000 fa0c 	bl	8005548 <__multadd>
 8005130:	ee08 0a10 	vmov	s16, r0
 8005134:	e7e7      	b.n	8005106 <_dtoa_r+0xb26>
 8005136:	9b02      	ldr	r3, [sp, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	bfc8      	it	gt
 800513c:	461d      	movgt	r5, r3
 800513e:	9b01      	ldr	r3, [sp, #4]
 8005140:	bfd8      	it	le
 8005142:	2501      	movle	r5, #1
 8005144:	441d      	add	r5, r3
 8005146:	f04f 0800 	mov.w	r8, #0
 800514a:	ee18 1a10 	vmov	r1, s16
 800514e:	2201      	movs	r2, #1
 8005150:	4620      	mov	r0, r4
 8005152:	f000 fba9 	bl	80058a8 <__lshift>
 8005156:	4631      	mov	r1, r6
 8005158:	ee08 0a10 	vmov	s16, r0
 800515c:	f000 fc14 	bl	8005988 <__mcmp>
 8005160:	2800      	cmp	r0, #0
 8005162:	dc91      	bgt.n	8005088 <_dtoa_r+0xaa8>
 8005164:	d102      	bne.n	800516c <_dtoa_r+0xb8c>
 8005166:	f01a 0f01 	tst.w	sl, #1
 800516a:	d18d      	bne.n	8005088 <_dtoa_r+0xaa8>
 800516c:	462b      	mov	r3, r5
 800516e:	461d      	mov	r5, r3
 8005170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005174:	2a30      	cmp	r2, #48	; 0x30
 8005176:	d0fa      	beq.n	800516e <_dtoa_r+0xb8e>
 8005178:	e6d7      	b.n	8004f2a <_dtoa_r+0x94a>
 800517a:	9a01      	ldr	r2, [sp, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d184      	bne.n	800508a <_dtoa_r+0xaaa>
 8005180:	9b00      	ldr	r3, [sp, #0]
 8005182:	3301      	adds	r3, #1
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	2331      	movs	r3, #49	; 0x31
 8005188:	7013      	strb	r3, [r2, #0]
 800518a:	e6ce      	b.n	8004f2a <_dtoa_r+0x94a>
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <_dtoa_r+0xbd4>)
 800518e:	f7ff ba95 	b.w	80046bc <_dtoa_r+0xdc>
 8005192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005194:	2b00      	cmp	r3, #0
 8005196:	f47f aa6e 	bne.w	8004676 <_dtoa_r+0x96>
 800519a:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <_dtoa_r+0xbd8>)
 800519c:	f7ff ba8e 	b.w	80046bc <_dtoa_r+0xdc>
 80051a0:	9b02      	ldr	r3, [sp, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	dcae      	bgt.n	8005104 <_dtoa_r+0xb24>
 80051a6:	9b06      	ldr	r3, [sp, #24]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f73f aea8 	bgt.w	8004efe <_dtoa_r+0x91e>
 80051ae:	e7a9      	b.n	8005104 <_dtoa_r+0xb24>
 80051b0:	0800621f 	.word	0x0800621f
 80051b4:	08006140 	.word	0x08006140
 80051b8:	080061a0 	.word	0x080061a0

080051bc <__sflush_r>:
 80051bc:	898a      	ldrh	r2, [r1, #12]
 80051be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c2:	4605      	mov	r5, r0
 80051c4:	0710      	lsls	r0, r2, #28
 80051c6:	460c      	mov	r4, r1
 80051c8:	d458      	bmi.n	800527c <__sflush_r+0xc0>
 80051ca:	684b      	ldr	r3, [r1, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dc05      	bgt.n	80051dc <__sflush_r+0x20>
 80051d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dc02      	bgt.n	80051dc <__sflush_r+0x20>
 80051d6:	2000      	movs	r0, #0
 80051d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051de:	2e00      	cmp	r6, #0
 80051e0:	d0f9      	beq.n	80051d6 <__sflush_r+0x1a>
 80051e2:	2300      	movs	r3, #0
 80051e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051e8:	682f      	ldr	r7, [r5, #0]
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	d032      	beq.n	8005254 <__sflush_r+0x98>
 80051ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	075a      	lsls	r2, r3, #29
 80051f4:	d505      	bpl.n	8005202 <__sflush_r+0x46>
 80051f6:	6863      	ldr	r3, [r4, #4]
 80051f8:	1ac0      	subs	r0, r0, r3
 80051fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051fc:	b10b      	cbz	r3, 8005202 <__sflush_r+0x46>
 80051fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005200:	1ac0      	subs	r0, r0, r3
 8005202:	2300      	movs	r3, #0
 8005204:	4602      	mov	r2, r0
 8005206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005208:	6a21      	ldr	r1, [r4, #32]
 800520a:	4628      	mov	r0, r5
 800520c:	47b0      	blx	r6
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	d106      	bne.n	8005222 <__sflush_r+0x66>
 8005214:	6829      	ldr	r1, [r5, #0]
 8005216:	291d      	cmp	r1, #29
 8005218:	d82c      	bhi.n	8005274 <__sflush_r+0xb8>
 800521a:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <__sflush_r+0x108>)
 800521c:	40ca      	lsrs	r2, r1
 800521e:	07d6      	lsls	r6, r2, #31
 8005220:	d528      	bpl.n	8005274 <__sflush_r+0xb8>
 8005222:	2200      	movs	r2, #0
 8005224:	6062      	str	r2, [r4, #4]
 8005226:	04d9      	lsls	r1, r3, #19
 8005228:	6922      	ldr	r2, [r4, #16]
 800522a:	6022      	str	r2, [r4, #0]
 800522c:	d504      	bpl.n	8005238 <__sflush_r+0x7c>
 800522e:	1c42      	adds	r2, r0, #1
 8005230:	d101      	bne.n	8005236 <__sflush_r+0x7a>
 8005232:	682b      	ldr	r3, [r5, #0]
 8005234:	b903      	cbnz	r3, 8005238 <__sflush_r+0x7c>
 8005236:	6560      	str	r0, [r4, #84]	; 0x54
 8005238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800523a:	602f      	str	r7, [r5, #0]
 800523c:	2900      	cmp	r1, #0
 800523e:	d0ca      	beq.n	80051d6 <__sflush_r+0x1a>
 8005240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005244:	4299      	cmp	r1, r3
 8005246:	d002      	beq.n	800524e <__sflush_r+0x92>
 8005248:	4628      	mov	r0, r5
 800524a:	f000 fcb5 	bl	8005bb8 <_free_r>
 800524e:	2000      	movs	r0, #0
 8005250:	6360      	str	r0, [r4, #52]	; 0x34
 8005252:	e7c1      	b.n	80051d8 <__sflush_r+0x1c>
 8005254:	6a21      	ldr	r1, [r4, #32]
 8005256:	2301      	movs	r3, #1
 8005258:	4628      	mov	r0, r5
 800525a:	47b0      	blx	r6
 800525c:	1c41      	adds	r1, r0, #1
 800525e:	d1c7      	bne.n	80051f0 <__sflush_r+0x34>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0c4      	beq.n	80051f0 <__sflush_r+0x34>
 8005266:	2b1d      	cmp	r3, #29
 8005268:	d001      	beq.n	800526e <__sflush_r+0xb2>
 800526a:	2b16      	cmp	r3, #22
 800526c:	d101      	bne.n	8005272 <__sflush_r+0xb6>
 800526e:	602f      	str	r7, [r5, #0]
 8005270:	e7b1      	b.n	80051d6 <__sflush_r+0x1a>
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	e7ad      	b.n	80051d8 <__sflush_r+0x1c>
 800527c:	690f      	ldr	r7, [r1, #16]
 800527e:	2f00      	cmp	r7, #0
 8005280:	d0a9      	beq.n	80051d6 <__sflush_r+0x1a>
 8005282:	0793      	lsls	r3, r2, #30
 8005284:	680e      	ldr	r6, [r1, #0]
 8005286:	bf08      	it	eq
 8005288:	694b      	ldreq	r3, [r1, #20]
 800528a:	600f      	str	r7, [r1, #0]
 800528c:	bf18      	it	ne
 800528e:	2300      	movne	r3, #0
 8005290:	eba6 0807 	sub.w	r8, r6, r7
 8005294:	608b      	str	r3, [r1, #8]
 8005296:	f1b8 0f00 	cmp.w	r8, #0
 800529a:	dd9c      	ble.n	80051d6 <__sflush_r+0x1a>
 800529c:	6a21      	ldr	r1, [r4, #32]
 800529e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052a0:	4643      	mov	r3, r8
 80052a2:	463a      	mov	r2, r7
 80052a4:	4628      	mov	r0, r5
 80052a6:	47b0      	blx	r6
 80052a8:	2800      	cmp	r0, #0
 80052aa:	dc06      	bgt.n	80052ba <__sflush_r+0xfe>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	e78e      	b.n	80051d8 <__sflush_r+0x1c>
 80052ba:	4407      	add	r7, r0
 80052bc:	eba8 0800 	sub.w	r8, r8, r0
 80052c0:	e7e9      	b.n	8005296 <__sflush_r+0xda>
 80052c2:	bf00      	nop
 80052c4:	20400001 	.word	0x20400001

080052c8 <_fflush_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	690b      	ldr	r3, [r1, #16]
 80052cc:	4605      	mov	r5, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	b913      	cbnz	r3, 80052d8 <_fflush_r+0x10>
 80052d2:	2500      	movs	r5, #0
 80052d4:	4628      	mov	r0, r5
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	b118      	cbz	r0, 80052e2 <_fflush_r+0x1a>
 80052da:	6983      	ldr	r3, [r0, #24]
 80052dc:	b90b      	cbnz	r3, 80052e2 <_fflush_r+0x1a>
 80052de:	f7fe f935 	bl	800354c <__sinit>
 80052e2:	4b14      	ldr	r3, [pc, #80]	; (8005334 <_fflush_r+0x6c>)
 80052e4:	429c      	cmp	r4, r3
 80052e6:	d11b      	bne.n	8005320 <_fflush_r+0x58>
 80052e8:	686c      	ldr	r4, [r5, #4]
 80052ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ef      	beq.n	80052d2 <_fflush_r+0xa>
 80052f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052f4:	07d0      	lsls	r0, r2, #31
 80052f6:	d404      	bmi.n	8005302 <_fflush_r+0x3a>
 80052f8:	0599      	lsls	r1, r3, #22
 80052fa:	d402      	bmi.n	8005302 <_fflush_r+0x3a>
 80052fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fe:	f7fe f9e8 	bl	80036d2 <__retarget_lock_acquire_recursive>
 8005302:	4628      	mov	r0, r5
 8005304:	4621      	mov	r1, r4
 8005306:	f7ff ff59 	bl	80051bc <__sflush_r>
 800530a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800530c:	07da      	lsls	r2, r3, #31
 800530e:	4605      	mov	r5, r0
 8005310:	d4e0      	bmi.n	80052d4 <_fflush_r+0xc>
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	059b      	lsls	r3, r3, #22
 8005316:	d4dd      	bmi.n	80052d4 <_fflush_r+0xc>
 8005318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800531a:	f7fe f9db 	bl	80036d4 <__retarget_lock_release_recursive>
 800531e:	e7d9      	b.n	80052d4 <_fflush_r+0xc>
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <_fflush_r+0x70>)
 8005322:	429c      	cmp	r4, r3
 8005324:	d101      	bne.n	800532a <_fflush_r+0x62>
 8005326:	68ac      	ldr	r4, [r5, #8]
 8005328:	e7df      	b.n	80052ea <_fflush_r+0x22>
 800532a:	4b04      	ldr	r3, [pc, #16]	; (800533c <_fflush_r+0x74>)
 800532c:	429c      	cmp	r4, r3
 800532e:	bf08      	it	eq
 8005330:	68ec      	ldreq	r4, [r5, #12]
 8005332:	e7da      	b.n	80052ea <_fflush_r+0x22>
 8005334:	080060ec 	.word	0x080060ec
 8005338:	0800610c 	.word	0x0800610c
 800533c:	080060cc 	.word	0x080060cc

08005340 <fiprintf>:
 8005340:	b40e      	push	{r1, r2, r3}
 8005342:	b503      	push	{r0, r1, lr}
 8005344:	4601      	mov	r1, r0
 8005346:	ab03      	add	r3, sp, #12
 8005348:	4805      	ldr	r0, [pc, #20]	; (8005360 <fiprintf+0x20>)
 800534a:	f853 2b04 	ldr.w	r2, [r3], #4
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	f000 fca7 	bl	8005ca4 <_vfiprintf_r>
 8005356:	b002      	add	sp, #8
 8005358:	f85d eb04 	ldr.w	lr, [sp], #4
 800535c:	b003      	add	sp, #12
 800535e:	4770      	bx	lr
 8005360:	20000068 	.word	0x20000068

08005364 <_localeconv_r>:
 8005364:	4800      	ldr	r0, [pc, #0]	; (8005368 <_localeconv_r+0x4>)
 8005366:	4770      	bx	lr
 8005368:	200001bc 	.word	0x200001bc

0800536c <_lseek_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4d07      	ldr	r5, [pc, #28]	; (800538c <_lseek_r+0x20>)
 8005370:	4604      	mov	r4, r0
 8005372:	4608      	mov	r0, r1
 8005374:	4611      	mov	r1, r2
 8005376:	2200      	movs	r2, #0
 8005378:	602a      	str	r2, [r5, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	f7fd fe79 	bl	8003072 <_lseek>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_lseek_r+0x1e>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_lseek_r+0x1e>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	2000037c 	.word	0x2000037c

08005390 <__swhatbuf_r>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	460e      	mov	r6, r1
 8005394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005398:	2900      	cmp	r1, #0
 800539a:	b096      	sub	sp, #88	; 0x58
 800539c:	4614      	mov	r4, r2
 800539e:	461d      	mov	r5, r3
 80053a0:	da08      	bge.n	80053b4 <__swhatbuf_r+0x24>
 80053a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	602a      	str	r2, [r5, #0]
 80053aa:	061a      	lsls	r2, r3, #24
 80053ac:	d410      	bmi.n	80053d0 <__swhatbuf_r+0x40>
 80053ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b2:	e00e      	b.n	80053d2 <__swhatbuf_r+0x42>
 80053b4:	466a      	mov	r2, sp
 80053b6:	f000 fdbf 	bl	8005f38 <_fstat_r>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	dbf1      	blt.n	80053a2 <__swhatbuf_r+0x12>
 80053be:	9a01      	ldr	r2, [sp, #4]
 80053c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053c8:	425a      	negs	r2, r3
 80053ca:	415a      	adcs	r2, r3
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	e7ee      	b.n	80053ae <__swhatbuf_r+0x1e>
 80053d0:	2340      	movs	r3, #64	; 0x40
 80053d2:	2000      	movs	r0, #0
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	b016      	add	sp, #88	; 0x58
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080053dc <__smakebuf_r>:
 80053dc:	898b      	ldrh	r3, [r1, #12]
 80053de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053e0:	079d      	lsls	r5, r3, #30
 80053e2:	4606      	mov	r6, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	d507      	bpl.n	80053f8 <__smakebuf_r+0x1c>
 80053e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	2301      	movs	r3, #1
 80053f2:	6163      	str	r3, [r4, #20]
 80053f4:	b002      	add	sp, #8
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	ab01      	add	r3, sp, #4
 80053fa:	466a      	mov	r2, sp
 80053fc:	f7ff ffc8 	bl	8005390 <__swhatbuf_r>
 8005400:	9900      	ldr	r1, [sp, #0]
 8005402:	4605      	mov	r5, r0
 8005404:	4630      	mov	r0, r6
 8005406:	f7fe f99d 	bl	8003744 <_malloc_r>
 800540a:	b948      	cbnz	r0, 8005420 <__smakebuf_r+0x44>
 800540c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005410:	059a      	lsls	r2, r3, #22
 8005412:	d4ef      	bmi.n	80053f4 <__smakebuf_r+0x18>
 8005414:	f023 0303 	bic.w	r3, r3, #3
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	e7e3      	b.n	80053e8 <__smakebuf_r+0xc>
 8005420:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <__smakebuf_r+0x7c>)
 8005422:	62b3      	str	r3, [r6, #40]	; 0x28
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	6020      	str	r0, [r4, #0]
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	9b00      	ldr	r3, [sp, #0]
 8005430:	6163      	str	r3, [r4, #20]
 8005432:	9b01      	ldr	r3, [sp, #4]
 8005434:	6120      	str	r0, [r4, #16]
 8005436:	b15b      	cbz	r3, 8005450 <__smakebuf_r+0x74>
 8005438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800543c:	4630      	mov	r0, r6
 800543e:	f000 fd8d 	bl	8005f5c <_isatty_r>
 8005442:	b128      	cbz	r0, 8005450 <__smakebuf_r+0x74>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	89a0      	ldrh	r0, [r4, #12]
 8005452:	4305      	orrs	r5, r0
 8005454:	81a5      	strh	r5, [r4, #12]
 8005456:	e7cd      	b.n	80053f4 <__smakebuf_r+0x18>
 8005458:	080034e5 	.word	0x080034e5

0800545c <malloc>:
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <malloc+0xc>)
 800545e:	4601      	mov	r1, r0
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	f7fe b96f 	b.w	8003744 <_malloc_r>
 8005466:	bf00      	nop
 8005468:	20000068 	.word	0x20000068

0800546c <__malloc_lock>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__malloc_lock+0x8>)
 800546e:	f7fe b930 	b.w	80036d2 <__retarget_lock_acquire_recursive>
 8005472:	bf00      	nop
 8005474:	20000370 	.word	0x20000370

08005478 <__malloc_unlock>:
 8005478:	4801      	ldr	r0, [pc, #4]	; (8005480 <__malloc_unlock+0x8>)
 800547a:	f7fe b92b 	b.w	80036d4 <__retarget_lock_release_recursive>
 800547e:	bf00      	nop
 8005480:	20000370 	.word	0x20000370

08005484 <_Balloc>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005488:	4604      	mov	r4, r0
 800548a:	460d      	mov	r5, r1
 800548c:	b976      	cbnz	r6, 80054ac <_Balloc+0x28>
 800548e:	2010      	movs	r0, #16
 8005490:	f7ff ffe4 	bl	800545c <malloc>
 8005494:	4602      	mov	r2, r0
 8005496:	6260      	str	r0, [r4, #36]	; 0x24
 8005498:	b920      	cbnz	r0, 80054a4 <_Balloc+0x20>
 800549a:	4b18      	ldr	r3, [pc, #96]	; (80054fc <_Balloc+0x78>)
 800549c:	4818      	ldr	r0, [pc, #96]	; (8005500 <_Balloc+0x7c>)
 800549e:	2166      	movs	r1, #102	; 0x66
 80054a0:	f7fe ffe2 	bl	8004468 <__assert_func>
 80054a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054a8:	6006      	str	r6, [r0, #0]
 80054aa:	60c6      	str	r6, [r0, #12]
 80054ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054ae:	68f3      	ldr	r3, [r6, #12]
 80054b0:	b183      	cbz	r3, 80054d4 <_Balloc+0x50>
 80054b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054ba:	b9b8      	cbnz	r0, 80054ec <_Balloc+0x68>
 80054bc:	2101      	movs	r1, #1
 80054be:	fa01 f605 	lsl.w	r6, r1, r5
 80054c2:	1d72      	adds	r2, r6, #5
 80054c4:	0092      	lsls	r2, r2, #2
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fb60 	bl	8005b8c <_calloc_r>
 80054cc:	b160      	cbz	r0, 80054e8 <_Balloc+0x64>
 80054ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054d2:	e00e      	b.n	80054f2 <_Balloc+0x6e>
 80054d4:	2221      	movs	r2, #33	; 0x21
 80054d6:	2104      	movs	r1, #4
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 fb57 	bl	8005b8c <_calloc_r>
 80054de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e0:	60f0      	str	r0, [r6, #12]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e4      	bne.n	80054b2 <_Balloc+0x2e>
 80054e8:	2000      	movs	r0, #0
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	6802      	ldr	r2, [r0, #0]
 80054ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054f2:	2300      	movs	r3, #0
 80054f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054f8:	e7f7      	b.n	80054ea <_Balloc+0x66>
 80054fa:	bf00      	nop
 80054fc:	080061ad 	.word	0x080061ad
 8005500:	08006230 	.word	0x08006230

08005504 <_Bfree>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005508:	4605      	mov	r5, r0
 800550a:	460c      	mov	r4, r1
 800550c:	b976      	cbnz	r6, 800552c <_Bfree+0x28>
 800550e:	2010      	movs	r0, #16
 8005510:	f7ff ffa4 	bl	800545c <malloc>
 8005514:	4602      	mov	r2, r0
 8005516:	6268      	str	r0, [r5, #36]	; 0x24
 8005518:	b920      	cbnz	r0, 8005524 <_Bfree+0x20>
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <_Bfree+0x3c>)
 800551c:	4809      	ldr	r0, [pc, #36]	; (8005544 <_Bfree+0x40>)
 800551e:	218a      	movs	r1, #138	; 0x8a
 8005520:	f7fe ffa2 	bl	8004468 <__assert_func>
 8005524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005528:	6006      	str	r6, [r0, #0]
 800552a:	60c6      	str	r6, [r0, #12]
 800552c:	b13c      	cbz	r4, 800553e <_Bfree+0x3a>
 800552e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005530:	6862      	ldr	r2, [r4, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005538:	6021      	str	r1, [r4, #0]
 800553a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	080061ad 	.word	0x080061ad
 8005544:	08006230 	.word	0x08006230

08005548 <__multadd>:
 8005548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	690d      	ldr	r5, [r1, #16]
 800554e:	4607      	mov	r7, r0
 8005550:	460c      	mov	r4, r1
 8005552:	461e      	mov	r6, r3
 8005554:	f101 0c14 	add.w	ip, r1, #20
 8005558:	2000      	movs	r0, #0
 800555a:	f8dc 3000 	ldr.w	r3, [ip]
 800555e:	b299      	uxth	r1, r3
 8005560:	fb02 6101 	mla	r1, r2, r1, r6
 8005564:	0c1e      	lsrs	r6, r3, #16
 8005566:	0c0b      	lsrs	r3, r1, #16
 8005568:	fb02 3306 	mla	r3, r2, r6, r3
 800556c:	b289      	uxth	r1, r1
 800556e:	3001      	adds	r0, #1
 8005570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005574:	4285      	cmp	r5, r0
 8005576:	f84c 1b04 	str.w	r1, [ip], #4
 800557a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800557e:	dcec      	bgt.n	800555a <__multadd+0x12>
 8005580:	b30e      	cbz	r6, 80055c6 <__multadd+0x7e>
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	42ab      	cmp	r3, r5
 8005586:	dc19      	bgt.n	80055bc <__multadd+0x74>
 8005588:	6861      	ldr	r1, [r4, #4]
 800558a:	4638      	mov	r0, r7
 800558c:	3101      	adds	r1, #1
 800558e:	f7ff ff79 	bl	8005484 <_Balloc>
 8005592:	4680      	mov	r8, r0
 8005594:	b928      	cbnz	r0, 80055a2 <__multadd+0x5a>
 8005596:	4602      	mov	r2, r0
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <__multadd+0x84>)
 800559a:	480d      	ldr	r0, [pc, #52]	; (80055d0 <__multadd+0x88>)
 800559c:	21b5      	movs	r1, #181	; 0xb5
 800559e:	f7fe ff63 	bl	8004468 <__assert_func>
 80055a2:	6922      	ldr	r2, [r4, #16]
 80055a4:	3202      	adds	r2, #2
 80055a6:	f104 010c 	add.w	r1, r4, #12
 80055aa:	0092      	lsls	r2, r2, #2
 80055ac:	300c      	adds	r0, #12
 80055ae:	f7fe f892 	bl	80036d6 <memcpy>
 80055b2:	4621      	mov	r1, r4
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff ffa5 	bl	8005504 <_Bfree>
 80055ba:	4644      	mov	r4, r8
 80055bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055c0:	3501      	adds	r5, #1
 80055c2:	615e      	str	r6, [r3, #20]
 80055c4:	6125      	str	r5, [r4, #16]
 80055c6:	4620      	mov	r0, r4
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	0800621f 	.word	0x0800621f
 80055d0:	08006230 	.word	0x08006230

080055d4 <__hi0bits>:
 80055d4:	0c03      	lsrs	r3, r0, #16
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	b9d3      	cbnz	r3, 8005610 <__hi0bits+0x3c>
 80055da:	0400      	lsls	r0, r0, #16
 80055dc:	2310      	movs	r3, #16
 80055de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80055e2:	bf04      	itt	eq
 80055e4:	0200      	lsleq	r0, r0, #8
 80055e6:	3308      	addeq	r3, #8
 80055e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80055ec:	bf04      	itt	eq
 80055ee:	0100      	lsleq	r0, r0, #4
 80055f0:	3304      	addeq	r3, #4
 80055f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80055f6:	bf04      	itt	eq
 80055f8:	0080      	lsleq	r0, r0, #2
 80055fa:	3302      	addeq	r3, #2
 80055fc:	2800      	cmp	r0, #0
 80055fe:	db05      	blt.n	800560c <__hi0bits+0x38>
 8005600:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005604:	f103 0301 	add.w	r3, r3, #1
 8005608:	bf08      	it	eq
 800560a:	2320      	moveq	r3, #32
 800560c:	4618      	mov	r0, r3
 800560e:	4770      	bx	lr
 8005610:	2300      	movs	r3, #0
 8005612:	e7e4      	b.n	80055de <__hi0bits+0xa>

08005614 <__lo0bits>:
 8005614:	6803      	ldr	r3, [r0, #0]
 8005616:	f013 0207 	ands.w	r2, r3, #7
 800561a:	4601      	mov	r1, r0
 800561c:	d00b      	beq.n	8005636 <__lo0bits+0x22>
 800561e:	07da      	lsls	r2, r3, #31
 8005620:	d423      	bmi.n	800566a <__lo0bits+0x56>
 8005622:	0798      	lsls	r0, r3, #30
 8005624:	bf49      	itett	mi
 8005626:	085b      	lsrmi	r3, r3, #1
 8005628:	089b      	lsrpl	r3, r3, #2
 800562a:	2001      	movmi	r0, #1
 800562c:	600b      	strmi	r3, [r1, #0]
 800562e:	bf5c      	itt	pl
 8005630:	600b      	strpl	r3, [r1, #0]
 8005632:	2002      	movpl	r0, #2
 8005634:	4770      	bx	lr
 8005636:	b298      	uxth	r0, r3
 8005638:	b9a8      	cbnz	r0, 8005666 <__lo0bits+0x52>
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	2010      	movs	r0, #16
 800563e:	b2da      	uxtb	r2, r3
 8005640:	b90a      	cbnz	r2, 8005646 <__lo0bits+0x32>
 8005642:	3008      	adds	r0, #8
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	071a      	lsls	r2, r3, #28
 8005648:	bf04      	itt	eq
 800564a:	091b      	lsreq	r3, r3, #4
 800564c:	3004      	addeq	r0, #4
 800564e:	079a      	lsls	r2, r3, #30
 8005650:	bf04      	itt	eq
 8005652:	089b      	lsreq	r3, r3, #2
 8005654:	3002      	addeq	r0, #2
 8005656:	07da      	lsls	r2, r3, #31
 8005658:	d403      	bmi.n	8005662 <__lo0bits+0x4e>
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	f100 0001 	add.w	r0, r0, #1
 8005660:	d005      	beq.n	800566e <__lo0bits+0x5a>
 8005662:	600b      	str	r3, [r1, #0]
 8005664:	4770      	bx	lr
 8005666:	4610      	mov	r0, r2
 8005668:	e7e9      	b.n	800563e <__lo0bits+0x2a>
 800566a:	2000      	movs	r0, #0
 800566c:	4770      	bx	lr
 800566e:	2020      	movs	r0, #32
 8005670:	4770      	bx	lr
	...

08005674 <__i2b>:
 8005674:	b510      	push	{r4, lr}
 8005676:	460c      	mov	r4, r1
 8005678:	2101      	movs	r1, #1
 800567a:	f7ff ff03 	bl	8005484 <_Balloc>
 800567e:	4602      	mov	r2, r0
 8005680:	b928      	cbnz	r0, 800568e <__i2b+0x1a>
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <__i2b+0x24>)
 8005684:	4805      	ldr	r0, [pc, #20]	; (800569c <__i2b+0x28>)
 8005686:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800568a:	f7fe feed 	bl	8004468 <__assert_func>
 800568e:	2301      	movs	r3, #1
 8005690:	6144      	str	r4, [r0, #20]
 8005692:	6103      	str	r3, [r0, #16]
 8005694:	bd10      	pop	{r4, pc}
 8005696:	bf00      	nop
 8005698:	0800621f 	.word	0x0800621f
 800569c:	08006230 	.word	0x08006230

080056a0 <__multiply>:
 80056a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	4691      	mov	r9, r2
 80056a6:	690a      	ldr	r2, [r1, #16]
 80056a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	bfb8      	it	lt
 80056b0:	460b      	movlt	r3, r1
 80056b2:	460c      	mov	r4, r1
 80056b4:	bfbc      	itt	lt
 80056b6:	464c      	movlt	r4, r9
 80056b8:	4699      	movlt	r9, r3
 80056ba:	6927      	ldr	r7, [r4, #16]
 80056bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80056c0:	68a3      	ldr	r3, [r4, #8]
 80056c2:	6861      	ldr	r1, [r4, #4]
 80056c4:	eb07 060a 	add.w	r6, r7, sl
 80056c8:	42b3      	cmp	r3, r6
 80056ca:	b085      	sub	sp, #20
 80056cc:	bfb8      	it	lt
 80056ce:	3101      	addlt	r1, #1
 80056d0:	f7ff fed8 	bl	8005484 <_Balloc>
 80056d4:	b930      	cbnz	r0, 80056e4 <__multiply+0x44>
 80056d6:	4602      	mov	r2, r0
 80056d8:	4b44      	ldr	r3, [pc, #272]	; (80057ec <__multiply+0x14c>)
 80056da:	4845      	ldr	r0, [pc, #276]	; (80057f0 <__multiply+0x150>)
 80056dc:	f240 115d 	movw	r1, #349	; 0x15d
 80056e0:	f7fe fec2 	bl	8004468 <__assert_func>
 80056e4:	f100 0514 	add.w	r5, r0, #20
 80056e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056ec:	462b      	mov	r3, r5
 80056ee:	2200      	movs	r2, #0
 80056f0:	4543      	cmp	r3, r8
 80056f2:	d321      	bcc.n	8005738 <__multiply+0x98>
 80056f4:	f104 0314 	add.w	r3, r4, #20
 80056f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80056fc:	f109 0314 	add.w	r3, r9, #20
 8005700:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005704:	9202      	str	r2, [sp, #8]
 8005706:	1b3a      	subs	r2, r7, r4
 8005708:	3a15      	subs	r2, #21
 800570a:	f022 0203 	bic.w	r2, r2, #3
 800570e:	3204      	adds	r2, #4
 8005710:	f104 0115 	add.w	r1, r4, #21
 8005714:	428f      	cmp	r7, r1
 8005716:	bf38      	it	cc
 8005718:	2204      	movcc	r2, #4
 800571a:	9201      	str	r2, [sp, #4]
 800571c:	9a02      	ldr	r2, [sp, #8]
 800571e:	9303      	str	r3, [sp, #12]
 8005720:	429a      	cmp	r2, r3
 8005722:	d80c      	bhi.n	800573e <__multiply+0x9e>
 8005724:	2e00      	cmp	r6, #0
 8005726:	dd03      	ble.n	8005730 <__multiply+0x90>
 8005728:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800572c:	2b00      	cmp	r3, #0
 800572e:	d05a      	beq.n	80057e6 <__multiply+0x146>
 8005730:	6106      	str	r6, [r0, #16]
 8005732:	b005      	add	sp, #20
 8005734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005738:	f843 2b04 	str.w	r2, [r3], #4
 800573c:	e7d8      	b.n	80056f0 <__multiply+0x50>
 800573e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005742:	f1ba 0f00 	cmp.w	sl, #0
 8005746:	d024      	beq.n	8005792 <__multiply+0xf2>
 8005748:	f104 0e14 	add.w	lr, r4, #20
 800574c:	46a9      	mov	r9, r5
 800574e:	f04f 0c00 	mov.w	ip, #0
 8005752:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005756:	f8d9 1000 	ldr.w	r1, [r9]
 800575a:	fa1f fb82 	uxth.w	fp, r2
 800575e:	b289      	uxth	r1, r1
 8005760:	fb0a 110b 	mla	r1, sl, fp, r1
 8005764:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005768:	f8d9 2000 	ldr.w	r2, [r9]
 800576c:	4461      	add	r1, ip
 800576e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005772:	fb0a c20b 	mla	r2, sl, fp, ip
 8005776:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800577a:	b289      	uxth	r1, r1
 800577c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005780:	4577      	cmp	r7, lr
 8005782:	f849 1b04 	str.w	r1, [r9], #4
 8005786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800578a:	d8e2      	bhi.n	8005752 <__multiply+0xb2>
 800578c:	9a01      	ldr	r2, [sp, #4]
 800578e:	f845 c002 	str.w	ip, [r5, r2]
 8005792:	9a03      	ldr	r2, [sp, #12]
 8005794:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005798:	3304      	adds	r3, #4
 800579a:	f1b9 0f00 	cmp.w	r9, #0
 800579e:	d020      	beq.n	80057e2 <__multiply+0x142>
 80057a0:	6829      	ldr	r1, [r5, #0]
 80057a2:	f104 0c14 	add.w	ip, r4, #20
 80057a6:	46ae      	mov	lr, r5
 80057a8:	f04f 0a00 	mov.w	sl, #0
 80057ac:	f8bc b000 	ldrh.w	fp, [ip]
 80057b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80057b4:	fb09 220b 	mla	r2, r9, fp, r2
 80057b8:	4492      	add	sl, r2
 80057ba:	b289      	uxth	r1, r1
 80057bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80057c0:	f84e 1b04 	str.w	r1, [lr], #4
 80057c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057c8:	f8be 1000 	ldrh.w	r1, [lr]
 80057cc:	0c12      	lsrs	r2, r2, #16
 80057ce:	fb09 1102 	mla	r1, r9, r2, r1
 80057d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80057d6:	4567      	cmp	r7, ip
 80057d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057dc:	d8e6      	bhi.n	80057ac <__multiply+0x10c>
 80057de:	9a01      	ldr	r2, [sp, #4]
 80057e0:	50a9      	str	r1, [r5, r2]
 80057e2:	3504      	adds	r5, #4
 80057e4:	e79a      	b.n	800571c <__multiply+0x7c>
 80057e6:	3e01      	subs	r6, #1
 80057e8:	e79c      	b.n	8005724 <__multiply+0x84>
 80057ea:	bf00      	nop
 80057ec:	0800621f 	.word	0x0800621f
 80057f0:	08006230 	.word	0x08006230

080057f4 <__pow5mult>:
 80057f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f8:	4615      	mov	r5, r2
 80057fa:	f012 0203 	ands.w	r2, r2, #3
 80057fe:	4606      	mov	r6, r0
 8005800:	460f      	mov	r7, r1
 8005802:	d007      	beq.n	8005814 <__pow5mult+0x20>
 8005804:	4c25      	ldr	r4, [pc, #148]	; (800589c <__pow5mult+0xa8>)
 8005806:	3a01      	subs	r2, #1
 8005808:	2300      	movs	r3, #0
 800580a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800580e:	f7ff fe9b 	bl	8005548 <__multadd>
 8005812:	4607      	mov	r7, r0
 8005814:	10ad      	asrs	r5, r5, #2
 8005816:	d03d      	beq.n	8005894 <__pow5mult+0xa0>
 8005818:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800581a:	b97c      	cbnz	r4, 800583c <__pow5mult+0x48>
 800581c:	2010      	movs	r0, #16
 800581e:	f7ff fe1d 	bl	800545c <malloc>
 8005822:	4602      	mov	r2, r0
 8005824:	6270      	str	r0, [r6, #36]	; 0x24
 8005826:	b928      	cbnz	r0, 8005834 <__pow5mult+0x40>
 8005828:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <__pow5mult+0xac>)
 800582a:	481e      	ldr	r0, [pc, #120]	; (80058a4 <__pow5mult+0xb0>)
 800582c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005830:	f7fe fe1a 	bl	8004468 <__assert_func>
 8005834:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005838:	6004      	str	r4, [r0, #0]
 800583a:	60c4      	str	r4, [r0, #12]
 800583c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005840:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005844:	b94c      	cbnz	r4, 800585a <__pow5mult+0x66>
 8005846:	f240 2171 	movw	r1, #625	; 0x271
 800584a:	4630      	mov	r0, r6
 800584c:	f7ff ff12 	bl	8005674 <__i2b>
 8005850:	2300      	movs	r3, #0
 8005852:	f8c8 0008 	str.w	r0, [r8, #8]
 8005856:	4604      	mov	r4, r0
 8005858:	6003      	str	r3, [r0, #0]
 800585a:	f04f 0900 	mov.w	r9, #0
 800585e:	07eb      	lsls	r3, r5, #31
 8005860:	d50a      	bpl.n	8005878 <__pow5mult+0x84>
 8005862:	4639      	mov	r1, r7
 8005864:	4622      	mov	r2, r4
 8005866:	4630      	mov	r0, r6
 8005868:	f7ff ff1a 	bl	80056a0 <__multiply>
 800586c:	4639      	mov	r1, r7
 800586e:	4680      	mov	r8, r0
 8005870:	4630      	mov	r0, r6
 8005872:	f7ff fe47 	bl	8005504 <_Bfree>
 8005876:	4647      	mov	r7, r8
 8005878:	106d      	asrs	r5, r5, #1
 800587a:	d00b      	beq.n	8005894 <__pow5mult+0xa0>
 800587c:	6820      	ldr	r0, [r4, #0]
 800587e:	b938      	cbnz	r0, 8005890 <__pow5mult+0x9c>
 8005880:	4622      	mov	r2, r4
 8005882:	4621      	mov	r1, r4
 8005884:	4630      	mov	r0, r6
 8005886:	f7ff ff0b 	bl	80056a0 <__multiply>
 800588a:	6020      	str	r0, [r4, #0]
 800588c:	f8c0 9000 	str.w	r9, [r0]
 8005890:	4604      	mov	r4, r0
 8005892:	e7e4      	b.n	800585e <__pow5mult+0x6a>
 8005894:	4638      	mov	r0, r7
 8005896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589a:	bf00      	nop
 800589c:	08006380 	.word	0x08006380
 80058a0:	080061ad 	.word	0x080061ad
 80058a4:	08006230 	.word	0x08006230

080058a8 <__lshift>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	460c      	mov	r4, r1
 80058ae:	6849      	ldr	r1, [r1, #4]
 80058b0:	6923      	ldr	r3, [r4, #16]
 80058b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058b6:	68a3      	ldr	r3, [r4, #8]
 80058b8:	4607      	mov	r7, r0
 80058ba:	4691      	mov	r9, r2
 80058bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058c0:	f108 0601 	add.w	r6, r8, #1
 80058c4:	42b3      	cmp	r3, r6
 80058c6:	db0b      	blt.n	80058e0 <__lshift+0x38>
 80058c8:	4638      	mov	r0, r7
 80058ca:	f7ff fddb 	bl	8005484 <_Balloc>
 80058ce:	4605      	mov	r5, r0
 80058d0:	b948      	cbnz	r0, 80058e6 <__lshift+0x3e>
 80058d2:	4602      	mov	r2, r0
 80058d4:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <__lshift+0xd8>)
 80058d6:	482b      	ldr	r0, [pc, #172]	; (8005984 <__lshift+0xdc>)
 80058d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80058dc:	f7fe fdc4 	bl	8004468 <__assert_func>
 80058e0:	3101      	adds	r1, #1
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	e7ee      	b.n	80058c4 <__lshift+0x1c>
 80058e6:	2300      	movs	r3, #0
 80058e8:	f100 0114 	add.w	r1, r0, #20
 80058ec:	f100 0210 	add.w	r2, r0, #16
 80058f0:	4618      	mov	r0, r3
 80058f2:	4553      	cmp	r3, sl
 80058f4:	db37      	blt.n	8005966 <__lshift+0xbe>
 80058f6:	6920      	ldr	r0, [r4, #16]
 80058f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058fc:	f104 0314 	add.w	r3, r4, #20
 8005900:	f019 091f 	ands.w	r9, r9, #31
 8005904:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005908:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800590c:	d02f      	beq.n	800596e <__lshift+0xc6>
 800590e:	f1c9 0e20 	rsb	lr, r9, #32
 8005912:	468a      	mov	sl, r1
 8005914:	f04f 0c00 	mov.w	ip, #0
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	fa02 f209 	lsl.w	r2, r2, r9
 800591e:	ea42 020c 	orr.w	r2, r2, ip
 8005922:	f84a 2b04 	str.w	r2, [sl], #4
 8005926:	f853 2b04 	ldr.w	r2, [r3], #4
 800592a:	4298      	cmp	r0, r3
 800592c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005930:	d8f2      	bhi.n	8005918 <__lshift+0x70>
 8005932:	1b03      	subs	r3, r0, r4
 8005934:	3b15      	subs	r3, #21
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	3304      	adds	r3, #4
 800593c:	f104 0215 	add.w	r2, r4, #21
 8005940:	4290      	cmp	r0, r2
 8005942:	bf38      	it	cc
 8005944:	2304      	movcc	r3, #4
 8005946:	f841 c003 	str.w	ip, [r1, r3]
 800594a:	f1bc 0f00 	cmp.w	ip, #0
 800594e:	d001      	beq.n	8005954 <__lshift+0xac>
 8005950:	f108 0602 	add.w	r6, r8, #2
 8005954:	3e01      	subs	r6, #1
 8005956:	4638      	mov	r0, r7
 8005958:	612e      	str	r6, [r5, #16]
 800595a:	4621      	mov	r1, r4
 800595c:	f7ff fdd2 	bl	8005504 <_Bfree>
 8005960:	4628      	mov	r0, r5
 8005962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005966:	f842 0f04 	str.w	r0, [r2, #4]!
 800596a:	3301      	adds	r3, #1
 800596c:	e7c1      	b.n	80058f2 <__lshift+0x4a>
 800596e:	3904      	subs	r1, #4
 8005970:	f853 2b04 	ldr.w	r2, [r3], #4
 8005974:	f841 2f04 	str.w	r2, [r1, #4]!
 8005978:	4298      	cmp	r0, r3
 800597a:	d8f9      	bhi.n	8005970 <__lshift+0xc8>
 800597c:	e7ea      	b.n	8005954 <__lshift+0xac>
 800597e:	bf00      	nop
 8005980:	0800621f 	.word	0x0800621f
 8005984:	08006230 	.word	0x08006230

08005988 <__mcmp>:
 8005988:	b530      	push	{r4, r5, lr}
 800598a:	6902      	ldr	r2, [r0, #16]
 800598c:	690c      	ldr	r4, [r1, #16]
 800598e:	1b12      	subs	r2, r2, r4
 8005990:	d10e      	bne.n	80059b0 <__mcmp+0x28>
 8005992:	f100 0314 	add.w	r3, r0, #20
 8005996:	3114      	adds	r1, #20
 8005998:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800599c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80059a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80059a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80059a8:	42a5      	cmp	r5, r4
 80059aa:	d003      	beq.n	80059b4 <__mcmp+0x2c>
 80059ac:	d305      	bcc.n	80059ba <__mcmp+0x32>
 80059ae:	2201      	movs	r2, #1
 80059b0:	4610      	mov	r0, r2
 80059b2:	bd30      	pop	{r4, r5, pc}
 80059b4:	4283      	cmp	r3, r0
 80059b6:	d3f3      	bcc.n	80059a0 <__mcmp+0x18>
 80059b8:	e7fa      	b.n	80059b0 <__mcmp+0x28>
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295
 80059be:	e7f7      	b.n	80059b0 <__mcmp+0x28>

080059c0 <__mdiff>:
 80059c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	460c      	mov	r4, r1
 80059c6:	4606      	mov	r6, r0
 80059c8:	4611      	mov	r1, r2
 80059ca:	4620      	mov	r0, r4
 80059cc:	4690      	mov	r8, r2
 80059ce:	f7ff ffdb 	bl	8005988 <__mcmp>
 80059d2:	1e05      	subs	r5, r0, #0
 80059d4:	d110      	bne.n	80059f8 <__mdiff+0x38>
 80059d6:	4629      	mov	r1, r5
 80059d8:	4630      	mov	r0, r6
 80059da:	f7ff fd53 	bl	8005484 <_Balloc>
 80059de:	b930      	cbnz	r0, 80059ee <__mdiff+0x2e>
 80059e0:	4b3a      	ldr	r3, [pc, #232]	; (8005acc <__mdiff+0x10c>)
 80059e2:	4602      	mov	r2, r0
 80059e4:	f240 2132 	movw	r1, #562	; 0x232
 80059e8:	4839      	ldr	r0, [pc, #228]	; (8005ad0 <__mdiff+0x110>)
 80059ea:	f7fe fd3d 	bl	8004468 <__assert_func>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80059f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f8:	bfa4      	itt	ge
 80059fa:	4643      	movge	r3, r8
 80059fc:	46a0      	movge	r8, r4
 80059fe:	4630      	mov	r0, r6
 8005a00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a04:	bfa6      	itte	ge
 8005a06:	461c      	movge	r4, r3
 8005a08:	2500      	movge	r5, #0
 8005a0a:	2501      	movlt	r5, #1
 8005a0c:	f7ff fd3a 	bl	8005484 <_Balloc>
 8005a10:	b920      	cbnz	r0, 8005a1c <__mdiff+0x5c>
 8005a12:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <__mdiff+0x10c>)
 8005a14:	4602      	mov	r2, r0
 8005a16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a1a:	e7e5      	b.n	80059e8 <__mdiff+0x28>
 8005a1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a20:	6926      	ldr	r6, [r4, #16]
 8005a22:	60c5      	str	r5, [r0, #12]
 8005a24:	f104 0914 	add.w	r9, r4, #20
 8005a28:	f108 0514 	add.w	r5, r8, #20
 8005a2c:	f100 0e14 	add.w	lr, r0, #20
 8005a30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a38:	f108 0210 	add.w	r2, r8, #16
 8005a3c:	46f2      	mov	sl, lr
 8005a3e:	2100      	movs	r1, #0
 8005a40:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a48:	fa1f f883 	uxth.w	r8, r3
 8005a4c:	fa11 f18b 	uxtah	r1, r1, fp
 8005a50:	0c1b      	lsrs	r3, r3, #16
 8005a52:	eba1 0808 	sub.w	r8, r1, r8
 8005a56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a5e:	fa1f f888 	uxth.w	r8, r8
 8005a62:	1419      	asrs	r1, r3, #16
 8005a64:	454e      	cmp	r6, r9
 8005a66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a6a:	f84a 3b04 	str.w	r3, [sl], #4
 8005a6e:	d8e7      	bhi.n	8005a40 <__mdiff+0x80>
 8005a70:	1b33      	subs	r3, r6, r4
 8005a72:	3b15      	subs	r3, #21
 8005a74:	f023 0303 	bic.w	r3, r3, #3
 8005a78:	3304      	adds	r3, #4
 8005a7a:	3415      	adds	r4, #21
 8005a7c:	42a6      	cmp	r6, r4
 8005a7e:	bf38      	it	cc
 8005a80:	2304      	movcc	r3, #4
 8005a82:	441d      	add	r5, r3
 8005a84:	4473      	add	r3, lr
 8005a86:	469e      	mov	lr, r3
 8005a88:	462e      	mov	r6, r5
 8005a8a:	4566      	cmp	r6, ip
 8005a8c:	d30e      	bcc.n	8005aac <__mdiff+0xec>
 8005a8e:	f10c 0203 	add.w	r2, ip, #3
 8005a92:	1b52      	subs	r2, r2, r5
 8005a94:	f022 0203 	bic.w	r2, r2, #3
 8005a98:	3d03      	subs	r5, #3
 8005a9a:	45ac      	cmp	ip, r5
 8005a9c:	bf38      	it	cc
 8005a9e:	2200      	movcc	r2, #0
 8005aa0:	441a      	add	r2, r3
 8005aa2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005aa6:	b17b      	cbz	r3, 8005ac8 <__mdiff+0x108>
 8005aa8:	6107      	str	r7, [r0, #16]
 8005aaa:	e7a3      	b.n	80059f4 <__mdiff+0x34>
 8005aac:	f856 8b04 	ldr.w	r8, [r6], #4
 8005ab0:	fa11 f288 	uxtah	r2, r1, r8
 8005ab4:	1414      	asrs	r4, r2, #16
 8005ab6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005aba:	b292      	uxth	r2, r2
 8005abc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ac0:	f84e 2b04 	str.w	r2, [lr], #4
 8005ac4:	1421      	asrs	r1, r4, #16
 8005ac6:	e7e0      	b.n	8005a8a <__mdiff+0xca>
 8005ac8:	3f01      	subs	r7, #1
 8005aca:	e7ea      	b.n	8005aa2 <__mdiff+0xe2>
 8005acc:	0800621f 	.word	0x0800621f
 8005ad0:	08006230 	.word	0x08006230

08005ad4 <__d2b>:
 8005ad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	4689      	mov	r9, r1
 8005ada:	2101      	movs	r1, #1
 8005adc:	ec57 6b10 	vmov	r6, r7, d0
 8005ae0:	4690      	mov	r8, r2
 8005ae2:	f7ff fccf 	bl	8005484 <_Balloc>
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	b930      	cbnz	r0, 8005af8 <__d2b+0x24>
 8005aea:	4602      	mov	r2, r0
 8005aec:	4b25      	ldr	r3, [pc, #148]	; (8005b84 <__d2b+0xb0>)
 8005aee:	4826      	ldr	r0, [pc, #152]	; (8005b88 <__d2b+0xb4>)
 8005af0:	f240 310a 	movw	r1, #778	; 0x30a
 8005af4:	f7fe fcb8 	bl	8004468 <__assert_func>
 8005af8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005afc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b00:	bb35      	cbnz	r5, 8005b50 <__d2b+0x7c>
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	d028      	beq.n	8005b5a <__d2b+0x86>
 8005b08:	4668      	mov	r0, sp
 8005b0a:	9600      	str	r6, [sp, #0]
 8005b0c:	f7ff fd82 	bl	8005614 <__lo0bits>
 8005b10:	9900      	ldr	r1, [sp, #0]
 8005b12:	b300      	cbz	r0, 8005b56 <__d2b+0x82>
 8005b14:	9a01      	ldr	r2, [sp, #4]
 8005b16:	f1c0 0320 	rsb	r3, r0, #32
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	40c2      	lsrs	r2, r0
 8005b22:	6163      	str	r3, [r4, #20]
 8005b24:	9201      	str	r2, [sp, #4]
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	61a3      	str	r3, [r4, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bf14      	ite	ne
 8005b2e:	2202      	movne	r2, #2
 8005b30:	2201      	moveq	r2, #1
 8005b32:	6122      	str	r2, [r4, #16]
 8005b34:	b1d5      	cbz	r5, 8005b6c <__d2b+0x98>
 8005b36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b3a:	4405      	add	r5, r0
 8005b3c:	f8c9 5000 	str.w	r5, [r9]
 8005b40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b44:	f8c8 0000 	str.w	r0, [r8]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	b003      	add	sp, #12
 8005b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b54:	e7d5      	b.n	8005b02 <__d2b+0x2e>
 8005b56:	6161      	str	r1, [r4, #20]
 8005b58:	e7e5      	b.n	8005b26 <__d2b+0x52>
 8005b5a:	a801      	add	r0, sp, #4
 8005b5c:	f7ff fd5a 	bl	8005614 <__lo0bits>
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	6163      	str	r3, [r4, #20]
 8005b64:	2201      	movs	r2, #1
 8005b66:	6122      	str	r2, [r4, #16]
 8005b68:	3020      	adds	r0, #32
 8005b6a:	e7e3      	b.n	8005b34 <__d2b+0x60>
 8005b6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b74:	f8c9 0000 	str.w	r0, [r9]
 8005b78:	6918      	ldr	r0, [r3, #16]
 8005b7a:	f7ff fd2b 	bl	80055d4 <__hi0bits>
 8005b7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b82:	e7df      	b.n	8005b44 <__d2b+0x70>
 8005b84:	0800621f 	.word	0x0800621f
 8005b88:	08006230 	.word	0x08006230

08005b8c <_calloc_r>:
 8005b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b8e:	fba1 2402 	umull	r2, r4, r1, r2
 8005b92:	b94c      	cbnz	r4, 8005ba8 <_calloc_r+0x1c>
 8005b94:	4611      	mov	r1, r2
 8005b96:	9201      	str	r2, [sp, #4]
 8005b98:	f7fd fdd4 	bl	8003744 <_malloc_r>
 8005b9c:	9a01      	ldr	r2, [sp, #4]
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	b930      	cbnz	r0, 8005bb0 <_calloc_r+0x24>
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	b003      	add	sp, #12
 8005ba6:	bd30      	pop	{r4, r5, pc}
 8005ba8:	220c      	movs	r2, #12
 8005baa:	6002      	str	r2, [r0, #0]
 8005bac:	2500      	movs	r5, #0
 8005bae:	e7f8      	b.n	8005ba2 <_calloc_r+0x16>
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	f7fd fd9e 	bl	80036f2 <memset>
 8005bb6:	e7f4      	b.n	8005ba2 <_calloc_r+0x16>

08005bb8 <_free_r>:
 8005bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bba:	2900      	cmp	r1, #0
 8005bbc:	d044      	beq.n	8005c48 <_free_r+0x90>
 8005bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc2:	9001      	str	r0, [sp, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f1a1 0404 	sub.w	r4, r1, #4
 8005bca:	bfb8      	it	lt
 8005bcc:	18e4      	addlt	r4, r4, r3
 8005bce:	f7ff fc4d 	bl	800546c <__malloc_lock>
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <_free_r+0x94>)
 8005bd4:	9801      	ldr	r0, [sp, #4]
 8005bd6:	6813      	ldr	r3, [r2, #0]
 8005bd8:	b933      	cbnz	r3, 8005be8 <_free_r+0x30>
 8005bda:	6063      	str	r3, [r4, #4]
 8005bdc:	6014      	str	r4, [r2, #0]
 8005bde:	b003      	add	sp, #12
 8005be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005be4:	f7ff bc48 	b.w	8005478 <__malloc_unlock>
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	d908      	bls.n	8005bfe <_free_r+0x46>
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	1961      	adds	r1, r4, r5
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf01      	itttt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	1949      	addeq	r1, r1, r5
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	e7ed      	b.n	8005bda <_free_r+0x22>
 8005bfe:	461a      	mov	r2, r3
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	b10b      	cbz	r3, 8005c08 <_free_r+0x50>
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d9fa      	bls.n	8005bfe <_free_r+0x46>
 8005c08:	6811      	ldr	r1, [r2, #0]
 8005c0a:	1855      	adds	r5, r2, r1
 8005c0c:	42a5      	cmp	r5, r4
 8005c0e:	d10b      	bne.n	8005c28 <_free_r+0x70>
 8005c10:	6824      	ldr	r4, [r4, #0]
 8005c12:	4421      	add	r1, r4
 8005c14:	1854      	adds	r4, r2, r1
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	d1e0      	bne.n	8005bde <_free_r+0x26>
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	6053      	str	r3, [r2, #4]
 8005c22:	4421      	add	r1, r4
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	e7da      	b.n	8005bde <_free_r+0x26>
 8005c28:	d902      	bls.n	8005c30 <_free_r+0x78>
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	6003      	str	r3, [r0, #0]
 8005c2e:	e7d6      	b.n	8005bde <_free_r+0x26>
 8005c30:	6825      	ldr	r5, [r4, #0]
 8005c32:	1961      	adds	r1, r4, r5
 8005c34:	428b      	cmp	r3, r1
 8005c36:	bf04      	itt	eq
 8005c38:	6819      	ldreq	r1, [r3, #0]
 8005c3a:	685b      	ldreq	r3, [r3, #4]
 8005c3c:	6063      	str	r3, [r4, #4]
 8005c3e:	bf04      	itt	eq
 8005c40:	1949      	addeq	r1, r1, r5
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	6054      	str	r4, [r2, #4]
 8005c46:	e7ca      	b.n	8005bde <_free_r+0x26>
 8005c48:	b003      	add	sp, #12
 8005c4a:	bd30      	pop	{r4, r5, pc}
 8005c4c:	20000374 	.word	0x20000374

08005c50 <__sfputc_r>:
 8005c50:	6893      	ldr	r3, [r2, #8]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	b410      	push	{r4}
 8005c58:	6093      	str	r3, [r2, #8]
 8005c5a:	da08      	bge.n	8005c6e <__sfputc_r+0x1e>
 8005c5c:	6994      	ldr	r4, [r2, #24]
 8005c5e:	42a3      	cmp	r3, r4
 8005c60:	db01      	blt.n	8005c66 <__sfputc_r+0x16>
 8005c62:	290a      	cmp	r1, #10
 8005c64:	d103      	bne.n	8005c6e <__sfputc_r+0x1e>
 8005c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c6a:	f7fe bb2b 	b.w	80042c4 <__swbuf_r>
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	1c58      	adds	r0, r3, #1
 8005c72:	6010      	str	r0, [r2, #0]
 8005c74:	7019      	strb	r1, [r3, #0]
 8005c76:	4608      	mov	r0, r1
 8005c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <__sfputs_r>:
 8005c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c80:	4606      	mov	r6, r0
 8005c82:	460f      	mov	r7, r1
 8005c84:	4614      	mov	r4, r2
 8005c86:	18d5      	adds	r5, r2, r3
 8005c88:	42ac      	cmp	r4, r5
 8005c8a:	d101      	bne.n	8005c90 <__sfputs_r+0x12>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e007      	b.n	8005ca0 <__sfputs_r+0x22>
 8005c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c94:	463a      	mov	r2, r7
 8005c96:	4630      	mov	r0, r6
 8005c98:	f7ff ffda 	bl	8005c50 <__sfputc_r>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d1f3      	bne.n	8005c88 <__sfputs_r+0xa>
 8005ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ca4 <_vfiprintf_r>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	460d      	mov	r5, r1
 8005caa:	b09d      	sub	sp, #116	; 0x74
 8005cac:	4614      	mov	r4, r2
 8005cae:	4698      	mov	r8, r3
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	b118      	cbz	r0, 8005cbc <_vfiprintf_r+0x18>
 8005cb4:	6983      	ldr	r3, [r0, #24]
 8005cb6:	b90b      	cbnz	r3, 8005cbc <_vfiprintf_r+0x18>
 8005cb8:	f7fd fc48 	bl	800354c <__sinit>
 8005cbc:	4b89      	ldr	r3, [pc, #548]	; (8005ee4 <_vfiprintf_r+0x240>)
 8005cbe:	429d      	cmp	r5, r3
 8005cc0:	d11b      	bne.n	8005cfa <_vfiprintf_r+0x56>
 8005cc2:	6875      	ldr	r5, [r6, #4]
 8005cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cc6:	07d9      	lsls	r1, r3, #31
 8005cc8:	d405      	bmi.n	8005cd6 <_vfiprintf_r+0x32>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_vfiprintf_r+0x32>
 8005cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cd2:	f7fd fcfe 	bl	80036d2 <__retarget_lock_acquire_recursive>
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	071b      	lsls	r3, r3, #28
 8005cda:	d501      	bpl.n	8005ce0 <_vfiprintf_r+0x3c>
 8005cdc:	692b      	ldr	r3, [r5, #16]
 8005cde:	b9eb      	cbnz	r3, 8005d1c <_vfiprintf_r+0x78>
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f7fe fb52 	bl	800438c <__swsetup_r>
 8005ce8:	b1c0      	cbz	r0, 8005d1c <_vfiprintf_r+0x78>
 8005cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cec:	07dc      	lsls	r4, r3, #31
 8005cee:	d50e      	bpl.n	8005d0e <_vfiprintf_r+0x6a>
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	b01d      	add	sp, #116	; 0x74
 8005cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfa:	4b7b      	ldr	r3, [pc, #492]	; (8005ee8 <_vfiprintf_r+0x244>)
 8005cfc:	429d      	cmp	r5, r3
 8005cfe:	d101      	bne.n	8005d04 <_vfiprintf_r+0x60>
 8005d00:	68b5      	ldr	r5, [r6, #8]
 8005d02:	e7df      	b.n	8005cc4 <_vfiprintf_r+0x20>
 8005d04:	4b79      	ldr	r3, [pc, #484]	; (8005eec <_vfiprintf_r+0x248>)
 8005d06:	429d      	cmp	r5, r3
 8005d08:	bf08      	it	eq
 8005d0a:	68f5      	ldreq	r5, [r6, #12]
 8005d0c:	e7da      	b.n	8005cc4 <_vfiprintf_r+0x20>
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	0598      	lsls	r0, r3, #22
 8005d12:	d4ed      	bmi.n	8005cf0 <_vfiprintf_r+0x4c>
 8005d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d16:	f7fd fcdd 	bl	80036d4 <__retarget_lock_release_recursive>
 8005d1a:	e7e9      	b.n	8005cf0 <_vfiprintf_r+0x4c>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d20:	2320      	movs	r3, #32
 8005d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d2a:	2330      	movs	r3, #48	; 0x30
 8005d2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ef0 <_vfiprintf_r+0x24c>
 8005d30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d34:	f04f 0901 	mov.w	r9, #1
 8005d38:	4623      	mov	r3, r4
 8005d3a:	469a      	mov	sl, r3
 8005d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d40:	b10a      	cbz	r2, 8005d46 <_vfiprintf_r+0xa2>
 8005d42:	2a25      	cmp	r2, #37	; 0x25
 8005d44:	d1f9      	bne.n	8005d3a <_vfiprintf_r+0x96>
 8005d46:	ebba 0b04 	subs.w	fp, sl, r4
 8005d4a:	d00b      	beq.n	8005d64 <_vfiprintf_r+0xc0>
 8005d4c:	465b      	mov	r3, fp
 8005d4e:	4622      	mov	r2, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff ff93 	bl	8005c7e <__sfputs_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f000 80aa 	beq.w	8005eb2 <_vfiprintf_r+0x20e>
 8005d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d60:	445a      	add	r2, fp
 8005d62:	9209      	str	r2, [sp, #36]	; 0x24
 8005d64:	f89a 3000 	ldrb.w	r3, [sl]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80a2 	beq.w	8005eb2 <_vfiprintf_r+0x20e>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f04f 32ff 	mov.w	r2, #4294967295
 8005d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d78:	f10a 0a01 	add.w	sl, sl, #1
 8005d7c:	9304      	str	r3, [sp, #16]
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d84:	931a      	str	r3, [sp, #104]	; 0x68
 8005d86:	4654      	mov	r4, sl
 8005d88:	2205      	movs	r2, #5
 8005d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8e:	4858      	ldr	r0, [pc, #352]	; (8005ef0 <_vfiprintf_r+0x24c>)
 8005d90:	f7fa fa26 	bl	80001e0 <memchr>
 8005d94:	9a04      	ldr	r2, [sp, #16]
 8005d96:	b9d8      	cbnz	r0, 8005dd0 <_vfiprintf_r+0x12c>
 8005d98:	06d1      	lsls	r1, r2, #27
 8005d9a:	bf44      	itt	mi
 8005d9c:	2320      	movmi	r3, #32
 8005d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da2:	0713      	lsls	r3, r2, #28
 8005da4:	bf44      	itt	mi
 8005da6:	232b      	movmi	r3, #43	; 0x2b
 8005da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dac:	f89a 3000 	ldrb.w	r3, [sl]
 8005db0:	2b2a      	cmp	r3, #42	; 0x2a
 8005db2:	d015      	beq.n	8005de0 <_vfiprintf_r+0x13c>
 8005db4:	9a07      	ldr	r2, [sp, #28]
 8005db6:	4654      	mov	r4, sl
 8005db8:	2000      	movs	r0, #0
 8005dba:	f04f 0c0a 	mov.w	ip, #10
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc4:	3b30      	subs	r3, #48	; 0x30
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	d94e      	bls.n	8005e68 <_vfiprintf_r+0x1c4>
 8005dca:	b1b0      	cbz	r0, 8005dfa <_vfiprintf_r+0x156>
 8005dcc:	9207      	str	r2, [sp, #28]
 8005dce:	e014      	b.n	8005dfa <_vfiprintf_r+0x156>
 8005dd0:	eba0 0308 	sub.w	r3, r0, r8
 8005dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	9304      	str	r3, [sp, #16]
 8005ddc:	46a2      	mov	sl, r4
 8005dde:	e7d2      	b.n	8005d86 <_vfiprintf_r+0xe2>
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	1d19      	adds	r1, r3, #4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	9103      	str	r1, [sp, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bfbb      	ittet	lt
 8005dec:	425b      	neglt	r3, r3
 8005dee:	f042 0202 	orrlt.w	r2, r2, #2
 8005df2:	9307      	strge	r3, [sp, #28]
 8005df4:	9307      	strlt	r3, [sp, #28]
 8005df6:	bfb8      	it	lt
 8005df8:	9204      	strlt	r2, [sp, #16]
 8005dfa:	7823      	ldrb	r3, [r4, #0]
 8005dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8005dfe:	d10c      	bne.n	8005e1a <_vfiprintf_r+0x176>
 8005e00:	7863      	ldrb	r3, [r4, #1]
 8005e02:	2b2a      	cmp	r3, #42	; 0x2a
 8005e04:	d135      	bne.n	8005e72 <_vfiprintf_r+0x1ce>
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	1d1a      	adds	r2, r3, #4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	9203      	str	r2, [sp, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bfb8      	it	lt
 8005e12:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e16:	3402      	adds	r4, #2
 8005e18:	9305      	str	r3, [sp, #20]
 8005e1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f00 <_vfiprintf_r+0x25c>
 8005e1e:	7821      	ldrb	r1, [r4, #0]
 8005e20:	2203      	movs	r2, #3
 8005e22:	4650      	mov	r0, sl
 8005e24:	f7fa f9dc 	bl	80001e0 <memchr>
 8005e28:	b140      	cbz	r0, 8005e3c <_vfiprintf_r+0x198>
 8005e2a:	2340      	movs	r3, #64	; 0x40
 8005e2c:	eba0 000a 	sub.w	r0, r0, sl
 8005e30:	fa03 f000 	lsl.w	r0, r3, r0
 8005e34:	9b04      	ldr	r3, [sp, #16]
 8005e36:	4303      	orrs	r3, r0
 8005e38:	3401      	adds	r4, #1
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e40:	482c      	ldr	r0, [pc, #176]	; (8005ef4 <_vfiprintf_r+0x250>)
 8005e42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e46:	2206      	movs	r2, #6
 8005e48:	f7fa f9ca 	bl	80001e0 <memchr>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d03f      	beq.n	8005ed0 <_vfiprintf_r+0x22c>
 8005e50:	4b29      	ldr	r3, [pc, #164]	; (8005ef8 <_vfiprintf_r+0x254>)
 8005e52:	bb1b      	cbnz	r3, 8005e9c <_vfiprintf_r+0x1f8>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	3307      	adds	r3, #7
 8005e58:	f023 0307 	bic.w	r3, r3, #7
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	9303      	str	r3, [sp, #12]
 8005e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e62:	443b      	add	r3, r7
 8005e64:	9309      	str	r3, [sp, #36]	; 0x24
 8005e66:	e767      	b.n	8005d38 <_vfiprintf_r+0x94>
 8005e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	2001      	movs	r0, #1
 8005e70:	e7a5      	b.n	8005dbe <_vfiprintf_r+0x11a>
 8005e72:	2300      	movs	r3, #0
 8005e74:	3401      	adds	r4, #1
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f04f 0c0a 	mov.w	ip, #10
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e84:	3a30      	subs	r2, #48	; 0x30
 8005e86:	2a09      	cmp	r2, #9
 8005e88:	d903      	bls.n	8005e92 <_vfiprintf_r+0x1ee>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0c5      	beq.n	8005e1a <_vfiprintf_r+0x176>
 8005e8e:	9105      	str	r1, [sp, #20]
 8005e90:	e7c3      	b.n	8005e1a <_vfiprintf_r+0x176>
 8005e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e96:	4604      	mov	r4, r0
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e7f0      	b.n	8005e7e <_vfiprintf_r+0x1da>
 8005e9c:	ab03      	add	r3, sp, #12
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	462a      	mov	r2, r5
 8005ea2:	4b16      	ldr	r3, [pc, #88]	; (8005efc <_vfiprintf_r+0x258>)
 8005ea4:	a904      	add	r1, sp, #16
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f7fd fd60 	bl	800396c <_printf_float>
 8005eac:	4607      	mov	r7, r0
 8005eae:	1c78      	adds	r0, r7, #1
 8005eb0:	d1d6      	bne.n	8005e60 <_vfiprintf_r+0x1bc>
 8005eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eb4:	07d9      	lsls	r1, r3, #31
 8005eb6:	d405      	bmi.n	8005ec4 <_vfiprintf_r+0x220>
 8005eb8:	89ab      	ldrh	r3, [r5, #12]
 8005eba:	059a      	lsls	r2, r3, #22
 8005ebc:	d402      	bmi.n	8005ec4 <_vfiprintf_r+0x220>
 8005ebe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ec0:	f7fd fc08 	bl	80036d4 <__retarget_lock_release_recursive>
 8005ec4:	89ab      	ldrh	r3, [r5, #12]
 8005ec6:	065b      	lsls	r3, r3, #25
 8005ec8:	f53f af12 	bmi.w	8005cf0 <_vfiprintf_r+0x4c>
 8005ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ece:	e711      	b.n	8005cf4 <_vfiprintf_r+0x50>
 8005ed0:	ab03      	add	r3, sp, #12
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <_vfiprintf_r+0x258>)
 8005ed8:	a904      	add	r1, sp, #16
 8005eda:	4630      	mov	r0, r6
 8005edc:	f7fd ffea 	bl	8003eb4 <_printf_i>
 8005ee0:	e7e4      	b.n	8005eac <_vfiprintf_r+0x208>
 8005ee2:	bf00      	nop
 8005ee4:	080060ec 	.word	0x080060ec
 8005ee8:	0800610c 	.word	0x0800610c
 8005eec:	080060cc 	.word	0x080060cc
 8005ef0:	0800638c 	.word	0x0800638c
 8005ef4:	08006396 	.word	0x08006396
 8005ef8:	0800396d 	.word	0x0800396d
 8005efc:	08005c7f 	.word	0x08005c7f
 8005f00:	08006392 	.word	0x08006392

08005f04 <_read_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d07      	ldr	r5, [pc, #28]	; (8005f24 <_read_r+0x20>)
 8005f08:	4604      	mov	r4, r0
 8005f0a:	4608      	mov	r0, r1
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	2200      	movs	r2, #0
 8005f10:	602a      	str	r2, [r5, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f7fd f855 	bl	8002fc2 <_read>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_read_r+0x1e>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_read_r+0x1e>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	2000037c 	.word	0x2000037c

08005f28 <abort>:
 8005f28:	b508      	push	{r3, lr}
 8005f2a:	2006      	movs	r0, #6
 8005f2c:	f000 f860 	bl	8005ff0 <raise>
 8005f30:	2001      	movs	r0, #1
 8005f32:	f000 f88f 	bl	8006054 <_exit>
	...

08005f38 <_fstat_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4d07      	ldr	r5, [pc, #28]	; (8005f58 <_fstat_r+0x20>)
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	f7fd f920 	bl	800318a <_fstat>
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	d102      	bne.n	8005f54 <_fstat_r+0x1c>
 8005f4e:	682b      	ldr	r3, [r5, #0]
 8005f50:	b103      	cbz	r3, 8005f54 <_fstat_r+0x1c>
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	bd38      	pop	{r3, r4, r5, pc}
 8005f56:	bf00      	nop
 8005f58:	2000037c 	.word	0x2000037c

08005f5c <_isatty_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d06      	ldr	r5, [pc, #24]	; (8005f78 <_isatty_r+0x1c>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	f7fd fa76 	bl	8003458 <_isatty>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_isatty_r+0x1a>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_isatty_r+0x1a>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	2000037c 	.word	0x2000037c

08005f7c <__ascii_mbtowc>:
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	b901      	cbnz	r1, 8005f82 <__ascii_mbtowc+0x6>
 8005f80:	a901      	add	r1, sp, #4
 8005f82:	b142      	cbz	r2, 8005f96 <__ascii_mbtowc+0x1a>
 8005f84:	b14b      	cbz	r3, 8005f9a <__ascii_mbtowc+0x1e>
 8005f86:	7813      	ldrb	r3, [r2, #0]
 8005f88:	600b      	str	r3, [r1, #0]
 8005f8a:	7812      	ldrb	r2, [r2, #0]
 8005f8c:	1e10      	subs	r0, r2, #0
 8005f8e:	bf18      	it	ne
 8005f90:	2001      	movne	r0, #1
 8005f92:	b002      	add	sp, #8
 8005f94:	4770      	bx	lr
 8005f96:	4610      	mov	r0, r2
 8005f98:	e7fb      	b.n	8005f92 <__ascii_mbtowc+0x16>
 8005f9a:	f06f 0001 	mvn.w	r0, #1
 8005f9e:	e7f8      	b.n	8005f92 <__ascii_mbtowc+0x16>

08005fa0 <_raise_r>:
 8005fa0:	291f      	cmp	r1, #31
 8005fa2:	b538      	push	{r3, r4, r5, lr}
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	d904      	bls.n	8005fb4 <_raise_r+0x14>
 8005faa:	2316      	movs	r3, #22
 8005fac:	6003      	str	r3, [r0, #0]
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fb6:	b112      	cbz	r2, 8005fbe <_raise_r+0x1e>
 8005fb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fbc:	b94b      	cbnz	r3, 8005fd2 <_raise_r+0x32>
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f000 f830 	bl	8006024 <_getpid_r>
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4601      	mov	r1, r0
 8005fc8:	4620      	mov	r0, r4
 8005fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fce:	f000 b817 	b.w	8006000 <_kill_r>
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d00a      	beq.n	8005fec <_raise_r+0x4c>
 8005fd6:	1c59      	adds	r1, r3, #1
 8005fd8:	d103      	bne.n	8005fe2 <_raise_r+0x42>
 8005fda:	2316      	movs	r3, #22
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	2001      	movs	r0, #1
 8005fe0:	e7e7      	b.n	8005fb2 <_raise_r+0x12>
 8005fe2:	2400      	movs	r4, #0
 8005fe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005fe8:	4628      	mov	r0, r5
 8005fea:	4798      	blx	r3
 8005fec:	2000      	movs	r0, #0
 8005fee:	e7e0      	b.n	8005fb2 <_raise_r+0x12>

08005ff0 <raise>:
 8005ff0:	4b02      	ldr	r3, [pc, #8]	; (8005ffc <raise+0xc>)
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	6818      	ldr	r0, [r3, #0]
 8005ff6:	f7ff bfd3 	b.w	8005fa0 <_raise_r>
 8005ffa:	bf00      	nop
 8005ffc:	20000068 	.word	0x20000068

08006000 <_kill_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d07      	ldr	r5, [pc, #28]	; (8006020 <_kill_r+0x20>)
 8006004:	2300      	movs	r3, #0
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	f000 f819 	bl	8006044 <_kill>
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	d102      	bne.n	800601c <_kill_r+0x1c>
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	b103      	cbz	r3, 800601c <_kill_r+0x1c>
 800601a:	6023      	str	r3, [r4, #0]
 800601c:	bd38      	pop	{r3, r4, r5, pc}
 800601e:	bf00      	nop
 8006020:	2000037c 	.word	0x2000037c

08006024 <_getpid_r>:
 8006024:	f7fd b88e 	b.w	8003144 <_getpid>

08006028 <__ascii_wctomb>:
 8006028:	b149      	cbz	r1, 800603e <__ascii_wctomb+0x16>
 800602a:	2aff      	cmp	r2, #255	; 0xff
 800602c:	bf85      	ittet	hi
 800602e:	238a      	movhi	r3, #138	; 0x8a
 8006030:	6003      	strhi	r3, [r0, #0]
 8006032:	700a      	strbls	r2, [r1, #0]
 8006034:	f04f 30ff 	movhi.w	r0, #4294967295
 8006038:	bf98      	it	ls
 800603a:	2001      	movls	r0, #1
 800603c:	4770      	bx	lr
 800603e:	4608      	mov	r0, r1
 8006040:	4770      	bx	lr
	...

08006044 <_kill>:
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <_kill+0xc>)
 8006046:	2258      	movs	r2, #88	; 0x58
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	f04f 30ff 	mov.w	r0, #4294967295
 800604e:	4770      	bx	lr
 8006050:	2000037c 	.word	0x2000037c

08006054 <_exit>:
 8006054:	e7fe      	b.n	8006054 <_exit>
	...

08006058 <_init>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	bf00      	nop
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr

08006064 <_fini>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	bf00      	nop
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr
